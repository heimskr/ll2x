.section .rodata
.align 8
.str:
.ascii ".\000"

.section .rodata
.align 8
.str.1:
.ascii "Invalid number of arguments: \000"

.section .rodata
.align 8
.str.10:
.ascii "\033[2J\033[3J\033[H\000"

.section .rodata
.align 8
.str.11:
.ascii "ls\000"

.section .rodata
.align 8
.str.12:
.ascii "pwd\000"

.section .rodata
.align 8
.str.13:
.ascii "cd\000"

.section .rodata
.align 8
.str.14:
.ascii "exit\000"

.section .rodata
.align 8
.str.15:
.ascii "quit\000"

.section .rodata
.align 8
.str.16:
.ascii "clear\000"

.section .rodata
.align 8
.str.17:
.ascii "\033[32m$\033[39m \000"

.section .rodata
.align 8
.str.18:
.ascii " \000"

.section .rodata
.align 8
.str.19:
.ascii ": command not found\012\000"

.section .rodata
.align 8
.str.2:
.ascii "Not found: \000"

.section .rodata
.align 8
.str.20:
.ascii "\033[3\000"

.section .rodata
.align 8
.str.21:
.ascii "m$\033[39m \000"

.section .rodata
.align 8
.str.22:
.ascii "ptr[%p, %p]\012\000"

.section .rodata
.align 8
.str.23:
.ascii "basic_string_view::substr\000"

.section .rodata
.align 8
.str.24:
.ascii "%s: __pos (which is %zu) > __size (which is %zu)\000"

.section .rodata
.align 8
.str.25:
.ascii "basic_string: construction from null is not valid\000"

.section .rodata
.align 8
.str.26:
.ascii "cannot create std::vector larger than max_size()\000"

.section .rodata
.align 8
.str.27:
.ascii "vector::_M_realloc_insert\000"

.section .rodata
.align 8
.str.3:
.ascii "\033[36m\000"

.section .rodata
.align 8
.str.4:
.ascii "\033[39m\012\000"

.section .rodata
.align 8
.str.5:
.ascii "HOME\000"

.section .rodata
.align 8
.str.6:
.ascii "Couldn't find a home directory to return to.\012\000"

.section .rodata
.align 8
.str.7:
.ascii "Couldn't change directory to \000"

.section .rodata
.align 8
.str.8:
.ascii ": not found\012\000"

.section .rodata
.align 8
.str.9:
.ascii ": not a directory\012\000"

.section .data
.align 8
_ZTIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEE:
.quad _ZTVN10__cxxabiv120__function_type_infoE+16
.quad _ZTSFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEE

.section .data
.align 8
_ZTIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEE:
.quad _ZTVN10__cxxabiv119__pointer_type_infoE+16
.quad _ZTSPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEE
.int 0
.fill 4, 1, 0
.quad _ZTIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEE

.section .rodata
.align 8
_ZTSFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEE:
.ascii "FiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEE\000"

.section .rodata
.align 8
_ZTSPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEE:
.ascii "PFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEE\000"

.section .text
.global _ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv
.p2align 4, 0x90
_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv:
	.___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(10085:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(10086:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(10087:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::basic_string_view"
	# LowerGetelementptr(10088:3): struct-type: ptr ^3 -> ^4, indices=0,1
	addq $8, %rbx
	# LowerGetelementptr(10088:3): type of ^4 is ptr*
	# LowerLoad(10089:3).2: (^4) into ptr ^5
	movq (%rbx), %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE4findERS7_
.p2align 4, 0x90
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE4findERS7_:
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE4findERS7___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(184 + 0, 16)
	subq $192, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -96(%rbp)
	movq %r12, -88(%rbp)
	movq %r13, -104(%rbp)
	movq %r14, -72(%rbp)
	movq %r15, -64(%rbp)
	# LowerAlloca(9979:3): size = 8, type = %"struct.std::_Rb_tree_iterator"*, var = ^3
	# Fixing source-to-dest leaq -8(%rbp), -48(%rbp)
	leaq -8(%rbp), %r15
	movq %r15, -48(%rbp)
	# LowerAlloca(9980:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %rcx
	# LowerAlloca(9981:3): size = 8, type = ptr*, var = ^5
	leaq -24(%rbp), %r14
	# LowerAlloca(9982:3): size = 8, type = %"struct.std::_Rb_tree_iterator"*, var = ^6
	# Fixing source-to-dest leaq -32(%rbp), -56(%rbp)
	leaq -32(%rbp), %r15
	movq %r15, -56(%rbp)
	# LowerAlloca(9983:3): size = 8, type = %"struct.std::_Rb_tree_iterator"*, var = ^7
	leaq -40(%rbp), %r12
	# LowerStore(9984:3).9: mov ptr %rdi, (^4)
	movq %rdi, (%rcx)
	# LowerStore(9985:3).9: mov ptr %rsi, (^5)
	movq %rsi, (%r14)
	# LowerLoad(9986:3).2: (^4) into ptr ^8
	movq (%rcx), %rbx
	# SetupCalls(9987:3): move argument ptr nonnull dereferenceable(48) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE8_M_beginEv
	# SetupCalls(9987:3): move ptr result from %rax
	movq %rax, %r13
	# SetupCalls(9988:3): move argument ptr nonnull dereferenceable(48) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE6_M_endEv
	# SetupCalls(9988:3): move ptr result from %rax
	movq %rax, %r15
	# LowerLoad(9989:3).2: (^5) into ptr ^11
	movq (%r14), %rax
	# SetupCalls(9990:3): move argument ptr nonnull dereferenceable(48) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(9990:3): move argument ptr ^9
	# Fixed movzx with identical source and destination widths
	movq %r13, %rsi
	# SetupCalls(9990:3): move argument ptr ^10
	# Fixed movzx with identical source and destination widths
	movq %r15, %rdx
	# SetupCalls(9990:3): move argument ptr nonnull dereferenceable(32) align 8 ^11
	# Fixed movzx with identical source and destination widths
	movq %rax, %rcx
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE14_M_lower_boundEPSt13_Rb_tree_nodeISI_EPSt18_Rb_tree_node_baseRS7_
	# SetupCalls(9990:3): move ptr result from %rax
	movq %rax, %r13
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(9991:3): struct-type: ptr ^6 -> ^13, indices=0,0
	movq -56(%rbp), %rax
	# LowerGetelementptr(9991:3): type of ^13 is ptr*
	# LowerStore(9992:3).9: mov ptr ^12, (^13)
	movq %r13, (%rax)
	# SetupCalls(9993:3): move argument ptr nonnull dereferenceable(48) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE3endEv
	# SetupCalls(9993:3): move ptr result from %rax
	movq %rax, %r13
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(9994:3): struct-type: ptr ^7 -> ^15, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(9994:3): type of ^15 is ptr*
	# LowerStore(9995:3).9: mov ptr ^14, (^15)
	movq %r13, (%rax)
	# SetupCalls(9996:3): move argument ptr nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq -56(%rbp), %rdi
	# SetupCalls(9996:3): move argument ptr nonnull dereferenceable(8) align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq %r12, %rsi
	callq _ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEESL_
	# SetupCalls(9996:3): move i1 result from %rax
	movb %al, %r12b
	cmpb $0, %r12b
	jne .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE4findERS7___M221
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE4findERS7___M154:
	# tt = Pointer, type = %"class.std::_Rb_tree"
	# LowerGetelementptr(10000:3): struct-type: ptr ^8 -> ^18, indices=0,0
	movq %rbx, %r12
	# LowerGetelementptr(10000:3): type of ^18 is %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Rb_tree_impl"*
	# tt = Pointer, type = %"struct.std::_Rb_tree_key_compare"
	# LowerGetelementptr(10001:3): struct-type: ptr ^18 -> ^19, indices=0,0
	# LowerGetelementptr(10001:3): type of ^19 is %"struct.std::less"*
	# LowerLoad(10002:3).2: (^5) into ptr ^20
	movq (%r14), %r13
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(10003:3): struct-type: ptr ^6 -> ^21, indices=0,0
	movq -56(%rbp), %rax
	# LowerGetelementptr(10003:3): type of ^21 is ptr*
	# LowerLoad(10004:3).2: (^21) into ptr ^22
	movq (%rax), %rcx
	# SetupCalls(10005:3): move argument ptr ^22
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE6_S_keyEPKSt18_Rb_tree_node_base
	# SetupCalls(10005:3): move ptr result from %rax
	movq %rax, %r14
	# SetupCalls(10006:3): move argument ptr nonnull dereferenceable(1) align 1 ^19
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(10006:3): move argument ptr nonnull dereferenceable(32) align 8 ^20
	# Fixed movzx with identical source and destination widths
	movq %r13, %rsi
	# SetupCalls(10006:3): move argument ptr nonnull dereferenceable(32) align 8 ^23
	# Fixed movzx with identical source and destination widths
	movq %r14, %rdx
	callq _ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_
	# SetupCalls(10006:3): move i1 result from %rax
	movb %al, %r12b
	cmpb $0, %r12b
	jne .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE4findERS7___M221
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE4findERS7___M251
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE4findERS7___M221:
	# SetupCalls(10010:3): move argument ptr nonnull dereferenceable(48) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE3endEv
	# SetupCalls(10010:3): move ptr result from %rax
	movq %rax, %rbx
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(10011:3): struct-type: ptr ^3 -> ^27, indices=0,0
	movq -48(%rbp), %rax
	# LowerGetelementptr(10011:3): type of ^27 is ptr*
	# LowerStore(10012:3).9: mov ptr ^26, (^27)
	movq %rbx, (%rax)
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE4findERS7___M277
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE4findERS7___M251:
	# SetupCalls(10016:3): move argument ptr align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq -48(%rbp), %rdi
	# SetupCalls(10016:3): move argument ptr align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq -56(%rbp), %rsi
	# SetupCalls(10016:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE4findERS7___M277:
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(10020:3): struct-type: ptr ^3 -> ^30, indices=0,0
	movq -48(%rbp), %rax
	# LowerGetelementptr(10020:3): type of ^30 is ptr*
	# LowerLoad(10021:3).2: (^30) into ptr ^31
	movq (%rax), %rbx
	movq %rbx, %rax
	movq -64(%rbp), %r15
	movq -72(%rbp), %r14
	movq -104(%rbp), %r13
	movq -88(%rbp), %r12
	movq -96(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNK9__gnu_cxx17__normal_iteratorIPKSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEE4baseEv
.p2align 4, 0x90
_ZNK9__gnu_cxx17__normal_iteratorIPKSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEE4baseEv:
	.___ZNK9__gnu_cxx17__normal_iteratorIPKSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEE4baseEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(9948:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(9949:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(9950:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator.24"
	# LowerGetelementptr(9951:3): struct-type: ptr ^3 -> ^4, indices=0,0
	# LowerGetelementptr(9951:3): type of ^4 is ptr*
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE3endEv
.p2align 4, 0x90
_ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE3endEv:
	.___ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE3endEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(40 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	movq %r12, -24(%rbp)
	# LowerAlloca(9934:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator.24"*, var = ^2
	leaq -8(%rbp), %r12
	# LowerAlloca(9935:3): size = 8, type = ptr*, var = ^3
	leaq -16(%rbp), %rax
	# LowerStore(9936:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rax)
	# LowerLoad(9937:3).2: (^3) into ptr ^4
	movq (%rax), %rbx
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(9938:3): struct-type: ptr ^4 -> ^5, indices=0,0
	# LowerGetelementptr(9938:3): type of ^5 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(9939:3): struct-type: ptr ^5 -> ^6, indices=0,1
	movq %rbx, %rax
	addq $8, %rax
	# LowerGetelementptr(9939:3): type of ^6 is ptr*
	# SetupCalls(9940:3): move argument ptr nonnull dereferenceable(8) align 8 ^2
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(9940:3): move argument ptr nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZN9__gnu_cxx17__normal_iteratorIPKSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEEC2ERKS6_
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator.24"
	# LowerGetelementptr(9941:3): struct-type: ptr ^2 -> ^7, indices=0,0
	movq %r12, %rbx
	# LowerGetelementptr(9941:3): type of ^7 is ptr*
	# LowerLoad(9942:3).2: (^7) into ptr ^8
	movq (%rbx), %rax
	movq -24(%rbp), %r12
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt16initializer_listISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEE4sizeEv
.p2align 4, 0x90
_ZNKSt16initializer_listISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEE4sizeEv:
	.___ZNKSt16initializer_listISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEE4sizeEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(9894:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(9895:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(9896:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::initializer_list.13"
	# LowerGetelementptr(9897:3): struct-type: ptr ^3 -> ^4, indices=0,1
	addq $8, %rbx
	# LowerGetelementptr(9897:3): type of ^4 is i64*
	# LowerLoad(9898:3).2: (^4) into i64 ^5
	movq (%rbx), %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt14_Function_base8_M_emptyEv
.p2align 4, 0x90
_ZNKSt14_Function_base8_M_emptyEv:
	.___ZNKSt14_Function_base8_M_emptyEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(9882:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(9883:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(9884:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::_Function_base"
	# LowerGetelementptr(9885:3): struct-type: ptr ^3 -> ^4, indices=0,1
	addq $16, %rbx
	# LowerGetelementptr(9885:3): type of ^4 is ptr*
	# LowerLoad(9886:3).2: (^4) into ptr ^5
	movq (%rbx), %rax
	# LowerIcmp(9887:3): ptr ^5 vs. intlike 0
	cmpq $0, %rax
	setne %al
	andq $1, %rax
	# LowerLogic(9889:3): ^6, true into i1 ^7
	movb %al, %bl
	xorb $1, %bl
	movb %bl, %al
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISA_EEEEEC2ERKSH_
.p2align 4, 0x90
_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISA_EEEEEC2ERKSH_:
	.___ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISA_EEEEEC2ERKSH___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	movq %r12, -24(%rbp)
	# LowerAlloca(9813:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %rax
	# LowerAlloca(9814:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %r12
	# LowerStore(9815:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rax)
	# LowerStore(9816:3).9: mov ptr %rsi, (^4)
	movq %rsi, (%r12)
	# LowerLoad(9817:3).2: (^3) into ptr ^5
	movq (%rax), %rbx
	# LowerLoad(9818:3).2: (^4) into ptr ^6
	movq (%r12), %rax
	# tt = Pointer, type = %"struct.std::pair"
	# LowerGetelementptr(9819:3): struct-type: ptr ^5 -> ^7, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(9819:3): type of ^7 is %"class.std::__cxx11::basic_string"*
	# LowerLoad(9820:3).2: (^4) into ptr ^8
	movq (%r12), %rcx
	# tt = Pointer, type = %"struct.std::pair"
	# LowerGetelementptr(9821:3): struct-type: ptr ^8 -> ^9, indices=0,0
	# LowerGetelementptr(9821:3): type of ^9 is %"class.std::__cxx11::basic_string"*
	# SetupCalls(9822:3): move argument ptr nonnull dereferenceable(32) align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(9822:3): move argument ptr nonnull dereferenceable(32) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_@PLT
	# tt = Pointer, type = %"struct.std::pair"
	# LowerGetelementptr(9823:3): struct-type: ptr ^5 -> ^10, indices=0,1
	movq %rbx, %rcx
	addq $32, %rcx
	# LowerGetelementptr(9823:3): type of ^10 is %"class.std::function"*
	# LowerLoad(9824:3).2: (^4) into ptr ^11
	movq (%r12), %rax
	# tt = Pointer, type = %"struct.std::pair"
	# LowerGetelementptr(9825:3): struct-type: ptr ^11 -> ^12, indices=0,1
	addq $32, %rax
	# LowerGetelementptr(9825:3): type of ^12 is %"class.std::function"*
	# SetupCalls(9826:3): move argument ptr nonnull dereferenceable(32) align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(9826:3): move argument ptr nonnull dereferenceable(32) align 8 ^12
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNSt8functionIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEEC2ERKSA_
	movq -24(%rbp), %r12
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE11_M_get_nodeEv
.p2align 4, 0x90
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE11_M_get_nodeEv:
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE11_M_get_nodeEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(72 + 0, 16)
	subq $80, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -48(%rbp)
	movq %r12, -32(%rbp)
	movq %r13, -40(%rbp)
	# LowerAlloca(9725:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %r12
	# LowerAlloca(9726:3): size = 8, type = i64*, var = ^3
	leaq -16(%rbp), %r13
	# LowerAlloca(9727:3): size = 8, type = ptr*, var = ^4
	leaq -24(%rbp), %rbx
	# LowerStore(9728:3).9: mov ptr %rdi, (^4)
	movq %rdi, (%rbx)
	# LowerLoad(9729:3).2: (^4) into ptr ^5
	movq (%rbx), %rax
	# SetupCalls(9730:3): move argument ptr nonnull dereferenceable(48) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE21_M_get_Node_allocatorEv
	# SetupCalls(9730:3): move ptr result from %rax
	movq %rax, %rbx
	# LowerStore(9731:3).9: mov ptr ^6, (^2)
	movq %rbx, (%r12)
	# LowerStore(9732:3).3: mov $imm, (^3)
	movq $1, (%r13)
	# LowerLoad(9733:3).2: (^2) into ptr ^7
	movq (%r12), %rbx
	# LowerLoad(9734:3).2: (^3) into i64 ^8
	movq (%r13), %rax
	# SetupCalls(9735:3): move argument ptr nonnull dereferenceable(1) align 1 ^7
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(9735:3): move argument i64 ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(9735:3): move argument ptr null
	movq $0, %rdx
	callq _ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEEE8allocateEmPKv
	# SetupCalls(9735:3): move ptr result from %rax
	movq %rax, %rbx
	movq %rbx, %rax
	movq -40(%rbp), %r13
	movq -32(%rbp), %r12
	movq -48(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE14_M_create_nodeIJRKSI_EEEPSt13_Rb_tree_nodeISI_EDpOT_
.p2align 4, 0x90
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE14_M_create_nodeIJRKSI_EEEPSt13_Rb_tree_nodeISI_EDpOT_:
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE14_M_create_nodeIJRKSI_EEEPSt13_Rb_tree_nodeISI_EDpOT___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(56 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -48(%rbp)
	movq %r12, -56(%rbp)
	movq %r13, -40(%rbp)
	movq %r14, -32(%rbp)
	# LowerAlloca(9708:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %rax
	# LowerAlloca(9709:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %r14
	# LowerAlloca(9710:3): size = 8, type = ptr*, var = ^5
	leaq -24(%rbp), %r13
	# LowerStore(9711:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rax)
	# LowerStore(9712:3).9: mov ptr %rsi, (^4)
	movq %rsi, (%r14)
	# LowerLoad(9713:3).2: (^3) into ptr ^6
	movq (%rax), %rbx
	# SetupCalls(9714:3): move argument ptr nonnull dereferenceable(48) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE11_M_get_nodeEv
	# SetupCalls(9714:3): move ptr result from %rax
	movq %rax, %r12
	# LowerStore(9715:3).9: mov ptr ^7, (^5)
	movq %r12, (%r13)
	# LowerLoad(9716:3).2: (^5) into ptr ^8
	movq (%r13), %rax
	# LowerLoad(9717:3).2: (^4) into ptr ^9
	movq (%r14), %rcx
	# SetupCalls(9718:3): move argument ptr nonnull dereferenceable(48) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(9718:3): move argument ptr ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(9718:3): move argument ptr nonnull dereferenceable(64) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdx
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE17_M_construct_nodeIJRKSI_EEEvPSt13_Rb_tree_nodeISI_EDpOT_
	# LowerLoad(9719:3).2: (^5) into ptr ^10
	movq (%r13), %rax
	movq -32(%rbp), %r14
	movq -40(%rbp), %r13
	movq -56(%rbp), %r12
	movq -48(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE11_Alloc_nodeclIRKSI_EEPSt13_Rb_tree_nodeISI_EOT_
.p2align 4, 0x90
_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE11_Alloc_nodeclIRKSI_EEPSt13_Rb_tree_nodeISI_EOT_:
	.___ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE11_Alloc_nodeclIRKSI_EEPSt13_Rb_tree_nodeISI_EOT___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(40 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(9691:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %rbx
	# LowerAlloca(9692:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %rcx
	# LowerStore(9693:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rbx)
	# LowerStore(9694:3).9: mov ptr %rsi, (^4)
	movq %rsi, (%rcx)
	# LowerLoad(9695:3).2: (^3) into ptr ^5
	movq (%rbx), %rax
	# tt = Pointer, type = %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Alloc_node"
	# LowerGetelementptr(9696:3): struct-type: ptr ^5 -> ^6, indices=0,0
	# LowerGetelementptr(9696:3): type of ^6 is ptr*
	# LowerLoad(9697:3).2: (^6) into ptr ^7
	movq (%rax), %rbx
	# LowerLoad(9698:3).2: (^4) into ptr ^8
	movq (%rcx), %rax
	# SetupCalls(9699:3): move argument ptr nonnull dereferenceable(48) align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(9699:3): move argument ptr nonnull dereferenceable(64) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE14_M_create_nodeIJRKSI_EEEPSt13_Rb_tree_nodeISI_EDpOT_
	# SetupCalls(9699:3): move ptr result from %rax
	movq %rax, %rbx
	movq %rbx, %rax
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE5beginEv
.p2align 4, 0x90
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE5beginEv:
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE5beginEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(56 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	movq %r12, -24(%rbp)
	# LowerAlloca(9648:3): size = 8, type = %"struct.std::_Rb_tree_iterator"*, var = ^2
	leaq -8(%rbp), %r12
	# LowerAlloca(9649:3): size = 8, type = ptr*, var = ^3
	leaq -16(%rbp), %rbx
	# LowerStore(9650:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rbx)
	# LowerLoad(9651:3).2: (^3) into ptr ^4
	movq (%rbx), %rax
	# tt = Pointer, type = %"class.std::_Rb_tree"
	# LowerGetelementptr(9652:3): struct-type: ptr ^4 -> ^5, indices=0,0
	# LowerGetelementptr(9652:3): type of ^5 is %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Rb_tree_impl"*
	# tt = Pointer, type = i8
	# LowerGetelementptr(9653:3): struct-type: ptr ^5 -> ^6, indices=8
	movq %rax, %rbx
	addq $8, %rbx
	# LowerGetelementptr(9653:3): type of ^6 is i8*
	# tt = Pointer, type = %"struct.std::_Rb_tree_header"
	# LowerGetelementptr(9654:3): struct-type: ptr ^6 -> ^7, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(9654:3): type of ^7 is %"struct.std::_Rb_tree_node_base"*
	# tt = Pointer, type = %"struct.std::_Rb_tree_node_base"
	# LowerGetelementptr(9655:3): struct-type: ptr ^7 -> ^8, indices=0,2
	addq $16, %rax
	# LowerGetelementptr(9655:3): type of ^8 is ptr*
	# LowerLoad(9656:3).2: (^8) into ptr ^9
	movq (%rax), %rbx
	# SetupCalls(9657:3): move argument ptr nonnull dereferenceable(8) align 8 ^2
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(9657:3): move argument ptr ^9
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEEC2EPSt18_Rb_tree_node_base
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(9658:3): struct-type: ptr ^2 -> ^10, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(9658:3): type of ^10 is ptr*
	# LowerLoad(9659:3).2: (^10) into ptr ^11
	movq (%rax), %rbx
	movq %rbx, %rax
	movq -24(%rbp), %r12
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEESL_
.p2align 4, 0x90
_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEESL_:
	.___ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEESL___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(9632:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %rbx
	# LowerAlloca(9633:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %rcx
	# LowerStore(9634:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rbx)
	# LowerStore(9635:3).9: mov ptr %rsi, (^4)
	movq %rsi, (%rcx)
	# LowerLoad(9636:3).2: (^3) into ptr ^5
	movq (%rbx), %rax
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(9637:3): struct-type: ptr ^5 -> ^6, indices=0,0
	# LowerGetelementptr(9637:3): type of ^6 is ptr*
	# LowerLoad(9638:3).2: (^6) into ptr ^7
	movq (%rax), %rbx
	# LowerLoad(9639:3).2: (^4) into ptr ^8
	movq (%rcx), %rax
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(9640:3): struct-type: ptr ^8 -> ^9, indices=0,0
	# LowerGetelementptr(9640:3): type of ^9 is ptr*
	# LowerLoad(9641:3).2: (^9) into ptr ^10
	movq (%rax), %rcx
	# LowerIcmp(9642:3): ptr ^7 vs. operand ptr ^10
	cmpq %rcx, %rbx
	sete %al
	andq $1, %rax
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEE7_M_addrEv
.p2align 4, 0x90
_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEE7_M_addrEv:
	.___ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEE7_M_addrEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(9623:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(9624:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(9625:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"struct.__gnu_cxx::__aligned_membuf"
	# LowerGetelementptr(9626:3): struct-type: ptr ^3 -> ^4, indices=0,0
	# LowerGetelementptr(9626:3): type of ^4 is [64 x i8]*
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEE6_M_ptrEv
.p2align 4, 0x90
_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEE6_M_ptrEv:
	.___ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEE6_M_ptrEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(9614:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(9615:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(9616:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# SetupCalls(9617:3): move argument ptr nonnull dereferenceable(64) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEE7_M_addrEv
	# SetupCalls(9617:3): move ptr result from %rax
	movq %rax, %rbx
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_S4_Lb1EEEOT_OT0_
.p2align 4, 0x90
_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_S4_Lb1EEEOT_OT0_:
	.___ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_S4_Lb1EEEOT_OT0___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(48 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	movq %r15, -40(%rbp)
	# LowerAlloca(9547:3): size = 8, type = ptr*, var = ^4
	leaq -8(%rbp), %rax
	# LowerAlloca(9548:3): size = 8, type = ptr*, var = ^5
	leaq -16(%rbp), %r8
	# LowerAlloca(9549:3): size = 8, type = ptr*, var = ^6
	leaq -24(%rbp), %rbx
	# LowerStore(9550:3).9: mov ptr %rdi, (^4)
	movq %rdi, (%rax)
	# LowerStore(9551:3).9: mov ptr %rsi, (^5)
	movq %rsi, (%r8)
	# LowerStore(9552:3).9: mov ptr %rdx, (^6)
	movq %rdx, (%rbx)
	# LowerLoad(9553:3).2: (^4) into ptr ^7
	movq (%rax), %rcx
	# tt = Pointer, type = %"struct.std::pair.21"
	# LowerGetelementptr(9554:3): struct-type: ptr ^7 -> ^8, indices=0,0
	movq %rcx, %rax
	# LowerGetelementptr(9554:3): type of ^8 is ptr*
	# LowerLoad(9555:3).2: (^5) into ptr ^9
	movq (%r8), %rdx
	# LowerLoad(9556:3).2: (^9) into ptr ^10
	# Fixing source-to-dest movq (%rdx), (%rax)
	movq (%rdx), %r15
	movq %r15, (%rax)
	# LowerStore(9557:3).9: mov ptr ^10, (^8)
	# tt = Pointer, type = %"struct.std::pair.21"
	# LowerGetelementptr(9558:3): struct-type: ptr ^7 -> ^11, indices=0,1
	movq %rcx, %rdx
	addq $8, %rdx
	# LowerGetelementptr(9558:3): type of ^11 is ptr*
	# LowerLoad(9559:3).2: (^6) into ptr ^12
	movq (%rbx), %rax
	# LowerLoad(9560:3).2: (^12) into ptr ^13
	# Fixing source-to-dest movq (%rax), (%rdx)
	movq (%rax), %r15
	movq %r15, (%rdx)
	# LowerStore(9561:3).9: mov ptr ^13, (^11)
	movq -40(%rbp), %r15
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE11_M_leftmostEv
.p2align 4, 0x90
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE11_M_leftmostEv:
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE11_M_leftmostEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(9535:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(9536:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(9537:3).2: (^2) into ptr ^3
	movq (%rax), %rcx
	# tt = Pointer, type = %"class.std::_Rb_tree"
	# LowerGetelementptr(9538:3): struct-type: ptr ^3 -> ^4, indices=0,0
	# LowerGetelementptr(9538:3): type of ^4 is %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Rb_tree_impl"*
	# tt = Pointer, type = i8
	# LowerGetelementptr(9539:3): struct-type: ptr ^4 -> ^5, indices=8
	movq %rcx, %rbx
	addq $8, %rbx
	# LowerGetelementptr(9539:3): type of ^5 is i8*
	# tt = Pointer, type = %"struct.std::_Rb_tree_header"
	# LowerGetelementptr(9540:3): struct-type: ptr ^5 -> ^6, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(9540:3): type of ^6 is %"struct.std::_Rb_tree_node_base"*
	# tt = Pointer, type = %"struct.std::_Rb_tree_node_base"
	# LowerGetelementptr(9541:3): struct-type: ptr ^6 -> ^7, indices=0,2
	addq $16, %rax
	# LowerGetelementptr(9541:3): type of ^7 is ptr*
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE24_M_get_insert_unique_posERS7_
.p2align 4, 0x90
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE24_M_get_insert_unique_posERS7_:
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE24_M_get_insert_unique_posERS7___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(352 + 0, 16)
	subq $352, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -184(%rbp)
	movq %r12, -224(%rbp)
	movq %r13, -256(%rbp)
	movq %r14, -264(%rbp)
	movq %r15, -152(%rbp)
	# LowerAlloca(9429:3): size = 16, type = %"struct.std::pair.21"*, var = ^3
	# Fixing source-to-dest leaq -16(%rbp), -88(%rbp)
	pushq %r15
	leaq -16(%rbp), %r15
	movq %r15, -88(%rbp)
	popq %r15
	# LowerAlloca(9430:3): size = 8, type = ptr*, var = ^4
	leaq -24(%rbp), %rcx
	# LowerAlloca(9431:3): size = 8, type = ptr*, var = ^5
	# Fixing source-to-dest leaq -32(%rbp), -128(%rbp)
	pushq %r15
	leaq -32(%rbp), %r15
	movq %r15, -128(%rbp)
	popq %r15
	# LowerAlloca(9432:3): size = 8, type = ptr*, var = ^6
	# Fixing source-to-dest leaq -40(%rbp), -104(%rbp)
	pushq %r15
	leaq -40(%rbp), %r15
	movq %r15, -104(%rbp)
	popq %r15
	# LowerAlloca(9433:3): size = 8, type = ptr*, var = ^7
	# Fixing source-to-dest leaq -48(%rbp), -96(%rbp)
	pushq %r15
	leaq -48(%rbp), %r15
	movq %r15, -96(%rbp)
	popq %r15
	# LowerAlloca(9434:3): size = 1, type = i8*, var = ^8
	leaq -49(%rbp), %rbx
	# LowerAlloca(9435:3): size = 8, type = %"struct.std::_Rb_tree_iterator"*, var = ^9
	# Fixing source-to-dest leaq -64(%rbp), -120(%rbp)
	pushq %r15
	leaq -64(%rbp), %r15
	movq %r15, -120(%rbp)
	popq %r15
	# LowerAlloca(9436:3): size = 8, type = %"struct.std::_Rb_tree_iterator"*, var = ^10
	# Fixing source-to-dest leaq -72(%rbp), -144(%rbp)
	pushq %r15
	leaq -72(%rbp), %r15
	movq %r15, -144(%rbp)
	popq %r15
	# LowerAlloca(9437:3): size = 8, type = ptr*, var = ^11
	# Fixing source-to-dest leaq -80(%rbp), -112(%rbp)
	pushq %r15
	leaq -80(%rbp), %r15
	movq %r15, -112(%rbp)
	popq %r15
	# LowerStore(9438:3).9: mov ptr %rdi, (^4)
	movq %rdi, (%rcx)
	# LowerStore(9439:3).9: mov ptr %rsi, (^5)
	movq -128(%rbp), %rax
	movq %rsi, (%rax)
	# LowerLoad(9440:3).2: (^4) into ptr ^12
	# Fixing source-to-dest movq (%rcx), -136(%rbp)
	pushq %r15
	movq (%rcx), %r15
	movq %r15, -136(%rbp)
	popq %r15
	# SetupCalls(9441:3): move argument ptr nonnull dereferenceable(48) align 8 ^12
	# Fixed movzx with identical source and destination widths
	movq -136(%rbp), %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE8_M_beginEv
	# SetupCalls(9441:3): move ptr result from %rax
	movq %rax, %r12
	# LowerStore(9442:3).9: mov ptr ^13, (^6)
	movq -104(%rbp), %rax
	movq %r12, (%rax)
	# SetupCalls(9443:3): move argument ptr nonnull dereferenceable(48) align 8 ^12
	# Fixed movzx with identical source and destination widths
	movq -136(%rbp), %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE6_M_endEv
	# SetupCalls(9443:3): move ptr result from %rax
	movq %rax, %r12
	# LowerStore(9444:3).9: mov ptr ^14, (^7)
	movq -96(%rbp), %rax
	movq %r12, (%rax)
	# LowerStore(9445:3).3: mov $imm, (^8)
	movb $1, (%rbx)
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE24_M_get_insert_unique_posERS7___M77:
	# LowerLoad(9449:3).2: (^6) into ptr ^16
	movq -104(%rbp), %rcx
	movq (%rcx), %rax
	# LowerIcmp(9450:3): ptr ^16 vs. intlike 0
	cmpq $0, %rax
	setne %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE24_M_get_insert_unique_posERS7___M84
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE24_M_get_insert_unique_posERS7___M220
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE24_M_get_insert_unique_posERS7___M84:
	# LowerLoad(9454:3).2: (^6) into ptr ^19
	movq -96(%rbp), %rax
	movq -104(%rbp), %rcx
	# Fixing source-to-dest movq (%rcx), (%rax)
	pushq %r15
	movq (%rcx), %r15
	movq %r15, (%rax)
	popq %r15
	# LowerStore(9455:3).9: mov ptr ^19, (^7)
	# tt = Pointer, type = %"class.std::_Rb_tree"
	# LowerGetelementptr(9456:3): struct-type: ptr ^12 -> ^20, indices=0,0
	movq -136(%rbp), %r12
	# LowerGetelementptr(9456:3): type of ^20 is %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Rb_tree_impl"*
	# tt = Pointer, type = %"struct.std::_Rb_tree_key_compare"
	# LowerGetelementptr(9457:3): struct-type: ptr ^20 -> ^21, indices=0,0
	# LowerGetelementptr(9457:3): type of ^21 is %"struct.std::less"*
	# LowerLoad(9458:3).2: (^5) into ptr ^22
	movq -128(%rbp), %rax
	movq (%rax), %r13
	# LowerLoad(9459:3).2: (^6) into ptr ^23
	movq -104(%rbp), %rcx
	movq (%rcx), %rax
	# SetupCalls(9460:3): move argument ptr ^23
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE6_S_keyEPKSt13_Rb_tree_nodeISI_E
	# SetupCalls(9460:3): move ptr result from %rax
	movq %rax, %r14
	# SetupCalls(9461:3): move argument ptr nonnull dereferenceable(1) align 1 ^21
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(9461:3): move argument ptr nonnull dereferenceable(32) align 8 ^22
	# Fixed movzx with identical source and destination widths
	movq %r13, %rsi
	# SetupCalls(9461:3): move argument ptr nonnull dereferenceable(32) align 8 ^24
	# Fixed movzx with identical source and destination widths
	movq %r14, %rdx
	callq _ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_
	# SetupCalls(9461:3): move i1 result from %rax
	movb %al, %r12b
	# LowerBasicConversion(9462:3): i1 ^25 -> i8 ^26
	movb %r12b, (%rbx)
	# LowerStore(9463:3).9: mov i8 ^26, (^8)
	# LowerLoad(9464:3).2: (^8) into i8 ^27
	movb (%rbx), %al
	# LowerTrunc(9465:3): 8 to 1, move
	# LowerTrunc(9465:3): 8 to 1, apply mask
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE24_M_get_insert_unique_posERS7___M161
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE24_M_get_insert_unique_posERS7___M189
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE24_M_get_insert_unique_posERS7___M161:
	# LowerLoad(9469:3).2: (^6) into ptr ^30
	movq -104(%rbp), %rcx
	movq (%rcx), %rax
	# SetupCalls(9470:3): move argument ptr ^30
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE7_S_leftEPSt18_Rb_tree_node_base
	# SetupCalls(9470:3): move ptr result from %rax
	movq %rax, %r12
	# MovePhi: ^31 -> ^36
	movq %r12, %r15
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE24_M_get_insert_unique_posERS7___M217
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE24_M_get_insert_unique_posERS7___M189:
	# LowerLoad(9474:3).2: (^6) into ptr ^33
	movq -104(%rbp), %rax
	movq (%rax), %rcx
	# SetupCalls(9475:3): move argument ptr ^33
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE8_S_rightEPSt18_Rb_tree_node_base
	# SetupCalls(9475:3): move ptr result from %rax
	movq %rax, %r12
	# MovePhi: ^34 -> ^36
	movq %r12, %r15
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE24_M_get_insert_unique_posERS7___M217:
	# LowerStore(9480:3).9: mov ptr ^36, (^6)
	movq -104(%rbp), %rax
	movq %r15, (%rax)
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE24_M_get_insert_unique_posERS7___M77
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE24_M_get_insert_unique_posERS7___M220:
	# LowerLoad(9484:3).2: (^7) into ptr ^38
	movq -96(%rbp), %rax
	movq (%rax), %rcx
	# SetupCalls(9485:3): move argument ptr nonnull dereferenceable(8) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq -120(%rbp), %rdi
	# SetupCalls(9485:3): move argument ptr ^38
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	callq _ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEEC2EPSt18_Rb_tree_node_base
	# LowerLoad(9486:3).2: (^8) into i8 ^39
	movb (%rbx), %al
	# LowerTrunc(9487:3): 8 to 1, move
	# LowerTrunc(9487:3): 8 to 1, apply mask
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE24_M_get_insert_unique_posERS7___M252
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE24_M_get_insert_unique_posERS7___M358
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE24_M_get_insert_unique_posERS7___M252:
	# SetupCalls(9491:3): move argument ptr nonnull dereferenceable(48) align 8 ^12
	# Fixed movzx with identical source and destination widths
	movq -136(%rbp), %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE5beginEv
	# SetupCalls(9491:3): move ptr result from %rax
	movq %rax, %rbx
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(9492:3): struct-type: ptr ^10 -> ^43, indices=0,0
	movq -144(%rbp), %rax
	# LowerGetelementptr(9492:3): type of ^43 is ptr*
	# LowerStore(9493:3).9: mov ptr ^42, (^43)
	movq %rbx, (%rax)
	# SetupCalls(9494:3): move argument ptr nonnull dereferenceable(8) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq -120(%rbp), %rdi
	# SetupCalls(9494:3): move argument ptr nonnull dereferenceable(8) align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq -144(%rbp), %rsi
	callq _ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEESL_
	# SetupCalls(9494:3): move i1 result from %rax
	movb %al, %bl
	cmpb $0, %bl
	jne .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE24_M_get_insert_unique_posERS7___M307
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE24_M_get_insert_unique_posERS7___M333
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE24_M_get_insert_unique_posERS7___M307:
	# SetupCalls(9498:3): move argument ptr nonnull dereferenceable(16) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq -88(%rbp), %rdi
	# SetupCalls(9498:3): move argument ptr nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq -104(%rbp), %rsi
	# SetupCalls(9498:3): move argument ptr nonnull dereferenceable(8) align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq -96(%rbp), %rdx
	callq _ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS8_ESaISF_EEEEEERS1_Lb1EEEOT_OT0_
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE24_M_get_insert_unique_posERS7___M483
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE24_M_get_insert_unique_posERS7___M333:
	# SetupCalls(9502:3): move argument ptr nonnull dereferenceable(8) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq -120(%rbp), %rdi
	callq _ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEEmmEv
	# SetupCalls(9502:3): move ptr result from %rax
	movq %rax, %rax
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE24_M_get_insert_unique_posERS7___M358:
	# tt = Pointer, type = %"class.std::_Rb_tree"
	# LowerGetelementptr(9509:3): struct-type: ptr ^12 -> ^50, indices=0,0
	movq -136(%rbp), %rbx
	# LowerGetelementptr(9509:3): type of ^50 is %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Rb_tree_impl"*
	# tt = Pointer, type = %"struct.std::_Rb_tree_key_compare"
	# LowerGetelementptr(9510:3): struct-type: ptr ^50 -> ^51, indices=0,0
	# LowerGetelementptr(9510:3): type of ^51 is %"struct.std::less"*
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(9511:3): struct-type: ptr ^9 -> ^52, indices=0,0
	movq -120(%rbp), %rax
	# LowerGetelementptr(9511:3): type of ^52 is ptr*
	# LowerLoad(9512:3).2: (^52) into ptr ^53
	movq (%rax), %rcx
	# SetupCalls(9513:3): move argument ptr ^53
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE6_S_keyEPKSt18_Rb_tree_node_base
	# SetupCalls(9513:3): move ptr result from %rax
	movq %rax, %r12
	# LowerLoad(9514:3).2: (^5) into ptr ^55
	movq -128(%rbp), %rcx
	movq (%rcx), %rax
	# SetupCalls(9515:3): move argument ptr nonnull dereferenceable(1) align 1 ^51
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(9515:3): move argument ptr nonnull dereferenceable(32) align 8 ^54
	# Fixed movzx with identical source and destination widths
	movq %r12, %rsi
	# SetupCalls(9515:3): move argument ptr nonnull dereferenceable(32) align 8 ^55
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdx
	callq _ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_
	# SetupCalls(9515:3): move i1 result from %rax
	movb %al, %bl
	cmpb $0, %bl
	jne .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE24_M_get_insert_unique_posERS7___M425
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE24_M_get_insert_unique_posERS7___M451
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE24_M_get_insert_unique_posERS7___M425:
	# SetupCalls(9519:3): move argument ptr nonnull dereferenceable(16) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq -88(%rbp), %rdi
	# SetupCalls(9519:3): move argument ptr nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq -104(%rbp), %rsi
	# SetupCalls(9519:3): move argument ptr nonnull dereferenceable(8) align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq -96(%rbp), %rdx
	callq _ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS8_ESaISF_EEEEEERS1_Lb1EEEOT_OT0_
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE24_M_get_insert_unique_posERS7___M483
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE24_M_get_insert_unique_posERS7___M451:
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(9523:3): struct-type: ptr ^9 -> ^59, indices=0,0
	movq -120(%rbp), %rbx
	# LowerGetelementptr(9523:3): type of ^59 is ptr*
	# LowerStore(9524:3).3: mov $imm, (^11)
	movq -112(%rbp), %rax
	movq $0, (%rax)
	# SetupCalls(9525:3): move argument ptr nonnull dereferenceable(16) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq -88(%rbp), %rdi
	# SetupCalls(9525:3): move argument ptr nonnull dereferenceable(8) align 8 ^59
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(9525:3): move argument ptr nonnull dereferenceable(8) align 8 ^11
	# Fixed movzx with identical source and destination widths
	movq -112(%rbp), %rdx
	callq _ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IS1_S1_Lb1EEERKS1_S5_
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE24_M_get_insert_unique_posERS7___M483:
	# LowerLoad(9529:3).2: (^3) into {ptr, ptr} ^61
	movq -88(%rbp), %rax
	# FinishMultireg: mov (%reg), <%pack...>
	movq (%rax), %rbx
	movq 8(%rax), %rcx
	# LowerRet: two-register return
	movq %rbx, %rax
	movq %rcx, %rdx
	movq -152(%rbp), %r15
	movq -264(%rbp), %r14
	movq -256(%rbp), %r13
	movq -224(%rbp), %r12
	movq -184(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IS1_S1_Lb1EEERKS1_S5_
.p2align 4, 0x90
_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IS1_S1_Lb1EEERKS1_S5_:
	.___ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IS1_S1_Lb1EEERKS1_S5___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(48 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	movq %r15, -40(%rbp)
	# LowerAlloca(9409:3): size = 8, type = ptr*, var = ^4
	leaq -8(%rbp), %rax
	# LowerAlloca(9410:3): size = 8, type = ptr*, var = ^5
	leaq -16(%rbp), %r8
	# LowerAlloca(9411:3): size = 8, type = ptr*, var = ^6
	leaq -24(%rbp), %rbx
	# LowerStore(9412:3).9: mov ptr %rdi, (^4)
	movq %rdi, (%rax)
	# LowerStore(9413:3).9: mov ptr %rsi, (^5)
	movq %rsi, (%r8)
	# LowerStore(9414:3).9: mov ptr %rdx, (^6)
	movq %rdx, (%rbx)
	# LowerLoad(9415:3).2: (^4) into ptr ^7
	movq (%rax), %rcx
	# tt = Pointer, type = %"struct.std::pair.21"
	# LowerGetelementptr(9416:3): struct-type: ptr ^7 -> ^8, indices=0,0
	movq %rcx, %rax
	# LowerGetelementptr(9416:3): type of ^8 is ptr*
	# LowerLoad(9417:3).2: (^5) into ptr ^9
	movq (%r8), %rdx
	# LowerLoad(9418:3).2: (^9) into ptr ^10
	# Fixing source-to-dest movq (%rdx), (%rax)
	movq (%rdx), %r15
	movq %r15, (%rax)
	# LowerStore(9419:3).9: mov ptr ^10, (^8)
	# tt = Pointer, type = %"struct.std::pair.21"
	# LowerGetelementptr(9420:3): struct-type: ptr ^7 -> ^11, indices=0,1
	movq %rcx, %rdx
	addq $8, %rdx
	# LowerGetelementptr(9420:3): type of ^11 is ptr*
	# LowerLoad(9421:3).2: (^6) into ptr ^12
	movq (%rbx), %rax
	# LowerLoad(9422:3).2: (^12) into ptr ^13
	# Fixing source-to-dest movq (%rax), (%rdx)
	movq (%rax), %r15
	movq %r15, (%rdx)
	# LowerStore(9423:3).9: mov ptr ^13, (^11)
	movq -40(%rbp), %r15
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_
.p2align 4, 0x90
_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_:
	.___ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(40 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	# LowerAlloca(9373:3): size = 8, type = ptr*, var = ^4
	leaq -8(%rbp), %r8
	# LowerAlloca(9374:3): size = 8, type = ptr*, var = ^5
	leaq -16(%rbp), %rcx
	# LowerAlloca(9375:3): size = 8, type = ptr*, var = ^6
	leaq -24(%rbp), %rbx
	# LowerStore(9376:3).9: mov ptr %rdi, (^4)
	movq %rdi, (%r8)
	# LowerStore(9377:3).9: mov ptr %rsi, (^5)
	movq %rsi, (%rcx)
	# LowerStore(9378:3).9: mov ptr %rdx, (^6)
	movq %rdx, (%rbx)
	# LowerLoad(9379:3).2: (^4) into ptr ^7
	movq (%r8), %rax
	# LowerLoad(9380:3).2: (^5) into ptr ^8
	movq (%rcx), %rax
	# LowerLoad(9381:3).2: (^6) into ptr ^9
	movq (%rbx), %rcx
	# SetupCalls(9382:3): move argument ptr nonnull dereferenceable(32) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(9382:3): move argument ptr nonnull dereferenceable(32) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	callq _ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_
	# SetupCalls(9382:3): move i1 result from %rax
	movb %al, %bl
	movb %bl, %al
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE6_M_endEv
.p2align 4, 0x90
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE6_M_endEv:
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE6_M_endEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(9350:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(9351:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(9352:3).2: (^2) into ptr ^3
	movq (%rax), %rcx
	# tt = Pointer, type = %"class.std::_Rb_tree"
	# LowerGetelementptr(9353:3): struct-type: ptr ^3 -> ^4, indices=0,0
	# LowerGetelementptr(9353:3): type of ^4 is %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Rb_tree_impl"*
	# tt = Pointer, type = i8
	# LowerGetelementptr(9354:3): struct-type: ptr ^4 -> ^5, indices=8
	movq %rcx, %rbx
	addq $8, %rbx
	# LowerGetelementptr(9354:3): type of ^5 is i8*
	# tt = Pointer, type = %"struct.std::_Rb_tree_header"
	# LowerGetelementptr(9355:3): struct-type: ptr ^5 -> ^6, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(9355:3): type of ^6 is %"struct.std::_Rb_tree_node_base"*
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEEC2EPSt18_Rb_tree_node_base
.p2align 4, 0x90
_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEEC2EPSt18_Rb_tree_node_base:
	.___ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEEC2EPSt18_Rb_tree_node_base__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	movq %r15, -32(%rbp)
	# LowerAlloca(9323:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %rbx
	# LowerAlloca(9324:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %rcx
	# LowerStore(9325:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rbx)
	# LowerStore(9326:3).9: mov ptr %rsi, (^4)
	movq %rsi, (%rcx)
	# LowerLoad(9327:3).2: (^3) into ptr ^5
	movq (%rbx), %rax
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(9328:3): struct-type: ptr ^5 -> ^6, indices=0,0
	# LowerGetelementptr(9328:3): type of ^6 is ptr*
	# LowerLoad(9329:3).2: (^4) into ptr ^7
	# Fixing source-to-dest movq (%rcx), (%rax)
	movq (%rcx), %r15
	movq %r15, (%rax)
	# LowerStore(9330:3).9: mov ptr ^7, (^6)
	movq -32(%rbp), %r15
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEEC2ERKSt17_Rb_tree_iteratorISI_E
.p2align 4, 0x90
_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEEC2ERKSt17_Rb_tree_iteratorISI_E:
	.___ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEEC2ERKSt17_Rb_tree_iteratorISI_E__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	movq %r15, -32(%rbp)
	# LowerAlloca(9027:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %rax
	# LowerAlloca(9028:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %rcx
	# LowerStore(9029:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rax)
	# LowerStore(9030:3).9: mov ptr %rsi, (^4)
	movq %rsi, (%rcx)
	# LowerLoad(9031:3).2: (^3) into ptr ^5
	movq (%rax), %rbx
	# tt = Pointer, type = %"struct.std::_Rb_tree_const_iterator"
	# LowerGetelementptr(9032:3): struct-type: ptr ^5 -> ^6, indices=0,0
	# LowerGetelementptr(9032:3): type of ^6 is ptr*
	# LowerLoad(9033:3).2: (^4) into ptr ^7
	movq (%rcx), %rax
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(9034:3): struct-type: ptr ^7 -> ^8, indices=0,0
	# LowerGetelementptr(9034:3): type of ^8 is ptr*
	# LowerLoad(9035:3).2: (^8) into ptr ^9
	# Fixing source-to-dest movq (%rax), (%rbx)
	movq (%rax), %r15
	movq %r15, (%rbx)
	# LowerStore(9036:3).9: mov ptr ^9, (^6)
	movq -32(%rbp), %r15
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE17_M_insert_unique_IRKSI_NSO_11_Alloc_nodeEEESt17_Rb_tree_iteratorISI_ESt23_Rb_tree_const_iteratorISI_EOT_RT0_
.p2align 4, 0x90
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE17_M_insert_unique_IRKSI_NSO_11_Alloc_nodeEEESt17_Rb_tree_iteratorISI_ESt23_Rb_tree_const_iteratorISI_EOT_RT0_:
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE17_M_insert_unique_IRKSI_NSO_11_Alloc_nodeEEESt17_Rb_tree_iteratorISI_ESt23_Rb_tree_const_iteratorISI_EOT_RT0___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(240 + 0, 16)
	subq $240, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -112(%rbp)
	movq %r12, -152(%rbp)
	movq %r13, -136(%rbp)
	movq %r14, -144(%rbp)
	movq %r15, -104(%rbp)
	# LowerAlloca(8955:3): size = 8, type = %"struct.std::_Rb_tree_iterator"*, var = ^5
	# Fixing source-to-dest leaq -8(%rbp), -80(%rbp)
	leaq -8(%rbp), %r15
	movq %r15, -80(%rbp)
	# LowerAlloca(8956:3): size = 8, type = %"struct.std::_Rb_tree_const_iterator"*, var = ^6
	leaq -16(%rbp), %rbx
	# LowerAlloca(8957:3): size = 8, type = ptr*, var = ^7
	leaq -24(%rbp), %r8
	# LowerAlloca(8958:3): size = 8, type = ptr*, var = ^8
	# Fixing source-to-dest leaq -32(%rbp), -88(%rbp)
	leaq -32(%rbp), %r15
	movq %r15, -88(%rbp)
	# LowerAlloca(8959:3): size = 8, type = ptr*, var = ^9
	# Fixing source-to-dest leaq -40(%rbp), -96(%rbp)
	leaq -40(%rbp), %r15
	movq %r15, -96(%rbp)
	# LowerAlloca(8960:3): size = 16, type = %"struct.std::pair.21"*, var = ^10
	leaq -56(%rbp), %r13
	# LowerAlloca(8961:3): size = 8, type = %"struct.std::_Rb_tree_const_iterator"*, var = ^11
	leaq -64(%rbp), %r14
	# LowerAlloca(8962:3): size = 1, type = %"struct.std::_Select1st"*, var = ^12
	leaq -65(%rbp), %r12
	# tt = Pointer, type = %"struct.std::_Rb_tree_const_iterator"
	# LowerGetelementptr(8963:3): struct-type: ptr ^6 -> ^13, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(8963:3): type of ^13 is ptr*
	# LowerStore(8964:3).9: mov ptr %rsi, (^13)
	movq %rsi, (%rax)
	# LowerStore(8965:3).9: mov ptr %rdi, (^7)
	movq %rdi, (%r8)
	# LowerStore(8966:3).9: mov ptr %rdx, (^8)
	movq -88(%rbp), %rax
	movq %rdx, (%rax)
	# LowerStore(8967:3).9: mov ptr %rcx, (^9)
	movq -96(%rbp), %rax
	movq %rcx, (%rax)
	# LowerLoad(8968:3).2: (^7) into ptr ^14
	movq (%r8), %r15
	# SetupCalls(8969:3): move argument ptr align 8 ^11
	# Fixed movzx with identical source and destination widths
	movq %r14, %rdi
	# SetupCalls(8969:3): move argument ptr align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(8969:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# LowerLoad(8970:3).2: (^8) into ptr ^15
	movq -88(%rbp), %rbx
	movq (%rbx), %rax
	# SetupCalls(8971:3): move argument ptr nonnull dereferenceable(1) align 1 ^12
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(8971:3): move argument ptr nonnull dereferenceable(64) align 8 ^15
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEEclERKSI_
	# SetupCalls(8971:3): move ptr result from %rax
	movq %rax, %rbx
	# tt = Pointer, type = %"struct.std::_Rb_tree_const_iterator"
	# LowerGetelementptr(8972:3): struct-type: ptr ^11 -> ^17, indices=0,0
	movq %r14, %rax
	# LowerGetelementptr(8972:3): type of ^17 is ptr*
	# LowerLoad(8973:3).2: (^17) into ptr ^18
	movq (%rax), %rcx
	# SetupCalls(8974:3): move argument ptr nonnull dereferenceable(48) align 8 ^14
	# Fixed movzx with identical source and destination widths
	movq %r15, %rdi
	# SetupCalls(8974:3): move argument ptr ^18
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(8974:3): move argument ptr nonnull dereferenceable(32) align 8 ^16
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdx
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7_
	# SetupCalls(8974:3): move 128-bit result from %rax and %rdx
	# Multireg move: <%hax %hdx> -> <%hbx %hr12>
	movq %rax, %rbx
	movq %rdx, %r12
	# tt = Pointer, type = {ptr, ptr}
	# LowerGetelementptr(8975:3): struct-type: ptr ^10 -> ^20, indices=0,0
	movq %r13, %rcx
	# LowerGetelementptr(8975:3): type of ^20 is ptr*
	# LowerExtractvalue(8977:3)
	# PaddedStructs({ptr, ptr} -> ptr): move from pack ^19 ({ptr, ptr}) to ^43 (opaque), index = 0
	movq %rbx, %rdx
	movq %rdx, %rax
	# LowerStore(8977:3).9: mov ptr ^21, (^20)
	movq %rax, (%rcx)
	# tt = Pointer, type = {ptr, ptr}
	# LowerGetelementptr(8978:3): struct-type: ptr ^10 -> ^22, indices=0,1
	movq %r13, %rax
	addq $8, %rax
	# LowerGetelementptr(8978:3): type of ^22 is ptr*
	# LowerExtractvalue(8980:3)
	# PaddedStructs({ptr, ptr} -> ptr): move from pack ^19 ({ptr, ptr}) to ^44 (opaque), index = 1
	movq %r12, %rcx
	movq %rcx, %rbx
	# LowerStore(8980:3).9: mov ptr ^23, (^22)
	movq %rbx, (%rax)
	# tt = Pointer, type = %"struct.std::pair.21"
	# LowerGetelementptr(8981:3): struct-type: ptr ^10 -> ^24, indices=0,1
	movq %r13, %rax
	addq $8, %rax
	# LowerGetelementptr(8981:3): type of ^24 is ptr*
	# LowerLoad(8982:3).2: (^24) into ptr ^25
	movq (%rax), %rbx
	# LowerIcmp(8983:3): ptr ^25 vs. intlike 0
	cmpq $0, %rbx
	setne %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE17_M_insert_unique_IRKSI_NSO_11_Alloc_nodeEEESt17_Rb_tree_iteratorISI_ESt23_Rb_tree_const_iteratorISI_EOT_RT0___M149
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE17_M_insert_unique_IRKSI_NSO_11_Alloc_nodeEEESt17_Rb_tree_iteratorISI_ESt23_Rb_tree_const_iteratorISI_EOT_RT0___M204
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE17_M_insert_unique_IRKSI_NSO_11_Alloc_nodeEEESt17_Rb_tree_iteratorISI_ESt23_Rb_tree_const_iteratorISI_EOT_RT0___M149:
	# tt = Pointer, type = %"struct.std::pair.21"
	# LowerGetelementptr(8987:3): struct-type: ptr ^10 -> ^28, indices=0,0
	movq %r13, %rax
	# LowerGetelementptr(8987:3): type of ^28 is ptr*
	# LowerLoad(8988:3).2: (^28) into ptr ^29
	movq (%rax), %rbx
	# tt = Pointer, type = %"struct.std::pair.21"
	# LowerGetelementptr(8989:3): struct-type: ptr ^10 -> ^30, indices=0,1
	movq %r13, %rax
	addq $8, %rax
	# LowerGetelementptr(8989:3): type of ^30 is ptr*
	# LowerLoad(8990:3).2: (^30) into ptr ^31
	movq (%rax), %rcx
	# LowerLoad(8991:3).2: (^8) into ptr ^32
	movq -88(%rbp), %rdx
	movq (%rdx), %rax
	# LowerLoad(8992:3).2: (^9) into ptr ^33
	movq -96(%rbp), %rdx
	movq (%rdx), %r9
	# SetupCalls(8993:3): move argument ptr nonnull dereferenceable(48) align 8 ^14
	# Fixed movzx with identical source and destination widths
	movq %r15, %rdi
	# SetupCalls(8993:3): move argument ptr ^29
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(8993:3): move argument ptr ^31
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdx
	# SetupCalls(8993:3): move argument ptr nonnull dereferenceable(64) align 8 ^32
	# Fixed movzx with identical source and destination widths
	movq %rax, %rcx
	# SetupCalls(8993:3): move argument ptr nonnull dereferenceable(8) align 8 ^33
	# Fixed movzx with identical source and destination widths
	movq %r9, %r8
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE10_M_insert_IRKSI_NSO_11_Alloc_nodeEEESt17_Rb_tree_iteratorISI_EPSt18_Rb_tree_node_baseSW_OT_RT0_
	# SetupCalls(8993:3): move ptr result from %rax
	movq %rax, %rbx
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(8994:3): struct-type: ptr ^5 -> ^35, indices=0,0
	movq -80(%rbp), %rax
	# LowerGetelementptr(8994:3): type of ^35 is ptr*
	# LowerStore(8995:3).9: mov ptr ^34, (^35)
	movq %rbx, (%rax)
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE17_M_insert_unique_IRKSI_NSO_11_Alloc_nodeEEESt17_Rb_tree_iteratorISI_ESt23_Rb_tree_const_iteratorISI_EOT_RT0___M234
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE17_M_insert_unique_IRKSI_NSO_11_Alloc_nodeEEESt17_Rb_tree_iteratorISI_ESt23_Rb_tree_const_iteratorISI_EOT_RT0___M204:
	# tt = Pointer, type = %"struct.std::pair.21"
	# LowerGetelementptr(8999:3): struct-type: ptr ^10 -> ^37, indices=0,0
	movq %r13, %rax
	# LowerGetelementptr(8999:3): type of ^37 is ptr*
	# LowerLoad(9000:3).2: (^37) into ptr ^38
	movq (%rax), %rbx
	# SetupCalls(9001:3): move argument ptr nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq -80(%rbp), %rdi
	# SetupCalls(9001:3): move argument ptr ^38
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEEC2EPSt18_Rb_tree_node_base
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE17_M_insert_unique_IRKSI_NSO_11_Alloc_nodeEEESt17_Rb_tree_iteratorISI_ESt23_Rb_tree_const_iteratorISI_EOT_RT0___M234:
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(9005:3): struct-type: ptr ^5 -> ^40, indices=0,0
	movq -80(%rbp), %rax
	# LowerGetelementptr(9005:3): type of ^40 is ptr*
	# LowerLoad(9006:3).2: (^40) into ptr ^41
	movq (%rax), %rbx
	movq %rbx, %rax
	movq -104(%rbp), %r15
	movq -144(%rbp), %r14
	movq -136(%rbp), %r13
	movq -152(%rbp), %r12
	movq -112(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE11_Alloc_nodeC2ERSO_
.p2align 4, 0x90
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE11_Alloc_nodeC2ERSO_:
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE11_Alloc_nodeC2ERSO___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	movq %r15, -32(%rbp)
	# LowerAlloca(8942:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %rbx
	# LowerAlloca(8943:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %rcx
	# LowerStore(8944:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rbx)
	# LowerStore(8945:3).9: mov ptr %rsi, (^4)
	movq %rsi, (%rcx)
	# LowerLoad(8946:3).2: (^3) into ptr ^5
	movq (%rbx), %rax
	# tt = Pointer, type = %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Alloc_node"
	# LowerGetelementptr(8947:3): struct-type: ptr ^5 -> ^6, indices=0,0
	# LowerGetelementptr(8947:3): type of ^6 is ptr*
	# LowerLoad(8948:3).2: (^4) into ptr ^7
	# Fixing source-to-dest movq (%rcx), (%rax)
	movq (%rcx), %r15
	movq %r15, (%rax)
	# LowerStore(8949:3).9: mov ptr ^7, (^6)
	movq -32(%rbp), %r15
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt15_Rb_tree_header8_M_resetEv
.p2align 4, 0x90
_ZNSt15_Rb_tree_header8_M_resetEv:
	.___ZNSt15_Rb_tree_header8_M_resetEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(8921:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(8922:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(8923:3).2: (^2) into ptr ^3
	movq (%rax), %rcx
	# tt = Pointer, type = %"struct.std::_Rb_tree_header"
	# LowerGetelementptr(8924:3): struct-type: ptr ^3 -> ^4, indices=0,0
	movq %rcx, %rax
	# LowerGetelementptr(8924:3): type of ^4 is %"struct.std::_Rb_tree_node_base"*
	# tt = Pointer, type = %"struct.std::_Rb_tree_node_base"
	# LowerGetelementptr(8925:3): struct-type: ptr ^4 -> ^5, indices=0,1
	addq $8, %rax
	# LowerGetelementptr(8925:3): type of ^5 is ptr*
	# LowerStore(8926:3).3: mov $imm, (^5)
	movq $0, (%rax)
	# tt = Pointer, type = %"struct.std::_Rb_tree_header"
	# LowerGetelementptr(8927:3): struct-type: ptr ^3 -> ^6, indices=0,0
	movq %rcx, %rbx
	# LowerGetelementptr(8927:3): type of ^6 is %"struct.std::_Rb_tree_node_base"*
	# tt = Pointer, type = %"struct.std::_Rb_tree_header"
	# LowerGetelementptr(8928:3): struct-type: ptr ^3 -> ^7, indices=0,0
	movq %rcx, %rax
	# LowerGetelementptr(8928:3): type of ^7 is %"struct.std::_Rb_tree_node_base"*
	# tt = Pointer, type = %"struct.std::_Rb_tree_node_base"
	# LowerGetelementptr(8929:3): struct-type: ptr ^7 -> ^8, indices=0,2
	addq $16, %rax
	# LowerGetelementptr(8929:3): type of ^8 is ptr*
	# LowerStore(8930:3).9: mov %"struct.std::_Rb_tree_header"* ^6, (^8)
	movq %rbx, (%rax)
	# tt = Pointer, type = %"struct.std::_Rb_tree_header"
	# LowerGetelementptr(8931:3): struct-type: ptr ^3 -> ^9, indices=0,0
	movq %rcx, %rax
	# LowerGetelementptr(8931:3): type of ^9 is %"struct.std::_Rb_tree_node_base"*
	# tt = Pointer, type = %"struct.std::_Rb_tree_header"
	# LowerGetelementptr(8932:3): struct-type: ptr ^3 -> ^10, indices=0,0
	movq %rcx, %rbx
	# LowerGetelementptr(8932:3): type of ^10 is %"struct.std::_Rb_tree_node_base"*
	# tt = Pointer, type = %"struct.std::_Rb_tree_node_base"
	# LowerGetelementptr(8933:3): struct-type: ptr ^10 -> ^11, indices=0,3
	addq $24, %rbx
	# LowerGetelementptr(8933:3): type of ^11 is ptr*
	# LowerStore(8934:3).9: mov %"struct.std::_Rb_tree_header"* ^9, (^11)
	movq %rax, (%rbx)
	# tt = Pointer, type = %"struct.std::_Rb_tree_header"
	# LowerGetelementptr(8935:3): struct-type: ptr ^3 -> ^12, indices=0,1
	movq %rcx, %rax
	addq $32, %rax
	# LowerGetelementptr(8935:3): type of ^12 is i64*
	# LowerStore(8936:3).3: mov $imm, (^12)
	movq $0, (%rax)
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt15_Rb_tree_headerC2Ev
.p2align 4, 0x90
_ZNSt15_Rb_tree_headerC2Ev:
	.___ZNSt15_Rb_tree_headerC2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(8908:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(8909:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(8910:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"struct.std::_Rb_tree_header"
	# LowerGetelementptr(8911:3): struct-type: ptr ^3 -> ^4, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(8911:3): type of ^4 is %"struct.std::_Rb_tree_node_base"*
	# tt = Pointer, type = %"struct.std::_Rb_tree_header"
	# LowerGetelementptr(8912:3): struct-type: ptr ^3 -> ^5, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(8912:3): type of ^5 is %"struct.std::_Rb_tree_node_base"*
	# tt = Pointer, type = %"struct.std::_Rb_tree_node_base"
	# LowerGetelementptr(8913:3): struct-type: ptr ^5 -> ^6, indices=0,0
	# LowerGetelementptr(8913:3): type of ^6 is i32*
	# LowerStore(8914:3).3: mov $imm, (^6)
	movl $0, (%rax)
	# SetupCalls(8915:3): move argument ptr nonnull dereferenceable(40) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt15_Rb_tree_header8_M_resetEv
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EEC2ERKSM_RKSN_
.p2align 4, 0x90
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EEC2ERKSM_RKSN_:
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EEC2ERKSM_RKSN___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(104 + 0, 16)
	subq $112, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -80(%rbp)
	movq %r12, -72(%rbp)
	movq %r13, -88(%rbp)
	movq %r15, -96(%rbp)
	# LowerAlloca(8773:3): size = 8, type = ptr*, var = ^4
	leaq -8(%rbp), %r8
	# LowerAlloca(8774:3): size = 8, type = ptr*, var = ^5
	leaq -16(%rbp), %r12
	# LowerAlloca(8775:3): size = 8, type = ptr*, var = ^6
	leaq -24(%rbp), %rbx
	# LowerAlloca(8776:3): size = 8, type = ptr*, var = ^7
	leaq -32(%rbp), %rcx
	# LowerAlloca(8777:3): size = 8, type = ptr*, var = ^8
	leaq -40(%rbp), %rax
	# LowerAlloca(8778:3): size = 8, type = ptr*, var = ^9
	leaq -48(%rbp), %r9
	# LowerAlloca(8779:3): size = 8, type = ptr*, var = ^10
	leaq -56(%rbp), %r10
	# LowerAlloca(8780:3): size = 1, type = %"class.std::allocator.10"*, var = ^11
	leaq -57(%rbp), %r13
	# LowerStore(8781:3).9: mov ptr %rdi, (^8)
	movq %rdi, (%rax)
	# LowerStore(8782:3).9: mov ptr %rsi, (^9)
	movq %rsi, (%r9)
	# LowerStore(8783:3).9: mov ptr %rdx, (^10)
	movq %rdx, (%r10)
	# LowerLoad(8784:3).2: (^8) into ptr ^12
	movq (%rax), %rdx
	# tt = Pointer, type = %"class.std::_Rb_tree"
	# LowerGetelementptr(8785:3): struct-type: ptr ^12 -> ^13, indices=0,0
	# LowerGetelementptr(8785:3): type of ^13 is %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Rb_tree_impl"*
	# LowerLoad(8786:3).2: (^9) into ptr ^14
	movq (%r9), %rax
	# LowerLoad(8787:3).2: (^10) into ptr ^15
	movq (%r10), %rsi
	# LowerStore(8788:3).9: mov %"class.std::allocator.10"* ^11, (^6)
	movq %r13, (%rbx)
	# LowerStore(8789:3).9: mov ptr ^15, (^7)
	movq %rsi, (%rcx)
	# LowerLoad(8790:3).2: (^6) into ptr ^16
	# Fixing source-to-dest movq (%rbx), (%r8)
	movq (%rbx), %r15
	movq %r15, (%r8)
	# LowerStore(8791:3).9: mov ptr ^16, (^4)
	# LowerLoad(8792:3).2: (^4) into ptr ^17
	movq (%r8), %rbx
	# SetupCalls(8793:3): move argument ptr nonnull dereferenceable(48) align 8 ^13
	# Fixed movzx with identical source and destination widths
	movq %rdx, %rdi
	# SetupCalls(8793:3): move argument ptr nonnull dereferenceable(1) align 1 ^14
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(8793:3): move argument ptr nonnull dereferenceable(1) align 1 ^11
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdx
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE13_Rb_tree_implISM_Lb1EEC2ERKSM_OSaISt13_Rb_tree_nodeISI_EE
	# LowerStore(8794:3).9: mov %"class.std::allocator.10"* ^11, (^5)
	movq %r13, (%r12)
	# LowerLoad(8795:3).2: (^5) into ptr ^18
	movq (%r12), %rax
	# SetupCalls(8796:3): move argument ptr nonnull dereferenceable(1) align 1 ^18
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEEED2Ev
	movq -96(%rbp), %r15
	movq -88(%rbp), %r13
	movq -72(%rbp), %r12
	movq -80(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10filesystem7__cxx118__detail17__effective_rangeIPKcEEDaRKT_
.p2align 4, 0x90
_ZNSt10filesystem7__cxx118__detail17__effective_rangeIPKcEEDaRKT_:
	.___ZNSt10filesystem7__cxx118__detail17__effective_rangeIPKcEEDaRKT___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(48 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -40(%rbp)
	movq %r12, -32(%rbp)
	# LowerAlloca(8753:3): size = 16, type = %"class.std::basic_string_view"*, var = ^2
	leaq -16(%rbp), %r12
	# LowerAlloca(8754:3): size = 8, type = ptr*, var = ^3
	leaq -24(%rbp), %rax
	# LowerStore(8755:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rax)
	# LowerLoad(8756:3).2: (^3) into ptr ^4
	movq (%rax), %rbx
	# LowerLoad(8757:3).2: (^4) into ptr ^5
	movq (%rbx), %rax
	# SetupCalls(8758:3): move argument ptr nonnull dereferenceable(16) align 8 ^2
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(8758:3): move argument ptr ^5
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNSt17basic_string_viewIcSt11char_traitsIcEEC2EPKc
	# LowerLoad(8759:3).2: (^2) into {i64, ptr} ^6
	# FinishMultireg: mov (%reg), <%pack...>
	movq (%r12), %rax
	movq 8(%r12), %rbx
	# LowerRet: two-register return
	movq %rax, %rax
	movq %rbx, %rdx
	movq -32(%rbp), %r12
	movq -40(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2ERKS7_
.p2align 4, 0x90
_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2ERKS7_:
	.___ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2ERKS7___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(8896:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %rbx
	# LowerAlloca(8897:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %rcx
	# LowerStore(8898:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rbx)
	# LowerStore(8899:3).9: mov ptr %rsi, (^4)
	movq %rsi, (%rcx)
	# LowerLoad(8900:3).2: (^3) into ptr ^5
	movq (%rbx), %rax
	# tt = Pointer, type = %"struct.std::_Rb_tree_key_compare"
	# LowerGetelementptr(8901:3): struct-type: ptr ^5 -> ^6, indices=0,0
	# LowerGetelementptr(8901:3): type of ^6 is %"struct.std::less"*
	# LowerLoad(8902:3).2: (^4) into ptr ^7
	movq (%rcx), %rax
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10filesystem7__cxx114pathC2IPKcS1_EERKT_NS1_6formatE
.p2align 4, 0x90
_ZNSt10filesystem7__cxx114pathC2IPKcS1_EERKT_NS1_6formatE:
	.___ZNSt10filesystem7__cxx114pathC2IPKcS1_EERKT_NS1_6formatE__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(264 + 0, 16)
	subq $272, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -152(%rbp)
	movq %r12, -168(%rbp)
	movq %r13, -192(%rbp)
	movq %r14, -200(%rbp)
	movq %r15, -136(%rbp)
	# LowerAlloca(8704:3): size = 8, type = ptr*, var = ^4
	# Fixing source-to-dest leaq -8(%rbp), -128(%rbp)
	leaq -8(%rbp), %r15
	movq %r15, -128(%rbp)
	# LowerAlloca(8705:3): size = 8, type = ptr*, var = ^5
	# Fixing source-to-dest leaq -16(%rbp), -104(%rbp)
	leaq -16(%rbp), %r15
	movq %r15, -104(%rbp)
	# LowerAlloca(8706:3): size = 8, type = ptr*, var = ^6
	leaq -24(%rbp), %rbx
	# LowerAlloca(8707:3): size = 8, type = ptr*, var = ^7
	leaq -32(%rbp), %rcx
	# LowerAlloca(8708:3): size = 8, type = ptr*, var = ^8
	leaq -40(%rbp), %rax
	# LowerAlloca(8709:3): size = 1, type = i8*, var = ^9
	leaq -41(%rbp), %r9
	# LowerAlloca(8710:3): size = 16, type = %"class.std::basic_string_view"*, var = ^10
	# Fixing source-to-dest leaq -64(%rbp), -120(%rbp)
	leaq -64(%rbp), %r15
	movq %r15, -120(%rbp)
	# LowerAlloca(8711:3): size = 16, type = %"class.std::basic_string_view"*, var = ^11
	leaq -80(%rbp), %r12
	# LowerAlloca(8712:3): size = 1, type = %"class.std::allocator.0"*, var = ^12
	# Fixing source-to-dest leaq -81(%rbp), -112(%rbp)
	leaq -81(%rbp), %r15
	movq %r15, -112(%rbp)
	# LowerStore(8713:3).9: mov ptr %rdi, (^7)
	movq %rdi, (%rcx)
	# LowerStore(8714:3).9: mov ptr %rsi, (^8)
	movq %rsi, (%rax)
	# LowerStore(8715:3).9: mov i8 %dl, (^9)
	movb %dl, (%r9)
	# LowerLoad(8716:3).2: (^7) into ptr ^13
	# Fixing source-to-dest movq (%rcx), -96(%rbp)
	movq (%rcx), %r15
	movq %r15, -96(%rbp)
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path"
	# LowerGetelementptr(8717:3): struct-type: ptr ^13 -> ^14, indices=0,0
	movq -96(%rbp), %r13
	# LowerGetelementptr(8717:3): type of ^14 is %"class.std::__cxx11::basic_string"*
	# LowerLoad(8718:3).2: (^8) into ptr ^15
	movq (%rax), %rcx
	# SetupCalls(8719:3): move argument ptr nonnull dereferenceable(8) align 8 ^15
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	callq _ZNSt10filesystem7__cxx118__detail17__effective_rangeIPKcEEDaRKT_
	# SetupCalls(8719:3): move 128-bit result from %rax and %rdx
	# Multireg move: <%hax %hdx> -> <%hr14 %hr15>
	movq %rax, %r14
	movq %rdx, %r15
	# tt = Pointer, type = {i64, ptr}
	# LowerGetelementptr(8720:3): struct-type: ptr ^11 -> ^17, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(8720:3): type of ^17 is i64*
	# LowerExtractvalue(8722:3)
	# PaddedStructs({i64, ptr} -> i64): move from pack ^16 ({i64, ptr}) to ^36 (opaque), index = 0
	movq %r14, %rdx
	movq %rdx, %rcx
	# LowerStore(8722:3).9: mov i64 ^18, (^17)
	movq %rcx, (%rax)
	# tt = Pointer, type = {i64, ptr}
	# LowerGetelementptr(8723:3): struct-type: ptr ^11 -> ^19, indices=0,1
	movq %r12, %rax
	addq $8, %rax
	# LowerGetelementptr(8723:3): type of ^19 is ptr*
	# LowerExtractvalue(8725:3)
	# PaddedStructs({i64, ptr} -> ptr): move from pack ^16 ({i64, ptr}) to ^37 (opaque), index = 1
	movq %r15, %rdx
	movq %rdx, %rcx
	# LowerStore(8725:3).9: mov ptr ^20, (^19)
	movq %rcx, (%rax)
	# tt = Pointer, type = {i64, ptr}
	# LowerGetelementptr(8726:3): struct-type: ptr ^11 -> ^21, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(8726:3): type of ^21 is i64*
	# LowerLoad(8727:3).2: (^21) into i64 ^22
	movq (%rax), %rcx
	# tt = Pointer, type = {i64, ptr}
	# LowerGetelementptr(8728:3): struct-type: ptr ^11 -> ^23, indices=0,1
	movq %r12, %rax
	addq $8, %rax
	# LowerGetelementptr(8728:3): type of ^23 is ptr*
	# LowerLoad(8729:3).2: (^23) into ptr ^24
	movq (%rax), %rdx
	# SetupCalls(8730:3): move argument i64 ^22
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(8730:3): move argument ptr ^24
	# Fixed movzx with identical source and destination widths
	movq %rdx, %rsi
	callq _ZNSt10filesystem7__cxx114path10_S_convertISt17basic_string_viewIcSt11char_traitsIcEEEEDaT_
	# SetupCalls(8730:3): move 128-bit result from %rax and %rdx
	# Multireg move: <%hax %hdx> -> <%hr12 %hr14>
	movq %rax, %r12
	movq %rdx, %r14
	# tt = Pointer, type = {i64, ptr}
	# LowerGetelementptr(8731:3): struct-type: ptr ^10 -> ^26, indices=0,0
	movq -120(%rbp), %rax
	# LowerGetelementptr(8731:3): type of ^26 is i64*
	# LowerExtractvalue(8733:3)
	# PaddedStructs({i64, ptr} -> i64): move from pack ^25 ({i64, ptr}) to ^38 (opaque), index = 0
	movq %r12, %rdx
	movq %rdx, %rcx
	# LowerStore(8733:3).9: mov i64 ^27, (^26)
	movq %rcx, (%rax)
	# tt = Pointer, type = {i64, ptr}
	# LowerGetelementptr(8734:3): struct-type: ptr ^10 -> ^28, indices=0,1
	movq -120(%rbp), %rax
	addq $8, %rax
	# LowerGetelementptr(8734:3): type of ^28 is ptr*
	# LowerExtractvalue(8736:3)
	# PaddedStructs({i64, ptr} -> ptr): move from pack ^25 ({i64, ptr}) to ^39 (opaque), index = 1
	movq %r14, %rdx
	movq %rdx, %rcx
	# LowerStore(8736:3).9: mov ptr ^29, (^28)
	movq %rcx, (%rax)
	# LowerStore(8737:3).9: mov %"class.std::allocator.0"* ^12, (^6)
	# Fixing source-to-dest movq -112(%rbp), (%rbx)
	movq -112(%rbp), %r15
	movq %r15, (%rbx)
	# LowerLoad(8738:3).2: (^6) into ptr ^30
	movq -128(%rbp), %rax
	# Fixing source-to-dest movq (%rbx), (%rax)
	movq (%rbx), %r15
	movq %r15, (%rax)
	# LowerStore(8739:3).9: mov ptr ^30, (^4)
	# LowerLoad(8740:3).2: (^4) into ptr ^31
	movq -128(%rbp), %rbx
	movq (%rbx), %rax
	# SetupCalls(8741:3): move argument ptr nonnull dereferenceable(32) align 8 ^14
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	# SetupCalls(8741:3): move argument ptr nonnull dereferenceable(16) align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq -120(%rbp), %rsi
	# SetupCalls(8741:3): move argument ptr nonnull dereferenceable(1) align 1 ^12
	# Fixed movzx with identical source and destination widths
	movq -112(%rbp), %rdx
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ISt17basic_string_viewIcS2_EvEERKT_RKS3_
	# LowerStore(8742:3).9: mov %"class.std::allocator.0"* ^12, (^5)
	movq -104(%rbp), %rax
	# Fixing source-to-dest movq -112(%rbp), (%rax)
	movq -112(%rbp), %r15
	movq %r15, (%rax)
	# LowerLoad(8743:3).2: (^5) into ptr ^32
	movq -104(%rbp), %rbx
	movq (%rbx), %rax
	# SetupCalls(8744:3): move argument ptr nonnull dereferenceable(1) align 1 ^32
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt15__new_allocatorIcED2Ev
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path"
	# LowerGetelementptr(8745:3): struct-type: ptr ^13 -> ^33, indices=0,1
	movq -96(%rbp), %rax
	addq $32, %rax
	# LowerGetelementptr(8745:3): type of ^33 is %"struct.std::filesystem::__cxx11::path::_List"*
	# SetupCalls(8746:3): move argument ptr nonnull dereferenceable(8) align 8 ^33
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt10filesystem7__cxx114path5_ListC1Ev@PLT
	# SetupCalls(8747:3): move argument ptr nonnull dereferenceable(40) align 8 ^13
	# Fixed movzx with identical source and destination widths
	movq -96(%rbp), %rdi
	callq _ZNSt10filesystem7__cxx114path14_M_split_cmptsEv@PLT
	movq -136(%rbp), %r15
	movq -200(%rbp), %r14
	movq -192(%rbp), %r13
	movq -168(%rbp), %r12
	movq -152(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EC2ESB_
.p2align 4, 0x90
_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EC2ESB_:
	.___ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EC2ESB___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(8694:3): size = 1, type = %class.anon*, var = ^2
	leaq -1(%rbp), %rax
	# LowerAlloca(8695:3): size = 8, type = ptr*, var = ^3
	leaq -16(%rbp), %rbx
	# LowerStore(8696:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rbx)
	# LowerLoad(8697:3).2: (^3) into ptr ^4
	movq (%rbx), %rax
	# tt = Pointer, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"
	# LowerGetelementptr(8698:3): struct-type: ptr ^4 -> ^5, indices=0,0
	# LowerGetelementptr(8698:3): type of ^5 is %class.anon*
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZN9__gnu_cxx5__ops14_Val_comp_iterIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EC2EONS0_15_Iter_comp_iterISB_EE
.p2align 4, 0x90
_ZN9__gnu_cxx5__ops14_Val_comp_iterIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EC2EONS0_15_Iter_comp_iterISB_EE:
	.___ZN9__gnu_cxx5__ops14_Val_comp_iterIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EC2EONS0_15_Iter_comp_iterISB_EE__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(8681:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %rbx
	# LowerAlloca(8682:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %rcx
	# LowerStore(8683:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rbx)
	# LowerStore(8684:3).9: mov ptr %rsi, (^4)
	movq %rsi, (%rcx)
	# LowerLoad(8685:3).2: (^3) into ptr ^5
	movq (%rbx), %rax
	# tt = Pointer, type = %"struct.__gnu_cxx::__ops::_Val_comp_iter"
	# LowerGetelementptr(8686:3): struct-type: ptr ^5 -> ^6, indices=0,0
	# LowerGetelementptr(8686:3): type of ^6 is %class.anon*
	# LowerLoad(8687:3).2: (^4) into ptr ^7
	movq (%rcx), %rax
	# tt = Pointer, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"
	# LowerGetelementptr(8688:3): struct-type: ptr ^7 -> ^8, indices=0,0
	# LowerGetelementptr(8688:3): type of ^8 is %class.anon*
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZN9__gnu_cxx5__ops14_Val_comp_iterIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EclI6LsItemNS_17__normal_iteratorIPSE_S2_ISE_SaISE_EEEEEEbRT_T0_
.p2align 4, 0x90
_ZN9__gnu_cxx5__ops14_Val_comp_iterIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EclI6LsItemNS_17__normal_iteratorIPSE_S2_ISE_SaISE_EEEEEEbRT_T0_:
	.___ZN9__gnu_cxx5__ops14_Val_comp_iterIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EclI6LsItemNS_17__normal_iteratorIPSE_S2_ISE_SaISE_EEEEEEbRT_T0___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(64 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	movq %r12, -48(%rbp)
	movq %r13, -56(%rbp)
	# LowerAlloca(8664:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^4
	leaq -8(%rbp), %r8
	# LowerAlloca(8665:3): size = 8, type = ptr*, var = ^5
	leaq -16(%rbp), %rcx
	# LowerAlloca(8666:3): size = 8, type = ptr*, var = ^6
	leaq -24(%rbp), %rax
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8667:3): struct-type: ptr ^4 -> ^7, indices=0,0
	movq %r8, %rbx
	# LowerGetelementptr(8667:3): type of ^7 is ptr*
	# LowerStore(8668:3).9: mov ptr %rdx, (^7)
	movq %rdx, (%rbx)
	# LowerStore(8669:3).9: mov ptr %rdi, (^5)
	movq %rdi, (%rcx)
	# LowerStore(8670:3).9: mov ptr %rsi, (^6)
	movq %rsi, (%rax)
	# LowerLoad(8671:3).2: (^5) into ptr ^8
	movq (%rcx), %rbx
	# tt = Pointer, type = %"struct.__gnu_cxx::__ops::_Val_comp_iter"
	# LowerGetelementptr(8672:3): struct-type: ptr ^8 -> ^9, indices=0,0
	# LowerGetelementptr(8672:3): type of ^9 is %class.anon*
	# LowerLoad(8673:3).2: (^6) into ptr ^10
	movq (%rax), %r12
	# SetupCalls(8674:3): move argument ptr nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %r8, %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEdeEv
	# SetupCalls(8674:3): move ptr result from %rax
	movq %rax, %r13
	# SetupCalls(8675:3): move argument ptr nonnull dereferenceable(1) align 1 ^9
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(8675:3): move argument ptr nonnull dereferenceable(33) align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq %r12, %rsi
	# SetupCalls(8675:3): move argument ptr nonnull dereferenceable(33) align 8 ^11
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdx
	callq _ZZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEENK3$_0clERK6LsItemSB_
	# SetupCalls(8675:3): move i1 result from %rax
	movb %al, %bl
	movb %bl, %al
	movq -56(%rbp), %r13
	movq -48(%rbp), %r12
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIP6LsItemS4_EET0_T_S6_S5_
.p2align 4, 0x90
_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIP6LsItemS4_EET0_T_S6_S5_:
	.___ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIP6LsItemS4_EET0_T_S6_S5___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(56 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -48(%rbp)
	movq %r12, -56(%rbp)
	movq %r13, -40(%rbp)
	# LowerAlloca(8620:3): size = 8, type = ptr*, var = ^4
	leaq -8(%rbp), %rcx
	# LowerAlloca(8621:3): size = 8, type = ptr*, var = ^5
	leaq -16(%rbp), %r13
	# LowerAlloca(8622:3): size = 8, type = ptr*, var = ^6
	leaq -24(%rbp), %rbx
	# LowerAlloca(8623:3): size = 8, type = i64*, var = ^7
	leaq -32(%rbp), %r12
	# LowerStore(8624:3).9: mov ptr %rdi, (^4)
	movq %rdi, (%rcx)
	# LowerStore(8625:3).9: mov ptr %rsi, (^5)
	movq %rsi, (%r13)
	# LowerStore(8626:3).9: mov ptr %rdx, (^6)
	movq %rdx, (%rbx)
	# LowerLoad(8627:3).2: (^5) into ptr ^8
	movq (%r13), %rax
	# LowerLoad(8628:3).2: (^4) into ptr ^9
	movq (%rcx), %rdx
	# LowerBasicConversion(8629:3): ptr ^8 -> i64 ^10
	movq %rax, %rcx
	# LowerBasicConversion(8630:3): ptr ^9 -> i64 ^11
	movq %rdx, %rsi
	# LowerMath(8631:3): ^10, ^11 into i64 ^12
	movq %rcx, %rax
	subq %rsi, %rax
	# LowerSdiv(8632:3): ^12, 40 into i64 ^13
	movq %rax, %rcx
	movq $0, %rdx
	movq %rcx, %rax
	movq $40, %rcx
	idivq %rcx
	movq %rax, (%r12)
	# LowerStore(8633:3).9: mov i64 ^13, (^7)
	.___ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIP6LsItemS4_EET0_T_S6_S5___M39:
	# LowerLoad(8637:3).2: (^7) into i64 ^15
	movq (%r12), %rax
	# LowerIcmp(8638:3): i64 ^15 vs. intlike 0
	cmpq $0, %rax
	setg %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIP6LsItemS4_EET0_T_S6_S5___M46
	jmp .___ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIP6LsItemS4_EET0_T_S6_S5___M98
	.___ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIP6LsItemS4_EET0_T_S6_S5___M46:
	# LowerLoad(8642:3).2: (^5) into ptr ^18
	movq (%r13), %rax
	# tt = Pointer, type = %struct.LsItem
	# LowerGetelementptr(8643:3): struct-type: ptr ^18 -> ^19, indices=-1
	addq $-40, %rax
	# LowerGetelementptr(8643:3): type of ^19 is %struct.LsItem*
	# LowerStore(8644:3).9: mov %struct.LsItem* ^19, (^5)
	movq %rax, (%r13)
	# LowerLoad(8645:3).2: (^6) into ptr ^20
	movq (%rbx), %rcx
	# tt = Pointer, type = %struct.LsItem
	# LowerGetelementptr(8646:3): struct-type: ptr ^20 -> ^21, indices=-1
	addq $-40, %rcx
	# LowerGetelementptr(8646:3): type of ^21 is %struct.LsItem*
	# LowerStore(8647:3).9: mov %struct.LsItem* ^21, (^6)
	movq %rcx, (%rbx)
	# SetupCalls(8648:3): move argument ptr nonnull dereferenceable(33) align 8 ^21
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(8648:3): move argument ptr nonnull dereferenceable(33) align 8 ^19
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZN6LsItemaSEOS_
	# SetupCalls(8648:3): move ptr result from %rax
	movq %rax, %rax
	# LowerLoad(8652:3).2: (^7) into i64 ^24
	movq (%r12), %rax
	# LowerMath(8653:3): ^24, -1 into i64 ^25
	addq $-1, %rax
	# LowerStore(8654:3).9: mov i64 ^25, (^7)
	movq %rax, (%r12)
	jmp .___ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIP6LsItemS4_EET0_T_S6_S5___M39
	.___ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIP6LsItemS4_EET0_T_S6_S5___M98:
	# LowerLoad(8658:3).2: (^6) into ptr ^27
	movq (%rbx), %rax
	movq -40(%rbp), %r13
	movq -56(%rbp), %r12
	movq -48(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt23__copy_move_backward_a2ILb1EP6LsItemS1_ET1_T0_S3_S2_
.p2align 4, 0x90
_ZSt23__copy_move_backward_a2ILb1EP6LsItemS1_ET1_T0_S3_S2_:
	.___ZSt23__copy_move_backward_a2ILb1EP6LsItemS1_ET1_T0_S3_S2___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(40 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	# LowerAlloca(8605:3): size = 8, type = ptr*, var = ^4
	leaq -8(%rbp), %rax
	# LowerAlloca(8606:3): size = 8, type = ptr*, var = ^5
	leaq -16(%rbp), %r8
	# LowerAlloca(8607:3): size = 8, type = ptr*, var = ^6
	leaq -24(%rbp), %rbx
	# LowerStore(8608:3).9: mov ptr %rdi, (^4)
	movq %rdi, (%rax)
	# LowerStore(8609:3).9: mov ptr %rsi, (^5)
	movq %rsi, (%r8)
	# LowerStore(8610:3).9: mov ptr %rdx, (^6)
	movq %rdx, (%rbx)
	# LowerLoad(8611:3).2: (^4) into ptr ^7
	movq (%rax), %rcx
	# LowerLoad(8612:3).2: (^5) into ptr ^8
	movq (%r8), %rax
	# LowerLoad(8613:3).2: (^6) into ptr ^9
	movq (%rbx), %r8
	# SetupCalls(8614:3): move argument ptr ^7
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(8614:3): move argument ptr ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(8614:3): move argument ptr ^9
	# Fixed movzx with identical source and destination widths
	movq %r8, %rdx
	callq _ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIP6LsItemS4_EET0_T_S6_S5_
	# SetupCalls(8614:3): move ptr result from %rax
	movq %rax, %rbx
	movq %rbx, %rax
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt12__niter_baseIP6LsItemSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE
.p2align 4, 0x90
_ZSt12__niter_baseIP6LsItemSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE:
	.___ZSt12__niter_baseIP6LsItemSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(8595:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^2
	leaq -8(%rbp), %rax
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8596:3): struct-type: ptr ^2 -> ^3, indices=0,0
	movq %rax, %rbx
	# LowerGetelementptr(8596:3): type of ^3 is ptr*
	# LowerStore(8597:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rbx)
	# SetupCalls(8598:3): move argument ptr nonnull dereferenceable(8) align 8 ^2
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEE4baseEv
	# SetupCalls(8598:3): move ptr result from %rax
	movq %rax, %rbx
	# LowerLoad(8599:3).2: (^4) into ptr ^5
	movq (%rbx), %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt23__copy_move_backward_a1ILb1EP6LsItemS1_ET1_T0_S3_S2_
.p2align 4, 0x90
_ZSt23__copy_move_backward_a1ILb1EP6LsItemS1_ET1_T0_S3_S2_:
	.___ZSt23__copy_move_backward_a1ILb1EP6LsItemS1_ET1_T0_S3_S2___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(40 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	# LowerAlloca(8580:3): size = 8, type = ptr*, var = ^4
	leaq -8(%rbp), %rax
	# LowerAlloca(8581:3): size = 8, type = ptr*, var = ^5
	leaq -16(%rbp), %r8
	# LowerAlloca(8582:3): size = 8, type = ptr*, var = ^6
	leaq -24(%rbp), %rbx
	# LowerStore(8583:3).9: mov ptr %rdi, (^4)
	movq %rdi, (%rax)
	# LowerStore(8584:3).9: mov ptr %rsi, (^5)
	movq %rsi, (%r8)
	# LowerStore(8585:3).9: mov ptr %rdx, (^6)
	movq %rdx, (%rbx)
	# LowerLoad(8586:3).2: (^4) into ptr ^7
	movq (%rax), %rcx
	# LowerLoad(8587:3).2: (^5) into ptr ^8
	movq (%r8), %rax
	# LowerLoad(8588:3).2: (^6) into ptr ^9
	movq (%rbx), %r8
	# SetupCalls(8589:3): move argument ptr ^7
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(8589:3): move argument ptr ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(8589:3): move argument ptr ^9
	# Fixed movzx with identical source and destination widths
	movq %r8, %rdx
	callq _ZSt23__copy_move_backward_a2ILb1EP6LsItemS1_ET1_T0_S3_S2_
	# SetupCalls(8589:3): move ptr result from %rax
	movq %rax, %rbx
	movq %rbx, %rax
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEEET_S8_
.p2align 4, 0x90
_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEEET_S8_:
	.___ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEEET_S8___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(8542:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^2
	leaq -8(%rbp), %rbx
	# LowerAlloca(8543:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^3
	leaq -16(%rbp), %rax
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8544:3): struct-type: ptr ^3 -> ^4, indices=0,0
	movq %rax, %rcx
	# LowerGetelementptr(8544:3): type of ^4 is ptr*
	# LowerStore(8545:3).9: mov ptr %rdi, (^4)
	movq %rdi, (%rcx)
	# SetupCalls(8546:3): move argument ptr align 8 ^2
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(8546:3): move argument ptr align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(8546:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8547:3): struct-type: ptr ^2 -> ^5, indices=0,0
	movq %rbx, %rcx
	# LowerGetelementptr(8547:3): type of ^5 is ptr*
	# LowerLoad(8548:3).2: (^5) into ptr ^6
	movq (%rcx), %rax
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE14_M_lower_boundEPSt13_Rb_tree_nodeISI_EPSt18_Rb_tree_node_baseRS7_
.p2align 4, 0x90
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE14_M_lower_boundEPSt13_Rb_tree_nodeISI_EPSt18_Rb_tree_node_baseRS7_:
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE14_M_lower_boundEPSt13_Rb_tree_nodeISI_EPSt18_Rb_tree_node_baseRS7___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(160 + 0, 16)
	subq $160, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -72(%rbp)
	movq %r12, -96(%rbp)
	movq %r13, -104(%rbp)
	movq %r14, -112(%rbp)
	movq %r15, -64(%rbp)
	# LowerAlloca(10027:3): size = 8, type = %"struct.std::_Rb_tree_iterator"*, var = ^5
	# Fixing source-to-dest leaq -8(%rbp), -48(%rbp)
	leaq -8(%rbp), %r15
	movq %r15, -48(%rbp)
	# LowerAlloca(10028:3): size = 8, type = ptr*, var = ^6
	leaq -16(%rbp), %rax
	# LowerAlloca(10029:3): size = 8, type = ptr*, var = ^7
	# Fixing source-to-dest leaq -24(%rbp), -56(%rbp)
	leaq -24(%rbp), %r15
	movq %r15, -56(%rbp)
	# LowerAlloca(10030:3): size = 8, type = ptr*, var = ^8
	leaq -32(%rbp), %rbx
	# LowerAlloca(10031:3): size = 8, type = ptr*, var = ^9
	leaq -40(%rbp), %r12
	# LowerStore(10032:3).9: mov ptr %rdi, (^6)
	movq %rdi, (%rax)
	# LowerStore(10033:3).9: mov ptr %rsi, (^7)
	movq -56(%rbp), %rdi
	movq %rsi, (%rdi)
	# LowerStore(10034:3).9: mov ptr %rdx, (^8)
	movq %rdx, (%rbx)
	# LowerStore(10035:3).9: mov ptr %rcx, (^9)
	movq %rcx, (%r12)
	# LowerLoad(10036:3).2: (^6) into ptr ^10
	movq (%rax), %r13
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE14_M_lower_boundEPSt13_Rb_tree_nodeISI_EPSt18_Rb_tree_node_baseRS7___M21:
	# LowerLoad(10040:3).2: (^7) into ptr ^12
	movq -56(%rbp), %rcx
	movq (%rcx), %rax
	# LowerIcmp(10041:3): ptr ^12 vs. intlike 0
	cmpq $0, %rax
	setne %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE14_M_lower_boundEPSt13_Rb_tree_nodeISI_EPSt18_Rb_tree_node_baseRS7___M28
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE14_M_lower_boundEPSt13_Rb_tree_nodeISI_EPSt18_Rb_tree_node_baseRS7___M152
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE14_M_lower_boundEPSt13_Rb_tree_nodeISI_EPSt18_Rb_tree_node_baseRS7___M28:
	# tt = Pointer, type = %"class.std::_Rb_tree"
	# LowerGetelementptr(10045:3): struct-type: ptr ^10 -> ^15, indices=0,0
	movq %r13, %r14
	# LowerGetelementptr(10045:3): type of ^15 is %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Rb_tree_impl"*
	# tt = Pointer, type = %"struct.std::_Rb_tree_key_compare"
	# LowerGetelementptr(10046:3): struct-type: ptr ^15 -> ^16, indices=0,0
	# LowerGetelementptr(10046:3): type of ^16 is %"struct.std::less"*
	# LowerLoad(10047:3).2: (^7) into ptr ^17
	movq -56(%rbp), %rax
	movq (%rax), %rcx
	# SetupCalls(10048:3): move argument ptr ^17
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE6_S_keyEPKSt13_Rb_tree_nodeISI_E
	# SetupCalls(10048:3): move ptr result from %rax
	movq %rax, %r15
	# LowerLoad(10049:3).2: (^9) into ptr ^19
	movq (%r12), %rax
	# SetupCalls(10050:3): move argument ptr nonnull dereferenceable(1) align 1 ^16
	# Fixed movzx with identical source and destination widths
	movq %r14, %rdi
	# SetupCalls(10050:3): move argument ptr nonnull dereferenceable(32) align 8 ^18
	# Fixed movzx with identical source and destination widths
	movq %r15, %rsi
	# SetupCalls(10050:3): move argument ptr nonnull dereferenceable(32) align 8 ^19
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdx
	callq _ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_
	# SetupCalls(10050:3): move i1 result from %rax
	movb %al, %r14b
	cmpb $0, %r14b
	jne .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE14_M_lower_boundEPSt13_Rb_tree_nodeISI_EPSt18_Rb_tree_node_baseRS7___M123
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE14_M_lower_boundEPSt13_Rb_tree_nodeISI_EPSt18_Rb_tree_node_baseRS7___M91:
	# LowerLoad(10054:3).2: (^7) into ptr ^22
	movq -56(%rbp), %rax
	# Fixing source-to-dest movq (%rax), (%rbx)
	movq (%rax), %r15
	movq %r15, (%rbx)
	# LowerStore(10055:3).9: mov ptr ^22, (^8)
	# LowerLoad(10056:3).2: (^7) into ptr ^23
	movq -56(%rbp), %rcx
	movq (%rcx), %rax
	# SetupCalls(10057:3): move argument ptr ^23
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE7_S_leftEPSt18_Rb_tree_node_base
	# SetupCalls(10057:3): move ptr result from %rax
	movq %rax, %r14
	# LowerStore(10058:3).9: mov ptr ^24, (^7)
	movq -56(%rbp), %rax
	movq %r14, (%rax)
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE14_M_lower_boundEPSt13_Rb_tree_nodeISI_EPSt18_Rb_tree_node_baseRS7___M151
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE14_M_lower_boundEPSt13_Rb_tree_nodeISI_EPSt18_Rb_tree_node_baseRS7___M123:
	# LowerLoad(10062:3).2: (^7) into ptr ^26
	movq -56(%rbp), %rcx
	movq (%rcx), %rax
	# SetupCalls(10063:3): move argument ptr ^26
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE8_S_rightEPSt18_Rb_tree_node_base
	# SetupCalls(10063:3): move ptr result from %rax
	movq %rax, %r14
	# LowerStore(10064:3).9: mov ptr ^27, (^7)
	movq -56(%rbp), %rax
	movq %r14, (%rax)
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE14_M_lower_boundEPSt13_Rb_tree_nodeISI_EPSt18_Rb_tree_node_baseRS7___M151:
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE14_M_lower_boundEPSt13_Rb_tree_nodeISI_EPSt18_Rb_tree_node_baseRS7___M21
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE14_M_lower_boundEPSt13_Rb_tree_nodeISI_EPSt18_Rb_tree_node_baseRS7___M152:
	# LowerLoad(10071:3).2: (^8) into ptr ^30
	movq (%rbx), %rax
	# SetupCalls(10072:3): move argument ptr nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq -48(%rbp), %rdi
	# SetupCalls(10072:3): move argument ptr ^30
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEEC2EPSt18_Rb_tree_node_base
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(10073:3): struct-type: ptr ^5 -> ^31, indices=0,0
	movq -48(%rbp), %rax
	# LowerGetelementptr(10073:3): type of ^31 is ptr*
	# LowerLoad(10074:3).2: (^31) into ptr ^32
	movq (%rax), %rbx
	movq %rbx, %rax
	movq -64(%rbp), %r15
	movq -112(%rbp), %r14
	movq -104(%rbp), %r13
	movq -96(%rbp), %r12
	movq -72(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEES7_ET1_T0_S9_S8_
.p2align 4, 0x90
_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEES7_ET1_T0_S9_S8_:
	.___ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEES7_ET1_T0_S9_S8___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(208 + 0, 16)
	subq $208, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -112(%rbp)
	movq %r12, -120(%rbp)
	movq %r13, -104(%rbp)
	movq %r14, -136(%rbp)
	movq %r15, -96(%rbp)
	# LowerAlloca(8502:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^4
	# Fixing source-to-dest leaq -8(%rbp), -72(%rbp)
	leaq -8(%rbp), %r15
	movq %r15, -72(%rbp)
	# LowerAlloca(8503:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^5
	leaq -16(%rbp), %r13
	# LowerAlloca(8504:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^6
	leaq -24(%rbp), %rbx
	# LowerAlloca(8505:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^7
	leaq -32(%rbp), %r12
	# LowerAlloca(8506:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^8
	# Fixing source-to-dest leaq -40(%rbp), -80(%rbp)
	leaq -40(%rbp), %r15
	movq %r15, -80(%rbp)
	# LowerAlloca(8507:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^9
	leaq -48(%rbp), %r14
	# LowerAlloca(8508:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^10
	leaq -56(%rbp), %r15
	# LowerAlloca(8509:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^11
	# Fixing source-to-dest leaq -64(%rbp), -88(%rbp)
	pushq %r15
	leaq -64(%rbp), %r15
	movq %r15, -88(%rbp)
	popq %r15
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8510:3): struct-type: ptr ^5 -> ^12, indices=0,0
	movq %r13, %rax
	# LowerGetelementptr(8510:3): type of ^12 is ptr*
	# LowerStore(8511:3).9: mov ptr %rdi, (^12)
	movq %rdi, (%rax)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8512:3): struct-type: ptr ^6 -> ^13, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(8512:3): type of ^13 is ptr*
	# LowerStore(8513:3).9: mov ptr %rsi, (^13)
	movq %rsi, (%rax)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8514:3): struct-type: ptr ^7 -> ^14, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(8514:3): type of ^14 is ptr*
	# LowerStore(8515:3).9: mov ptr %rdx, (^14)
	movq %rdx, (%rax)
	# SetupCalls(8516:3): move argument ptr align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq -80(%rbp), %rdi
	# SetupCalls(8516:3): move argument ptr align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq %r12, %rsi
	# SetupCalls(8516:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# SetupCalls(8517:3): move argument ptr align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq %r14, %rdi
	# SetupCalls(8517:3): move argument ptr align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r13, %rsi
	# SetupCalls(8517:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8518:3): struct-type: ptr ^9 -> ^15, indices=0,0
	movq %r14, %rax
	# LowerGetelementptr(8518:3): type of ^15 is ptr*
	# LowerLoad(8519:3).2: (^15) into ptr ^16
	movq (%rax), %rcx
	# SetupCalls(8520:3): move argument ptr ^16
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	callq _ZSt12__niter_baseIP6LsItemSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE
	# SetupCalls(8520:3): move ptr result from %rax
	movq %rax, %r13
	# SetupCalls(8521:3): move argument ptr align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq %r15, %rdi
	# SetupCalls(8521:3): move argument ptr align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(8521:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8522:3): struct-type: ptr ^10 -> ^18, indices=0,0
	movq %r15, %rbx
	# LowerGetelementptr(8522:3): type of ^18 is ptr*
	# LowerLoad(8523:3).2: (^18) into ptr ^19
	movq (%rbx), %rax
	# SetupCalls(8524:3): move argument ptr ^19
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZSt12__niter_baseIP6LsItemSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE
	# SetupCalls(8524:3): move ptr result from %rax
	movq %rax, %rbx
	# SetupCalls(8525:3): move argument ptr align 8 ^11
	# Fixed movzx with identical source and destination widths
	movq -88(%rbp), %rdi
	# SetupCalls(8525:3): move argument ptr align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq %r12, %rsi
	# SetupCalls(8525:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8526:3): struct-type: ptr ^11 -> ^21, indices=0,0
	movq -88(%rbp), %rax
	# LowerGetelementptr(8526:3): type of ^21 is ptr*
	# LowerLoad(8527:3).2: (^21) into ptr ^22
	movq (%rax), %rcx
	# SetupCalls(8528:3): move argument ptr ^22
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	callq _ZSt12__niter_baseIP6LsItemSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE
	# SetupCalls(8528:3): move ptr result from %rax
	movq %rax, %r12
	# SetupCalls(8529:3): move argument ptr ^17
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	# SetupCalls(8529:3): move argument ptr ^20
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(8529:3): move argument ptr ^23
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdx
	callq _ZSt23__copy_move_backward_a1ILb1EP6LsItemS1_ET1_T0_S3_S2_
	# SetupCalls(8529:3): move ptr result from %rax
	movq %rax, %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8530:3): struct-type: ptr ^8 -> ^25, indices=0,0
	movq -80(%rbp), %rcx
	# LowerGetelementptr(8530:3): type of ^25 is ptr*
	# LowerLoad(8531:3).2: (^25) into ptr ^26
	movq (%rcx), %rax
	# SetupCalls(8532:3): move argument ptr ^26
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(8532:3): move argument ptr ^24
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEES3_ET_S8_T0_
	# SetupCalls(8532:3): move ptr result from %rax
	movq %rax, %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8533:3): struct-type: ptr ^4 -> ^28, indices=0,0
	movq -72(%rbp), %rax
	# LowerGetelementptr(8533:3): type of ^28 is ptr*
	# LowerStore(8534:3).9: mov ptr ^27, (^28)
	movq %rbx, (%rax)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8535:3): struct-type: ptr ^4 -> ^29, indices=0,0
	movq -72(%rbp), %rbx
	# LowerGetelementptr(8535:3): type of ^29 is ptr*
	# LowerLoad(8536:3).2: (^29) into ptr ^30
	movq (%rbx), %rax
	movq -96(%rbp), %r15
	movq -136(%rbp), %r14
	movq -104(%rbp), %r13
	movq -120(%rbp), %r12
	movq -112(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZN9__gnu_cxx5__ops15__val_comp_iterIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterISD_EE
.p2align 4, 0x90
_ZN9__gnu_cxx5__ops15__val_comp_iterIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterISD_EE:
	.___ZN9__gnu_cxx5__ops15__val_comp_iterIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterISD_EE__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(8494:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Val_comp_iter"*, var = ^1
	leaq -1(%rbp), %rbx
	# LowerAlloca(8495:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, var = ^2
	leaq -2(%rbp), %rax
	# SetupCalls(8496:3): move argument ptr nonnull dereferenceable(1) align 1 ^1
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(8496:3): move argument ptr nonnull dereferenceable(1) align 1 ^2
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZN9__gnu_cxx5__ops14_Val_comp_iterIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EC2EONS0_15_Iter_comp_iterISB_EE
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops14_Val_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_
.p2align 4, 0x90
_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops14_Val_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_:
	.___ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops14_Val_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(176 + 0, 16)
	subq $176, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -136(%rbp)
	movq %r12, -128(%rbp)
	movq %r13, -120(%rbp)
	movq %r14, -104(%rbp)
	movq %r15, -96(%rbp)
	# LowerAlloca(8457:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^2
	# Fixing source-to-dest leaq -8(%rbp), -88(%rbp)
	leaq -8(%rbp), %r15
	movq %r15, -88(%rbp)
	# LowerAlloca(8458:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Val_comp_iter"*, var = ^3
	leaq -9(%rbp), %r14
	# LowerAlloca(8459:3): size = 40, type = %struct.LsItem*, var = ^4
	# Fixing source-to-dest leaq -56(%rbp), -80(%rbp)
	leaq -56(%rbp), %r15
	movq %r15, -80(%rbp)
	# LowerAlloca(8460:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^5
	leaq -64(%rbp), %r13
	# LowerAlloca(8461:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^6
	leaq -72(%rbp), %r12
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8462:3): struct-type: ptr ^2 -> ^7, indices=0,0
	movq -88(%rbp), %rax
	# LowerGetelementptr(8462:3): type of ^7 is ptr*
	# LowerStore(8463:3).9: mov ptr %rdi, (^7)
	movq %rdi, (%rax)
	# SetupCalls(8464:3): move argument ptr nonnull dereferenceable(8) align 8 ^2
	# Fixed movzx with identical source and destination widths
	movq -88(%rbp), %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEdeEv
	# SetupCalls(8464:3): move ptr result from %rax
	movq %rax, %rbx
	# SetupCalls(8465:3): move argument ptr nonnull dereferenceable(33) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -80(%rbp), %rdi
	# SetupCalls(8465:3): move argument ptr nonnull dereferenceable(33) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZN6LsItemC2EOS_
	# SetupCalls(8466:3): move argument ptr align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	# SetupCalls(8466:3): move argument ptr align 8 ^2
	# Fixed movzx with identical source and destination widths
	movq -88(%rbp), %rsi
	# SetupCalls(8466:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# SetupCalls(8467:3): move argument ptr nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	callq _ZN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEmmEv
	# SetupCalls(8467:3): move ptr result from %rax
	movq %rax, %rax
	.___ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops14_Val_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0___M111:
	# SetupCalls(8471:3): move argument ptr align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(8471:3): move argument ptr align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r13, %rsi
	# SetupCalls(8471:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8472:3): struct-type: ptr ^6 -> ^11, indices=0,0
	movq %r12, %rbx
	# LowerGetelementptr(8472:3): type of ^11 is ptr*
	# LowerLoad(8473:3).2: (^11) into ptr ^12
	movq (%rbx), %rax
	# SetupCalls(8474:3): move argument ptr nonnull dereferenceable(1) align 1 ^3
	# Fixed movzx with identical source and destination widths
	movq %r14, %rdi
	# SetupCalls(8474:3): move argument ptr nonnull dereferenceable(33) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -80(%rbp), %rsi
	# SetupCalls(8474:3): move argument ptr ^12
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdx
	callq _ZN9__gnu_cxx5__ops14_Val_comp_iterIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EclI6LsItemNS_17__normal_iteratorIPSE_S2_ISE_SaISE_EEEEEEbRT_T0_
	# SetupCalls(8474:3): move i1 result from %rax
	movb %al, %bl
	cmpb $0, %bl
	jne .___ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops14_Val_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0___M170
	jmp .___ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops14_Val_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0___M290
	.___ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops14_Val_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0___M170:
	# SetupCalls(8478:3): move argument ptr nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEdeEv
	# SetupCalls(8478:3): move ptr result from %rax
	movq %rax, %rbx
	# SetupCalls(8479:3): move argument ptr nonnull dereferenceable(8) align 8 ^2
	# Fixed movzx with identical source and destination widths
	movq -88(%rbp), %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEdeEv
	# SetupCalls(8479:3): move ptr result from %rax
	movq %rax, %r15
	# SetupCalls(8480:3): move argument ptr nonnull dereferenceable(33) align 8 ^16
	# Fixed movzx with identical source and destination widths
	movq %r15, %rdi
	# SetupCalls(8480:3): move argument ptr nonnull dereferenceable(33) align 8 ^15
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZN6LsItemaSEOS_
	# SetupCalls(8480:3): move ptr result from %rax
	movq %rax, %rax
	# SetupCalls(8481:3): move argument ptr align 8 ^2
	# Fixed movzx with identical source and destination widths
	movq -88(%rbp), %rdi
	# SetupCalls(8481:3): move argument ptr align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r13, %rsi
	# SetupCalls(8481:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# SetupCalls(8482:3): move argument ptr nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	callq _ZN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEmmEv
	# SetupCalls(8482:3): move ptr result from %rax
	movq %rax, %rax
	jmp .___ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops14_Val_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0___M111
	.___ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops14_Val_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0___M290:
	# SetupCalls(8486:3): move argument ptr nonnull dereferenceable(8) align 8 ^2
	# Fixed movzx with identical source and destination widths
	movq -88(%rbp), %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEdeEv
	# SetupCalls(8486:3): move ptr result from %rax
	movq %rax, %rbx
	# SetupCalls(8487:3): move argument ptr nonnull dereferenceable(33) align 8 ^20
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(8487:3): move argument ptr nonnull dereferenceable(33) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -80(%rbp), %rsi
	callq _ZN6LsItemaSEOS_
	# SetupCalls(8487:3): move ptr result from %rax
	movq %rax, %rax
	# SetupCalls(8488:3): move argument ptr nonnull dereferenceable(33) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -80(%rbp), %rdi
	callq _ZN6LsItemD2Ev
	movq -96(%rbp), %r15
	movq -104(%rbp), %r14
	movq -120(%rbp), %r13
	movq -128(%rbp), %r12
	movq -136(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_
.p2align 4, 0x90
_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_:
	.___ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(200 + 0, 16)
	subq $208, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -128(%rbp)
	movq %r12, -112(%rbp)
	movq %r13, -120(%rbp)
	movq %r14, -136(%rbp)
	movq %r15, -104(%rbp)
	# LowerAlloca(8413:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^4
	# Fixing source-to-dest leaq -8(%rbp), -80(%rbp)
	leaq -8(%rbp), %r15
	movq %r15, -80(%rbp)
	# LowerAlloca(8414:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^5
	leaq -16(%rbp), %rcx
	# LowerAlloca(8415:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^6
	leaq -24(%rbp), %r12
	# LowerAlloca(8416:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^7
	leaq -32(%rbp), %r13
	# LowerAlloca(8417:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^8
	leaq -40(%rbp), %rbx
	# LowerAlloca(8418:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^9
	leaq -48(%rbp), %r14
	# LowerAlloca(8419:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^10
	# Fixing source-to-dest leaq -56(%rbp), -96(%rbp)
	leaq -56(%rbp), %r15
	movq %r15, -96(%rbp)
	# LowerAlloca(8420:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^11
	leaq -64(%rbp), %r15
	# LowerAlloca(8421:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^12
	# Fixing source-to-dest leaq -72(%rbp), -88(%rbp)
	pushq %r15
	leaq -72(%rbp), %r15
	movq %r15, -88(%rbp)
	popq %r15
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8422:3): struct-type: ptr ^5 -> ^13, indices=0,0
	movq %rcx, %rax
	# LowerGetelementptr(8422:3): type of ^13 is ptr*
	# LowerStore(8423:3).9: mov ptr %rdi, (^13)
	movq %rdi, (%rax)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8424:3): struct-type: ptr ^6 -> ^14, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(8424:3): type of ^14 is ptr*
	# LowerStore(8425:3).9: mov ptr %rsi, (^14)
	movq %rsi, (%rax)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8426:3): struct-type: ptr ^7 -> ^15, indices=0,0
	movq %r13, %rax
	# LowerGetelementptr(8426:3): type of ^15 is ptr*
	# LowerStore(8427:3).9: mov ptr %rdx, (^15)
	movq %rdx, (%rax)
	# SetupCalls(8428:3): move argument ptr align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq %r14, %rdi
	# SetupCalls(8428:3): move argument ptr align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(8428:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8429:3): struct-type: ptr ^9 -> ^16, indices=0,0
	movq %r14, %rax
	# LowerGetelementptr(8429:3): type of ^16 is ptr*
	# LowerLoad(8430:3).2: (^16) into ptr ^17
	movq (%rax), %rcx
	# SetupCalls(8431:3): move argument ptr ^17
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	callq _ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEEET_S8_
	# SetupCalls(8431:3): move ptr result from %rax
	movq %rax, %r14
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8432:3): struct-type: ptr ^8 -> ^19, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(8432:3): type of ^19 is ptr*
	# LowerStore(8433:3).9: mov ptr ^18, (^19)
	movq %r14, (%rax)
	# SetupCalls(8434:3): move argument ptr align 8 ^11
	# Fixed movzx with identical source and destination widths
	movq %r15, %rdi
	# SetupCalls(8434:3): move argument ptr align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %r12, %rsi
	# SetupCalls(8434:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8435:3): struct-type: ptr ^11 -> ^20, indices=0,0
	movq %r15, %rcx
	# LowerGetelementptr(8435:3): type of ^20 is ptr*
	# LowerLoad(8436:3).2: (^20) into ptr ^21
	movq (%rcx), %rax
	# SetupCalls(8437:3): move argument ptr ^21
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEEET_S8_
	# SetupCalls(8437:3): move ptr result from %rax
	movq %rax, %r12
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8438:3): struct-type: ptr ^10 -> ^23, indices=0,0
	movq -96(%rbp), %rax
	# LowerGetelementptr(8438:3): type of ^23 is ptr*
	# LowerStore(8439:3).9: mov ptr ^22, (^23)
	movq %r12, (%rax)
	# SetupCalls(8440:3): move argument ptr align 8 ^12
	# Fixed movzx with identical source and destination widths
	movq -88(%rbp), %rdi
	# SetupCalls(8440:3): move argument ptr align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq %r13, %rsi
	# SetupCalls(8440:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8441:3): struct-type: ptr ^8 -> ^24, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(8441:3): type of ^24 is ptr*
	# LowerLoad(8442:3).2: (^24) into ptr ^25
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8443:3): struct-type: ptr ^10 -> ^26, indices=0,0
	movq -96(%rbp), %rax
	# LowerGetelementptr(8443:3): type of ^26 is ptr*
	# LowerLoad(8444:3).2: (^26) into ptr ^27
	movq (%rax), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8445:3): struct-type: ptr ^12 -> ^28, indices=0,0
	movq -88(%rbp), %rax
	# LowerGetelementptr(8445:3): type of ^28 is ptr*
	# LowerLoad(8446:3).2: (^28) into ptr ^29
	movq (%rax), %r8
	# SetupCalls(8447:3): move argument ptr ^25
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(8447:3): move argument ptr ^27
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(8447:3): move argument ptr ^29
	# Fixed movzx with identical source and destination widths
	movq %r8, %rdx
	callq _ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEES7_ET1_T0_S9_S8_
	# SetupCalls(8447:3): move ptr result from %rax
	movq %rax, %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8448:3): struct-type: ptr ^4 -> ^31, indices=0,0
	movq -80(%rbp), %rax
	# LowerGetelementptr(8448:3): type of ^31 is ptr*
	# LowerStore(8449:3).9: mov ptr ^30, (^31)
	movq %rbx, (%rax)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8450:3): struct-type: ptr ^4 -> ^32, indices=0,0
	movq -80(%rbp), %rax
	# LowerGetelementptr(8450:3): type of ^32 is ptr*
	# LowerLoad(8451:3).2: (^32) into ptr ^33
	movq (%rax), %rbx
	movq %rbx, %rax
	movq -104(%rbp), %r15
	movq -136(%rbp), %r14
	movq -120(%rbp), %r13
	movq -112(%rbp), %r12
	movq -128(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0_
.p2align 4, 0x90
_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0_:
	.___ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(104 + 0, 16)
	subq $112, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -80(%rbp)
	movq %r12, -88(%rbp)
	movq %r13, -72(%rbp)
	movq %r14, -96(%rbp)
	movq %r15, -64(%rbp)
	# LowerAlloca(8359:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^3
	leaq -8(%rbp), %rcx
	# LowerAlloca(8360:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^4
	# Fixing source-to-dest leaq -16(%rbp), -56(%rbp)
	leaq -16(%rbp), %r15
	movq %r15, -56(%rbp)
	# LowerAlloca(8361:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, var = ^5
	leaq -17(%rbp), %r13
	# LowerAlloca(8362:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^6
	leaq -32(%rbp), %rbx
	# LowerAlloca(8363:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^7
	leaq -40(%rbp), %r12
	# LowerAlloca(8364:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Val_comp_iter"*, var = ^8
	leaq -41(%rbp), %rax
	# LowerAlloca(8365:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, var = ^9
	leaq -42(%rbp), %r14
	# LowerAlloca(8366:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Val_comp_iter"*, var = ^10
	leaq -43(%rbp), %rax
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8367:3): struct-type: ptr ^3 -> ^11, indices=0,0
	movq %rcx, %rax
	# LowerGetelementptr(8367:3): type of ^11 is ptr*
	# LowerStore(8368:3).9: mov ptr %rdi, (^11)
	movq %rdi, (%rax)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8369:3): struct-type: ptr ^4 -> ^12, indices=0,0
	movq -56(%rbp), %rax
	# LowerGetelementptr(8369:3): type of ^12 is ptr*
	# LowerStore(8370:3).9: mov ptr %rsi, (^12)
	movq %rsi, (%rax)
	# SetupCalls(8371:3): move argument ptr align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(8371:3): move argument ptr align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(8371:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	.___ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M54:
	# SetupCalls(8375:3): move argument ptr nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(8375:3): move argument ptr nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -56(%rbp), %rsi
	callq _ZN9__gnu_cxxneIP6LsItemSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_
	# SetupCalls(8375:3): move i1 result from %rax
	movb %al, %r15b
	cmpb $0, %r15b
	jne .___ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M80
	jmp .___ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M201
	.___ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M80:
	# SetupCalls(8379:3): move argument ptr align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(8379:3): move argument ptr align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(8379:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# SetupCalls(8380:3): move argument ptr align 1 ^9
	# Fixed movzx with identical source and destination widths
	movq %r14, %rdi
	# SetupCalls(8380:3): move argument ptr align 1 ^5
	# Fixed movzx with identical source and destination widths
	movq %r13, %rsi
	# SetupCalls(8380:3): move argument i64 1
	movq $1, %rdx
	callq memcpy@PLT
	callq _ZN9__gnu_cxx5__ops15__val_comp_iterIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterISD_EE
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8382:3): struct-type: ptr ^7 -> ^16, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(8382:3): type of ^16 is ptr*
	# LowerLoad(8383:3).2: (^16) into ptr ^17
	movq (%rax), %rcx
	# SetupCalls(8384:3): move argument ptr ^17
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	callq _ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops14_Val_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_
	# SetupCalls(8388:3): move argument ptr nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEppEv
	# SetupCalls(8388:3): move ptr result from %rax
	movq %rax, %rax
	jmp .___ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M54
	.___ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M201:
	movq -64(%rbp), %r15
	movq -96(%rbp), %r14
	movq -72(%rbp), %r13
	movq -88(%rbp), %r12
	movq -80(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0_
.p2align 4, 0x90
_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0_:
	.___ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(376 + 0, 16)
	subq $384, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -288(%rbp)
	movq %r12, -296(%rbp)
	movq %r13, -320(%rbp)
	movq %r14, -304(%rbp)
	movq %r15, -216(%rbp)
	# LowerAlloca(8270:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^3
	# Fixing source-to-dest leaq -8(%rbp), -144(%rbp)
	leaq -8(%rbp), %r15
	movq %r15, -144(%rbp)
	# LowerAlloca(8271:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^4
	# Fixing source-to-dest leaq -16(%rbp), -152(%rbp)
	leaq -16(%rbp), %r15
	movq %r15, -152(%rbp)
	# LowerAlloca(8272:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, var = ^5
	# Fixing source-to-dest leaq -17(%rbp), -160(%rbp)
	leaq -17(%rbp), %r15
	movq %r15, -160(%rbp)
	# LowerAlloca(8273:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^6
	# Fixing source-to-dest leaq -32(%rbp), -168(%rbp)
	leaq -32(%rbp), %r15
	movq %r15, -168(%rbp)
	# LowerAlloca(8274:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^7
	# Fixing source-to-dest leaq -40(%rbp), -176(%rbp)
	leaq -40(%rbp), %r15
	movq %r15, -176(%rbp)
	# LowerAlloca(8275:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^8
	# Fixing source-to-dest leaq -48(%rbp), -184(%rbp)
	leaq -48(%rbp), %r15
	movq %r15, -184(%rbp)
	# LowerAlloca(8276:3): size = 40, type = %struct.LsItem*, var = ^9
	# Fixing source-to-dest leaq -88(%rbp), -192(%rbp)
	leaq -88(%rbp), %r15
	movq %r15, -192(%rbp)
	# LowerAlloca(8277:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^10
	# Fixing source-to-dest leaq -96(%rbp), -200(%rbp)
	leaq -96(%rbp), %r15
	movq %r15, -200(%rbp)
	# LowerAlloca(8278:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^11
	# Fixing source-to-dest leaq -104(%rbp), -208(%rbp)
	leaq -104(%rbp), %r15
	movq %r15, -208(%rbp)
	# LowerAlloca(8279:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^12
	leaq -112(%rbp), %rbx
	# LowerAlloca(8280:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^13
	leaq -120(%rbp), %r12
	# LowerAlloca(8281:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^14
	leaq -128(%rbp), %r14
	# LowerAlloca(8282:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Val_comp_iter"*, var = ^15
	leaq -129(%rbp), %rax
	# LowerAlloca(8283:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, var = ^16
	leaq -130(%rbp), %r15
	# LowerAlloca(8284:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Val_comp_iter"*, var = ^17
	leaq -131(%rbp), %rax
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8285:3): struct-type: ptr ^3 -> ^18, indices=0,0
	movq -144(%rbp), %rax
	# LowerGetelementptr(8285:3): type of ^18 is ptr*
	# LowerStore(8286:3).9: mov ptr %rdi, (^18)
	movq %rdi, (%rax)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8287:3): struct-type: ptr ^4 -> ^19, indices=0,0
	movq -152(%rbp), %rax
	# LowerGetelementptr(8287:3): type of ^19 is ptr*
	# LowerStore(8288:3).9: mov ptr %rsi, (^19)
	movq %rsi, (%rax)
	# SetupCalls(8289:3): move argument ptr nonnull dereferenceable(8) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq -144(%rbp), %rdi
	# SetupCalls(8289:3): move argument ptr nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -152(%rbp), %rsi
	callq _ZN9__gnu_cxxeqIP6LsItemSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_
	# SetupCalls(8289:3): move i1 result from %rax
	movb %al, %r13b
	cmpb $0, %r13b
	jne .___ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M69
	jmp .___ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M70
	.___ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M69:
	jmp .___ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M588
	.___ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M70:
	# SetupCalls(8296:3): move argument ptr nonnull dereferenceable(8) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq -144(%rbp), %rdi
	# SetupCalls(8296:3): move argument i64 1
	movq $1, %rsi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEplEl
	# SetupCalls(8296:3): move ptr result from %rax
	movq %rax, %r13
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8297:3): struct-type: ptr ^6 -> ^24, indices=0,0
	movq -168(%rbp), %rax
	# LowerGetelementptr(8297:3): type of ^24 is ptr*
	# LowerStore(8298:3).9: mov ptr ^23, (^24)
	movq %r13, (%rax)
	.___ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M102:
	# SetupCalls(8302:3): move argument ptr nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq -168(%rbp), %rdi
	# SetupCalls(8302:3): move argument ptr nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -152(%rbp), %rsi
	callq _ZN9__gnu_cxxneIP6LsItemSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_
	# SetupCalls(8302:3): move i1 result from %rax
	movb %al, %r13b
	cmpb $0, %r13b
	jne .___ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M128
	jmp .___ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M588
	.___ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M128:
	# SetupCalls(8306:3): move argument ptr align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq -176(%rbp), %rdi
	# SetupCalls(8306:3): move argument ptr align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq -168(%rbp), %rsi
	# SetupCalls(8306:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# SetupCalls(8307:3): move argument ptr align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq -184(%rbp), %rdi
	# SetupCalls(8307:3): move argument ptr align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq -144(%rbp), %rsi
	# SetupCalls(8307:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8308:3): struct-type: ptr ^7 -> ^28, indices=0,0
	movq -176(%rbp), %rax
	# LowerGetelementptr(8308:3): type of ^28 is ptr*
	# LowerLoad(8309:3).2: (^28) into ptr ^29
	movq (%rax), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8310:3): struct-type: ptr ^8 -> ^30, indices=0,0
	movq -184(%rbp), %rax
	# LowerGetelementptr(8310:3): type of ^30 is ptr*
	# LowerLoad(8311:3).2: (^30) into ptr ^31
	movq (%rax), %r8
	# SetupCalls(8312:3): move argument ptr nonnull dereferenceable(1) align 1 ^5
	# Fixed movzx with identical source and destination widths
	movq -160(%rbp), %rdi
	# SetupCalls(8312:3): move argument ptr ^29
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(8312:3): move argument ptr ^31
	# Fixed movzx with identical source and destination widths
	movq %r8, %rdx
	callq _ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EclINS_17__normal_iteratorIP6LsItemS2_ISF_SaISF_EEEESJ_EEbT_T0_
	# SetupCalls(8312:3): move i1 result from %rax
	movb %al, %r13b
	cmpb $0, %r13b
	jne .___ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M218
	jmp .___ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M466
	.___ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M218:
	# SetupCalls(8316:3): move argument ptr nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq -168(%rbp), %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEdeEv
	# SetupCalls(8316:3): move ptr result from %rax
	movq %rax, %r13
	# SetupCalls(8317:3): move argument ptr nonnull dereferenceable(33) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq -192(%rbp), %rdi
	# SetupCalls(8317:3): move argument ptr nonnull dereferenceable(33) align 8 ^34
	# Fixed movzx with identical source and destination widths
	movq %r13, %rsi
	callq _ZN6LsItemC2EOS_
	# SetupCalls(8318:3): move argument ptr align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq -200(%rbp), %rdi
	# SetupCalls(8318:3): move argument ptr align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq -144(%rbp), %rsi
	# SetupCalls(8318:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# SetupCalls(8319:3): move argument ptr align 8 ^11
	# Fixed movzx with identical source and destination widths
	movq -208(%rbp), %rdi
	# SetupCalls(8319:3): move argument ptr align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq -168(%rbp), %rsi
	# SetupCalls(8319:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# SetupCalls(8320:3): move argument ptr nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq -168(%rbp), %rdi
	# SetupCalls(8320:3): move argument i64 1
	movq $1, %rsi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEplEl
	# SetupCalls(8320:3): move ptr result from %rax
	movq %rax, %r13
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8321:3): struct-type: ptr ^12 -> ^36, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(8321:3): type of ^36 is ptr*
	# LowerStore(8322:3).9: mov ptr ^35, (^36)
	movq %r13, (%rax)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8323:3): struct-type: ptr ^10 -> ^37, indices=0,0
	movq -200(%rbp), %rax
	# LowerGetelementptr(8323:3): type of ^37 is ptr*
	# LowerLoad(8324:3).2: (^37) into ptr ^38
	movq (%rax), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8325:3): struct-type: ptr ^11 -> ^39, indices=0,0
	movq -208(%rbp), %rax
	# LowerGetelementptr(8325:3): type of ^39 is ptr*
	# LowerLoad(8326:3).2: (^39) into ptr ^40
	movq (%rax), %rdx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8327:3): struct-type: ptr ^12 -> ^41, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(8327:3): type of ^41 is ptr*
	# LowerLoad(8328:3).2: (^41) into ptr ^42
	movq (%rax), %r8
	# SetupCalls(8329:3): move argument ptr ^38
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(8329:3): move argument ptr ^40
	# Fixed movzx with identical source and destination widths
	movq %rdx, %rsi
	# SetupCalls(8329:3): move argument ptr ^42
	# Fixed movzx with identical source and destination widths
	movq %r8, %rdx
	callq _ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_
	# SetupCalls(8329:3): move ptr result from %rax
	movq %rax, %r13
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8330:3): struct-type: ptr ^13 -> ^44, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(8330:3): type of ^44 is ptr*
	# LowerStore(8331:3).9: mov ptr ^43, (^44)
	movq %r13, (%rax)
	# SetupCalls(8332:3): move argument ptr nonnull dereferenceable(8) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq -144(%rbp), %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEdeEv
	# SetupCalls(8332:3): move ptr result from %rax
	movq %rax, %r13
	# SetupCalls(8333:3): move argument ptr nonnull dereferenceable(33) align 8 ^45
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	# SetupCalls(8333:3): move argument ptr nonnull dereferenceable(33) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq -192(%rbp), %rsi
	callq _ZN6LsItemaSEOS_
	# SetupCalls(8333:3): move ptr result from %rax
	movq %rax, %rax
	# SetupCalls(8334:3): move argument ptr nonnull dereferenceable(33) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq -192(%rbp), %rdi
	callq _ZN6LsItemD2Ev
	jmp .___ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M563
	.___ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M466:
	# SetupCalls(8338:3): move argument ptr align 8 ^14
	# Fixed movzx with identical source and destination widths
	movq %r14, %rdi
	# SetupCalls(8338:3): move argument ptr align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq -168(%rbp), %rsi
	# SetupCalls(8338:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# SetupCalls(8339:3): move argument ptr align 1 ^16
	# Fixed movzx with identical source and destination widths
	movq %r15, %rdi
	# SetupCalls(8339:3): move argument ptr align 1 ^5
	# Fixed movzx with identical source and destination widths
	movq -160(%rbp), %rsi
	# SetupCalls(8339:3): move argument i64 1
	movq $1, %rdx
	callq memcpy@PLT
	callq _ZN9__gnu_cxx5__ops15__val_comp_iterIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterISD_EE
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8341:3): struct-type: ptr ^14 -> ^48, indices=0,0
	movq %r14, %rcx
	# LowerGetelementptr(8341:3): type of ^48 is ptr*
	# LowerLoad(8342:3).2: (^48) into ptr ^49
	movq (%rcx), %rax
	# SetupCalls(8343:3): move argument ptr ^49
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops14_Val_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_
	.___ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M563:
	# SetupCalls(8350:3): move argument ptr nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq -168(%rbp), %rdi
	callq _ZN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEppEv
	# SetupCalls(8350:3): move ptr result from %rax
	movq %rax, %rax
	jmp .___ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M102
	.___ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M588:
	movq -216(%rbp), %r15
	movq -304(%rbp), %r14
	movq -320(%rbp), %r13
	movq -296(%rbp), %r12
	movq -288(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt13__countl_zeroImEiT_
.p2align 4, 0x90
_ZSt13__countl_zeroImEiT_:
	.___ZSt13__countl_zeroImEiT___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(56 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -48(%rbp)
	# LowerAlloca(8231:3): size = 4, type = i32*, var = ^2
	leaq -4(%rbp), %rdx
	# LowerAlloca(8232:3): size = 8, type = i64*, var = ^3
	leaq -16(%rbp), %r8
	# LowerAlloca(8233:3): size = 4, type = i32*, var = ^4
	leaq -20(%rbp), %r9
	# LowerAlloca(8234:3): size = 4, type = i32*, var = ^5
	leaq -24(%rbp), %rsi
	# LowerAlloca(8235:3): size = 4, type = i32*, var = ^6
	leaq -28(%rbp), %rbx
	# LowerAlloca(8236:3): size = 4, type = i32*, var = ^7
	leaq -32(%rbp), %rcx
	# LowerAlloca(8237:3): size = 4, type = i32*, var = ^8
	leaq -36(%rbp), %rax
	# LowerStore(8238:3).9: mov i64 %rdi, (^3)
	movq %rdi, (%r8)
	# LowerStore(8239:3).3: mov $imm, (^4)
	movl $64, (%r9)
	# LowerLoad(8240:3).2: (^3) into i64 ^9
	movq (%r8), %rdi
	# LowerIcmp(8241:3): i64 ^9 vs. intlike 0
	cmpq $0, %rdi
	sete %dil
	andq $1, %rdi
	cmpb $0, %dil
	jne .___ZSt13__countl_zeroImEiT___M25
	jmp .___ZSt13__countl_zeroImEiT___M28
	.___ZSt13__countl_zeroImEiT___M25:
	# LowerStore(8245:3).3: mov $imm, (^2)
	movl $64, (%rdx)
	jmp .___ZSt13__countl_zeroImEiT___M47
	.___ZSt13__countl_zeroImEiT___M28:
	# LowerStore(8249:3).3: mov $imm, (^5)
	movl $64, (%rsi)
	# LowerStore(8250:3).3: mov $imm, (^6)
	movl $64, (%rbx)
	# LowerStore(8251:3).3: mov $imm, (^7)
	movl $32, (%rcx)
	# LowerStore(8252:3).3: mov $imm, (^8)
	movl $0, (%rax)
	# LowerLoad(8253:3).2: (^3) into i64 ^13
	movq (%r8), %rax
	lzcntq %rax, %rbx
	# LowerTrunc(8255:3): 64 to 32, move and clear upper bits
	movl %ebx, %eax
	# LowerMath(8256:3): ^15, 0 into i32 ^16
	subl $0, %eax
	# LowerStore(8257:3).9: mov i32 ^16, (^2)
	movl %eax, (%rdx)
	.___ZSt13__countl_zeroImEiT___M47:
	# LowerLoad(8261:3).2: (^2) into i32 ^18
	movl (%rdx), %eax
	movq -48(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt11__bit_widthImEiT_
.p2align 4, 0x90
_ZSt11__bit_widthImEiT_:
	.___ZSt11__bit_widthImEiT___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(40 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(8219:3): size = 8, type = i64*, var = ^2
	leaq -8(%rbp), %rax
	# LowerAlloca(8220:3): size = 4, type = i32*, var = ^3
	leaq -12(%rbp), %rbx
	# LowerStore(8221:3).9: mov i64 %rdi, (^2)
	movq %rdi, (%rax)
	# LowerStore(8222:3).3: mov $imm, (^3)
	movl $64, (%rbx)
	# LowerLoad(8223:3).2: (^2) into i64 ^4
	movq (%rax), %rbx
	# SetupCalls(8224:3): move argument i64 ^4
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZSt13__countl_zeroImEiT_
	# SetupCalls(8224:3): move i32 result from %rax
	movl %eax, %ebx
	# LowerMath(8225:3): 64, ^5 into i32 ^6
	movl $64, %eax
	subl %ebx, %eax
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt4swapI6LsItemENSt9enable_ifIXsr6__and_ISt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SD_
.p2align 4, 0x90
_ZSt4swapI6LsItemENSt9enable_ifIXsr6__and_ISt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SD_:
	.___ZSt4swapI6LsItemENSt9enable_ifIXsr6__and_ISt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SD___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(88 + 0, 16)
	subq $96, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -88(%rbp)
	movq %r12, -80(%rbp)
	movq %r13, -64(%rbp)
	movq %r14, -72(%rbp)
	# LowerAlloca(8201:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %r13
	# LowerAlloca(8202:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %r14
	# LowerAlloca(8203:3): size = 40, type = %struct.LsItem*, var = ^5
	leaq -56(%rbp), %r12
	# LowerStore(8204:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%r13)
	# LowerStore(8205:3).9: mov ptr %rsi, (^4)
	movq %rsi, (%r14)
	# LowerLoad(8206:3).2: (^3) into ptr ^6
	movq (%r13), %rax
	# SetupCalls(8207:3): move argument ptr nonnull dereferenceable(33) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(8207:3): move argument ptr nonnull dereferenceable(33) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZN6LsItemC2EOS_
	# LowerLoad(8208:3).2: (^4) into ptr ^7
	movq (%r14), %rbx
	# LowerLoad(8209:3).2: (^3) into ptr ^8
	movq (%r13), %rax
	# SetupCalls(8210:3): move argument ptr nonnull dereferenceable(33) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(8210:3): move argument ptr nonnull dereferenceable(33) align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZN6LsItemaSEOS_
	# SetupCalls(8210:3): move ptr result from %rax
	movq %rax, %rax
	# LowerLoad(8211:3).2: (^4) into ptr ^10
	movq (%r14), %rax
	# SetupCalls(8212:3): move argument ptr nonnull dereferenceable(33) align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(8212:3): move argument ptr nonnull dereferenceable(33) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r12, %rsi
	callq _ZN6LsItemaSEOS_
	# SetupCalls(8212:3): move ptr result from %rax
	movq %rax, %rax
	# SetupCalls(8213:3): move argument ptr nonnull dereferenceable(33) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	callq _ZN6LsItemD2Ev
	movq -72(%rbp), %r14
	movq -64(%rbp), %r13
	movq -80(%rbp), %r12
	movq -88(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEES7_EvT_T0_
.p2align 4, 0x90
_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEES7_EvT_T0_:
	.___ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEES7_EvT_T0___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(48 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	movq %r12, -40(%rbp)
	movq %r13, -32(%rbp)
	# LowerAlloca(8187:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^3
	leaq -8(%rbp), %rbx
	# LowerAlloca(8188:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^4
	leaq -16(%rbp), %r13
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8189:3): struct-type: ptr ^3 -> ^5, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(8189:3): type of ^5 is ptr*
	# LowerStore(8190:3).9: mov ptr %rdi, (^5)
	movq %rdi, (%rax)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8191:3): struct-type: ptr ^4 -> ^6, indices=0,0
	movq %r13, %rax
	# LowerGetelementptr(8191:3): type of ^6 is ptr*
	# LowerStore(8192:3).9: mov ptr %rsi, (^6)
	movq %rsi, (%rax)
	# SetupCalls(8193:3): move argument ptr nonnull dereferenceable(8) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEdeEv
	# SetupCalls(8193:3): move ptr result from %rax
	movq %rax, %r12
	# SetupCalls(8194:3): move argument ptr nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEdeEv
	# SetupCalls(8194:3): move ptr result from %rax
	movq %rax, %rbx
	# SetupCalls(8195:3): move argument ptr nonnull dereferenceable(33) align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(8195:3): move argument ptr nonnull dereferenceable(33) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZSt4swapI6LsItemENSt9enable_ifIXsr6__and_ISt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SD_
	movq -32(%rbp), %r13
	movq -40(%rbp), %r12
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEET_SK_SK_SK_T0_
.p2align 4, 0x90
_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEET_SK_SK_SK_T0_:
	.___ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEET_SK_SK_SK_T0___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(256 + 0, 16)
	subq $256, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -216(%rbp)
	movq %r12, -224(%rbp)
	movq %r13, -208(%rbp)
	movq %r14, -232(%rbp)
	movq %r15, -152(%rbp)
	# LowerAlloca(8109:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^4
	# Fixing source-to-dest leaq -8(%rbp), -96(%rbp)
	leaq -8(%rbp), %r15
	movq %r15, -96(%rbp)
	# LowerAlloca(8110:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^5
	# Fixing source-to-dest leaq -16(%rbp), -104(%rbp)
	leaq -16(%rbp), %r15
	movq %r15, -104(%rbp)
	# LowerAlloca(8111:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^6
	# Fixing source-to-dest leaq -24(%rbp), -112(%rbp)
	leaq -24(%rbp), %r15
	movq %r15, -112(%rbp)
	# LowerAlloca(8112:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^7
	# Fixing source-to-dest leaq -32(%rbp), -120(%rbp)
	leaq -32(%rbp), %r15
	movq %r15, -120(%rbp)
	# LowerAlloca(8113:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, var = ^8
	# Fixing source-to-dest leaq -33(%rbp), -128(%rbp)
	leaq -33(%rbp), %r15
	movq %r15, -128(%rbp)
	# LowerAlloca(8114:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^9
	# Fixing source-to-dest leaq -48(%rbp), -136(%rbp)
	leaq -48(%rbp), %r15
	movq %r15, -136(%rbp)
	# LowerAlloca(8115:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^10
	# Fixing source-to-dest leaq -56(%rbp), -144(%rbp)
	leaq -56(%rbp), %r15
	movq %r15, -144(%rbp)
	# LowerAlloca(8116:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^11
	leaq -64(%rbp), %r13
	# LowerAlloca(8117:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^12
	leaq -72(%rbp), %rbx
	# LowerAlloca(8118:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^13
	leaq -80(%rbp), %r12
	# LowerAlloca(8119:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^14
	leaq -88(%rbp), %r14
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8120:3): struct-type: ptr ^5 -> ^15, indices=0,0
	movq -104(%rbp), %rax
	# LowerGetelementptr(8120:3): type of ^15 is ptr*
	# LowerStore(8121:3).9: mov ptr %rdi, (^15)
	movq %rdi, (%rax)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8122:3): struct-type: ptr ^6 -> ^16, indices=0,0
	movq -112(%rbp), %rax
	# LowerGetelementptr(8122:3): type of ^16 is ptr*
	# LowerStore(8123:3).9: mov ptr %rsi, (^16)
	movq %rsi, (%rax)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8124:3): struct-type: ptr ^7 -> ^17, indices=0,0
	movq -120(%rbp), %rax
	# LowerGetelementptr(8124:3): type of ^17 is ptr*
	# LowerStore(8125:3).9: mov ptr %rdx, (^17)
	movq %rdx, (%rax)
	.___ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEET_SK_SK_SK_T0___M41:
	.___ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEET_SK_SK_SK_T0___M42:
	# SetupCalls(8132:3): move argument ptr align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq -136(%rbp), %rdi
	# SetupCalls(8132:3): move argument ptr align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq -104(%rbp), %rsi
	# SetupCalls(8132:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# SetupCalls(8133:3): move argument ptr align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq -144(%rbp), %rdi
	# SetupCalls(8133:3): move argument ptr align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq -120(%rbp), %rsi
	# SetupCalls(8133:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8134:3): struct-type: ptr ^9 -> ^20, indices=0,0
	movq -136(%rbp), %rcx
	# LowerGetelementptr(8134:3): type of ^20 is ptr*
	# LowerLoad(8135:3).2: (^20) into ptr ^21
	movq (%rcx), %rax
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8136:3): struct-type: ptr ^10 -> ^22, indices=0,0
	movq -144(%rbp), %rcx
	# LowerGetelementptr(8136:3): type of ^22 is ptr*
	# LowerLoad(8137:3).2: (^22) into ptr ^23
	movq (%rcx), %r8
	# SetupCalls(8138:3): move argument ptr nonnull dereferenceable(1) align 1 ^8
	# Fixed movzx with identical source and destination widths
	movq -128(%rbp), %rdi
	# SetupCalls(8138:3): move argument ptr ^21
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(8138:3): move argument ptr ^23
	# Fixed movzx with identical source and destination widths
	movq %r8, %rdx
	callq _ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EclINS_17__normal_iteratorIP6LsItemS2_ISF_SaISF_EEEESJ_EEbT_T0_
	# SetupCalls(8138:3): move i1 result from %rax
	movb %al, %r15b
	cmpb $0, %r15b
	jne .___ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEET_SK_SK_SK_T0___M132
	jmp .___ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEET_SK_SK_SK_T0___M156
	.___ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEET_SK_SK_SK_T0___M132:
	# SetupCalls(8142:3): move argument ptr nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq -104(%rbp), %rdi
	callq _ZN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEppEv
	# SetupCalls(8142:3): move ptr result from %rax
	movq %rax, %rax
	jmp .___ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEET_SK_SK_SK_T0___M42
	.___ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEET_SK_SK_SK_T0___M156:
	# SetupCalls(8146:3): move argument ptr nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq -112(%rbp), %rdi
	callq _ZN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEmmEv
	# SetupCalls(8146:3): move ptr result from %rax
	movq %rax, %rax
	.___ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEET_SK_SK_SK_T0___M180:
	# SetupCalls(8150:3): move argument ptr align 8 ^11
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	# SetupCalls(8150:3): move argument ptr align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq -120(%rbp), %rsi
	# SetupCalls(8150:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# SetupCalls(8151:3): move argument ptr align 8 ^12
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(8151:3): move argument ptr align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq -112(%rbp), %rsi
	# SetupCalls(8151:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8152:3): struct-type: ptr ^11 -> ^30, indices=0,0
	movq %r13, %rax
	# LowerGetelementptr(8152:3): type of ^30 is ptr*
	# LowerLoad(8153:3).2: (^30) into ptr ^31
	movq (%rax), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8154:3): struct-type: ptr ^12 -> ^32, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(8154:3): type of ^32 is ptr*
	# LowerLoad(8155:3).2: (^32) into ptr ^33
	movq (%rax), %r8
	# SetupCalls(8156:3): move argument ptr nonnull dereferenceable(1) align 1 ^8
	# Fixed movzx with identical source and destination widths
	movq -128(%rbp), %rdi
	# SetupCalls(8156:3): move argument ptr ^31
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(8156:3): move argument ptr ^33
	# Fixed movzx with identical source and destination widths
	movq %r8, %rdx
	callq _ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EclINS_17__normal_iteratorIP6LsItemS2_ISF_SaISF_EEEESJ_EEbT_T0_
	# SetupCalls(8156:3): move i1 result from %rax
	movb %al, %r15b
	cmpb $0, %r15b
	jne .___ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEET_SK_SK_SK_T0___M270
	jmp .___ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEET_SK_SK_SK_T0___M294
	.___ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEET_SK_SK_SK_T0___M270:
	# SetupCalls(8160:3): move argument ptr nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq -112(%rbp), %rdi
	callq _ZN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEmmEv
	# SetupCalls(8160:3): move ptr result from %rax
	movq %rax, %rax
	jmp .___ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEET_SK_SK_SK_T0___M180
	.___ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEET_SK_SK_SK_T0___M294:
	# SetupCalls(8164:3): move argument ptr nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq -104(%rbp), %rdi
	# SetupCalls(8164:3): move argument ptr nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq -112(%rbp), %rsi
	callq _ZN9__gnu_cxxltIP6LsItemSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_
	# SetupCalls(8164:3): move i1 result from %rax
	movb %al, %r15b
	cmpb $0, %r15b
	jne .___ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEET_SK_SK_SK_T0___M352
	.___ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEET_SK_SK_SK_T0___M320:
	# SetupCalls(8168:3): move argument ptr align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -96(%rbp), %rdi
	# SetupCalls(8168:3): move argument ptr align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq -104(%rbp), %rsi
	# SetupCalls(8168:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8169:3): struct-type: ptr ^4 -> ^40, indices=0,0
	movq -96(%rbp), %rax
	# LowerGetelementptr(8169:3): type of ^40 is ptr*
	# LowerLoad(8170:3).2: (^40) into ptr ^41
	movq (%rax), %rcx
	movq %rcx, %rax
	movq -152(%rbp), %r15
	movq -232(%rbp), %r14
	movq -208(%rbp), %r13
	movq -224(%rbp), %r12
	movq -216(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq
	.___ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEET_SK_SK_SK_T0___M352:
	# SetupCalls(8174:3): move argument ptr align 8 ^13
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(8174:3): move argument ptr align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq -104(%rbp), %rsi
	# SetupCalls(8174:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# SetupCalls(8175:3): move argument ptr align 8 ^14
	# Fixed movzx with identical source and destination widths
	movq %r14, %rdi
	# SetupCalls(8175:3): move argument ptr align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq -112(%rbp), %rsi
	# SetupCalls(8175:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8176:3): struct-type: ptr ^13 -> ^43, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(8176:3): type of ^43 is ptr*
	# LowerLoad(8177:3).2: (^43) into ptr ^44
	movq (%rax), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8178:3): struct-type: ptr ^14 -> ^45, indices=0,0
	movq %r14, %rdx
	# LowerGetelementptr(8178:3): type of ^45 is ptr*
	# LowerLoad(8179:3).2: (^45) into ptr ^46
	movq (%rdx), %rax
	# SetupCalls(8180:3): move argument ptr ^44
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(8180:3): move argument ptr ^46
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEES7_EvT_T0_
	# SetupCalls(8181:3): move argument ptr nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq -104(%rbp), %rdi
	callq _ZN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEppEv
	# SetupCalls(8181:3): move ptr result from %rax
	movq %rax, %rax
	jmp .___ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEET_SK_SK_SK_T0___M41

.section .text
.global _ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_SK_T0_
.p2align 4, 0x90
_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_SK_T0_:
	.___ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_SK_T0___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(744 + 0, 16)
	subq $752, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -456(%rbp)
	movq %r12, -440(%rbp)
	movq %r13, -448(%rbp)
	movq %r14, -536(%rbp)
	movq %r15, -400(%rbp)
	# LowerAlloca(7947:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^5
	# Fixing source-to-dest leaq -8(%rbp), -224(%rbp)
	leaq -8(%rbp), %r15
	movq %r15, -224(%rbp)
	# LowerAlloca(7948:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^6
	# Fixing source-to-dest leaq -16(%rbp), -240(%rbp)
	leaq -16(%rbp), %r15
	movq %r15, -240(%rbp)
	# LowerAlloca(7949:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^7
	# Fixing source-to-dest leaq -24(%rbp), -248(%rbp)
	leaq -24(%rbp), %r15
	movq %r15, -248(%rbp)
	# LowerAlloca(7950:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^8
	# Fixing source-to-dest leaq -32(%rbp), -232(%rbp)
	leaq -32(%rbp), %r15
	movq %r15, -232(%rbp)
	# LowerAlloca(7951:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, var = ^9
	# Fixing source-to-dest leaq -33(%rbp), -256(%rbp)
	leaq -33(%rbp), %r15
	movq %r15, -256(%rbp)
	# LowerAlloca(7952:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^10
	leaq -48(%rbp), %r12
	# LowerAlloca(7953:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^11
	leaq -56(%rbp), %r13
	# LowerAlloca(7954:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^12
	leaq -64(%rbp), %rbx
	# LowerAlloca(7955:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^13
	# Fixing source-to-dest leaq -72(%rbp), -392(%rbp)
	leaq -72(%rbp), %r15
	movq %r15, -392(%rbp)
	# LowerAlloca(7956:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^14
	# Fixing source-to-dest leaq -80(%rbp), -336(%rbp)
	leaq -80(%rbp), %r15
	movq %r15, -336(%rbp)
	# LowerAlloca(7957:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^15
	# Fixing source-to-dest leaq -88(%rbp), -328(%rbp)
	leaq -88(%rbp), %r15
	movq %r15, -328(%rbp)
	# LowerAlloca(7958:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^16
	# Fixing source-to-dest leaq -96(%rbp), -352(%rbp)
	leaq -96(%rbp), %r15
	movq %r15, -352(%rbp)
	# LowerAlloca(7959:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^17
	# Fixing source-to-dest leaq -104(%rbp), -344(%rbp)
	leaq -104(%rbp), %r15
	movq %r15, -344(%rbp)
	# LowerAlloca(7960:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^18
	# Fixing source-to-dest leaq -112(%rbp), -272(%rbp)
	leaq -112(%rbp), %r15
	movq %r15, -272(%rbp)
	# LowerAlloca(7961:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^19
	# Fixing source-to-dest leaq -120(%rbp), -264(%rbp)
	leaq -120(%rbp), %r15
	movq %r15, -264(%rbp)
	# LowerAlloca(7962:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^20
	# Fixing source-to-dest leaq -128(%rbp), -288(%rbp)
	leaq -128(%rbp), %r15
	movq %r15, -288(%rbp)
	# LowerAlloca(7963:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^21
	# Fixing source-to-dest leaq -136(%rbp), -280(%rbp)
	leaq -136(%rbp), %r15
	movq %r15, -280(%rbp)
	# LowerAlloca(7964:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^22
	leaq -144(%rbp), %r14
	# LowerAlloca(7965:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^23
	leaq -152(%rbp), %r15
	# LowerAlloca(7966:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^24
	# Fixing source-to-dest leaq -160(%rbp), -368(%rbp)
	pushq %r15
	leaq -160(%rbp), %r15
	movq %r15, -368(%rbp)
	popq %r15
	# LowerAlloca(7967:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^25
	# Fixing source-to-dest leaq -168(%rbp), -360(%rbp)
	pushq %r15
	leaq -168(%rbp), %r15
	movq %r15, -360(%rbp)
	popq %r15
	# LowerAlloca(7968:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^26
	# Fixing source-to-dest leaq -176(%rbp), -384(%rbp)
	pushq %r15
	leaq -176(%rbp), %r15
	movq %r15, -384(%rbp)
	popq %r15
	# LowerAlloca(7969:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^27
	# Fixing source-to-dest leaq -184(%rbp), -376(%rbp)
	pushq %r15
	leaq -184(%rbp), %r15
	movq %r15, -376(%rbp)
	popq %r15
	# LowerAlloca(7970:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^28
	# Fixing source-to-dest leaq -192(%rbp), -304(%rbp)
	pushq %r15
	leaq -192(%rbp), %r15
	movq %r15, -304(%rbp)
	popq %r15
	# LowerAlloca(7971:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^29
	# Fixing source-to-dest leaq -200(%rbp), -296(%rbp)
	pushq %r15
	leaq -200(%rbp), %r15
	movq %r15, -296(%rbp)
	popq %r15
	# LowerAlloca(7972:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^30
	# Fixing source-to-dest leaq -208(%rbp), -320(%rbp)
	pushq %r15
	leaq -208(%rbp), %r15
	movq %r15, -320(%rbp)
	popq %r15
	# LowerAlloca(7973:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^31
	# Fixing source-to-dest leaq -216(%rbp), -312(%rbp)
	pushq %r15
	leaq -216(%rbp), %r15
	movq %r15, -312(%rbp)
	popq %r15
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7974:3): struct-type: ptr ^5 -> ^32, indices=0,0
	movq -224(%rbp), %rax
	# LowerGetelementptr(7974:3): type of ^32 is ptr*
	# LowerStore(7975:3).9: mov ptr %rdi, (^32)
	movq %rdi, (%rax)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7976:3): struct-type: ptr ^6 -> ^33, indices=0,0
	movq -240(%rbp), %rax
	# LowerGetelementptr(7976:3): type of ^33 is ptr*
	# LowerStore(7977:3).9: mov ptr %rsi, (^33)
	movq %rsi, (%rax)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7978:3): struct-type: ptr ^7 -> ^34, indices=0,0
	movq -248(%rbp), %rax
	# LowerGetelementptr(7978:3): type of ^34 is ptr*
	# LowerStore(7979:3).9: mov ptr %rdx, (^34)
	movq %rdx, (%rax)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7980:3): struct-type: ptr ^8 -> ^35, indices=0,0
	movq -232(%rbp), %rax
	# LowerGetelementptr(7980:3): type of ^35 is ptr*
	# LowerStore(7981:3).9: mov ptr %rcx, (^35)
	movq %rcx, (%rax)
	# SetupCalls(7982:3): move argument ptr align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(7982:3): move argument ptr align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq -240(%rbp), %rsi
	# SetupCalls(7982:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# SetupCalls(7983:3): move argument ptr align 8 ^11
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	# SetupCalls(7983:3): move argument ptr align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq -248(%rbp), %rsi
	# SetupCalls(7983:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7984:3): struct-type: ptr ^10 -> ^36, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(7984:3): type of ^36 is ptr*
	# LowerLoad(7985:3).2: (^36) into ptr ^37
	movq (%rax), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7986:3): struct-type: ptr ^11 -> ^38, indices=0,0
	movq %r13, %rax
	# LowerGetelementptr(7986:3): type of ^38 is ptr*
	# LowerLoad(7987:3).2: (^38) into ptr ^39
	movq (%rax), %r8
	# SetupCalls(7988:3): move argument ptr nonnull dereferenceable(1) align 1 ^9
	# Fixed movzx with identical source and destination widths
	movq -256(%rbp), %rdi
	# SetupCalls(7988:3): move argument ptr ^37
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(7988:3): move argument ptr ^39
	# Fixed movzx with identical source and destination widths
	movq %r8, %rdx
	callq _ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EclINS_17__normal_iteratorIP6LsItemS2_ISF_SaISF_EEEESJ_EEbT_T0_
	# SetupCalls(7988:3): move i1 result from %rax
	movb %al, %r12b
	cmpb $0, %r12b
	jne .___ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_SK_T0___M170
	jmp .___ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_SK_T0___M610
	.___ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_SK_T0___M170:
	# SetupCalls(7992:3): move argument ptr align 8 ^12
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(7992:3): move argument ptr align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq -248(%rbp), %rsi
	# SetupCalls(7992:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# SetupCalls(7993:3): move argument ptr align 8 ^13
	# Fixed movzx with identical source and destination widths
	movq -392(%rbp), %rdi
	# SetupCalls(7993:3): move argument ptr align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq -232(%rbp), %rsi
	# SetupCalls(7993:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7994:3): struct-type: ptr ^12 -> ^42, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(7994:3): type of ^42 is ptr*
	# LowerLoad(7995:3).2: (^42) into ptr ^43
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7996:3): struct-type: ptr ^13 -> ^44, indices=0,0
	movq -392(%rbp), %rax
	# LowerGetelementptr(7996:3): type of ^44 is ptr*
	# LowerLoad(7997:3).2: (^44) into ptr ^45
	movq (%rax), %rcx
	# SetupCalls(7998:3): move argument ptr nonnull dereferenceable(1) align 1 ^9
	# Fixed movzx with identical source and destination widths
	movq -256(%rbp), %rdi
	# SetupCalls(7998:3): move argument ptr ^43
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(7998:3): move argument ptr ^45
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdx
	callq _ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EclINS_17__normal_iteratorIP6LsItemS2_ISF_SaISF_EEEESJ_EEbT_T0_
	# SetupCalls(7998:3): move i1 result from %rax
	movb %al, %bl
	cmpb $0, %bl
	jne .___ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_SK_T0___M260
	jmp .___ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_SK_T0___M346
	.___ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_SK_T0___M260:
	# SetupCalls(8002:3): move argument ptr align 8 ^14
	# Fixed movzx with identical source and destination widths
	movq -336(%rbp), %rdi
	# SetupCalls(8002:3): move argument ptr align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq -224(%rbp), %rsi
	# SetupCalls(8002:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# SetupCalls(8003:3): move argument ptr align 8 ^15
	# Fixed movzx with identical source and destination widths
	movq -328(%rbp), %rdi
	# SetupCalls(8003:3): move argument ptr align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq -248(%rbp), %rsi
	# SetupCalls(8003:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8004:3): struct-type: ptr ^14 -> ^48, indices=0,0
	movq -336(%rbp), %rbx
	# LowerGetelementptr(8004:3): type of ^48 is ptr*
	# LowerLoad(8005:3).2: (^48) into ptr ^49
	movq (%rbx), %rax
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8006:3): struct-type: ptr ^15 -> ^50, indices=0,0
	movq -328(%rbp), %rbx
	# LowerGetelementptr(8006:3): type of ^50 is ptr*
	# LowerLoad(8007:3).2: (^50) into ptr ^51
	movq (%rbx), %rcx
	# SetupCalls(8008:3): move argument ptr ^49
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(8008:3): move argument ptr ^51
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	callq _ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEES7_EvT_T0_
	jmp .___ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_SK_T0___M609
	.___ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_SK_T0___M346:
	# SetupCalls(8012:3): move argument ptr align 8 ^16
	# Fixed movzx with identical source and destination widths
	movq -352(%rbp), %rdi
	# SetupCalls(8012:3): move argument ptr align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq -240(%rbp), %rsi
	# SetupCalls(8012:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# SetupCalls(8013:3): move argument ptr align 8 ^17
	# Fixed movzx with identical source and destination widths
	movq -344(%rbp), %rdi
	# SetupCalls(8013:3): move argument ptr align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq -232(%rbp), %rsi
	# SetupCalls(8013:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8014:3): struct-type: ptr ^16 -> ^53, indices=0,0
	movq -352(%rbp), %rax
	# LowerGetelementptr(8014:3): type of ^53 is ptr*
	# LowerLoad(8015:3).2: (^53) into ptr ^54
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8016:3): struct-type: ptr ^17 -> ^55, indices=0,0
	movq -344(%rbp), %rax
	# LowerGetelementptr(8016:3): type of ^55 is ptr*
	# LowerLoad(8017:3).2: (^55) into ptr ^56
	movq (%rax), %rcx
	# SetupCalls(8018:3): move argument ptr nonnull dereferenceable(1) align 1 ^9
	# Fixed movzx with identical source and destination widths
	movq -256(%rbp), %rdi
	# SetupCalls(8018:3): move argument ptr ^54
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(8018:3): move argument ptr ^56
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdx
	callq _ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EclINS_17__normal_iteratorIP6LsItemS2_ISF_SaISF_EEEESJ_EEbT_T0_
	# SetupCalls(8018:3): move i1 result from %rax
	movb %al, %bl
	cmpb $0, %bl
	jne .___ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_SK_T0___M436
	jmp .___ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_SK_T0___M522
	.___ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_SK_T0___M436:
	# SetupCalls(8022:3): move argument ptr align 8 ^18
	# Fixed movzx with identical source and destination widths
	movq -272(%rbp), %rdi
	# SetupCalls(8022:3): move argument ptr align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq -224(%rbp), %rsi
	# SetupCalls(8022:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# SetupCalls(8023:3): move argument ptr align 8 ^19
	# Fixed movzx with identical source and destination widths
	movq -264(%rbp), %rdi
	# SetupCalls(8023:3): move argument ptr align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq -232(%rbp), %rsi
	# SetupCalls(8023:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8024:3): struct-type: ptr ^18 -> ^59, indices=0,0
	movq -272(%rbp), %rax
	# LowerGetelementptr(8024:3): type of ^59 is ptr*
	# LowerLoad(8025:3).2: (^59) into ptr ^60
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8026:3): struct-type: ptr ^19 -> ^61, indices=0,0
	movq -264(%rbp), %rax
	# LowerGetelementptr(8026:3): type of ^61 is ptr*
	# LowerLoad(8027:3).2: (^61) into ptr ^62
	movq (%rax), %rcx
	# SetupCalls(8028:3): move argument ptr ^60
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(8028:3): move argument ptr ^62
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	callq _ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEES7_EvT_T0_
	jmp .___ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_SK_T0___M608
	.___ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_SK_T0___M522:
	# SetupCalls(8032:3): move argument ptr align 8 ^20
	# Fixed movzx with identical source and destination widths
	movq -288(%rbp), %rdi
	# SetupCalls(8032:3): move argument ptr align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq -224(%rbp), %rsi
	# SetupCalls(8032:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# SetupCalls(8033:3): move argument ptr align 8 ^21
	# Fixed movzx with identical source and destination widths
	movq -280(%rbp), %rdi
	# SetupCalls(8033:3): move argument ptr align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq -240(%rbp), %rsi
	# SetupCalls(8033:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8034:3): struct-type: ptr ^20 -> ^64, indices=0,0
	movq -288(%rbp), %rax
	# LowerGetelementptr(8034:3): type of ^64 is ptr*
	# LowerLoad(8035:3).2: (^64) into ptr ^65
	movq (%rax), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8036:3): struct-type: ptr ^21 -> ^66, indices=0,0
	movq -280(%rbp), %rbx
	# LowerGetelementptr(8036:3): type of ^66 is ptr*
	# LowerLoad(8037:3).2: (^66) into ptr ^67
	movq (%rbx), %rax
	# SetupCalls(8038:3): move argument ptr ^65
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(8038:3): move argument ptr ^67
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEES7_EvT_T0_
	.___ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_SK_T0___M608:
	.___ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_SK_T0___M609:
	jmp .___ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_SK_T0___M1050
	.___ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_SK_T0___M610:
	# SetupCalls(8048:3): move argument ptr align 8 ^22
	# Fixed movzx with identical source and destination widths
	movq %r14, %rdi
	# SetupCalls(8048:3): move argument ptr align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq -240(%rbp), %rsi
	# SetupCalls(8048:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# SetupCalls(8049:3): move argument ptr align 8 ^23
	# Fixed movzx with identical source and destination widths
	movq %r15, %rdi
	# SetupCalls(8049:3): move argument ptr align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq -232(%rbp), %rsi
	# SetupCalls(8049:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8050:3): struct-type: ptr ^22 -> ^71, indices=0,0
	movq %r14, %rax
	# LowerGetelementptr(8050:3): type of ^71 is ptr*
	# LowerLoad(8051:3).2: (^71) into ptr ^72
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8052:3): struct-type: ptr ^23 -> ^73, indices=0,0
	movq %r15, %rax
	# LowerGetelementptr(8052:3): type of ^73 is ptr*
	# LowerLoad(8053:3).2: (^73) into ptr ^74
	movq (%rax), %rcx
	# SetupCalls(8054:3): move argument ptr nonnull dereferenceable(1) align 1 ^9
	# Fixed movzx with identical source and destination widths
	movq -256(%rbp), %rdi
	# SetupCalls(8054:3): move argument ptr ^72
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(8054:3): move argument ptr ^74
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdx
	callq _ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EclINS_17__normal_iteratorIP6LsItemS2_ISF_SaISF_EEEESJ_EEbT_T0_
	# SetupCalls(8054:3): move i1 result from %rax
	movb %al, %bl
	cmpb $0, %bl
	jne .___ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_SK_T0___M700
	jmp .___ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_SK_T0___M786
	.___ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_SK_T0___M700:
	# SetupCalls(8058:3): move argument ptr align 8 ^24
	# Fixed movzx with identical source and destination widths
	movq -368(%rbp), %rdi
	# SetupCalls(8058:3): move argument ptr align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq -224(%rbp), %rsi
	# SetupCalls(8058:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# SetupCalls(8059:3): move argument ptr align 8 ^25
	# Fixed movzx with identical source and destination widths
	movq -360(%rbp), %rdi
	# SetupCalls(8059:3): move argument ptr align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq -240(%rbp), %rsi
	# SetupCalls(8059:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8060:3): struct-type: ptr ^24 -> ^77, indices=0,0
	movq -368(%rbp), %rax
	# LowerGetelementptr(8060:3): type of ^77 is ptr*
	# LowerLoad(8061:3).2: (^77) into ptr ^78
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8062:3): struct-type: ptr ^25 -> ^79, indices=0,0
	movq -360(%rbp), %rax
	# LowerGetelementptr(8062:3): type of ^79 is ptr*
	# LowerLoad(8063:3).2: (^79) into ptr ^80
	movq (%rax), %rcx
	# SetupCalls(8064:3): move argument ptr ^78
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(8064:3): move argument ptr ^80
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	callq _ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEES7_EvT_T0_
	jmp .___ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_SK_T0___M1049
	.___ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_SK_T0___M786:
	# SetupCalls(8068:3): move argument ptr align 8 ^26
	# Fixed movzx with identical source and destination widths
	movq -384(%rbp), %rdi
	# SetupCalls(8068:3): move argument ptr align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq -248(%rbp), %rsi
	# SetupCalls(8068:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# SetupCalls(8069:3): move argument ptr align 8 ^27
	# Fixed movzx with identical source and destination widths
	movq -376(%rbp), %rdi
	# SetupCalls(8069:3): move argument ptr align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq -232(%rbp), %rsi
	# SetupCalls(8069:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8070:3): struct-type: ptr ^26 -> ^82, indices=0,0
	movq -384(%rbp), %rbx
	# LowerGetelementptr(8070:3): type of ^82 is ptr*
	# LowerLoad(8071:3).2: (^82) into ptr ^83
	movq (%rbx), %rax
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8072:3): struct-type: ptr ^27 -> ^84, indices=0,0
	movq -376(%rbp), %rbx
	# LowerGetelementptr(8072:3): type of ^84 is ptr*
	# LowerLoad(8073:3).2: (^84) into ptr ^85
	movq (%rbx), %rcx
	# SetupCalls(8074:3): move argument ptr nonnull dereferenceable(1) align 1 ^9
	# Fixed movzx with identical source and destination widths
	movq -256(%rbp), %rdi
	# SetupCalls(8074:3): move argument ptr ^83
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(8074:3): move argument ptr ^85
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdx
	callq _ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EclINS_17__normal_iteratorIP6LsItemS2_ISF_SaISF_EEEESJ_EEbT_T0_
	# SetupCalls(8074:3): move i1 result from %rax
	movb %al, %bl
	cmpb $0, %bl
	jne .___ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_SK_T0___M876
	jmp .___ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_SK_T0___M962
	.___ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_SK_T0___M876:
	# SetupCalls(8078:3): move argument ptr align 8 ^28
	# Fixed movzx with identical source and destination widths
	movq -304(%rbp), %rdi
	# SetupCalls(8078:3): move argument ptr align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq -224(%rbp), %rsi
	# SetupCalls(8078:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# SetupCalls(8079:3): move argument ptr align 8 ^29
	# Fixed movzx with identical source and destination widths
	movq -296(%rbp), %rdi
	# SetupCalls(8079:3): move argument ptr align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq -232(%rbp), %rsi
	# SetupCalls(8079:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8080:3): struct-type: ptr ^28 -> ^88, indices=0,0
	movq -304(%rbp), %rax
	# LowerGetelementptr(8080:3): type of ^88 is ptr*
	# LowerLoad(8081:3).2: (^88) into ptr ^89
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8082:3): struct-type: ptr ^29 -> ^90, indices=0,0
	movq -296(%rbp), %rax
	# LowerGetelementptr(8082:3): type of ^90 is ptr*
	# LowerLoad(8083:3).2: (^90) into ptr ^91
	movq (%rax), %rcx
	# SetupCalls(8084:3): move argument ptr ^89
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(8084:3): move argument ptr ^91
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	callq _ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEES7_EvT_T0_
	jmp .___ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_SK_T0___M1048
	.___ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_SK_T0___M962:
	# SetupCalls(8088:3): move argument ptr align 8 ^30
	# Fixed movzx with identical source and destination widths
	movq -320(%rbp), %rdi
	# SetupCalls(8088:3): move argument ptr align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq -224(%rbp), %rsi
	# SetupCalls(8088:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# SetupCalls(8089:3): move argument ptr align 8 ^31
	# Fixed movzx with identical source and destination widths
	movq -312(%rbp), %rdi
	# SetupCalls(8089:3): move argument ptr align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq -248(%rbp), %rsi
	# SetupCalls(8089:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8090:3): struct-type: ptr ^30 -> ^93, indices=0,0
	movq -320(%rbp), %rax
	# LowerGetelementptr(8090:3): type of ^93 is ptr*
	# LowerLoad(8091:3).2: (^93) into ptr ^94
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8092:3): struct-type: ptr ^31 -> ^95, indices=0,0
	movq -312(%rbp), %rax
	# LowerGetelementptr(8092:3): type of ^95 is ptr*
	# LowerLoad(8093:3).2: (^95) into ptr ^96
	movq (%rax), %rcx
	# SetupCalls(8094:3): move argument ptr ^94
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(8094:3): move argument ptr ^96
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	callq _ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEES7_EvT_T0_
	.___ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_SK_T0___M1048:
	.___ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_SK_T0___M1049:
	.___ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_SK_T0___M1050:
	movq -400(%rbp), %r15
	movq -536(%rbp), %r14
	movq -448(%rbp), %r13
	movq -440(%rbp), %r12
	movq -456(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEmmEv
.p2align 4, 0x90
_ZN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEmmEv:
	.___ZN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEmmEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(7935:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(7936:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(7937:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7938:3): struct-type: ptr ^3 -> ^4, indices=0,0
	movq %rbx, %rcx
	# LowerGetelementptr(7938:3): type of ^4 is ptr*
	# LowerLoad(7939:3).2: (^4) into ptr ^5
	movq (%rcx), %rax
	# tt = Pointer, type = %struct.LsItem
	# LowerGetelementptr(7940:3): struct-type: ptr ^5 -> ^6, indices=-1
	addq $-40, %rax
	# LowerGetelementptr(7940:3): type of ^6 is %struct.LsItem*
	# LowerStore(7941:3).9: mov %struct.LsItem* ^6, (^4)
	movq %rax, (%rcx)
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_
.p2align 4, 0x90
_ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_:
	.___ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(7920:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %rax
	# LowerAlloca(7921:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %rcx
	# LowerStore(7922:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rax)
	# LowerStore(7923:3).9: mov ptr %rsi, (^4)
	movq %rsi, (%rcx)
	# LowerLoad(7924:3).2: (^3) into ptr ^5
	movq (%rax), %rbx
	# LowerLoad(7925:3).2: (^4) into ptr ^6
	movq (%rcx), %rax
	# SetupCalls(7926:3): move argument ptr nonnull dereferenceable(32) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(7926:3): move argument ptr nonnull dereferenceable(32) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_@PLT
	# SetupCalls(7926:3): move i32 result from %rax
	movl %eax, %ebx
	# LowerIcmp(7927:3): i32 ^7 vs. intlike 0
	cmpl $0, %ebx
	setl %al
	andq $1, %rax
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZN9__gnu_cxx5__ops14_Iter_comp_valIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EclINS_17__normal_iteratorIP6LsItemS2_ISF_SaISF_EEEESF_EEbT_RT0_
.p2align 4, 0x90
_ZN9__gnu_cxx5__ops14_Iter_comp_valIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EclINS_17__normal_iteratorIP6LsItemS2_ISF_SaISF_EEEESF_EEbT_RT0_:
	.___ZN9__gnu_cxx5__ops14_Iter_comp_valIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EclINS_17__normal_iteratorIP6LsItemS2_ISF_SaISF_EEEESF_EEbT_RT0___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(56 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	movq %r12, -40(%rbp)
	movq %r13, -48(%rbp)
	# LowerAlloca(7858:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^4
	leaq -8(%rbp), %r8
	# LowerAlloca(7859:3): size = 8, type = ptr*, var = ^5
	leaq -16(%rbp), %rcx
	# LowerAlloca(7860:3): size = 8, type = ptr*, var = ^6
	leaq -24(%rbp), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7861:3): struct-type: ptr ^4 -> ^7, indices=0,0
	movq %r8, %rax
	# LowerGetelementptr(7861:3): type of ^7 is ptr*
	# LowerStore(7862:3).9: mov ptr %rsi, (^7)
	movq %rsi, (%rax)
	# LowerStore(7863:3).9: mov ptr %rdi, (^5)
	movq %rdi, (%rcx)
	# LowerStore(7864:3).9: mov ptr %rdx, (^6)
	movq %rdx, (%rbx)
	# LowerLoad(7865:3).2: (^5) into ptr ^8
	movq (%rcx), %r12
	# tt = Pointer, type = %"struct.__gnu_cxx::__ops::_Iter_comp_val"
	# LowerGetelementptr(7866:3): struct-type: ptr ^8 -> ^9, indices=0,0
	# LowerGetelementptr(7866:3): type of ^9 is %class.anon*
	# SetupCalls(7867:3): move argument ptr nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %r8, %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEdeEv
	# SetupCalls(7867:3): move ptr result from %rax
	movq %rax, %r13
	# LowerLoad(7868:3).2: (^6) into ptr ^11
	movq (%rbx), %rax
	# SetupCalls(7869:3): move argument ptr nonnull dereferenceable(1) align 1 ^9
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(7869:3): move argument ptr nonnull dereferenceable(33) align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq %r13, %rsi
	# SetupCalls(7869:3): move argument ptr nonnull dereferenceable(33) align 8 ^11
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdx
	callq _ZZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEENK3$_0clERK6LsItemSB_
	# SetupCalls(7869:3): move i1 result from %rax
	movb %al, %bl
	movb %bl, %al
	movq -48(%rbp), %r13
	movq -40(%rbp), %r12
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops14_Iter_comp_valIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_RT2_
.p2align 4, 0x90
_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops14_Iter_comp_valIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_RT2_:
	.___ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops14_Iter_comp_valIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_RT2___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(392 + 0, 16)
	subq $400, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -216(%rbp)
	movq %r12, -192(%rbp)
	movq %r13, -200(%rbp)
	movq %r14, -184(%rbp)
	movq %r15, -144(%rbp)
	# LowerAlloca(7785:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^6
	# Fixing source-to-dest leaq -8(%rbp), -88(%rbp)
	leaq -8(%rbp), %r15
	movq %r15, -88(%rbp)
	# LowerAlloca(7786:3): size = 8, type = i64*, var = ^7
	# Fixing source-to-dest leaq -16(%rbp), -104(%rbp)
	leaq -16(%rbp), %r15
	movq %r15, -104(%rbp)
	# LowerAlloca(7787:3): size = 8, type = i64*, var = ^8
	# Fixing source-to-dest leaq -24(%rbp), -112(%rbp)
	leaq -24(%rbp), %r15
	movq %r15, -112(%rbp)
	# LowerAlloca(7788:3): size = 8, type = ptr*, var = ^9
	# Fixing source-to-dest leaq -32(%rbp), -120(%rbp)
	leaq -32(%rbp), %r15
	movq %r15, -120(%rbp)
	# LowerAlloca(7789:3): size = 8, type = i64*, var = ^10
	# Fixing source-to-dest leaq -40(%rbp), -128(%rbp)
	leaq -40(%rbp), %r15
	movq %r15, -128(%rbp)
	# LowerAlloca(7790:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^11
	leaq -48(%rbp), %r14
	# LowerAlloca(7791:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^12
	leaq -56(%rbp), %r12
	# LowerAlloca(7792:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^13
	leaq -64(%rbp), %r13
	# LowerAlloca(7793:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^14
	# Fixing source-to-dest leaq -72(%rbp), -80(%rbp)
	leaq -72(%rbp), %r15
	movq %r15, -80(%rbp)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7794:3): struct-type: ptr ^6 -> ^15, indices=0,0
	movq -88(%rbp), %rax
	# LowerGetelementptr(7794:3): type of ^15 is ptr*
	# LowerStore(7795:3).9: mov ptr %rdi, (^15)
	movq %rdi, (%rax)
	# LowerStore(7796:3).9: mov i64 %rsi, (^7)
	movq -104(%rbp), %rax
	movq %rsi, (%rax)
	# LowerStore(7797:3).9: mov i64 %rdx, (^8)
	movq -112(%rbp), %rax
	movq %rdx, (%rax)
	# LowerStore(7798:3).9: mov ptr %r8, (^9)
	movq -120(%rbp), %rax
	movq %r8, (%rax)
	# LowerLoad(7799:3).2: (^7) into i64 ^16
	movq -104(%rbp), %rax
	movq (%rax), %rbx
	# LowerMath(7800:3): ^16, 1 into i64 ^17
	subq $1, %rbx
	# LowerSdiv(7801:3): ^17, 2 into i64 ^18
	movq %rbx, %rsi
	movq $0, %rdx
	movq %rsi, %rax
	movq $2, %rbx
	idivq %rbx
	movq -128(%rbp), %rbx
	movq %rax, (%rbx)
	# LowerStore(7802:3).9: mov i64 ^18, (^10)
	.___ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops14_Iter_comp_valIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_RT2___M49:
	# LowerLoad(7806:3).2: (^7) into i64 ^20
	movq -104(%rbp), %rax
	movq (%rax), %rbx
	# LowerLoad(7807:3).2: (^8) into i64 ^21
	movq -112(%rbp), %rdx
	movq (%rdx), %rax
	# LowerIcmp(7808:3): i64 ^20 vs. operand i64 ^21
	cmpq %rax, %rbx
	setg %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops14_Iter_comp_valIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_RT2___M61
	.___ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops14_Iter_comp_valIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_RT2___M58:
	# MovePhi: intlike -> ^32 (in new block 55 whose parent is 19)
	movb $0, -96(%rbp)
	jmp .___ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops14_Iter_comp_valIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_RT2___M132
	.___ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops14_Iter_comp_valIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_RT2___M61:
	# LowerLoad(7812:3).2: (^9) into ptr ^24
	movq -120(%rbp), %rax
	movq (%rax), %r15
	# LowerLoad(7813:3).2: (^10) into i64 ^25
	movq -128(%rbp), %rbx
	movq (%rbx), %rax
	# Clobber %rcx
	movq %rcx, -136(%rbp)
	# SetupCalls(7814:3): move argument ptr nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq -88(%rbp), %rdi
	# SetupCalls(7814:3): move argument i64 ^25
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEplEl
	# SetupCalls(7814:3): move ptr result from %rax
	movq %rax, %rbx
	# Unclobber %rcx, live inside %rcx:3
	movq -136(%rbp), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7815:3): struct-type: ptr ^11 -> ^27, indices=0,0
	movq %r14, %rax
	# LowerGetelementptr(7815:3): type of ^27 is ptr*
	# LowerStore(7816:3).9: mov ptr ^26, (^27)
	movq %rbx, (%rax)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7817:3): struct-type: ptr ^11 -> ^28, indices=0,0
	movq %r14, %rax
	# LowerGetelementptr(7817:3): type of ^28 is ptr*
	# LowerLoad(7818:3).2: (^28) into ptr ^29
	movq (%rax), %rbx
	# Clobber %rcx
	movq %rcx, -136(%rbp)
	# SetupCalls(7819:3): move argument ptr nonnull dereferenceable(1) align 1 ^24
	# Fixed movzx with identical source and destination widths
	movq %r15, %rdi
	# SetupCalls(7819:3): move argument ptr ^29
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(7819:3): move argument ptr nonnull dereferenceable(33) align 8 %rcx
	# Semiunclobber live %rcx into %rdx
	movq -136(%rbp), %rdx
	callq _ZN9__gnu_cxx5__ops14_Iter_comp_valIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EclINS_17__normal_iteratorIP6LsItemS2_ISF_SaISF_EEEESF_EEbT_RT0_
	# SetupCalls(7819:3): move i1 result from %rax
	movb %al, %bl
	# Unclobber %rcx, live inside %rcx:3
	movq -136(%rbp), %rcx
	# MovePhi: ^30 -> ^32
	movb %bl, -96(%rbp)
	.___ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops14_Iter_comp_valIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_RT2___M132:
	cmpb $0, -96(%rbp)
	jne .___ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops14_Iter_comp_valIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_RT2___M133
	jmp .___ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops14_Iter_comp_valIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_RT2___M293
	.___ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops14_Iter_comp_valIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_RT2___M133:
	# LowerLoad(7827:3).2: (^10) into i64 ^34
	movq -128(%rbp), %rbx
	movq (%rbx), %rax
	# Clobber %rcx
	movq %rcx, -136(%rbp)
	# SetupCalls(7828:3): move argument ptr nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq -88(%rbp), %rdi
	# SetupCalls(7828:3): move argument i64 ^34
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEplEl
	# SetupCalls(7828:3): move ptr result from %rax
	movq %rax, %rbx
	# Unclobber %rcx, live inside %rcx:3
	movq -136(%rbp), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7829:3): struct-type: ptr ^12 -> ^36, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(7829:3): type of ^36 is ptr*
	# LowerStore(7830:3).9: mov ptr ^35, (^36)
	movq %rbx, (%rax)
	# Clobber %rcx
	movq %rcx, -136(%rbp)
	# SetupCalls(7831:3): move argument ptr nonnull dereferenceable(8) align 8 ^12
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEdeEv
	# SetupCalls(7831:3): move ptr result from %rax
	movq %rax, %rbx
	# Unclobber %rcx, live inside %rcx:3
	movq -136(%rbp), %rcx
	# LowerLoad(7832:3).2: (^7) into i64 ^38
	movq -104(%rbp), %rax
	movq (%rax), %rdx
	# Clobber %rcx
	movq %rcx, -136(%rbp)
	# SetupCalls(7833:3): move argument ptr nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq -88(%rbp), %rdi
	# SetupCalls(7833:3): move argument i64 ^38
	# Fixed movzx with identical source and destination widths
	movq %rdx, %rsi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEplEl
	# SetupCalls(7833:3): move ptr result from %rax
	movq %rax, %r15
	# Unclobber %rcx, live inside %rcx:3
	movq -136(%rbp), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7834:3): struct-type: ptr ^13 -> ^40, indices=0,0
	movq %r13, %rax
	# LowerGetelementptr(7834:3): type of ^40 is ptr*
	# LowerStore(7835:3).9: mov ptr ^39, (^40)
	movq %r15, (%rax)
	# Clobber %rcx
	movq %rcx, -136(%rbp)
	# SetupCalls(7836:3): move argument ptr nonnull dereferenceable(8) align 8 ^13
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEdeEv
	# SetupCalls(7836:3): move ptr result from %rax
	movq %rax, %r15
	# Unclobber %rcx, live inside %rcx:3
	movq -136(%rbp), %rcx
	# Clobber %rcx
	movq %rcx, -136(%rbp)
	# SetupCalls(7837:3): move argument ptr nonnull dereferenceable(33) align 8 ^41
	# Fixed movzx with identical source and destination widths
	movq %r15, %rdi
	# SetupCalls(7837:3): move argument ptr nonnull dereferenceable(33) align 8 ^37
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZN6LsItemaSEOS_
	# SetupCalls(7837:3): move ptr result from %rax
	movq %rax, %rax
	# Unclobber %rcx, live inside %rcx:3
	movq -136(%rbp), %rcx
	# LowerLoad(7838:3).2: (^10) into i64 ^43
	movq -104(%rbp), %rax
	movq -128(%rbp), %rbx
	# Fixing source-to-dest movq (%rbx), (%rax)
	movq (%rbx), %r15
	movq %r15, (%rax)
	# LowerStore(7839:3).9: mov i64 ^43, (^7)
	# LowerLoad(7840:3).2: (^7) into i64 ^44
	movq -104(%rbp), %rbx
	movq (%rbx), %rax
	# LowerMath(7841:3): ^44, 1 into i64 ^45
	subq $1, %rax
	# LowerSdiv(7842:3): ^45, 2 into i64 ^46
	movq %rax, %rbx
	movq $0, %rdx
	movq %rbx, %rax
	movq $2, %rbx
	idivq %rbx
	movq -128(%rbp), %rbx
	movq %rax, (%rbx)
	# LowerStore(7843:3).9: mov i64 ^46, (^10)
	jmp .___ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops14_Iter_comp_valIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_RT2___M49
	.___ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops14_Iter_comp_valIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_RT2___M293:
	# LowerLoad(7847:3).2: (^7) into i64 ^48
	movq -104(%rbp), %rbx
	movq (%rbx), %rax
	# Clobber %rcx
	movq %rcx, -136(%rbp)
	# SetupCalls(7848:3): move argument ptr nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq -88(%rbp), %rdi
	# SetupCalls(7848:3): move argument i64 ^48
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEplEl
	# SetupCalls(7848:3): move ptr result from %rax
	movq %rax, %rbx
	# Unclobber %rcx, live inside %rcx:3
	movq -136(%rbp), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7849:3): struct-type: ptr ^14 -> ^50, indices=0,0
	movq -80(%rbp), %rax
	# LowerGetelementptr(7849:3): type of ^50 is ptr*
	# LowerStore(7850:3).9: mov ptr ^49, (^50)
	movq %rbx, (%rax)
	# Clobber %rcx
	movq %rcx, -136(%rbp)
	# SetupCalls(7851:3): move argument ptr nonnull dereferenceable(8) align 8 ^14
	# Fixed movzx with identical source and destination widths
	movq -80(%rbp), %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEdeEv
	# SetupCalls(7851:3): move ptr result from %rax
	movq %rax, %rbx
	# Unclobber %rcx, live inside %rcx:3
	movq -136(%rbp), %rcx
	# SetupCalls(7852:3): move argument ptr nonnull dereferenceable(33) align 8 ^51
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(7852:3): move argument ptr nonnull dereferenceable(33) align 8 %rcx
	# Semiunclobber non-live %rcx into %rsi
	movq %rcx, %rsi
	callq _ZN6LsItemaSEOS_
	# SetupCalls(7852:3): move ptr result from %rax
	movq %rax, %rax
	movq -144(%rbp), %r15
	movq -184(%rbp), %r14
	movq -200(%rbp), %r13
	movq -192(%rbp), %r12
	movq -216(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZN9__gnu_cxx5__ops14_Iter_comp_valIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EC2EONS0_15_Iter_comp_iterISB_EE
.p2align 4, 0x90
_ZN9__gnu_cxx5__ops14_Iter_comp_valIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EC2EONS0_15_Iter_comp_iterISB_EE:
	.___ZN9__gnu_cxx5__ops14_Iter_comp_valIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EC2EONS0_15_Iter_comp_iterISB_EE__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(7772:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %rbx
	# LowerAlloca(7773:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %rcx
	# LowerStore(7774:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rbx)
	# LowerStore(7775:3).9: mov ptr %rsi, (^4)
	movq %rsi, (%rcx)
	# LowerLoad(7776:3).2: (^3) into ptr ^5
	movq (%rbx), %rax
	# tt = Pointer, type = %"struct.__gnu_cxx::__ops::_Iter_comp_val"
	# LowerGetelementptr(7777:3): struct-type: ptr ^5 -> ^6, indices=0,0
	# LowerGetelementptr(7777:3): type of ^6 is %class.anon*
	# LowerLoad(7778:3).2: (^4) into ptr ^7
	movq (%rcx), %rax
	# tt = Pointer, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"
	# LowerGetelementptr(7779:3): struct-type: ptr ^7 -> ^8, indices=0,0
	# LowerGetelementptr(7779:3): type of ^8 is %class.anon*
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEplEl
.p2align 4, 0x90
_ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEplEl:
	.___ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEplEl__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(56 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -48(%rbp)
	movq %r12, -40(%rbp)
	# LowerAlloca(7604:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^3
	leaq -8(%rbp), %r12
	# LowerAlloca(7605:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %rdx
	# LowerAlloca(7606:3): size = 8, type = i64*, var = ^5
	leaq -24(%rbp), %rcx
	# LowerAlloca(7607:3): size = 8, type = ptr*, var = ^6
	leaq -32(%rbp), %rbx
	# LowerStore(7608:3).9: mov ptr %rdi, (^4)
	movq %rdi, (%rdx)
	# LowerStore(7609:3).9: mov i64 %rsi, (^5)
	movq %rsi, (%rcx)
	# LowerLoad(7610:3).2: (^4) into ptr ^7
	movq (%rdx), %rax
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7611:3): struct-type: ptr ^7 -> ^8, indices=0,0
	# LowerGetelementptr(7611:3): type of ^8 is ptr*
	# LowerLoad(7612:3).2: (^8) into ptr ^9
	movq (%rax), %rsi
	# LowerLoad(7613:3).2: (^5) into i64 ^10
	movq (%rcx), %rdx
	# tt = Pointer, type = %struct.LsItem
	# LowerGetelementptr(7614:3): pointer-type -> ^11
	movq %rdx, %rax
	movq $40, %rcx
	imulq %rcx
	movq %rax, %rdx
	addq %rsi, %rdx
	# LowerStore(7615:3).9: mov %struct.LsItem* ^11, (^6)
	movq %rdx, (%rbx)
	# SetupCalls(7616:3): move argument ptr nonnull dereferenceable(8) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(7616:3): move argument ptr nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEC2ERKS2_
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7617:3): struct-type: ptr ^3 -> ^12, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(7617:3): type of ^12 is ptr*
	# LowerLoad(7618:3).2: (^12) into ptr ^13
	movq (%rax), %rbx
	movq %rbx, %rax
	movq -40(%rbp), %r12
	movq -48(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_RT0_
.p2align 4, 0x90
_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_RT0_:
	.___ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_RT0___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(120 + 0, 16)
	subq $128, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -104(%rbp)
	movq %r12, -88(%rbp)
	movq %r13, -96(%rbp)
	movq %r14, -120(%rbp)
	movq %r15, -72(%rbp)
	# LowerAlloca(7412:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^4
	# Fixing source-to-dest leaq -8(%rbp), -56(%rbp)
	leaq -8(%rbp), %r15
	movq %r15, -56(%rbp)
	# LowerAlloca(7413:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^5
	# Fixing source-to-dest leaq -16(%rbp), -64(%rbp)
	leaq -16(%rbp), %r15
	movq %r15, -64(%rbp)
	# LowerAlloca(7414:3): size = 8, type = ptr*, var = ^6
	leaq -24(%rbp), %r12
	# LowerAlloca(7415:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^7
	leaq -32(%rbp), %r13
	# LowerAlloca(7416:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^8
	leaq -40(%rbp), %rbx
	# LowerAlloca(7417:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^9
	leaq -48(%rbp), %r15
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7418:3): struct-type: ptr ^4 -> ^10, indices=0,0
	movq -56(%rbp), %rax
	# LowerGetelementptr(7418:3): type of ^10 is ptr*
	# LowerStore(7419:3).9: mov ptr %rdi, (^10)
	movq %rdi, (%rax)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7420:3): struct-type: ptr ^5 -> ^11, indices=0,0
	movq -64(%rbp), %rax
	# LowerGetelementptr(7420:3): type of ^11 is ptr*
	# LowerStore(7421:3).9: mov ptr %rsi, (^11)
	movq %rsi, (%rax)
	# LowerStore(7422:3).9: mov ptr %rdx, (^6)
	movq %rdx, (%r12)
	.___ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_RT0___M27:
	# SetupCalls(7426:3): move argument ptr nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq -64(%rbp), %rdi
	# SetupCalls(7426:3): move argument ptr nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -56(%rbp), %rsi
	callq _ZN9__gnu_cxxmiIP6LsItemSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_
	# SetupCalls(7426:3): move i64 result from %rax
	movq %rax, %r14
	# LowerIcmp(7427:3): i64 ^13 vs. intlike 1
	cmpq $1, %r14
	setg %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_RT0___M57
	jmp .___ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_RT0___M203
	.___ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_RT0___M57:
	# SetupCalls(7431:3): move argument ptr nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq -64(%rbp), %rdi
	callq _ZN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEmmEv
	# SetupCalls(7431:3): move ptr result from %rax
	movq %rax, %rax
	# SetupCalls(7432:3): move argument ptr align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	# SetupCalls(7432:3): move argument ptr align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -56(%rbp), %rsi
	# SetupCalls(7432:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# SetupCalls(7433:3): move argument ptr align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(7433:3): move argument ptr align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq -64(%rbp), %rsi
	# SetupCalls(7433:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# SetupCalls(7434:3): move argument ptr align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq %r15, %rdi
	# SetupCalls(7434:3): move argument ptr align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq -64(%rbp), %rsi
	# SetupCalls(7434:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# LowerLoad(7435:3).2: (^6) into ptr ^17
	movq (%r12), %r8
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7436:3): struct-type: ptr ^7 -> ^18, indices=0,0
	movq %r13, %rcx
	# LowerGetelementptr(7436:3): type of ^18 is ptr*
	# LowerLoad(7437:3).2: (^18) into ptr ^19
	movq (%rcx), %rax
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7438:3): struct-type: ptr ^8 -> ^20, indices=0,0
	movq %rbx, %rdx
	# LowerGetelementptr(7438:3): type of ^20 is ptr*
	# LowerLoad(7439:3).2: (^20) into ptr ^21
	movq (%rdx), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7440:3): struct-type: ptr ^9 -> ^22, indices=0,0
	movq %r15, %rdx
	# LowerGetelementptr(7440:3): type of ^22 is ptr*
	# LowerLoad(7441:3).2: (^22) into ptr ^23
	movq (%rdx), %r9
	# SetupCalls(7442:3): move argument ptr ^19
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(7442:3): move argument ptr ^21
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(7442:3): move argument ptr ^23
	# Fixed movzx with identical source and destination widths
	movq %r9, %rdx
	# SetupCalls(7442:3): move argument ptr nonnull dereferenceable(1) align 1 ^17
	# Fixed movzx with identical source and destination widths
	movq %r8, %rcx
	callq _ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_RT0_
	jmp .___ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_RT0___M27
	.___ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_RT0___M203:
	movq -72(%rbp), %r15
	movq -120(%rbp), %r14
	movq -96(%rbp), %r13
	movq -88(%rbp), %r12
	movq -104(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEET_SK_SK_T0_
.p2align 4, 0x90
_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEET_SK_SK_T0_:
	.___ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEET_SK_SK_T0___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(376 + 0, 16)
	subq $384, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -240(%rbp)
	movq %r12, -232(%rbp)
	movq %r13, -272(%rbp)
	movq %r14, -312(%rbp)
	movq %r15, -200(%rbp)
	# LowerAlloca(7281:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^3
	# Fixing source-to-dest leaq -8(%rbp), -120(%rbp)
	leaq -8(%rbp), %r15
	movq %r15, -120(%rbp)
	# LowerAlloca(7282:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^4
	# Fixing source-to-dest leaq -16(%rbp), -160(%rbp)
	leaq -16(%rbp), %r15
	movq %r15, -160(%rbp)
	# LowerAlloca(7283:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^5
	# Fixing source-to-dest leaq -24(%rbp), -176(%rbp)
	leaq -24(%rbp), %r15
	movq %r15, -176(%rbp)
	# LowerAlloca(7284:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, var = ^6
	# Fixing source-to-dest leaq -25(%rbp), -152(%rbp)
	leaq -25(%rbp), %r15
	movq %r15, -152(%rbp)
	# LowerAlloca(7285:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^7
	leaq -40(%rbp), %r12
	# LowerAlloca(7286:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^8
	leaq -48(%rbp), %rbx
	# LowerAlloca(7287:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^9
	leaq -56(%rbp), %r15
	# LowerAlloca(7288:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^10
	# Fixing source-to-dest leaq -64(%rbp), -192(%rbp)
	pushq %r15
	leaq -64(%rbp), %r15
	movq %r15, -192(%rbp)
	popq %r15
	# LowerAlloca(7289:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^11
	# Fixing source-to-dest leaq -72(%rbp), -184(%rbp)
	pushq %r15
	leaq -72(%rbp), %r15
	movq %r15, -184(%rbp)
	popq %r15
	# LowerAlloca(7290:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, var = ^12
	leaq -73(%rbp), %r13
	# LowerAlloca(7291:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^13
	# Fixing source-to-dest leaq -88(%rbp), -144(%rbp)
	pushq %r15
	leaq -88(%rbp), %r15
	movq %r15, -144(%rbp)
	popq %r15
	# LowerAlloca(7292:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^14
	# Fixing source-to-dest leaq -96(%rbp), -136(%rbp)
	pushq %r15
	leaq -96(%rbp), %r15
	movq %r15, -136(%rbp)
	popq %r15
	# LowerAlloca(7293:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^15
	# Fixing source-to-dest leaq -104(%rbp), -128(%rbp)
	pushq %r15
	leaq -104(%rbp), %r15
	movq %r15, -128(%rbp)
	popq %r15
	# LowerAlloca(7294:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, var = ^16
	# Fixing source-to-dest leaq -105(%rbp), -168(%rbp)
	pushq %r15
	leaq -105(%rbp), %r15
	movq %r15, -168(%rbp)
	popq %r15
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7295:3): struct-type: ptr ^4 -> ^17, indices=0,0
	movq -160(%rbp), %rax
	# LowerGetelementptr(7295:3): type of ^17 is ptr*
	# LowerStore(7296:3).9: mov ptr %rdi, (^17)
	movq %rdi, (%rax)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7297:3): struct-type: ptr ^5 -> ^18, indices=0,0
	movq -176(%rbp), %rax
	# LowerGetelementptr(7297:3): type of ^18 is ptr*
	# LowerStore(7298:3).9: mov ptr %rsi, (^18)
	movq %rsi, (%rax)
	# SetupCalls(7299:3): move argument ptr nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq -176(%rbp), %rdi
	# SetupCalls(7299:3): move argument ptr nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -160(%rbp), %rsi
	callq _ZN9__gnu_cxxmiIP6LsItemSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_
	# SetupCalls(7299:3): move i64 result from %rax
	movq %rax, %r14
	# LowerSdiv(7300:3): ^19, 2 into i64 ^20
	movq %r14, %rcx
	movq $0, %rdx
	movq %rcx, %rax
	movq $2, %rcx
	idivq %rcx
	movq %rax, %rcx
	# SetupCalls(7301:3): move argument ptr nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -160(%rbp), %rdi
	# SetupCalls(7301:3): move argument i64 ^20
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEplEl
	# SetupCalls(7301:3): move ptr result from %rax
	movq %rax, %r14
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7302:3): struct-type: ptr ^7 -> ^22, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(7302:3): type of ^22 is ptr*
	# LowerStore(7303:3).9: mov ptr ^21, (^22)
	movq %r14, (%rax)
	# SetupCalls(7304:3): move argument ptr align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(7304:3): move argument ptr align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -160(%rbp), %rsi
	# SetupCalls(7304:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# SetupCalls(7305:3): move argument ptr nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -160(%rbp), %rdi
	# SetupCalls(7305:3): move argument i64 1
	movq $1, %rsi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEplEl
	# SetupCalls(7305:3): move ptr result from %rax
	movq %rax, %r14
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7306:3): struct-type: ptr ^9 -> ^24, indices=0,0
	movq %r15, %rax
	# LowerGetelementptr(7306:3): type of ^24 is ptr*
	# LowerStore(7307:3).9: mov ptr ^23, (^24)
	movq %r14, (%rax)
	# SetupCalls(7308:3): move argument ptr align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq -192(%rbp), %rdi
	# SetupCalls(7308:3): move argument ptr align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq %r12, %rsi
	# SetupCalls(7308:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# SetupCalls(7309:3): move argument ptr nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq -176(%rbp), %rdi
	# SetupCalls(7309:3): move argument i64 1
	movq $1, %rsi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEmiEl
	# SetupCalls(7309:3): move ptr result from %rax
	movq %rax, %r12
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7310:3): struct-type: ptr ^11 -> ^26, indices=0,0
	movq -184(%rbp), %rax
	# LowerGetelementptr(7310:3): type of ^26 is ptr*
	# LowerStore(7311:3).9: mov ptr ^25, (^26)
	movq %r12, (%rax)
	# SetupCalls(7312:3): move argument ptr align 1 ^12
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	# SetupCalls(7312:3): move argument ptr align 1 ^6
	# Fixed movzx with identical source and destination widths
	movq -152(%rbp), %rsi
	# SetupCalls(7312:3): move argument i64 1
	movq $1, %rdx
	callq memcpy@PLT
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7313:3): struct-type: ptr ^8 -> ^27, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(7313:3): type of ^27 is ptr*
	# LowerLoad(7314:3).2: (^27) into ptr ^28
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7315:3): struct-type: ptr ^9 -> ^29, indices=0,0
	movq %r15, %rcx
	# LowerGetelementptr(7315:3): type of ^29 is ptr*
	# LowerLoad(7316:3).2: (^29) into ptr ^30
	movq (%rcx), %rax
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7317:3): struct-type: ptr ^10 -> ^31, indices=0,0
	movq -192(%rbp), %rcx
	# LowerGetelementptr(7317:3): type of ^31 is ptr*
	# LowerLoad(7318:3).2: (^31) into ptr ^32
	movq (%rcx), %r8
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7319:3): struct-type: ptr ^11 -> ^33, indices=0,0
	movq -184(%rbp), %rcx
	# LowerGetelementptr(7319:3): type of ^33 is ptr*
	# LowerLoad(7320:3).2: (^33) into ptr ^34
	movq (%rcx), %r9
	# SetupCalls(7321:3): move argument ptr ^28
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(7321:3): move argument ptr ^30
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(7321:3): move argument ptr ^32
	# Fixed movzx with identical source and destination widths
	movq %r8, %rdx
	# SetupCalls(7321:3): move argument ptr ^34
	# Fixed movzx with identical source and destination widths
	movq %r9, %rcx
	callq _ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_SK_T0_
	# SetupCalls(7322:3): move argument ptr nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -160(%rbp), %rdi
	# SetupCalls(7322:3): move argument i64 1
	movq $1, %rsi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEplEl
	# SetupCalls(7322:3): move ptr result from %rax
	movq %rax, %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7323:3): struct-type: ptr ^13 -> ^36, indices=0,0
	movq -144(%rbp), %rax
	# LowerGetelementptr(7323:3): type of ^36 is ptr*
	# LowerStore(7324:3).9: mov ptr ^35, (^36)
	movq %rbx, (%rax)
	# SetupCalls(7325:3): move argument ptr align 8 ^14
	# Fixed movzx with identical source and destination widths
	movq -136(%rbp), %rdi
	# SetupCalls(7325:3): move argument ptr align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq -176(%rbp), %rsi
	# SetupCalls(7325:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# SetupCalls(7326:3): move argument ptr align 8 ^15
	# Fixed movzx with identical source and destination widths
	movq -128(%rbp), %rdi
	# SetupCalls(7326:3): move argument ptr align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -160(%rbp), %rsi
	# SetupCalls(7326:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# SetupCalls(7327:3): move argument ptr align 1 ^16
	# Fixed movzx with identical source and destination widths
	movq -168(%rbp), %rdi
	# SetupCalls(7327:3): move argument ptr align 1 ^6
	# Fixed movzx with identical source and destination widths
	movq -152(%rbp), %rsi
	# SetupCalls(7327:3): move argument i64 1
	movq $1, %rdx
	callq memcpy@PLT
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7328:3): struct-type: ptr ^13 -> ^37, indices=0,0
	movq -144(%rbp), %rax
	# LowerGetelementptr(7328:3): type of ^37 is ptr*
	# LowerLoad(7329:3).2: (^37) into ptr ^38
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7330:3): struct-type: ptr ^14 -> ^39, indices=0,0
	movq -136(%rbp), %rax
	# LowerGetelementptr(7330:3): type of ^39 is ptr*
	# LowerLoad(7331:3).2: (^39) into ptr ^40
	movq (%rax), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7332:3): struct-type: ptr ^15 -> ^41, indices=0,0
	movq -128(%rbp), %rax
	# LowerGetelementptr(7332:3): type of ^41 is ptr*
	# LowerLoad(7333:3).2: (^41) into ptr ^42
	movq (%rax), %r8
	# SetupCalls(7334:3): move argument ptr ^38
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(7334:3): move argument ptr ^40
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(7334:3): move argument ptr ^42
	# Fixed movzx with identical source and destination widths
	movq %r8, %rdx
	callq _ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEET_SK_SK_SK_T0_
	# SetupCalls(7334:3): move ptr result from %rax
	movq %rax, %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7335:3): struct-type: ptr ^3 -> ^44, indices=0,0
	movq -120(%rbp), %rax
	# LowerGetelementptr(7335:3): type of ^44 is ptr*
	# LowerStore(7336:3).9: mov ptr ^43, (^44)
	movq %rbx, (%rax)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7337:3): struct-type: ptr ^3 -> ^45, indices=0,0
	movq -120(%rbp), %rbx
	# LowerGetelementptr(7337:3): type of ^45 is ptr*
	# LowerLoad(7338:3).2: (^45) into ptr ^46
	movq (%rbx), %rax
	movq -200(%rbp), %r15
	movq -312(%rbp), %r14
	movq -272(%rbp), %r13
	movq -232(%rbp), %r12
	movq -240(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_T0_
.p2align 4, 0x90
_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_T0_:
	.___ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_T0___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(216 + 0, 16)
	subq $224, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -160(%rbp)
	movq %r12, -144(%rbp)
	movq %r13, -168(%rbp)
	movq %r14, -176(%rbp)
	movq %r15, -128(%rbp)
	# LowerAlloca(7242:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^4
	# Fixing source-to-dest leaq -8(%rbp), -120(%rbp)
	leaq -8(%rbp), %r15
	movq %r15, -120(%rbp)
	# LowerAlloca(7243:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^5
	# Fixing source-to-dest leaq -16(%rbp), -112(%rbp)
	leaq -16(%rbp), %r15
	movq %r15, -112(%rbp)
	# LowerAlloca(7244:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^6
	leaq -24(%rbp), %r12
	# LowerAlloca(7245:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, var = ^7
	# Fixing source-to-dest leaq -25(%rbp), -88(%rbp)
	leaq -25(%rbp), %r15
	movq %r15, -88(%rbp)
	# LowerAlloca(7246:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^8
	leaq -40(%rbp), %rbx
	# LowerAlloca(7247:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^9
	leaq -48(%rbp), %r13
	# LowerAlloca(7248:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^10
	leaq -56(%rbp), %r14
	# LowerAlloca(7249:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, var = ^11
	leaq -57(%rbp), %r15
	# LowerAlloca(7250:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^12
	# Fixing source-to-dest leaq -72(%rbp), -104(%rbp)
	pushq %r15
	leaq -72(%rbp), %r15
	movq %r15, -104(%rbp)
	popq %r15
	# LowerAlloca(7251:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^13
	# Fixing source-to-dest leaq -80(%rbp), -96(%rbp)
	pushq %r15
	leaq -80(%rbp), %r15
	movq %r15, -96(%rbp)
	popq %r15
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7252:3): struct-type: ptr ^4 -> ^14, indices=0,0
	movq -120(%rbp), %rax
	# LowerGetelementptr(7252:3): type of ^14 is ptr*
	# LowerStore(7253:3).9: mov ptr %rdi, (^14)
	movq %rdi, (%rax)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7254:3): struct-type: ptr ^5 -> ^15, indices=0,0
	movq -112(%rbp), %rax
	# LowerGetelementptr(7254:3): type of ^15 is ptr*
	# LowerStore(7255:3).9: mov ptr %rsi, (^15)
	movq %rsi, (%rax)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7256:3): struct-type: ptr ^6 -> ^16, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(7256:3): type of ^16 is ptr*
	# LowerStore(7257:3).9: mov ptr %rdx, (^16)
	movq %rdx, (%rax)
	# SetupCalls(7258:3): move argument ptr align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(7258:3): move argument ptr align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -120(%rbp), %rsi
	# SetupCalls(7258:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# SetupCalls(7259:3): move argument ptr align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	# SetupCalls(7259:3): move argument ptr align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq -112(%rbp), %rsi
	# SetupCalls(7259:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# SetupCalls(7260:3): move argument ptr align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq %r14, %rdi
	# SetupCalls(7260:3): move argument ptr align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %r12, %rsi
	# SetupCalls(7260:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# SetupCalls(7261:3): move argument ptr align 1 ^11
	# Fixed movzx with identical source and destination widths
	movq %r15, %rdi
	# SetupCalls(7261:3): move argument ptr align 1 ^7
	# Fixed movzx with identical source and destination widths
	movq -88(%rbp), %rsi
	# SetupCalls(7261:3): move argument i64 1
	movq $1, %rdx
	callq memcpy@PLT
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7262:3): struct-type: ptr ^8 -> ^17, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(7262:3): type of ^17 is ptr*
	# LowerLoad(7263:3).2: (^17) into ptr ^18
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7264:3): struct-type: ptr ^9 -> ^19, indices=0,0
	movq %r13, %rax
	# LowerGetelementptr(7264:3): type of ^19 is ptr*
	# LowerLoad(7265:3).2: (^19) into ptr ^20
	movq (%rax), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7266:3): struct-type: ptr ^10 -> ^21, indices=0,0
	movq %r14, %rax
	# LowerGetelementptr(7266:3): type of ^21 is ptr*
	# LowerLoad(7267:3).2: (^21) into ptr ^22
	movq (%rax), %r8
	# SetupCalls(7268:3): move argument ptr ^18
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(7268:3): move argument ptr ^20
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(7268:3): move argument ptr ^22
	# Fixed movzx with identical source and destination widths
	movq %r8, %rdx
	callq _ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_T0_
	# SetupCalls(7269:3): move argument ptr align 8 ^12
	# Fixed movzx with identical source and destination widths
	movq -104(%rbp), %rdi
	# SetupCalls(7269:3): move argument ptr align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -120(%rbp), %rsi
	# SetupCalls(7269:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# SetupCalls(7270:3): move argument ptr align 8 ^13
	# Fixed movzx with identical source and destination widths
	movq -96(%rbp), %rdi
	# SetupCalls(7270:3): move argument ptr align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq -112(%rbp), %rsi
	# SetupCalls(7270:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7271:3): struct-type: ptr ^12 -> ^23, indices=0,0
	movq -104(%rbp), %rax
	# LowerGetelementptr(7271:3): type of ^23 is ptr*
	# LowerLoad(7272:3).2: (^23) into ptr ^24
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7273:3): struct-type: ptr ^13 -> ^25, indices=0,0
	movq -96(%rbp), %rcx
	# LowerGetelementptr(7273:3): type of ^25 is ptr*
	# LowerLoad(7274:3).2: (^25) into ptr ^26
	movq (%rcx), %rax
	# SetupCalls(7275:3): move argument ptr ^24
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(7275:3): move argument ptr ^26
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(7275:3): move argument ptr nonnull dereferenceable(1) align 1 ^7
	# Fixed movzx with identical source and destination widths
	movq -88(%rbp), %rdx
	callq _ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_RT0_
	movq -128(%rbp), %r15
	movq -176(%rbp), %r14
	movq -168(%rbp), %r13
	movq -144(%rbp), %r12
	movq -160(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElNS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0_T1_
.p2align 4, 0x90
_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElNS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0_T1_:
	.___ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElNS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0_T1___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(360 + 0, 16)
	subq $368, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -304(%rbp)
	movq %r12, -312(%rbp)
	movq %r13, -320(%rbp)
	movq %r14, -328(%rbp)
	movq %r15, -216(%rbp)
	# LowerAlloca(7093:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^4
	# Fixing source-to-dest leaq -8(%rbp), -176(%rbp)
	leaq -8(%rbp), %r15
	movq %r15, -176(%rbp)
	# LowerAlloca(7094:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^5
	# Fixing source-to-dest leaq -16(%rbp), -168(%rbp)
	leaq -16(%rbp), %r15
	movq %r15, -168(%rbp)
	# LowerAlloca(7095:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, var = ^6
	# Fixing source-to-dest leaq -17(%rbp), -152(%rbp)
	leaq -17(%rbp), %r15
	movq %r15, -152(%rbp)
	# LowerAlloca(7096:3): size = 8, type = i64*, var = ^7
	# Fixing source-to-dest leaq -32(%rbp), -184(%rbp)
	leaq -32(%rbp), %r15
	movq %r15, -184(%rbp)
	# LowerAlloca(7097:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^8
	# Fixing source-to-dest leaq -40(%rbp), -144(%rbp)
	leaq -40(%rbp), %r15
	movq %r15, -144(%rbp)
	# LowerAlloca(7098:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^9
	# Fixing source-to-dest leaq -48(%rbp), -136(%rbp)
	leaq -48(%rbp), %r15
	movq %r15, -136(%rbp)
	# LowerAlloca(7099:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^10
	# Fixing source-to-dest leaq -56(%rbp), -128(%rbp)
	leaq -56(%rbp), %r15
	movq %r15, -128(%rbp)
	# LowerAlloca(7100:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, var = ^11
	# Fixing source-to-dest leaq -57(%rbp), -160(%rbp)
	leaq -57(%rbp), %r15
	movq %r15, -160(%rbp)
	# LowerAlloca(7101:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^12
	# Fixing source-to-dest leaq -72(%rbp), -192(%rbp)
	leaq -72(%rbp), %r15
	movq %r15, -192(%rbp)
	# LowerAlloca(7102:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^13
	# Fixing source-to-dest leaq -80(%rbp), -200(%rbp)
	leaq -80(%rbp), %r15
	movq %r15, -200(%rbp)
	# LowerAlloca(7103:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^14
	# Fixing source-to-dest leaq -88(%rbp), -208(%rbp)
	leaq -88(%rbp), %r15
	movq %r15, -208(%rbp)
	# LowerAlloca(7104:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, var = ^15
	leaq -89(%rbp), %rbx
	# LowerAlloca(7105:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^16
	leaq -104(%rbp), %r12
	# LowerAlloca(7106:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^17
	leaq -112(%rbp), %r13
	# LowerAlloca(7107:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, var = ^18
	leaq -113(%rbp), %r14
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7108:3): struct-type: ptr ^4 -> ^19, indices=0,0
	movq -176(%rbp), %rax
	# LowerGetelementptr(7108:3): type of ^19 is ptr*
	# LowerStore(7109:3).9: mov ptr %rdi, (^19)
	movq %rdi, (%rax)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7110:3): struct-type: ptr ^5 -> ^20, indices=0,0
	movq -168(%rbp), %rax
	# LowerGetelementptr(7110:3): type of ^20 is ptr*
	# LowerStore(7111:3).9: mov ptr %rsi, (^20)
	movq %rsi, (%rax)
	# LowerStore(7112:3).9: mov i64 %rdx, (^7)
	movq -184(%rbp), %rax
	movq %rdx, (%rax)
	.___ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElNS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0_T1___M46:
	# SetupCalls(7116:3): move argument ptr nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq -168(%rbp), %rdi
	# SetupCalls(7116:3): move argument ptr nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -176(%rbp), %rsi
	callq _ZN9__gnu_cxxmiIP6LsItemSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_
	# SetupCalls(7116:3): move i64 result from %rax
	movq %rax, %r15
	# LowerIcmp(7117:3): i64 ^22 vs. intlike 16
	cmpq $16, %r15
	setg %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElNS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0_T1___M76
	jmp .___ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElNS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0_T1___M492
	.___ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElNS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0_T1___M76:
	# LowerLoad(7121:3).2: (^7) into i64 ^25
	movq -184(%rbp), %rax
	movq (%rax), %rcx
	# LowerIcmp(7122:3): i64 ^25 vs. intlike 0
	cmpq $0, %rcx
	sete %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElNS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0_T1___M83
	jmp .___ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElNS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0_T1___M227
	.___ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElNS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0_T1___M83:
	# SetupCalls(7126:3): move argument ptr align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq -144(%rbp), %rdi
	# SetupCalls(7126:3): move argument ptr align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -176(%rbp), %rsi
	# SetupCalls(7126:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# SetupCalls(7127:3): move argument ptr align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq -136(%rbp), %rdi
	# SetupCalls(7127:3): move argument ptr align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq -168(%rbp), %rsi
	# SetupCalls(7127:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# SetupCalls(7128:3): move argument ptr align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq -128(%rbp), %rdi
	# SetupCalls(7128:3): move argument ptr align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq -168(%rbp), %rsi
	# SetupCalls(7128:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# SetupCalls(7129:3): move argument ptr align 1 ^11
	# Fixed movzx with identical source and destination widths
	movq -160(%rbp), %rdi
	# SetupCalls(7129:3): move argument ptr align 1 ^6
	# Fixed movzx with identical source and destination widths
	movq -152(%rbp), %rsi
	# SetupCalls(7129:3): move argument i64 1
	movq $1, %rdx
	callq memcpy@PLT
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7130:3): struct-type: ptr ^8 -> ^28, indices=0,0
	movq -144(%rbp), %rax
	# LowerGetelementptr(7130:3): type of ^28 is ptr*
	# LowerLoad(7131:3).2: (^28) into ptr ^29
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7132:3): struct-type: ptr ^9 -> ^30, indices=0,0
	movq -136(%rbp), %rax
	# LowerGetelementptr(7132:3): type of ^30 is ptr*
	# LowerLoad(7133:3).2: (^30) into ptr ^31
	movq (%rax), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7134:3): struct-type: ptr ^10 -> ^32, indices=0,0
	movq -128(%rbp), %rax
	# LowerGetelementptr(7134:3): type of ^32 is ptr*
	# LowerLoad(7135:3).2: (^32) into ptr ^33
	movq (%rax), %r8
	# SetupCalls(7136:3): move argument ptr ^29
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(7136:3): move argument ptr ^31
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(7136:3): move argument ptr ^33
	# Fixed movzx with identical source and destination widths
	movq %r8, %rdx
	callq _ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_T0_
	jmp .___ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElNS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0_T1___M492
	.___ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElNS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0_T1___M227:
	# LowerLoad(7140:3).2: (^7) into i64 ^35
	movq -184(%rbp), %rax
	movq (%rax), %rcx
	# LowerMath(7141:3): ^35, -1 into i64 ^36
	addq $-1, %rcx
	# LowerStore(7142:3).9: mov i64 ^36, (^7)
	movq -184(%rbp), %rax
	movq %rcx, (%rax)
	# SetupCalls(7143:3): move argument ptr align 8 ^13
	# Fixed movzx with identical source and destination widths
	movq -200(%rbp), %rdi
	# SetupCalls(7143:3): move argument ptr align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -176(%rbp), %rsi
	# SetupCalls(7143:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# SetupCalls(7144:3): move argument ptr align 8 ^14
	# Fixed movzx with identical source and destination widths
	movq -208(%rbp), %rdi
	# SetupCalls(7144:3): move argument ptr align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq -168(%rbp), %rsi
	# SetupCalls(7144:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# SetupCalls(7145:3): move argument ptr align 1 ^15
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(7145:3): move argument ptr align 1 ^6
	# Fixed movzx with identical source and destination widths
	movq -152(%rbp), %rsi
	# SetupCalls(7145:3): move argument i64 1
	movq $1, %rdx
	callq memcpy@PLT
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7146:3): struct-type: ptr ^13 -> ^37, indices=0,0
	movq -200(%rbp), %rax
	# LowerGetelementptr(7146:3): type of ^37 is ptr*
	# LowerLoad(7147:3).2: (^37) into ptr ^38
	movq (%rax), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7148:3): struct-type: ptr ^14 -> ^39, indices=0,0
	movq -208(%rbp), %rax
	# LowerGetelementptr(7148:3): type of ^39 is ptr*
	# LowerLoad(7149:3).2: (^39) into ptr ^40
	movq (%rax), %rdx
	# SetupCalls(7150:3): move argument ptr ^38
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(7150:3): move argument ptr ^40
	# Fixed movzx with identical source and destination widths
	movq %rdx, %rsi
	callq _ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEET_SK_SK_T0_
	# SetupCalls(7150:3): move ptr result from %rax
	movq %rax, %r15
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7151:3): struct-type: ptr ^12 -> ^42, indices=0,0
	movq -192(%rbp), %rax
	# LowerGetelementptr(7151:3): type of ^42 is ptr*
	# LowerStore(7152:3).9: mov ptr ^41, (^42)
	movq %r15, (%rax)
	# SetupCalls(7153:3): move argument ptr align 8 ^16
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(7153:3): move argument ptr align 8 ^12
	# Fixed movzx with identical source and destination widths
	movq -192(%rbp), %rsi
	# SetupCalls(7153:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# SetupCalls(7154:3): move argument ptr align 8 ^17
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	# SetupCalls(7154:3): move argument ptr align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq -168(%rbp), %rsi
	# SetupCalls(7154:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# LowerLoad(7155:3).2: (^7) into i64 ^43
	movq -184(%rbp), %rax
	movq (%rax), %r15
	# SetupCalls(7156:3): move argument ptr align 1 ^18
	# Fixed movzx with identical source and destination widths
	movq %r14, %rdi
	# SetupCalls(7156:3): move argument ptr align 1 ^6
	# Fixed movzx with identical source and destination widths
	movq -152(%rbp), %rsi
	# SetupCalls(7156:3): move argument i64 1
	movq $1, %rdx
	callq memcpy@PLT
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7157:3): struct-type: ptr ^16 -> ^44, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(7157:3): type of ^44 is ptr*
	# LowerLoad(7158:3).2: (^44) into ptr ^45
	movq (%rax), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7159:3): struct-type: ptr ^17 -> ^46, indices=0,0
	movq %r13, %rax
	# LowerGetelementptr(7159:3): type of ^46 is ptr*
	# LowerLoad(7160:3).2: (^46) into ptr ^47
	movq (%rax), %rdx
	# SetupCalls(7161:3): move argument ptr ^45
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(7161:3): move argument ptr ^47
	# Fixed movzx with identical source and destination widths
	movq %rdx, %rsi
	# SetupCalls(7161:3): move argument i64 ^43
	# Fixed movzx with identical source and destination widths
	movq %r15, %rdx
	callq _ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElNS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0_T1_
	# SetupCalls(7162:3): move argument ptr align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq -168(%rbp), %rdi
	# SetupCalls(7162:3): move argument ptr align 8 ^12
	# Fixed movzx with identical source and destination widths
	movq -192(%rbp), %rsi
	# SetupCalls(7162:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	jmp .___ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElNS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0_T1___M46
	.___ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElNS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0_T1___M492:
	movq -216(%rbp), %r15
	movq -328(%rbp), %r14
	movq -320(%rbp), %r13
	movq -312(%rbp), %r12
	movq -304(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZN9__gnu_cxx17__normal_iteratorIPKSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEEC2ERKS6_
.p2align 4, 0x90
_ZN9__gnu_cxx17__normal_iteratorIPKSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEEC2ERKS6_:
	.___ZN9__gnu_cxx17__normal_iteratorIPKSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEEC2ERKS6___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(40 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	movq %r15, -40(%rbp)
	# LowerAlloca(9957:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %rbx
	# LowerAlloca(9958:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %rcx
	# LowerStore(9959:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rbx)
	# LowerStore(9960:3).9: mov ptr %rsi, (^4)
	movq %rsi, (%rcx)
	# LowerLoad(9961:3).2: (^3) into ptr ^5
	movq (%rbx), %rax
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator.24"
	# LowerGetelementptr(9962:3): struct-type: ptr ^5 -> ^6, indices=0,0
	# LowerGetelementptr(9962:3): type of ^6 is ptr*
	# LowerLoad(9963:3).2: (^4) into ptr ^7
	movq (%rcx), %rbx
	# LowerLoad(9964:3).2: (^7) into ptr ^8
	# Fixing source-to-dest movq (%rbx), (%rax)
	movq (%rbx), %r15
	movq %r15, (%rax)
	# LowerStore(9965:3).9: mov ptr ^8, (^6)
	movq -40(%rbp), %r15
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_RT0_
.p2align 4, 0x90
_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_RT0_:
	.___ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_RT0___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(392 + 0, 16)
	subq $400, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -216(%rbp)
	movq %r12, -272(%rbp)
	movq %r13, -280(%rbp)
	movq %r14, -288(%rbp)
	movq %r15, -208(%rbp)
	# LowerAlloca(7451:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^4
	# Fixing source-to-dest leaq -8(%rbp), -152(%rbp)
	leaq -8(%rbp), %r15
	movq %r15, -152(%rbp)
	# LowerAlloca(7452:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^5
	leaq -16(%rbp), %rbx
	# LowerAlloca(7453:3): size = 8, type = ptr*, var = ^6
	# Fixing source-to-dest leaq -24(%rbp), -160(%rbp)
	leaq -24(%rbp), %r15
	movq %r15, -160(%rbp)
	# LowerAlloca(7454:3): size = 8, type = i64*, var = ^7
	# Fixing source-to-dest leaq -32(%rbp), -168(%rbp)
	leaq -32(%rbp), %r15
	movq %r15, -168(%rbp)
	# LowerAlloca(7455:3): size = 8, type = i64*, var = ^8
	# Fixing source-to-dest leaq -40(%rbp), -176(%rbp)
	leaq -40(%rbp), %r15
	movq %r15, -176(%rbp)
	# LowerAlloca(7456:3): size = 40, type = %struct.LsItem*, var = ^9
	# Fixing source-to-dest leaq -80(%rbp), -184(%rbp)
	leaq -80(%rbp), %r15
	movq %r15, -184(%rbp)
	# LowerAlloca(7457:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^10
	# Fixing source-to-dest leaq -88(%rbp), -192(%rbp)
	leaq -88(%rbp), %r15
	movq %r15, -192(%rbp)
	# LowerAlloca(7458:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^11
	# Fixing source-to-dest leaq -96(%rbp), -200(%rbp)
	leaq -96(%rbp), %r15
	movq %r15, -200(%rbp)
	# LowerAlloca(7459:3): size = 40, type = %struct.LsItem*, var = ^12
	leaq -136(%rbp), %r12
	# LowerAlloca(7460:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, var = ^13
	leaq -137(%rbp), %r13
	# LowerAlloca(7461:3): size = 4, type = i32*, var = ^14
	leaq -144(%rbp), %r14
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7462:3): struct-type: ptr ^4 -> ^15, indices=0,0
	movq -152(%rbp), %rax
	# LowerGetelementptr(7462:3): type of ^15 is ptr*
	# LowerStore(7463:3).9: mov ptr %rdi, (^15)
	movq %rdi, (%rax)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7464:3): struct-type: ptr ^5 -> ^16, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(7464:3): type of ^16 is ptr*
	# LowerStore(7465:3).9: mov ptr %rsi, (^16)
	movq %rsi, (%rax)
	# LowerStore(7466:3).9: mov ptr %rdx, (^6)
	movq -160(%rbp), %rax
	movq %rdx, (%rax)
	# SetupCalls(7467:3): move argument ptr nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(7467:3): move argument ptr nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -152(%rbp), %rsi
	callq _ZN9__gnu_cxxmiIP6LsItemSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_
	# SetupCalls(7467:3): move i64 result from %rax
	movq %rax, %r15
	# LowerIcmp(7468:3): i64 ^17 vs. intlike 2
	cmpq $2, %r15
	setl %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_RT0___M67
	jmp .___ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_RT0___M68
	.___ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_RT0___M67:
	jmp .___ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_RT0___M377
	.___ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_RT0___M68:
	# SetupCalls(7475:3): move argument ptr nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(7475:3): move argument ptr nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -152(%rbp), %rsi
	callq _ZN9__gnu_cxxmiIP6LsItemSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_
	# SetupCalls(7475:3): move i64 result from %rax
	movq %rax, %rbx
	# LowerStore(7476:3).9: mov i64 ^21, (^7)
	movq -168(%rbp), %rax
	movq %rbx, (%rax)
	# LowerLoad(7477:3).2: (^7) into i64 ^22
	movq -168(%rbp), %rbx
	movq (%rbx), %rax
	# LowerMath(7478:3): ^22, 2 into i64 ^23
	subq $2, %rax
	# LowerSdiv(7479:3): ^23, 2 into i64 ^24
	movq %rax, %rbx
	movq $0, %rdx
	movq %rbx, %rax
	movq $2, %rbx
	idivq %rbx
	movq -176(%rbp), %rbx
	movq %rax, (%rbx)
	# LowerStore(7480:3).9: mov i64 ^24, (^8)
	.___ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_RT0___M114:
	# LowerLoad(7484:3).2: (^8) into i64 ^26
	movq -176(%rbp), %rbx
	movq (%rbx), %rax
	# SetupCalls(7485:3): move argument ptr nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -152(%rbp), %rdi
	# SetupCalls(7485:3): move argument i64 ^26
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEplEl
	# SetupCalls(7485:3): move ptr result from %rax
	movq %rax, %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7486:3): struct-type: ptr ^10 -> ^28, indices=0,0
	movq -192(%rbp), %rax
	# LowerGetelementptr(7486:3): type of ^28 is ptr*
	# LowerStore(7487:3).9: mov ptr ^27, (^28)
	movq %rbx, (%rax)
	# SetupCalls(7488:3): move argument ptr nonnull dereferenceable(8) align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq -192(%rbp), %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEdeEv
	# SetupCalls(7488:3): move ptr result from %rax
	movq %rax, %rbx
	# SetupCalls(7489:3): move argument ptr nonnull dereferenceable(33) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq -184(%rbp), %rdi
	# SetupCalls(7489:3): move argument ptr nonnull dereferenceable(33) align 8 ^29
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZN6LsItemC2EOS_
	# SetupCalls(7490:3): move argument ptr align 8 ^11
	# Fixed movzx with identical source and destination widths
	movq -200(%rbp), %rdi
	# SetupCalls(7490:3): move argument ptr align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -152(%rbp), %rsi
	# SetupCalls(7490:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# LowerLoad(7491:3).2: (^8) into i64 ^30
	movq -176(%rbp), %rax
	movq (%rax), %rbx
	# LowerLoad(7492:3).2: (^7) into i64 ^31
	movq -168(%rbp), %rax
	movq (%rax), %r15
	# SetupCalls(7493:3): move argument ptr nonnull dereferenceable(33) align 8 ^12
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(7493:3): move argument ptr nonnull dereferenceable(33) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq -184(%rbp), %rsi
	callq _ZN6LsItemC2EOS_
	# LowerLoad(7494:3).2: (^6) into ptr ^32
	movq -160(%rbp), %rax
	movq (%rax), %rcx
	# SetupCalls(7495:3): move argument ptr align 1 ^13
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	# SetupCalls(7495:3): move argument ptr align 1 ^32
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(7495:3): move argument i64 1
	movq $1, %rdx
	callq memcpy@PLT
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7496:3): struct-type: ptr ^11 -> ^33, indices=0,0
	movq -200(%rbp), %rax
	# LowerGetelementptr(7496:3): type of ^33 is ptr*
	# LowerLoad(7497:3).2: (^33) into ptr ^34
	movq (%rax), %rcx
	# SetupCalls(7498:3): move argument ptr ^34
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(7498:3): move argument i64 ^30
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(7498:3): move argument i64 ^31
	# Fixed movzx with identical source and destination widths
	movq %r15, %rdx
	# SetupCalls(7498:3): move argument ptr ^12
	# Fixed movzx with identical source and destination widths
	movq %r12, %rcx
	callq _ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_T2_
	# SetupCalls(7499:3): move argument ptr nonnull dereferenceable(33) align 8 ^12
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	callq _ZN6LsItemD2Ev
	# LowerLoad(7500:3).2: (^8) into i64 ^35
	movq -176(%rbp), %rbx
	movq (%rbx), %rax
	# LowerIcmp(7501:3): i64 ^35 vs. intlike 0
	cmpq $0, %rax
	sete %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_RT0___M333
	jmp .___ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_RT0___M336
	.___ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_RT0___M333:
	# LowerStore(7505:3).3: mov $imm, (^14)
	movl $1, (%r14)
	jmp .___ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_RT0___M346
	.___ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_RT0___M336:
	# LowerLoad(7509:3).2: (^8) into i64 ^39
	movq -176(%rbp), %rax
	movq (%rax), %rbx
	# LowerMath(7510:3): ^39, -1 into i64 ^40
	addq $-1, %rbx
	# LowerStore(7511:3).9: mov i64 ^40, (^8)
	movq -176(%rbp), %rax
	movq %rbx, (%rax)
	# LowerStore(7512:3).3: mov $imm, (^14)
	movl $0, (%r14)
	.___ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_RT0___M346:
	# SetupCalls(7516:3): move argument ptr nonnull dereferenceable(33) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq -184(%rbp), %rdi
	callq _ZN6LsItemD2Ev
	# LowerLoad(7517:3).2: (^14) into i32 ^42
	movl (%r14), %eax
	# LowerSwitch(7518:3): begin conditions
	cmpl $0, %eax
	je .___ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_RT0___M376
	cmpl $1, %eax
	je .___ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_RT0___M377
	# LowerSwitch(7518:3): default
	jmp .___ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_RT0___M378
	.___ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_RT0___M376:
	jmp .___ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_RT0___M114
	.___ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_RT0___M377:
	movq -208(%rbp), %r15
	movq -288(%rbp), %r14
	movq -280(%rbp), %r13
	movq -272(%rbp), %r12
	movq -216(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq
	.___ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_RT0___M378:

.section .text
.global _ZN9__gnu_cxx5__ops16__iter_comp_iterIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EENS0_15_Iter_comp_iterIT_EESD_
.p2align 4, 0x90
_ZN9__gnu_cxx5__ops16__iter_comp_iterIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EENS0_15_Iter_comp_iterIT_EESD_:
	.___ZN9__gnu_cxx5__ops16__iter_comp_iterIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EENS0_15_Iter_comp_iterIT_EESD___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(7084:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, var = ^1
	leaq -1(%rbp), %rbx
	# LowerAlloca(7085:3): size = 1, type = %class.anon*, var = ^2
	leaq -2(%rbp), %rax
	# LowerAlloca(7086:3): size = 1, type = %class.anon*, var = ^3
	leaq -3(%rbp), %rax
	# SetupCalls(7087:3): move argument ptr nonnull dereferenceable(1) align 1 ^1
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EC2ESB_
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZN6LsItemC2EOS_
.p2align 4, 0x90
_ZN6LsItemC2EOS_:
	.___ZN6LsItemC2EOS___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(48 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -40(%rbp)
	movq %r12, -32(%rbp)
	movq %r13, -24(%rbp)
	# LowerAlloca(6984:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %rax
	# LowerAlloca(6985:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %r13
	# LowerStore(6986:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rax)
	# LowerStore(6987:3).9: mov ptr %rsi, (^4)
	movq %rsi, (%r13)
	# LowerLoad(6988:3).2: (^3) into ptr ^5
	movq (%rax), %r12
	# tt = Pointer, type = %struct.LsItem
	# LowerGetelementptr(6989:3): struct-type: ptr ^5 -> ^6, indices=0,0
	movq %r12, %rbx
	# LowerGetelementptr(6989:3): type of ^6 is %"class.std::__cxx11::basic_string"*
	# LowerLoad(6990:3).2: (^4) into ptr ^7
	movq (%r13), %rax
	# tt = Pointer, type = %struct.LsItem
	# LowerGetelementptr(6991:3): struct-type: ptr ^7 -> ^8, indices=0,0
	# LowerGetelementptr(6991:3): type of ^8 is %"class.std::__cxx11::basic_string"*
	# SetupCalls(6992:3): move argument ptr nonnull dereferenceable(32) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(6992:3): move argument ptr nonnull dereferenceable(32) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_@PLT
	# tt = Pointer, type = %struct.LsItem
	# LowerGetelementptr(6993:3): struct-type: ptr ^5 -> ^9, indices=0,1
	movq %r12, %rbx
	addq $32, %rbx
	# LowerGetelementptr(6993:3): type of ^9 is i8*
	# LowerLoad(6994:3).2: (^4) into ptr ^10
	movq (%r13), %rcx
	# tt = Pointer, type = %struct.LsItem
	# LowerGetelementptr(6995:3): struct-type: ptr ^10 -> ^11, indices=0,1
	addq $32, %rcx
	# LowerGetelementptr(6995:3): type of ^11 is i8*
	# LowerLoad(6996:3).2: (^11) into i8 ^12
	movb (%rcx), %al
	# LowerTrunc(6997:3): 8 to 1, move
	# LowerTrunc(6997:3): 8 to 1, apply mask
	andq $1, %rax
	# LowerBasicConversion(6998:3): i1 ^13 -> i8 ^14
	movb %al, (%rbx)
	# LowerStore(6999:3).9: mov i8 ^14, (^9)
	movq -24(%rbp), %r13
	movq -32(%rbp), %r12
	movq -40(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE12_M_rightmostEv
.p2align 4, 0x90
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE12_M_rightmostEv:
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE12_M_rightmostEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(9397:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(9398:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(9399:3).2: (^2) into ptr ^3
	movq (%rax), %rcx
	# tt = Pointer, type = %"class.std::_Rb_tree"
	# LowerGetelementptr(9400:3): struct-type: ptr ^3 -> ^4, indices=0,0
	# LowerGetelementptr(9400:3): type of ^4 is %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Rb_tree_impl"*
	# tt = Pointer, type = i8
	# LowerGetelementptr(9401:3): struct-type: ptr ^4 -> ^5, indices=8
	movq %rcx, %rbx
	addq $8, %rbx
	# LowerGetelementptr(9401:3): type of ^5 is i8*
	# tt = Pointer, type = %"struct.std::_Rb_tree_header"
	# LowerGetelementptr(9402:3): struct-type: ptr ^5 -> ^6, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(9402:3): type of ^6 is %"struct.std::_Rb_tree_node_base"*
	# tt = Pointer, type = %"struct.std::_Rb_tree_node_base"
	# LowerGetelementptr(9403:3): struct-type: ptr ^6 -> ^7, indices=0,3
	addq $24, %rax
	# LowerGetelementptr(9403:3): type of ^7 is ptr*
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt12__niter_baseIP6LsItemET_S2_
.p2align 4, 0x90
_ZSt12__niter_baseIP6LsItemET_S2_:
	.___ZSt12__niter_baseIP6LsItemET_S2___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(6928:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(6929:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(6930:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt14__relocate_a_1IP6LsItemS1_SaIS0_EET0_T_S4_S3_RT1_
.p2align 4, 0x90
_ZSt14__relocate_a_1IP6LsItemS1_SaIS0_EET0_T_S4_S3_RT1_:
	.___ZSt14__relocate_a_1IP6LsItemS1_SaIS0_EET0_T_S4_S3_RT1___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(80 + 0, 16)
	subq $80, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -64(%rbp)
	movq %r12, -56(%rbp)
	movq %r13, -48(%rbp)
	movq %r14, -72(%rbp)
	movq %r15, -80(%rbp)
	# LowerAlloca(6886:3): size = 8, type = ptr*, var = ^5
	leaq -8(%rbp), %r13
	# LowerAlloca(6887:3): size = 8, type = ptr*, var = ^6
	leaq -16(%rbp), %r12
	# LowerAlloca(6888:3): size = 8, type = ptr*, var = ^7
	leaq -24(%rbp), %rax
	# LowerAlloca(6889:3): size = 8, type = ptr*, var = ^8
	leaq -32(%rbp), %rbx
	# LowerAlloca(6890:3): size = 8, type = ptr*, var = ^9
	leaq -40(%rbp), %r14
	# LowerStore(6891:3).9: mov ptr %rdi, (^5)
	movq %rdi, (%r13)
	# LowerStore(6892:3).9: mov ptr %rsi, (^6)
	movq %rsi, (%r12)
	# LowerStore(6893:3).9: mov ptr %rdx, (^7)
	movq %rdx, (%rax)
	# LowerStore(6894:3).9: mov ptr %rcx, (^8)
	movq %rcx, (%rbx)
	# LowerLoad(6895:3).2: (^7) into ptr ^10
	# Fixing source-to-dest movq (%rax), (%r14)
	movq (%rax), %r15
	movq %r15, (%r14)
	# LowerStore(6896:3).9: mov ptr ^10, (^9)
	.___ZSt14__relocate_a_1IP6LsItemS1_SaIS0_EET0_T_S4_S3_RT1___M23:
	# LowerLoad(6900:3).2: (^5) into ptr ^12
	movq (%r13), %rax
	# LowerLoad(6901:3).2: (^6) into ptr ^13
	movq (%r12), %rcx
	# LowerIcmp(6902:3): ptr ^12 vs. operand ptr ^13
	cmpq %rcx, %rax
	setne %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZSt14__relocate_a_1IP6LsItemS1_SaIS0_EET0_T_S4_S3_RT1___M32
	jmp .___ZSt14__relocate_a_1IP6LsItemS1_SaIS0_EET0_T_S4_S3_RT1___M83
	.___ZSt14__relocate_a_1IP6LsItemS1_SaIS0_EET0_T_S4_S3_RT1___M32:
	# LowerLoad(6906:3).2: (^9) into ptr ^16
	movq (%r14), %rax
	# LowerLoad(6907:3).2: (^5) into ptr ^17
	movq (%r13), %rcx
	# LowerLoad(6908:3).2: (^8) into ptr ^18
	movq (%rbx), %r8
	# SetupCalls(6909:3): move argument ptr ^16
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(6909:3): move argument ptr ^17
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(6909:3): move argument ptr nonnull dereferenceable(1) align 1 ^18
	# Fixed movzx with identical source and destination widths
	movq %r8, %rdx
	callq _ZSt19__relocate_object_aI6LsItemS0_SaIS0_EEvPT_PT0_RT1_
	# LowerLoad(6913:3).2: (^5) into ptr ^20
	movq (%r13), %rax
	# tt = Pointer, type = %struct.LsItem
	# LowerGetelementptr(6914:3): struct-type: ptr ^20 -> ^21, indices=1
	addq $40, %rax
	# LowerGetelementptr(6914:3): type of ^21 is %struct.LsItem*
	# LowerStore(6915:3).9: mov %struct.LsItem* ^21, (^5)
	movq %rax, (%r13)
	# LowerLoad(6916:3).2: (^9) into ptr ^22
	movq (%r14), %rax
	# tt = Pointer, type = %struct.LsItem
	# LowerGetelementptr(6917:3): struct-type: ptr ^22 -> ^23, indices=1
	addq $40, %rax
	# LowerGetelementptr(6917:3): type of ^23 is %struct.LsItem*
	# LowerStore(6918:3).9: mov %struct.LsItem* ^23, (^9)
	movq %rax, (%r14)
	jmp .___ZSt14__relocate_a_1IP6LsItemS1_SaIS0_EET0_T_S4_S3_RT1___M23
	.___ZSt14__relocate_a_1IP6LsItemS1_SaIS0_EET0_T_S4_S3_RT1___M83:
	# LowerLoad(6922:3).2: (^9) into ptr ^25
	movq (%r14), %rax
	movq -80(%rbp), %r15
	movq -72(%rbp), %r14
	movq -48(%rbp), %r13
	movq -56(%rbp), %r12
	movq -64(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10_Head_baseILm0EPNSt10filesystem7__cxx114path5_List5_ImplELb0EE7_M_headERS6_
.p2align 4, 0x90
_ZNSt10_Head_baseILm0EPNSt10filesystem7__cxx114path5_List5_ImplELb0EE7_M_headERS6_:
	.___ZNSt10_Head_baseILm0EPNSt10filesystem7__cxx114path5_List5_ImplELb0EE7_M_headERS6___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(3924:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(3925:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(3926:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"struct.std::_Head_base.4"
	# LowerGetelementptr(3927:3): struct-type: ptr ^3 -> ^4, indices=0,0
	# LowerGetelementptr(3927:3): type of ^4 is ptr*
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEE7_M_addrEv
.p2align 4, 0x90
_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEE7_M_addrEv:
	.___ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEE7_M_addrEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(4668:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(4669:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(4670:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"struct.__gnu_cxx::__aligned_membuf"
	# LowerGetelementptr(4671:3): struct-type: ptr ^3 -> ^4, indices=0,0
	# LowerGetelementptr(4671:3): type of ^4 is [64 x i8]*
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10filesystem7__cxx114path5_ListD2Ev
.p2align 4, 0x90
_ZNSt10filesystem7__cxx114path5_ListD2Ev:
	.___ZNSt10filesystem7__cxx114path5_ListD2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(3837:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(3838:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(3839:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"struct.std::filesystem::__cxx11::path::_List"
	# LowerGetelementptr(3840:3): struct-type: ptr ^3 -> ^4, indices=0,0
	# LowerGetelementptr(3840:3): type of ^4 is %"class.std::unique_ptr"*
	# SetupCalls(3841:3): move argument ptr nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt10unique_ptrINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEED2Ev
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE17_M_realloc_insertIJS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_
.p2align 4, 0x90
_ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE17_M_realloc_insertIJS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_:
	.___ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE17_M_realloc_insertIJS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(632 + 0, 16)
	subq $640, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -288(%rbp)
	movq %r12, -272(%rbp)
	movq %r13, -320(%rbp)
	movq %r14, -328(%rbp)
	movq %r15, -232(%rbp)
	# LowerAlloca(5276:3): size = 8, type = ptr*, var = ^4
	# Fixing source-to-dest leaq -8(%rbp), -208(%rbp)
	leaq -8(%rbp), %r15
	movq %r15, -208(%rbp)
	# LowerAlloca(5277:3): size = 8, type = ptr*, var = ^5
	# Fixing source-to-dest leaq -16(%rbp), -200(%rbp)
	leaq -16(%rbp), %r15
	movq %r15, -200(%rbp)
	# LowerAlloca(5278:3): size = 8, type = ptr*, var = ^6
	# Fixing source-to-dest leaq -24(%rbp), -192(%rbp)
	leaq -24(%rbp), %r15
	movq %r15, -192(%rbp)
	# LowerAlloca(5279:3): size = 8, type = ptr*, var = ^7
	# Fixing source-to-dest leaq -32(%rbp), -224(%rbp)
	leaq -32(%rbp), %r15
	movq %r15, -224(%rbp)
	# LowerAlloca(5280:3): size = 8, type = ptr*, var = ^8
	# Fixing source-to-dest leaq -40(%rbp), -216(%rbp)
	leaq -40(%rbp), %r15
	movq %r15, -216(%rbp)
	# LowerAlloca(5281:3): size = 8, type = ptr*, var = ^9
	leaq -48(%rbp), %r12
	# LowerAlloca(5282:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator.19"*, var = ^10
	# Fixing source-to-dest leaq -56(%rbp), -184(%rbp)
	leaq -56(%rbp), %r15
	movq %r15, -184(%rbp)
	# LowerAlloca(5283:3): size = 8, type = ptr*, var = ^11
	leaq -64(%rbp), %rcx
	# LowerAlloca(5284:3): size = 8, type = ptr*, var = ^12
	leaq -72(%rbp), %rbx
	# LowerAlloca(5285:3): size = 8, type = i64*, var = ^13
	# Fixing source-to-dest leaq -80(%rbp), -136(%rbp)
	leaq -80(%rbp), %r15
	movq %r15, -136(%rbp)
	# LowerAlloca(5286:3): size = 8, type = ptr*, var = ^14
	# Fixing source-to-dest leaq -88(%rbp), -168(%rbp)
	leaq -88(%rbp), %r15
	movq %r15, -168(%rbp)
	# LowerAlloca(5287:3): size = 8, type = ptr*, var = ^15
	# Fixing source-to-dest leaq -96(%rbp), -176(%rbp)
	leaq -96(%rbp), %r15
	movq %r15, -176(%rbp)
	# LowerAlloca(5288:3): size = 8, type = i64*, var = ^16
	leaq -104(%rbp), %r13
	# LowerAlloca(5289:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator.19"*, var = ^17
	leaq -112(%rbp), %r14
	# LowerAlloca(5290:3): size = 8, type = ptr*, var = ^18
	# Fixing source-to-dest leaq -120(%rbp), -144(%rbp)
	leaq -120(%rbp), %r15
	movq %r15, -144(%rbp)
	# LowerAlloca(5291:3): size = 8, type = ptr*, var = ^19
	# Fixing source-to-dest leaq -128(%rbp), -160(%rbp)
	leaq -128(%rbp), %r15
	movq %r15, -160(%rbp)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator.19"
	# LowerGetelementptr(5292:3): struct-type: ptr ^10 -> ^20, indices=0,0
	movq -184(%rbp), %rax
	# LowerGetelementptr(5292:3): type of ^20 is ptr*
	# LowerStore(5293:3).9: mov ptr %rsi, (^20)
	movq %rsi, (%rax)
	# LowerStore(5294:3).9: mov ptr %rdi, (^11)
	movq %rdi, (%rcx)
	# LowerStore(5295:3).9: mov ptr %rdx, (^12)
	movq %rdx, (%rbx)
	# LowerLoad(5296:3).2: (^11) into ptr ^21
	# Fixing source-to-dest movq (%rcx), -152(%rbp)
	movq (%rcx), %r15
	movq %r15, -152(%rbp)
	# SetupCalls(5297:3): move argument ptr nonnull dereferenceable(24) align 8 ^21
	# Fixed movzx with identical source and destination widths
	movq -152(%rbp), %rdi
	# SetupCalls(5297:3): move argument i64 1
	movq $1, %rsi
	# SetupCalls(5297:3): move argument ptr @.str.27
	leaq .str.27(%rip), %rdx
	callq _ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12_M_check_lenEmPKc
	# SetupCalls(5297:3): move i64 result from %rax
	movq %rax, %r15
	# LowerStore(5298:3).9: mov i64 ^22, (^13)
	movq -136(%rbp), %rax
	movq %r15, (%rax)
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(5299:3): struct-type: ptr ^21 -> ^23, indices=0,0
	movq -152(%rbp), %rax
	# LowerGetelementptr(5299:3): type of ^23 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(5300:3): struct-type: ptr ^23 -> ^24, indices=0,0
	# LowerGetelementptr(5300:3): type of ^24 is ptr*
	# LowerLoad(5301:3).2: (^24) into ptr ^25
	movq -168(%rbp), %rcx
	# Fixing source-to-dest movq (%rax), (%rcx)
	movq (%rax), %r15
	movq %r15, (%rcx)
	# LowerStore(5302:3).9: mov ptr ^25, (^14)
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(5303:3): struct-type: ptr ^21 -> ^26, indices=0,0
	movq -152(%rbp), %rax
	# LowerGetelementptr(5303:3): type of ^26 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(5304:3): struct-type: ptr ^26 -> ^27, indices=0,1
	addq $8, %rax
	# LowerGetelementptr(5304:3): type of ^27 is ptr*
	# LowerLoad(5305:3).2: (^27) into ptr ^28
	movq -176(%rbp), %rcx
	# Fixing source-to-dest movq (%rax), (%rcx)
	movq (%rax), %r15
	movq %r15, (%rcx)
	# LowerStore(5306:3).9: mov ptr ^28, (^15)
	# SetupCalls(5307:3): move argument ptr nonnull dereferenceable(24) align 8 ^21
	# Fixed movzx with identical source and destination widths
	movq -152(%rbp), %rdi
	callq _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE5beginEv
	# SetupCalls(5307:3): move ptr result from %rax
	movq %rax, %r15
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator.19"
	# LowerGetelementptr(5308:3): struct-type: ptr ^17 -> ^30, indices=0,0
	movq %r14, %rax
	# LowerGetelementptr(5308:3): type of ^30 is ptr*
	# LowerStore(5309:3).9: mov ptr ^29, (^30)
	movq %r15, (%rax)
	# SetupCalls(5310:3): move argument ptr nonnull dereferenceable(8) align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq -184(%rbp), %rdi
	# SetupCalls(5310:3): move argument ptr nonnull dereferenceable(8) align 8 ^17
	# Fixed movzx with identical source and destination widths
	movq %r14, %rsi
	callq _ZN9__gnu_cxxmiIPSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_
	# SetupCalls(5310:3): move i64 result from %rax
	movq %rax, %r14
	# LowerStore(5311:3).9: mov i64 ^31, (^16)
	movq %r14, (%r13)
	# LowerLoad(5312:3).2: (^13) into i64 ^32
	movq -136(%rbp), %rcx
	movq (%rcx), %rax
	# SetupCalls(5313:3): move argument ptr nonnull dereferenceable(24) align 8 ^21
	# Fixed movzx with identical source and destination widths
	movq -152(%rbp), %rdi
	# SetupCalls(5313:3): move argument i64 ^32
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE11_M_allocateEm
	# SetupCalls(5313:3): move ptr result from %rax
	movq %rax, %r14
	# LowerStore(5314:3).9: mov ptr ^33, (^18)
	movq -144(%rbp), %rax
	movq %r14, (%rax)
	# LowerLoad(5315:3).2: (^18) into ptr ^34
	movq -144(%rbp), %rcx
	movq -160(%rbp), %rax
	# Fixing source-to-dest movq (%rcx), (%rax)
	movq (%rcx), %r15
	movq %r15, (%rax)
	# LowerStore(5316:3).9: mov ptr ^34, (^19)
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(5317:3): struct-type: ptr ^21 -> ^35, indices=0,0
	movq -152(%rbp), %rax
	# LowerGetelementptr(5317:3): type of ^35 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# LowerLoad(5318:3).2: (^18) into ptr ^36
	movq -144(%rbp), %rdx
	movq (%rdx), %rcx
	# LowerLoad(5319:3).2: (^16) into i64 ^37
	movq (%r13), %rdx
	# tt = Pointer, type = %"class.std::basic_string_view"
	# LowerGetelementptr(5320:3): pointer-type -> ^38
	shlq $4, %rdx
	addq %rcx, %rdx
	# LowerLoad(5321:3).2: (^12) into ptr ^39
	movq (%rbx), %rcx
	# LowerStore(5322:3).9: mov %"struct.std::_Vector_base"* ^35, (^7)
	movq -224(%rbp), %rbx
	movq %rax, (%rbx)
	# LowerStore(5323:3).9: mov %"class.std::basic_string_view"* ^38, (^8)
	movq -216(%rbp), %rax
	movq %rdx, (%rax)
	# LowerStore(5324:3).9: mov ptr ^39, (^9)
	movq %rcx, (%r12)
	# LowerLoad(5325:3).2: (^7) into ptr ^40
	movq -224(%rbp), %rbx
	movq (%rbx), %rax
	# LowerLoad(5326:3).2: (^8) into ptr ^41
	movq -216(%rbp), %rcx
	movq (%rcx), %rbx
	# LowerLoad(5327:3).2: (^9) into ptr ^42
	movq (%r12), %rcx
	# LowerStore(5328:3).9: mov ptr ^40, (^4)
	movq -208(%rbp), %rdx
	movq %rax, (%rdx)
	# LowerStore(5329:3).9: mov ptr ^41, (^5)
	movq -200(%rbp), %rax
	movq %rbx, (%rax)
	# LowerStore(5330:3).9: mov ptr ^42, (^6)
	movq -192(%rbp), %rax
	movq %rcx, (%rax)
	# LowerLoad(5331:3).2: (^4) into ptr ^43
	movq -208(%rbp), %rbx
	movq (%rbx), %rax
	# LowerLoad(5332:3).2: (^5) into ptr ^44
	movq -200(%rbp), %rbx
	movq (%rbx), %rax
	# LowerLoad(5333:3).2: (^6) into ptr ^45
	movq -192(%rbp), %rcx
	movq (%rcx), %rbx
	# SetupCalls(5334:3): move argument ptr align 8 ^44
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(5334:3): move argument ptr align 8 ^45
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(5334:3): move argument i64 16
	movq $16, %rdx
	callq memcpy@PLT
	# LowerStore(5335:3).3: mov $imm, (^19)
	movq -160(%rbp), %rax
	movq $0, (%rax)
	# LowerLoad(5336:3).2: (^14) into ptr ^46
	movq -168(%rbp), %rax
	movq (%rax), %rbx
	# SetupCalls(5337:3): move argument ptr nonnull dereferenceable(8) align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq -184(%rbp), %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIPSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEE4baseEv
	# SetupCalls(5337:3): move ptr result from %rax
	movq %rax, %r12
	# LowerLoad(5338:3).2: (^47) into ptr ^48
	movq (%r12), %r14
	# LowerLoad(5339:3).2: (^18) into ptr ^49
	movq -144(%rbp), %rax
	movq (%rax), %r12
	# SetupCalls(5340:3): move argument ptr nonnull dereferenceable(24) align 8 ^21
	# Fixed movzx with identical source and destination widths
	movq -152(%rbp), %rdi
	callq _ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE19_M_get_Tp_allocatorEv
	# SetupCalls(5340:3): move ptr result from %rax
	movq %rax, %r13
	# SetupCalls(5341:3): move argument ptr ^46
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(5341:3): move argument ptr ^48
	# Fixed movzx with identical source and destination widths
	movq %r14, %rsi
	# SetupCalls(5341:3): move argument ptr ^49
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdx
	# SetupCalls(5341:3): move argument ptr nonnull dereferenceable(1) align 1 ^50
	# Fixed movzx with identical source and destination widths
	movq %r13, %rcx
	callq _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE11_S_relocateEPS3_S6_S6_RS4_
	# SetupCalls(5341:3): move ptr result from %rax
	movq %rax, %rbx
	# LowerStore(5342:3).9: mov ptr ^51, (^19)
	movq -160(%rbp), %rax
	movq %rbx, (%rax)
	# LowerLoad(5343:3).2: (^19) into ptr ^52
	movq -160(%rbp), %rax
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::basic_string_view"
	# LowerGetelementptr(5344:3): struct-type: ptr ^52 -> ^53, indices=1
	addq $16, %rbx
	# LowerGetelementptr(5344:3): type of ^53 is %"class.std::basic_string_view"*
	# LowerStore(5345:3).9: mov %"class.std::basic_string_view"* ^53, (^19)
	movq -160(%rbp), %rax
	movq %rbx, (%rax)
	# SetupCalls(5346:3): move argument ptr nonnull dereferenceable(8) align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq -184(%rbp), %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIPSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEE4baseEv
	# SetupCalls(5346:3): move ptr result from %rax
	movq %rax, %rbx
	# LowerLoad(5347:3).2: (^54) into ptr ^55
	movq (%rbx), %r12
	# LowerLoad(5348:3).2: (^15) into ptr ^56
	movq -176(%rbp), %rax
	movq (%rax), %rbx
	# LowerLoad(5349:3).2: (^19) into ptr ^57
	movq -160(%rbp), %rax
	movq (%rax), %r13
	# SetupCalls(5350:3): move argument ptr nonnull dereferenceable(24) align 8 ^21
	# Fixed movzx with identical source and destination widths
	movq -152(%rbp), %rdi
	callq _ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE19_M_get_Tp_allocatorEv
	# SetupCalls(5350:3): move ptr result from %rax
	movq %rax, %r14
	# SetupCalls(5351:3): move argument ptr ^55
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(5351:3): move argument ptr ^56
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(5351:3): move argument ptr ^57
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdx
	# SetupCalls(5351:3): move argument ptr nonnull dereferenceable(1) align 1 ^58
	# Fixed movzx with identical source and destination widths
	movq %r14, %rcx
	callq _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE11_S_relocateEPS3_S6_S6_RS4_
	# SetupCalls(5351:3): move ptr result from %rax
	movq %rax, %rbx
	# LowerStore(5352:3).9: mov ptr ^59, (^19)
	movq -160(%rbp), %rax
	movq %rbx, (%rax)
	# LowerLoad(5353:3).2: (^14) into ptr ^60
	movq -168(%rbp), %rax
	movq (%rax), %rcx
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(5354:3): struct-type: ptr ^21 -> ^61, indices=0,0
	movq -152(%rbp), %rax
	# LowerGetelementptr(5354:3): type of ^61 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(5355:3): struct-type: ptr ^61 -> ^62, indices=0,2
	addq $16, %rax
	# LowerGetelementptr(5355:3): type of ^62 is ptr*
	# LowerLoad(5356:3).2: (^62) into ptr ^63
	movq (%rax), %rbx
	# LowerLoad(5357:3).2: (^14) into ptr ^64
	movq -168(%rbp), %rdx
	movq (%rdx), %rax
	# LowerBasicConversion(5358:3): ptr ^63 -> i64 ^65
	movq %rbx, %rdx
	# LowerBasicConversion(5359:3): ptr ^64 -> i64 ^66
	movq %rax, %rbx
	# LowerMath(5360:3): ^65, ^66 into i64 ^67
	movq %rdx, %rax
	subq %rbx, %rax
	# LowerSdiv(5361:3): ^67, 16 into i64 ^68
	movq %rax, %rbx
	movq $0, %rdx
	movq %rbx, %rax
	movq $16, %rbx
	idivq %rbx
	movq %rax, %rbx
	# SetupCalls(5362:3): move argument ptr nonnull dereferenceable(24) align 8 ^21
	# Fixed movzx with identical source and destination widths
	movq -152(%rbp), %rdi
	# SetupCalls(5362:3): move argument ptr ^60
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(5362:3): move argument i64 ^68
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdx
	callq _ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE13_M_deallocateEPS3_m
	# LowerLoad(5363:3).2: (^18) into ptr ^69
	movq -144(%rbp), %rbx
	movq (%rbx), %rax
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(5364:3): struct-type: ptr ^21 -> ^70, indices=0,0
	movq -152(%rbp), %rbx
	# LowerGetelementptr(5364:3): type of ^70 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(5365:3): struct-type: ptr ^70 -> ^71, indices=0,0
	# LowerGetelementptr(5365:3): type of ^71 is ptr*
	# LowerStore(5366:3).9: mov ptr ^69, (^71)
	movq %rax, (%rbx)
	# LowerLoad(5367:3).2: (^19) into ptr ^72
	movq -160(%rbp), %rax
	movq (%rax), %rbx
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(5368:3): struct-type: ptr ^21 -> ^73, indices=0,0
	movq -152(%rbp), %rax
	# LowerGetelementptr(5368:3): type of ^73 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(5369:3): struct-type: ptr ^73 -> ^74, indices=0,1
	movq %rax, %rcx
	addq $8, %rcx
	# LowerGetelementptr(5369:3): type of ^74 is ptr*
	# LowerStore(5370:3).9: mov ptr ^72, (^74)
	movq %rbx, (%rcx)
	# LowerLoad(5371:3).2: (^18) into ptr ^75
	movq -144(%rbp), %rax
	movq (%rax), %rbx
	# LowerLoad(5372:3).2: (^13) into i64 ^76
	movq -136(%rbp), %rcx
	movq (%rcx), %rax
	# tt = Pointer, type = %"class.std::basic_string_view"
	# LowerGetelementptr(5373:3): pointer-type -> ^77
	shlq $4, %rax
	addq %rbx, %rax
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(5374:3): struct-type: ptr ^21 -> ^78, indices=0,0
	movq -152(%rbp), %rbx
	# LowerGetelementptr(5374:3): type of ^78 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(5375:3): struct-type: ptr ^78 -> ^79, indices=0,2
	addq $16, %rbx
	# LowerGetelementptr(5375:3): type of ^79 is ptr*
	# LowerStore(5376:3).9: mov %"class.std::basic_string_view"* ^77, (^79)
	movq %rax, (%rbx)
	movq -232(%rbp), %r15
	movq -328(%rbp), %r14
	movq -320(%rbp), %r13
	movq -272(%rbp), %r12
	movq -288(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE3endEv
.p2align 4, 0x90
_ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE3endEv:
	.___ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE3endEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(40 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	movq %r12, -24(%rbp)
	# LowerAlloca(5382:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator.19"*, var = ^2
	leaq -8(%rbp), %r12
	# LowerAlloca(5383:3): size = 8, type = ptr*, var = ^3
	leaq -16(%rbp), %rax
	# LowerStore(5384:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rax)
	# LowerLoad(5385:3).2: (^3) into ptr ^4
	movq (%rax), %rbx
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(5386:3): struct-type: ptr ^4 -> ^5, indices=0,0
	# LowerGetelementptr(5386:3): type of ^5 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(5387:3): struct-type: ptr ^5 -> ^6, indices=0,1
	movq %rbx, %rax
	addq $8, %rax
	# LowerGetelementptr(5387:3): type of ^6 is ptr*
	# SetupCalls(5388:3): move argument ptr nonnull dereferenceable(8) align 8 ^2
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(5388:3): move argument ptr nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZN9__gnu_cxx17__normal_iteratorIPSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEEC2ERKS5_
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator.19"
	# LowerGetelementptr(5389:3): struct-type: ptr ^2 -> ^7, indices=0,0
	movq %r12, %rbx
	# LowerGetelementptr(5389:3): type of ^7 is ptr*
	# LowerLoad(5390:3).2: (^7) into ptr ^8
	movq (%rbx), %rax
	movq -24(%rbp), %r12
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNK9__gnu_cxx17__normal_iteratorIPSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEE4baseEv
.p2align 4, 0x90
_ZNK9__gnu_cxx17__normal_iteratorIPSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEE4baseEv:
	.___ZNK9__gnu_cxx17__normal_iteratorIPSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEE4baseEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(5519:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(5520:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(5521:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator.19"
	# LowerGetelementptr(5522:3): struct-type: ptr ^3 -> ^4, indices=0,0
	# LowerGetelementptr(5522:3): type of ^4 is ptr*
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt10filesystem7__cxx1115directory_entry6statusEv
.p2align 4, 0x90
_ZNKSt10filesystem7__cxx1115directory_entry6statusEv:
	.___ZNKSt10filesystem7__cxx1115directory_entry6statusEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(40 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	movq %r12, -24(%rbp)
	# LowerAlloca(3824:3): size = 8, type = %"class.std::filesystem::file_status"*, var = ^2
	leaq -8(%rbp), %r12
	# LowerAlloca(3825:3): size = 8, type = ptr*, var = ^3
	leaq -16(%rbp), %rbx
	# LowerStore(3826:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rbx)
	# LowerLoad(3827:3).2: (^3) into ptr ^4
	movq (%rbx), %rax
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::directory_entry"
	# LowerGetelementptr(3828:3): struct-type: ptr ^4 -> ^5, indices=0,0
	# LowerGetelementptr(3828:3): type of ^5 is %"class.std::filesystem::__cxx11::path"*
	# SetupCalls(3829:3): move argument ptr nonnull dereferenceable(40) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt10filesystem6statusERKNS_7__cxx114pathE@PLT
	# SetupCalls(3829:3): move i64 result from %rax
	movq %rax, %rbx
	# LowerStore(3830:3).9: mov i64 ^6, (^2)
	movq %rbx, (%r12)
	# LowerLoad(3831:3).2: (^2) into i64 ^7
	movq (%r12), %rax
	movq -24(%rbp), %r12
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt10filesystem7__cxx1115directory_entry12_M_file_typeEv
.p2align 4, 0x90
_ZNKSt10filesystem7__cxx1115directory_entry12_M_file_typeEv:
	.___ZNKSt10filesystem7__cxx1115directory_entry12_M_file_typeEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(80 + 0, 16)
	subq $80, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -48(%rbp)
	movq %r12, -32(%rbp)
	movq %r13, -40(%rbp)
	movq %r15, -64(%rbp)
	# LowerAlloca(3788:3): size = 1, type = i8*, var = ^2
	leaq -1(%rbp), %r12
	# LowerAlloca(3789:3): size = 8, type = ptr*, var = ^3
	leaq -16(%rbp), %rax
	# LowerAlloca(3790:3): size = 8, type = %"class.std::filesystem::file_status"*, var = ^4
	leaq -24(%rbp), %r13
	# LowerStore(3791:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rax)
	# LowerLoad(3792:3).2: (^3) into ptr ^5
	movq (%rax), %rcx
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::directory_entry"
	# LowerGetelementptr(3793:3): struct-type: ptr ^5 -> ^6, indices=0,1
	movq %rcx, %rax
	addq $40, %rax
	# LowerGetelementptr(3793:3): type of ^6 is i8*
	# LowerLoad(3794:3).2: (^6) into i8 ^7
	movb (%rax), %bl
	# LowerIcmp(3795:3): i8 ^7 vs. intlike 0
	cmpb $0, %bl
	setne %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNKSt10filesystem7__cxx1115directory_entry12_M_file_typeEv__M22
	jmp .___ZNKSt10filesystem7__cxx1115directory_entry12_M_file_typeEv__M44
	.___ZNKSt10filesystem7__cxx1115directory_entry12_M_file_typeEv__M22:
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::directory_entry"
	# LowerGetelementptr(3799:3): struct-type: ptr ^5 -> ^10, indices=0,1
	movq %rcx, %rax
	addq $40, %rax
	# LowerGetelementptr(3799:3): type of ^10 is i8*
	# LowerLoad(3800:3).2: (^10) into i8 ^11
	movb (%rax), %bl
	# LowerIcmp(3801:3): i8 ^11 vs. intlike 3
	cmpb $3, %bl
	setne %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNKSt10filesystem7__cxx1115directory_entry12_M_file_typeEv__M34
	jmp .___ZNKSt10filesystem7__cxx1115directory_entry12_M_file_typeEv__M44
	.___ZNKSt10filesystem7__cxx1115directory_entry12_M_file_typeEv__M34:
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::directory_entry"
	# LowerGetelementptr(3805:3): struct-type: ptr ^5 -> ^14, indices=0,1
	movq %rcx, %rax
	addq $40, %rax
	# LowerGetelementptr(3805:3): type of ^14 is i8*
	# LowerLoad(3806:3).2: (^14) into i8 ^15
	# Fixing source-to-dest movb (%rax), (%r12)
	movb (%rax), %r15b
	movb %r15b, (%r12)
	# LowerStore(3807:3).9: mov i8 ^15, (^2)
	jmp .___ZNKSt10filesystem7__cxx1115directory_entry12_M_file_typeEv__M95
	.___ZNKSt10filesystem7__cxx1115directory_entry12_M_file_typeEv__M44:
	# SetupCalls(3811:3): move argument ptr nonnull dereferenceable(41) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	callq _ZNKSt10filesystem7__cxx1115directory_entry6statusEv
	# SetupCalls(3811:3): move i64 result from %rax
	movq %rax, %rbx
	# LowerStore(3812:3).9: mov i64 ^17, (^4)
	movq %rbx, (%r13)
	# SetupCalls(3813:3): move argument ptr nonnull dereferenceable(8) align 4 ^4
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	callq _ZNKSt10filesystem11file_status4typeEv
	# SetupCalls(3813:3): move i8 result from %rax
	movb %al, %bl
	# LowerStore(3814:3).9: mov i8 ^18, (^2)
	movb %bl, (%r12)
	.___ZNKSt10filesystem7__cxx1115directory_entry12_M_file_typeEv__M95:
	# LowerLoad(3818:3).2: (^2) into i8 ^20
	movb (%r12), %al
	movq -64(%rbp), %r15
	movq -40(%rbp), %r13
	movq -32(%rbp), %r12
	movq -48(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10filesystem7__cxx114path8iteratorC2EPKS1_PKNS1_5_CmptE
.p2align 4, 0x90
_ZNSt10filesystem7__cxx114path8iteratorC2EPKS1_PKNS1_5_CmptE:
	.___ZNSt10filesystem7__cxx114path8iteratorC2EPKS1_PKNS1_5_CmptE__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(48 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	movq %r15, -40(%rbp)
	# LowerAlloca(3707:3): size = 8, type = ptr*, var = ^4
	leaq -8(%rbp), %rax
	# LowerAlloca(3708:3): size = 8, type = ptr*, var = ^5
	leaq -16(%rbp), %r8
	# LowerAlloca(3709:3): size = 8, type = ptr*, var = ^6
	leaq -24(%rbp), %rbx
	# LowerStore(3710:3).9: mov ptr %rdi, (^4)
	movq %rdi, (%rax)
	# LowerStore(3711:3).9: mov ptr %rsi, (^5)
	movq %rsi, (%r8)
	# LowerStore(3712:3).9: mov ptr %rdx, (^6)
	movq %rdx, (%rbx)
	# LowerLoad(3713:3).2: (^4) into ptr ^7
	movq (%rax), %rcx
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path::iterator"
	# LowerGetelementptr(3714:3): struct-type: ptr ^7 -> ^8, indices=0,0
	movq %rcx, %rax
	# LowerGetelementptr(3714:3): type of ^8 is ptr*
	# LowerLoad(3715:3).2: (^5) into ptr ^9
	# Fixing source-to-dest movq (%r8), (%rax)
	movq (%r8), %r15
	movq %r15, (%rax)
	# LowerStore(3716:3).9: mov ptr ^9, (^8)
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path::iterator"
	# LowerGetelementptr(3717:3): struct-type: ptr ^7 -> ^10, indices=0,1
	movq %rcx, %rax
	addq $8, %rax
	# LowerGetelementptr(3717:3): type of ^10 is ptr*
	# LowerLoad(3718:3).2: (^6) into ptr ^11
	# Fixing source-to-dest movq (%rbx), (%rax)
	movq (%rbx), %r15
	movq %r15, (%rax)
	# LowerStore(3719:3).9: mov ptr ^11, (^10)
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path::iterator"
	# LowerGetelementptr(3720:3): struct-type: ptr ^7 -> ^12, indices=0,2
	movq %rcx, %rax
	addq $16, %rax
	# LowerGetelementptr(3720:3): type of ^12 is i8*
	# LowerStore(3721:3).3: mov $imm, (^12)
	movb $0, (%rax)
	movq -40(%rbp), %r15
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEEppEv
.p2align 4, 0x90
_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEEppEv:
	.___ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEEppEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	movq %r12, -16(%rbp)
	# LowerAlloca(9580:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(9581:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(9582:3).2: (^2) into ptr ^3
	movq (%rax), %r12
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(9583:3): struct-type: ptr ^3 -> ^4, indices=0,0
	movq %r12, %rbx
	# LowerGetelementptr(9583:3): type of ^4 is ptr*
	# LowerLoad(9584:3).2: (^4) into ptr ^5
	movq (%rbx), %rax
	# SetupCalls(9585:3): move argument ptr ^5
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base@PLT
	# SetupCalls(9585:3): move ptr result from %rax
	movq %rax, %rbx
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(9586:3): struct-type: ptr ^3 -> ^7, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(9586:3): type of ^7 is ptr*
	# LowerStore(9587:3).9: mov ptr ^6, (^7)
	movq %rbx, (%rax)
	movq %r12, %rax
	movq -16(%rbp), %r12
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt11_Tuple_implILm0EJPNSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEEE7_M_headERKS7_
.p2align 4, 0x90
_ZNSt11_Tuple_implILm0EJPNSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEEE7_M_headERKS7_:
	.___ZNSt11_Tuple_implILm0EJPNSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEEE7_M_headERKS7___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(3682:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(3683:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(3684:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# SetupCalls(3685:3): move argument ptr nonnull dereferenceable(8) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt10_Head_baseILm0EPNSt10filesystem7__cxx114path5_List5_ImplELb0EE7_M_headERKS6_
	# SetupCalls(3685:3): move ptr result from %rax
	movq %rax, %rbx
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10filesystem7__cxx1118directory_iteratorC2ERKS1_
.p2align 4, 0x90
_ZNSt10filesystem7__cxx1118directory_iteratorC2ERKS1_:
	.___ZNSt10filesystem7__cxx1118directory_iteratorC2ERKS1___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(1509:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %rax
	# LowerAlloca(1510:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %rcx
	# LowerStore(1511:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rax)
	# LowerStore(1512:3).9: mov ptr %rsi, (^4)
	movq %rsi, (%rcx)
	# LowerLoad(1513:3).2: (^3) into ptr ^5
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::directory_iterator"
	# LowerGetelementptr(1514:3): struct-type: ptr ^5 -> ^6, indices=0,0
	# LowerGetelementptr(1514:3): type of ^6 is %"class.std::__shared_ptr"*
	# LowerLoad(1515:3).2: (^4) into ptr ^7
	movq (%rcx), %rax
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::directory_iterator"
	# LowerGetelementptr(1516:3): struct-type: ptr ^7 -> ^8, indices=0,0
	# LowerGetelementptr(1516:3): type of ^8 is %"class.std::__shared_ptr"*
	# SetupCalls(1517:3): move argument ptr nonnull dereferenceable(16) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(1517:3): move argument ptr nonnull dereferenceable(16) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNSt12__shared_ptrINSt10filesystem7__cxx114_DirELN9__gnu_cxx12_Lock_policyE2EEC2ERKS5_
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE6_M_ptrEv
.p2align 4, 0x90
_ZNKSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE6_M_ptrEv:
	.___ZNKSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE6_M_ptrEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(3653:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(3654:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(3655:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::__uniq_ptr_impl"
	# LowerGetelementptr(3656:3): struct-type: ptr ^3 -> ^4, indices=0,0
	# LowerGetelementptr(3656:3): type of ^4 is %"class.std::tuple"*
	# SetupCalls(3657:3): move argument ptr nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZSt3getILm0EJPNSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSB_
	# SetupCalls(3657:3): move ptr result from %rax
	movq %rax, %rbx
	# LowerLoad(3658:3).2: (^5) into ptr ^6
	movq (%rbx), %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt10unique_ptrINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE3getEv
.p2align 4, 0x90
_ZNKSt10unique_ptrINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE3getEv:
	.___ZNKSt10unique_ptrINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE3getEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(3643:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(3644:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(3645:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::unique_ptr"
	# LowerGetelementptr(3646:3): struct-type: ptr ^3 -> ^4, indices=0,0
	# LowerGetelementptr(3646:3): type of ^4 is %"struct.std::__uniq_ptr_data"*
	# SetupCalls(3647:3): move argument ptr nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNKSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE6_M_ptrEv
	# SetupCalls(3647:3): move ptr result from %rax
	movq %rax, %rbx
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10filesystem7__cxx11eqERKNS0_18directory_iteratorES3_
.p2align 4, 0x90
_ZNSt10filesystem7__cxx11eqERKNS0_18directory_iteratorES3_:
	.___ZNSt10filesystem7__cxx11eqERKNS0_18directory_iteratorES3___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(72 + 0, 16)
	subq $80, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -40(%rbp)
	movq %r12, -24(%rbp)
	movq %r13, -32(%rbp)
	movq %r14, -56(%rbp)
	# LowerAlloca(3399:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %r12
	# LowerAlloca(3400:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %r13
	# LowerStore(3401:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%r12)
	# LowerStore(3402:3).9: mov ptr %rsi, (^4)
	movq %rsi, (%r13)
	# LowerLoad(3403:3).2: (^4) into ptr ^5
	movq (%r13), %rbx
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::directory_iterator"
	# LowerGetelementptr(3404:3): struct-type: ptr ^5 -> ^6, indices=0,0
	# LowerGetelementptr(3404:3): type of ^6 is %"class.std::__shared_ptr"*
	# LowerLoad(3405:3).2: (^3) into ptr ^7
	movq (%r12), %rax
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::directory_iterator"
	# LowerGetelementptr(3406:3): struct-type: ptr ^7 -> ^8, indices=0,0
	# LowerGetelementptr(3406:3): type of ^8 is %"class.std::__shared_ptr"*
	# SetupCalls(3407:3): move argument ptr nonnull dereferenceable(16) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(3407:3): move argument ptr nonnull dereferenceable(16) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNKSt12__shared_ptrINSt10filesystem7__cxx114_DirELN9__gnu_cxx12_Lock_policyE2EE12owner_beforeIS2_EEbRKS_IT_LS4_2EE
	# SetupCalls(3407:3): move i1 result from %rax
	movb %al, %bl
	cmpb $0, %bl
	jne .___ZNSt10filesystem7__cxx11eqERKNS0_18directory_iteratorES3___M46
	jmp .___ZNSt10filesystem7__cxx11eqERKNS0_18directory_iteratorES3___M49
	.___ZNSt10filesystem7__cxx11eqERKNS0_18directory_iteratorES3___M46:
	# MovePhi: intlike -> ^18 (in new block 19 whose parent is 2)
	movb $0, %r14b
	jmp .___ZNSt10filesystem7__cxx11eqERKNS0_18directory_iteratorES3___M92
	.___ZNSt10filesystem7__cxx11eqERKNS0_18directory_iteratorES3___M49:
	# LowerLoad(3411:3).2: (^3) into ptr ^11
	movq (%r12), %rax
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::directory_iterator"
	# LowerGetelementptr(3412:3): struct-type: ptr ^11 -> ^12, indices=0,0
	# LowerGetelementptr(3412:3): type of ^12 is %"class.std::__shared_ptr"*
	# LowerLoad(3413:3).2: (^4) into ptr ^13
	movq (%r13), %rbx
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::directory_iterator"
	# LowerGetelementptr(3414:3): struct-type: ptr ^13 -> ^14, indices=0,0
	# LowerGetelementptr(3414:3): type of ^14 is %"class.std::__shared_ptr"*
	# SetupCalls(3415:3): move argument ptr nonnull dereferenceable(16) align 8 ^12
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(3415:3): move argument ptr nonnull dereferenceable(16) align 8 ^14
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZNKSt12__shared_ptrINSt10filesystem7__cxx114_DirELN9__gnu_cxx12_Lock_policyE2EE12owner_beforeIS2_EEbRKS_IT_LS4_2EE
	# SetupCalls(3415:3): move i1 result from %rax
	movb %al, %bl
	# LowerLogic(3417:3): ^15, true into i1 ^16
	movb %bl, %al
	xorb $1, %al
	# MovePhi: ^16 -> ^18
	movb %al, %r14b
	.___ZNSt10filesystem7__cxx11eqERKNS0_18directory_iteratorES3___M92:
	movb %r14b, %al
	movq -56(%rbp), %r14
	movq -32(%rbp), %r13
	movq -24(%rbp), %r12
	movq -40(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt10filesystem7__cxx114path5emptyEv
.p2align 4, 0x90
_ZNKSt10filesystem7__cxx114path5emptyEv:
	.___ZNKSt10filesystem7__cxx114path5emptyEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(3474:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(3475:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(3476:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path"
	# LowerGetelementptr(3477:3): struct-type: ptr ^3 -> ^4, indices=0,0
	# LowerGetelementptr(3477:3): type of ^4 is %"class.std::__cxx11::basic_string"*
	# SetupCalls(3478:3): move argument ptr nonnull dereferenceable(32) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv@PLT
	# SetupCalls(3478:3): move i1 result from %rax
	movb %al, %bl
	movb %bl, %al
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE15_M_add_ref_copyEv
.p2align 4, 0x90
_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE15_M_add_ref_copyEv:
	.___ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE15_M_add_ref_copyEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(112 + 0, 16)
	subq $112, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -72(%rbp)
	movq %r12, -80(%rbp)
	movq %r15, -104(%rbp)
	# LowerAlloca(3117:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rdx
	# LowerAlloca(3118:3): size = 4, type = i32*, var = ^3
	leaq -12(%rbp), %r9
	# LowerAlloca(3119:3): size = 4, type = i32*, var = ^4
	leaq -16(%rbp), %r10
	# LowerAlloca(3120:3): size = 4, type = i32*, var = ^5
	leaq -20(%rbp), %r8
	# LowerAlloca(3121:3): size = 8, type = ptr*, var = ^6
	leaq -32(%rbp), %rbx
	# LowerAlloca(3122:3): size = 4, type = i32*, var = ^7
	leaq -36(%rbp), %rcx
	# LowerAlloca(3123:3): size = 8, type = ptr*, var = ^8
	leaq -48(%rbp), %rax
	# LowerAlloca(3124:3): size = 4, type = i32*, var = ^9
	leaq -52(%rbp), %r11
	# LowerAlloca(3125:3): size = 8, type = ptr*, var = ^10
	leaq -64(%rbp), %r12
	# LowerStore(3126:3).9: mov ptr %rdi, (^10)
	movq %rdi, (%r12)
	# LowerLoad(3127:3).2: (^10) into ptr ^11
	movq (%r12), %rsi
	# tt = Pointer, type = %"class.std::_Sp_counted_base"
	# LowerGetelementptr(3128:3): struct-type: ptr ^11 -> ^12, indices=0,1
	addq $8, %rsi
	# LowerGetelementptr(3128:3): type of ^12 is i32*
	# LowerStore(3129:3).9: mov %"class.std::_Sp_counted_base"* ^12, (^8)
	movq %rsi, (%rax)
	# LowerStore(3130:3).3: mov $imm, (^9)
	movl $1, (%r11)
	# LowerLoad(3131:3).4: __libc_single_threaded into ^13
	movb __libc_single_threaded(%rip), %sil
	# LowerIcmp(3132:3): i8 ^13 vs. intlike 0
	cmpb $0, %sil
	setne %sil
	andq $1, %rsi
	cmpb $0, %sil
	jne .___ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE15_M_add_ref_copyEv__M38
	jmp .___ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE15_M_add_ref_copyEv__M58
	.___ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE15_M_add_ref_copyEv__M38:
	# LowerLoad(3136:3).2: (^8) into ptr ^16
	movq (%rax), %rdx
	# LowerLoad(3137:3).2: (^9) into i32 ^17
	movl (%r11), %eax
	# LowerStore(3138:3).9: mov ptr ^16, (^6)
	movq %rdx, (%rbx)
	# LowerStore(3139:3).9: mov i32 ^17, (^7)
	movl %eax, (%rcx)
	# LowerLoad(3140:3).2: (^7) into i32 ^18
	movl (%rcx), %edx
	# LowerLoad(3141:3).2: (^6) into ptr ^19
	movq (%rbx), %rax
	# LowerLoad(3142:3).2: (^19) into i32 ^20
	movl (%rax), %ebx
	# LowerMath(3143:3): ^20, ^18 into i32 ^21
	addl %edx, %ebx
	# LowerStore(3144:3).9: mov i32 ^21, (^19)
	movl %ebx, (%rax)
	jmp .___ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE15_M_add_ref_copyEv__M81
	.___ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE15_M_add_ref_copyEv__M58:
	# LowerLoad(3148:3).2: (^8) into ptr ^23
	movq (%rax), %rbx
	# LowerLoad(3149:3).2: (^9) into i32 ^24
	movl (%r11), %eax
	# LowerStore(3150:3).9: mov ptr ^23, (^2)
	movq %rbx, (%rdx)
	# LowerStore(3151:3).9: mov i32 ^24, (^3)
	movl %eax, (%r9)
	# LowerLoad(3152:3).2: (^2) into ptr ^25
	movq (%rdx), %rax
	# LowerLoad(3153:3).2: (^3) into i32 ^26
	# Fixing source-to-dest movl (%r9), (%r10)
	movl (%r9), %r15d
	movl %r15d, (%r10)
	# LowerStore(3154:3).9: mov i32 ^26, (^4)
	# LowerLoad(3155:3).2: (^4) into i32 ^27
	movl (%r10), %ebx
	lock addl %ebx, (%rax)
	# LowerStore(3157:3).9: mov i32 ^28, (^5)
	movl %ebx, (%r8)
	# LowerLoad(3158:3).2: (^5) into i32 ^29
	movl (%r8), %eax
	.___ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE15_M_add_ref_copyEv__M81:
	movq -104(%rbp), %r15
	movq -80(%rbp), %r12
	movq -72(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt12_Vector_baseI6LsItemSaIS0_EE19_M_get_Tp_allocatorEv
.p2align 4, 0x90
_ZNKSt12_Vector_baseI6LsItemSaIS0_EE19_M_get_Tp_allocatorEv:
	.___ZNKSt12_Vector_baseI6LsItemSaIS0_EE19_M_get_Tp_allocatorEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(6820:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(6821:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(6822:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"struct.std::_Vector_base.6"
	# LowerGetelementptr(6823:3): struct-type: ptr ^3 -> ^4, indices=0,0
	# LowerGetelementptr(6823:3): type of ^4 is %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl"*
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC2ERKS2_
.p2align 4, 0x90
_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC2ERKS2_:
	.___ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC2ERKS2___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(48 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	movq %r15, -32(%rbp)
	# LowerAlloca(3090:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %rax
	# LowerAlloca(3091:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %rdx
	# LowerStore(3092:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rax)
	# LowerStore(3093:3).9: mov ptr %rsi, (^4)
	movq %rsi, (%rdx)
	# LowerLoad(3094:3).2: (^3) into ptr ^5
	movq (%rax), %rcx
	# tt = Pointer, type = %"class.std::__shared_count"
	# LowerGetelementptr(3095:3): struct-type: ptr ^5 -> ^6, indices=0,0
	movq %rcx, %rbx
	# LowerGetelementptr(3095:3): type of ^6 is ptr*
	# LowerLoad(3096:3).2: (^4) into ptr ^7
	movq (%rdx), %rax
	# tt = Pointer, type = %"class.std::__shared_count"
	# LowerGetelementptr(3097:3): struct-type: ptr ^7 -> ^8, indices=0,0
	# LowerGetelementptr(3097:3): type of ^8 is ptr*
	# LowerLoad(3098:3).2: (^8) into ptr ^9
	# Fixing source-to-dest movq (%rax), (%rbx)
	movq (%rax), %r15
	movq %r15, (%rbx)
	# LowerStore(3099:3).9: mov ptr ^9, (^6)
	# tt = Pointer, type = %"class.std::__shared_count"
	# LowerGetelementptr(3100:3): struct-type: ptr ^5 -> ^10, indices=0,0
	movq %rcx, %rax
	# LowerGetelementptr(3100:3): type of ^10 is ptr*
	# LowerLoad(3101:3).2: (^10) into ptr ^11
	movq (%rax), %rbx
	# LowerIcmp(3102:3): ptr ^11 vs. intlike 0
	cmpq $0, %rbx
	setne %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC2ERKS2___M35
	jmp .___ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC2ERKS2___M63
	.___ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC2ERKS2___M35:
	# tt = Pointer, type = %"class.std::__shared_count"
	# LowerGetelementptr(3106:3): struct-type: ptr ^5 -> ^14, indices=0,0
	movq %rcx, %rax
	# LowerGetelementptr(3106:3): type of ^14 is ptr*
	# LowerLoad(3107:3).2: (^14) into ptr ^15
	movq (%rax), %rbx
	# SetupCalls(3108:3): move argument ptr nonnull dereferenceable(16) align 8 ^15
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE15_M_add_ref_copyEv
	.___ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC2ERKS2___M63:
	movq -32(%rbp), %r15
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt12__get_helperILm0EPNSt10filesystem7__cxx114path5_List5_ImplEJNS3_13_Impl_deleterEEERKT0_RKSt11_Tuple_implIXT_EJS7_DpT1_EE
.p2align 4, 0x90
_ZSt12__get_helperILm0EPNSt10filesystem7__cxx114path5_List5_ImplEJNS3_13_Impl_deleterEEERKT0_RKSt11_Tuple_implIXT_EJS7_DpT1_EE:
	.___ZSt12__get_helperILm0EPNSt10filesystem7__cxx114path5_List5_ImplEJNS3_13_Impl_deleterEEERKT0_RKSt11_Tuple_implIXT_EJS7_DpT1_EE__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(3673:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(3674:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(3675:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# SetupCalls(3676:3): move argument ptr nonnull dereferenceable(8) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt11_Tuple_implILm0EJPNSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEEE7_M_headERKS7_
	# SetupCalls(3676:3): move ptr result from %rax
	movq %rax, %rbx
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE24_M_release_last_use_coldEv
.p2align 4, 0x90
_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE24_M_release_last_use_coldEv:
	.___ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE24_M_release_last_use_coldEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(3303:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(3304:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(3305:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# SetupCalls(3306:3): move argument ptr nonnull dereferenceable(16) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE19_M_release_last_useEv
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE6_S_keyEPKSt13_Rb_tree_nodeISI_E
.p2align 4, 0x90
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE6_S_keyEPKSt13_Rb_tree_nodeISI_E:
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE6_S_keyEPKSt13_Rb_tree_nodeISI_E__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(48 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	movq %r12, -24(%rbp)
	# LowerAlloca(9593:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerAlloca(9594:3): size = 1, type = %"struct.std::_Select1st"*, var = ^3
	leaq -9(%rbp), %r12
	# LowerStore(9595:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(9596:3).2: (^2) into ptr ^4
	movq (%rax), %rbx
	# SetupCalls(9597:3): move argument ptr nonnull dereferenceable(96) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEE9_M_valptrEv
	# SetupCalls(9597:3): move ptr result from %rax
	movq %rax, %rbx
	# SetupCalls(9598:3): move argument ptr nonnull dereferenceable(1) align 1 ^3
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(9598:3): move argument ptr nonnull dereferenceable(64) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEEclERKSI_
	# SetupCalls(9598:3): move ptr result from %rax
	movq %rax, %rbx
	movq %rbx, %rax
	movq -24(%rbp), %r12
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEixEm
.p2align 4, 0x90
_ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEixEm:
	.___ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEixEm__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(40 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(1396:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %rbx
	# LowerAlloca(1397:3): size = 8, type = i64*, var = ^4
	leaq -16(%rbp), %rcx
	# LowerStore(1398:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rbx)
	# LowerStore(1399:3).9: mov i64 %rsi, (^4)
	movq %rsi, (%rcx)
	# LowerLoad(1400:3).2: (^3) into ptr ^5
	movq (%rbx), %rax
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(1401:3): struct-type: ptr ^5 -> ^6, indices=0,0
	# LowerGetelementptr(1401:3): type of ^6 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(1402:3): struct-type: ptr ^6 -> ^7, indices=0,0
	movq %rax, %rbx
	# LowerGetelementptr(1402:3): type of ^7 is ptr*
	# LowerLoad(1403:3).2: (^7) into ptr ^8
	movq (%rbx), %rax
	# LowerLoad(1404:3).2: (^4) into i64 ^9
	movq (%rcx), %rbx
	# tt = Pointer, type = %"class.std::basic_string_view"
	# LowerGetelementptr(1405:3): pointer-type -> ^10
	shlq $4, %rbx
	addq %rax, %rbx
	movq %rbx, %rax
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10filesystem7__cxx114pathaSIPKcEERNSt9enable_ifIX13__is_path_srcIT_EES1_E4typeERKS6_
.p2align 4, 0x90
_ZNSt10filesystem7__cxx114pathaSIPKcEERNSt9enable_ifIX13__is_path_srcIT_EES1_E4typeERKS6_:
	.___ZNSt10filesystem7__cxx114pathaSIPKcEERNSt9enable_ifIX13__is_path_srcIT_EES1_E4typeERKS6___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(80 + 0, 16)
	subq $80, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -72(%rbp)
	movq %r12, -64(%rbp)
	# LowerAlloca(2034:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %rax
	# LowerAlloca(2035:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %rcx
	# LowerAlloca(2036:3): size = 40, type = %"class.std::filesystem::__cxx11::path"*, var = ^5
	leaq -56(%rbp), %r12
	# LowerStore(2037:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rax)
	# LowerStore(2038:3).9: mov ptr %rsi, (^4)
	movq %rsi, (%rcx)
	# LowerLoad(2039:3).2: (^3) into ptr ^6
	movq (%rax), %rbx
	# LowerLoad(2040:3).2: (^4) into ptr ^7
	movq (%rcx), %rax
	# SetupCalls(2041:3): move argument ptr nonnull dereferenceable(40) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(2041:3): move argument ptr nonnull dereferenceable(8) align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(2041:3): move argument i8 zeroext 2
	movq $2, %rdx
	andq $255, %rdx
	callq _ZNSt10filesystem7__cxx114pathC2IPKcS1_EERKT_NS1_6formatE
	# SetupCalls(2042:3): move argument ptr nonnull dereferenceable(40) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(2042:3): move argument ptr nonnull dereferenceable(40) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r12, %rsi
	callq _ZNSt10filesystem7__cxx114pathaSEOS1_
	# SetupCalls(2042:3): move ptr result from %rax
	movq %rax, %rbx
	# SetupCalls(2043:3): move argument ptr nonnull dereferenceable(40) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	callq _ZNSt10filesystem7__cxx114pathD2Ev
	movq %rbx, %rax
	movq -64(%rbp), %r12
	movq -72(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZN6LsItemaSEOS_
.p2align 4, 0x90
_ZN6LsItemaSEOS_:
	.___ZN6LsItemaSEOS___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(56 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -40(%rbp)
	movq %r12, -32(%rbp)
	movq %r13, -24(%rbp)
	# LowerAlloca(7751:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %rax
	# LowerAlloca(7752:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %r13
	# LowerStore(7753:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rax)
	# LowerStore(7754:3).9: mov ptr %rsi, (^4)
	movq %rsi, (%r13)
	# LowerLoad(7755:3).2: (^3) into ptr ^5
	movq (%rax), %r12
	# tt = Pointer, type = %struct.LsItem
	# LowerGetelementptr(7756:3): struct-type: ptr ^5 -> ^6, indices=0,0
	movq %r12, %rbx
	# LowerGetelementptr(7756:3): type of ^6 is %"class.std::__cxx11::basic_string"*
	# LowerLoad(7757:3).2: (^4) into ptr ^7
	movq (%r13), %rax
	# tt = Pointer, type = %struct.LsItem
	# LowerGetelementptr(7758:3): struct-type: ptr ^7 -> ^8, indices=0,0
	# LowerGetelementptr(7758:3): type of ^8 is %"class.std::__cxx11::basic_string"*
	# SetupCalls(7759:3): move argument ptr nonnull dereferenceable(32) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(7759:3): move argument ptr nonnull dereferenceable(32) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_@PLT
	# SetupCalls(7759:3): move ptr result from %rax
	movq %rax, %rax
	# LowerLoad(7760:3).2: (^4) into ptr ^10
	movq (%r13), %rbx
	# tt = Pointer, type = %struct.LsItem
	# LowerGetelementptr(7761:3): struct-type: ptr ^10 -> ^11, indices=0,1
	addq $32, %rbx
	# LowerGetelementptr(7761:3): type of ^11 is i8*
	# LowerLoad(7762:3).2: (^11) into i8 ^12
	movb (%rbx), %al
	# LowerTrunc(7763:3): 8 to 1, move
	# LowerTrunc(7763:3): 8 to 1, apply mask
	andq $1, %rax
	# tt = Pointer, type = %struct.LsItem
	# LowerGetelementptr(7764:3): struct-type: ptr ^5 -> ^14, indices=0,1
	movq %r12, %rbx
	addq $32, %rbx
	# LowerGetelementptr(7764:3): type of ^14 is i8*
	# LowerBasicConversion(7765:3): i1 ^13 -> i8 ^15
	movb %al, (%rbx)
	# LowerStore(7766:3).9: mov i8 ^15, (^14)
	movq %r12, %rax
	movq -24(%rbp), %r13
	movq -32(%rbp), %r12
	movq -40(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt4lessIPSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EEEclES4_S4_
.p2align 4, 0x90
_ZNKSt4lessIPSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EEEclES4_S4_:
	.___ZNKSt4lessIPSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EEEclES4_S4___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(40 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	# LowerAlloca(3457:3): size = 8, type = ptr*, var = ^4
	leaq -8(%rbp), %r8
	# LowerAlloca(3458:3): size = 8, type = ptr*, var = ^5
	leaq -16(%rbp), %rcx
	# LowerAlloca(3459:3): size = 8, type = ptr*, var = ^6
	leaq -24(%rbp), %rax
	# LowerStore(3460:3).9: mov ptr %rdi, (^4)
	movq %rdi, (%r8)
	# LowerStore(3461:3).9: mov ptr %rsi, (^5)
	movq %rsi, (%rcx)
	# LowerStore(3462:3).9: mov ptr %rdx, (^6)
	movq %rdx, (%rax)
	# LowerLoad(3463:3).2: (^4) into ptr ^7
	movq (%r8), %rbx
	# LowerLoad(3464:3).2: (^5) into ptr ^8
	movq (%rcx), %rbx
	# LowerBasicConversion(3465:3): ptr ^8 -> i64 ^9
	# LowerLoad(3466:3).2: (^6) into ptr ^10
	movq (%rax), %rcx
	# LowerBasicConversion(3467:3): ptr ^10 -> i64 ^11
	# LowerIcmp(3468:3): i64 ^9 vs. operand i64 ^11
	cmpq %rcx, %rbx
	setb %al
	andq $1, %rax
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EED2Ev
.p2align 4, 0x90
_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EED2Ev:
	.___ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EED2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(3177:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(3178:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(3179:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::__shared_count"
	# LowerGetelementptr(3180:3): struct-type: ptr ^3 -> ^4, indices=0,0
	movq %rbx, %rcx
	# LowerGetelementptr(3180:3): type of ^4 is ptr*
	# LowerLoad(3181:3).2: (^4) into ptr ^5
	movq (%rcx), %rax
	# LowerIcmp(3182:3): ptr ^5 vs. intlike 0
	cmpq $0, %rax
	setne %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EED2Ev__M17
	jmp .___ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EED2Ev__M45
	.___ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EED2Ev__M17:
	# tt = Pointer, type = %"class.std::__shared_count"
	# LowerGetelementptr(3186:3): struct-type: ptr ^3 -> ^8, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(3186:3): type of ^8 is ptr*
	# LowerLoad(3187:3).2: (^8) into ptr ^9
	movq (%rax), %rbx
	# SetupCalls(3188:3): move argument ptr nonnull dereferenceable(16) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv
	.___ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EED2Ev__M45:
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEC2Ev
.p2align 4, 0x90
_ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEC2Ev:
	.___ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEC2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(965:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(966:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(967:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# SetupCalls(968:3): move argument ptr nonnull dereferenceable(24) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEC2Ev
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt10filesystem7__cxx114path8iteratorptEv
.p2align 4, 0x90
_ZNKSt10filesystem7__cxx114path8iteratorptEv:
	.___ZNKSt10filesystem7__cxx114path8iteratorptEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(3580:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(3581:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(3582:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# SetupCalls(3583:3): move argument ptr nonnull dereferenceable(17) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNKSt10filesystem7__cxx114path8iteratordeEv
	# SetupCalls(3583:3): move ptr result from %rax
	movq %rax, %rbx
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_
.p2align 4, 0x90
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_:
	.___ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(144 + 0, 16)
	subq $144, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -64(%rbp)
	movq %r12, -72(%rbp)
	movq %r13, -80(%rbp)
	movq %r14, -88(%rbp)
	movq %r15, -56(%rbp)
	# LowerAlloca(3987:3): size = 8, type = ptr*, var = ^4
	leaq -8(%rbp), %rcx
	# LowerAlloca(3988:3): size = 8, type = ptr*, var = ^5
	# Fixing source-to-dest leaq -16(%rbp), -48(%rbp)
	leaq -16(%rbp), %r15
	movq %r15, -48(%rbp)
	# LowerAlloca(3989:3): size = 8, type = ptr*, var = ^6
	leaq -24(%rbp), %rbx
	# LowerAlloca(3990:3): size = 8, type = ptr*, var = ^7
	leaq -32(%rbp), %r12
	# LowerAlloca(3991:3): size = 1, type = %"struct.std::forward_iterator_tag"*, var = ^8
	leaq -33(%rbp), %rax
	# LowerStore(3992:3).9: mov ptr %rdi, (^4)
	movq %rdi, (%rcx)
	# LowerStore(3993:3).9: mov ptr %rsi, (^5)
	movq -48(%rbp), %rax
	movq %rsi, (%rax)
	# LowerStore(3994:3).9: mov ptr %rdx, (^6)
	movq %rdx, (%rbx)
	# LowerLoad(3995:3).2: (^4) into ptr ^9
	movq (%rcx), %r13
	# tt = Pointer, type = %"class.std::__cxx11::basic_string"
	# LowerGetelementptr(3996:3): struct-type: ptr ^9 -> ^10, indices=0,0
	movq %r13, %r14
	# LowerGetelementptr(3996:3): type of ^10 is %"struct.std::__cxx11::basic_string<char>::_Alloc_hider"*
	# SetupCalls(3997:3): move argument ptr nonnull dereferenceable(32) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv@PLT
	# SetupCalls(3997:3): move ptr result from %rax
	movq %rax, %r15
	# LowerLoad(3998:3).2: (^6) into ptr ^12
	movq (%rbx), %rax
	# SetupCalls(3999:3): move argument ptr nonnull dereferenceable(8) align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq %r14, %rdi
	# SetupCalls(3999:3): move argument ptr ^11
	# Fixed movzx with identical source and destination widths
	movq %r15, %rsi
	# SetupCalls(3999:3): move argument ptr nonnull dereferenceable(1) align 1 ^12
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdx
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_@PLT
	# LowerLoad(4000:3).2: (^5) into ptr ^13
	movq -48(%rbp), %rbx
	movq (%rbx), %rax
	# LowerIcmp(4001:3): ptr ^13 vs. intlike 0
	cmpq $0, %rax
	sete %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3___M79
	jmp .___ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3___M101
	.___ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3___M79:
	# SetupCalls(4005:3): move argument ptr @.str.25
	leaq .str.25(%rip), %rdi
	callq _ZSt19__throw_logic_errorPKc@PLT
	.___ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3___M101:
	# LowerLoad(4009:3).2: (^5) into ptr ^17
	movq -48(%rbp), %rax
	movq (%rax), %r14
	# LowerLoad(4010:3).2: (^5) into ptr ^18
	movq -48(%rbp), %rbx
	movq (%rbx), %rax
	# SetupCalls(4011:3): move argument ptr ^18
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt11char_traitsIcE6lengthEPKc
	# SetupCalls(4011:3): move i64 result from %rax
	movq %rax, %rbx
	# tt = Pointer, type = i8
	# LowerGetelementptr(4012:3): pointer-type -> ^20
	movq %rbx, %rax
	addq %r14, %rax
	# LowerStore(4013:3).9: mov i8* ^20, (^7)
	movq %rax, (%r12)
	# LowerLoad(4014:3).2: (^5) into ptr ^21
	movq -48(%rbp), %rbx
	movq (%rbx), %rax
	# LowerLoad(4015:3).2: (^7) into ptr ^22
	movq (%r12), %rbx
	# SetupCalls(4016:3): move argument ptr nonnull dereferenceable(32) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	# SetupCalls(4016:3): move argument ptr ^21
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(4016:3): move argument ptr ^22
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdx
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag
	movq -56(%rbp), %r15
	movq -88(%rbp), %r14
	movq -80(%rbp), %r13
	movq -72(%rbp), %r12
	movq -64(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt12__shared_ptrINSt10filesystem7__cxx114_DirELN9__gnu_cxx12_Lock_policyE2EED2Ev
.p2align 4, 0x90
_ZNSt12__shared_ptrINSt10filesystem7__cxx114_DirELN9__gnu_cxx12_Lock_policyE2EED2Ev:
	.___ZNSt12__shared_ptrINSt10filesystem7__cxx114_DirELN9__gnu_cxx12_Lock_policyE2EED2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(3167:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(3168:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(3169:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::__shared_ptr"
	# LowerGetelementptr(3170:3): struct-type: ptr ^3 -> ^4, indices=0,1
	addq $8, %rbx
	# LowerGetelementptr(3170:3): type of ^4 is %"class.std::__shared_count"*
	# SetupCalls(3171:3): move argument ptr nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EED2Ev
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv
.p2align 4, 0x90
_ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv:
	.___ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(6270:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(6271:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(6272:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator.20"
	# LowerGetelementptr(6273:3): struct-type: ptr ^3 -> ^4, indices=0,0
	movq %rbx, %rcx
	# LowerGetelementptr(6273:3): type of ^4 is ptr*
	# LowerLoad(6274:3).2: (^4) into ptr ^5
	movq (%rcx), %rax
	# tt = Pointer, type = i8
	# LowerGetelementptr(6275:3): struct-type: ptr ^5 -> ^6, indices=1
	addq $1, %rax
	# LowerGetelementptr(6275:3): type of ^6 is i8*
	# LowerStore(6276:3).9: mov i8* ^6, (^4)
	movq %rax, (%rcx)
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt12__shared_ptrINSt10filesystem7__cxx114_DirELN9__gnu_cxx12_Lock_policyE2EEC2ERKS5_
.p2align 4, 0x90
_ZNSt12__shared_ptrINSt10filesystem7__cxx114_DirELN9__gnu_cxx12_Lock_policyE2EEC2ERKS5_:
	.___ZNSt12__shared_ptrINSt10filesystem7__cxx114_DirELN9__gnu_cxx12_Lock_policyE2EEC2ERKS5___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	movq %r15, -32(%rbp)
	# LowerAlloca(3070:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %rax
	# LowerAlloca(3071:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %rcx
	# LowerStore(3072:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rax)
	# LowerStore(3073:3).9: mov ptr %rsi, (^4)
	movq %rsi, (%rcx)
	# LowerLoad(3074:3).2: (^3) into ptr ^5
	movq (%rax), %rbx
	# LowerLoad(3075:3).2: (^4) into ptr ^6
	movq (%rcx), %rax
	# tt = Pointer, type = %"class.std::__shared_ptr"
	# LowerGetelementptr(3076:3): struct-type: ptr ^5 -> ^7, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(3076:3): type of ^7 is ptr*
	# LowerLoad(3077:3).2: (^4) into ptr ^8
	movq (%rcx), %rdx
	# tt = Pointer, type = %"class.std::__shared_ptr"
	# LowerGetelementptr(3078:3): struct-type: ptr ^8 -> ^9, indices=0,0
	# LowerGetelementptr(3078:3): type of ^9 is ptr*
	# LowerLoad(3079:3).2: (^9) into ptr ^10
	# Fixing source-to-dest movq (%rdx), (%rax)
	movq (%rdx), %r15
	movq %r15, (%rax)
	# LowerStore(3080:3).9: mov ptr ^10, (^7)
	# tt = Pointer, type = %"class.std::__shared_ptr"
	# LowerGetelementptr(3081:3): struct-type: ptr ^5 -> ^11, indices=0,1
	movq %rbx, %rdx
	addq $8, %rdx
	# LowerGetelementptr(3081:3): type of ^11 is %"class.std::__shared_count"*
	# LowerLoad(3082:3).2: (^4) into ptr ^12
	movq (%rcx), %rax
	# tt = Pointer, type = %"class.std::__shared_ptr"
	# LowerGetelementptr(3083:3): struct-type: ptr ^12 -> ^13, indices=0,1
	addq $8, %rax
	# LowerGetelementptr(3083:3): type of ^13 is %"class.std::__shared_count"*
	# SetupCalls(3084:3): move argument ptr nonnull dereferenceable(8) align 8 ^11
	# Fixed movzx with identical source and destination widths
	movq %rdx, %rdi
	# SetupCalls(3084:3): move argument ptr nonnull dereferenceable(8) align 8 ^13
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC2ERKS2_
	movq -32(%rbp), %r15
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10filesystem7__cxx1118directory_iteratorC2EOS1_
.p2align 4, 0x90
_ZNSt10filesystem7__cxx1118directory_iteratorC2EOS1_:
	.___ZNSt10filesystem7__cxx1118directory_iteratorC2EOS1___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(3053:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %rax
	# LowerAlloca(3054:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %rcx
	# LowerStore(3055:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rax)
	# LowerStore(3056:3).9: mov ptr %rsi, (^4)
	movq %rsi, (%rcx)
	# LowerLoad(3057:3).2: (^3) into ptr ^5
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::directory_iterator"
	# LowerGetelementptr(3058:3): struct-type: ptr ^5 -> ^6, indices=0,0
	# LowerGetelementptr(3058:3): type of ^6 is %"class.std::__shared_ptr"*
	# LowerLoad(3059:3).2: (^4) into ptr ^7
	movq (%rcx), %rax
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::directory_iterator"
	# LowerGetelementptr(3060:3): struct-type: ptr ^7 -> ^8, indices=0,0
	# LowerGetelementptr(3060:3): type of ^8 is %"class.std::__shared_ptr"*
	# SetupCalls(3061:3): move argument ptr nonnull dereferenceable(16) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(3061:3): move argument ptr nonnull dereferenceable(16) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNSt12__shared_ptrINSt10filesystem7__cxx114_DirELN9__gnu_cxx12_Lock_policyE2EEC1EOS5_@PLT
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt10filesystem11file_status4typeEv
.p2align 4, 0x90
_ZNKSt10filesystem11file_status4typeEv:
	.___ZNKSt10filesystem11file_status4typeEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(3002:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(3003:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(3004:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::filesystem::file_status"
	# LowerGetelementptr(3005:3): struct-type: ptr ^3 -> ^4, indices=0,0
	# LowerGetelementptr(3005:3): type of ^4 is i8*
	# LowerLoad(3006:3).2: (^4) into i8 ^5
	movb (%rbx), %al
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEE6_M_ptrEv
.p2align 4, 0x90
_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEE6_M_ptrEv:
	.___ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEE6_M_ptrEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(4659:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(4660:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(4661:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# SetupCalls(4662:3): move argument ptr nonnull dereferenceable(64) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEE7_M_addrEv
	# SetupCalls(4662:3): move ptr result from %rax
	movq %rax, %rbx
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE17_M_construct_nodeIJRKSI_EEEvPSt13_Rb_tree_nodeISI_EDpOT_
.p2align 4, 0x90
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE17_M_construct_nodeIJRKSI_EEEvPSt13_Rb_tree_nodeISI_EDpOT_:
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE17_M_construct_nodeIJRKSI_EEEvPSt13_Rb_tree_nodeISI_EDpOT___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(224 + 0, 16)
	subq $224, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -136(%rbp)
	movq %r12, -168(%rbp)
	movq %r13, -152(%rbp)
	movq %r14, -160(%rbp)
	movq %r15, -112(%rbp)
	# LowerAlloca(9741:3): size = 8, type = ptr*, var = ^4
	# Fixing source-to-dest leaq -8(%rbp), -96(%rbp)
	leaq -8(%rbp), %r15
	movq %r15, -96(%rbp)
	# LowerAlloca(9742:3): size = 8, type = ptr*, var = ^5
	# Fixing source-to-dest leaq -16(%rbp), -88(%rbp)
	leaq -16(%rbp), %r15
	movq %r15, -88(%rbp)
	# LowerAlloca(9743:3): size = 8, type = ptr*, var = ^6
	# Fixing source-to-dest leaq -24(%rbp), -80(%rbp)
	leaq -24(%rbp), %r15
	movq %r15, -80(%rbp)
	# LowerAlloca(9744:3): size = 8, type = ptr*, var = ^7
	leaq -32(%rbp), %rbx
	# LowerAlloca(9745:3): size = 8, type = ptr*, var = ^8
	# Fixing source-to-dest leaq -40(%rbp), -104(%rbp)
	leaq -40(%rbp), %r15
	movq %r15, -104(%rbp)
	# LowerAlloca(9746:3): size = 8, type = ptr*, var = ^9
	leaq -48(%rbp), %r13
	# LowerAlloca(9747:3): size = 8, type = ptr*, var = ^10
	leaq -56(%rbp), %rcx
	# LowerAlloca(9748:3): size = 8, type = ptr*, var = ^11
	leaq -64(%rbp), %r14
	# LowerAlloca(9749:3): size = 8, type = ptr*, var = ^12
	leaq -72(%rbp), %r12
	# LowerStore(9750:3).9: mov ptr %rdi, (^10)
	movq %rdi, (%rcx)
	# LowerStore(9751:3).9: mov ptr %rsi, (^11)
	movq %rsi, (%r14)
	# LowerStore(9752:3).9: mov ptr %rdx, (^12)
	movq %rdx, (%r12)
	# LowerLoad(9753:3).2: (^10) into ptr ^13
	movq (%rcx), %rax
	# LowerLoad(9754:3).2: (^11) into ptr ^14
	movq (%r14), %rcx
	# SetupCalls(9755:3): move argument ptr nonnull dereferenceable(48) align 8 ^13
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE21_M_get_Node_allocatorEv
	# SetupCalls(9755:3): move ptr result from %rax
	movq %rax, %r15
	# LowerLoad(9756:3).2: (^11) into ptr ^16
	movq (%r14), %rax
	# SetupCalls(9757:3): move argument ptr nonnull dereferenceable(96) align 8 ^16
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEE9_M_valptrEv
	# SetupCalls(9757:3): move ptr result from %rax
	movq %rax, %r14
	# LowerLoad(9758:3).2: (^12) into ptr ^18
	movq (%r12), %rcx
	# LowerStore(9759:3).9: mov ptr ^15, (^7)
	movq %r15, (%rbx)
	# LowerStore(9760:3).9: mov ptr ^17, (^8)
	movq -104(%rbp), %rax
	movq %r14, (%rax)
	# LowerStore(9761:3).9: mov ptr ^18, (^9)
	movq %rcx, (%r13)
	# LowerLoad(9762:3).2: (^7) into ptr ^19
	movq (%rbx), %rax
	# LowerLoad(9763:3).2: (^8) into ptr ^20
	movq -104(%rbp), %rbx
	movq (%rbx), %rcx
	# LowerLoad(9764:3).2: (^9) into ptr ^21
	movq (%r13), %rbx
	# LowerStore(9765:3).9: mov ptr ^19, (^4)
	movq -96(%rbp), %rdx
	movq %rax, (%rdx)
	# LowerStore(9766:3).9: mov ptr ^20, (^5)
	movq -88(%rbp), %rax
	movq %rcx, (%rax)
	# LowerStore(9767:3).9: mov ptr ^21, (^6)
	movq -80(%rbp), %rax
	movq %rbx, (%rax)
	# LowerLoad(9768:3).2: (^4) into ptr ^22
	movq -96(%rbp), %rbx
	movq (%rbx), %rax
	# LowerLoad(9769:3).2: (^5) into ptr ^23
	movq -88(%rbp), %rbx
	movq (%rbx), %rax
	# LowerLoad(9770:3).2: (^6) into ptr ^24
	movq -80(%rbp), %rcx
	movq (%rcx), %rbx
	# SetupCalls(9771:3): move argument ptr nonnull dereferenceable(64) align 8 ^23
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(9771:3): move argument ptr nonnull dereferenceable(64) align 8 ^24
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISA_EEEEEC2ERKSH_
	movq -112(%rbp), %r15
	movq -160(%rbp), %r14
	movq -152(%rbp), %r13
	movq -168(%rbp), %r12
	movq -136(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE10_M_managerERSt9_Any_dataRKSD_St18_Manager_operation
.p2align 4, 0x90
_ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE10_M_managerERSt9_Any_dataRKSD_St18_Manager_operation:
	.___ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE10_M_managerERSt9_Any_dataRKSD_St18_Manager_operation__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(80 + 0, 16)
	subq $80, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -40(%rbp)
	movq %r12, -32(%rbp)
	# LowerAlloca(4367:3): size = 8, type = ptr*, var = ^4
	leaq -8(%rbp), %r12
	# LowerAlloca(4368:3): size = 8, type = ptr*, var = ^5
	leaq -16(%rbp), %rcx
	# LowerAlloca(4369:3): size = 4, type = i32*, var = ^6
	leaq -20(%rbp), %rbx
	# LowerAlloca(4370:3): size = 1, type = %"struct.std::integral_constant"*, var = ^7
	leaq -21(%rbp), %rax
	# LowerStore(4371:3).9: mov ptr %rdi, (^4)
	movq %rdi, (%r12)
	# LowerStore(4372:3).9: mov ptr %rsi, (^5)
	movq %rsi, (%rcx)
	# LowerStore(4373:3).9: mov i32 %edx, (^6)
	movl %edx, (%rbx)
	# LowerLoad(4374:3).2: (^6) into i32 ^8
	movl (%rbx), %eax
	# LowerSwitch(4375:3): begin conditions
	cmpl $0, %eax
	je .___ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE10_M_managerERSt9_Any_dataRKSD_St18_Manager_operation__M27
	cmpl $1, %eax
	je .___ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE10_M_managerERSt9_Any_dataRKSD_St18_Manager_operation__M57
	cmpl $2, %eax
	je .___ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE10_M_managerERSt9_Any_dataRKSD_St18_Manager_operation__M110
	cmpl $3, %eax
	je .___ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE10_M_managerERSt9_Any_dataRKSD_St18_Manager_operation__M161
	# LowerSwitch(4375:3): default
	jmp .___ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE10_M_managerERSt9_Any_dataRKSD_St18_Manager_operation__M185
	.___ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE10_M_managerERSt9_Any_dataRKSD_St18_Manager_operation__M27:
	# LowerLoad(4383:3).2: (^4) into ptr ^10
	movq (%r12), %rax
	# SetupCalls(4384:3): move argument ptr nonnull dereferenceable(16) align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v
	# SetupCalls(4384:3): move ptr result from %rax
	movq %rax, %rbx
	# LowerStore(4385:3).6: load global
	leaq _ZTIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEE(%rip), %rax
	# LowerStore(4385:3).9: mov ptr ^24, (^11)
	movq %rax, (%rbx)
	jmp .___ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE10_M_managerERSt9_Any_dataRKSD_St18_Manager_operation__M185
	.___ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE10_M_managerERSt9_Any_dataRKSD_St18_Manager_operation__M57:
	# LowerLoad(4389:3).2: (^5) into ptr ^13
	movq (%rcx), %rax
	# SetupCalls(4390:3): move argument ptr nonnull dereferenceable(16) align 8 ^13
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE14_M_get_pointerERKSt9_Any_data
	# SetupCalls(4390:3): move ptr result from %rax
	movq %rax, %rbx
	# LowerLoad(4391:3).2: (^4) into ptr ^15
	movq (%r12), %rax
	# SetupCalls(4392:3): move argument ptr nonnull dereferenceable(16) align 8 ^15
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt9_Any_data9_M_accessIPPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEEERT_v
	# SetupCalls(4392:3): move ptr result from %rax
	movq %rax, %r12
	# LowerStore(4393:3).9: mov ptr ^14, (^16)
	movq %rbx, (%r12)
	jmp .___ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE10_M_managerERSt9_Any_dataRKSD_St18_Manager_operation__M185
	.___ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE10_M_managerERSt9_Any_dataRKSD_St18_Manager_operation__M110:
	# LowerLoad(4397:3).2: (^4) into ptr ^18
	movq (%r12), %rbx
	# LowerLoad(4398:3).2: (^5) into ptr ^19
	movq (%rcx), %rax
	# SetupCalls(4399:3): move argument ptr nonnull dereferenceable(16) align 8 ^19
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE14_M_get_pointerERKSt9_Any_data
	# SetupCalls(4399:3): move ptr result from %rax
	movq %rax, %r12
	# SetupCalls(4400:3): move argument ptr nonnull dereferenceable(16) align 8 ^18
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(4400:3): move argument ptr nonnull dereferenceable(8) align 8 ^20
	# Fixed movzx with identical source and destination widths
	movq %r12, %rsi
	callq _ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE15_M_init_functorIRKSB_EEvRSt9_Any_dataOT_
	jmp .___ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE10_M_managerERSt9_Any_dataRKSD_St18_Manager_operation__M185
	.___ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE10_M_managerERSt9_Any_dataRKSD_St18_Manager_operation__M161:
	# LowerLoad(4404:3).2: (^4) into ptr ^22
	movq (%r12), %rax
	# SetupCalls(4405:3): move argument ptr nonnull dereferenceable(16) align 8 ^22
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE
	.___ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE10_M_managerERSt9_Any_dataRKSD_St18_Manager_operation__M185:
	movq $0, %rax
	movq -32(%rbp), %r12
	movq -40(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEENK3$_0clERK6LsItemSB_
.p2align 4, 0x90
_ZZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEENK3$_0clERK6LsItemSB_:
	.___ZZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEENK3$_0clERK6LsItemSB___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(72 + 0, 16)
	subq $80, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -48(%rbp)
	movq %r12, -40(%rbp)
	# LowerAlloca(7875:3): size = 1, type = i1*, var = ^4
	leaq -1(%rbp), %r12
	# LowerAlloca(7876:3): size = 8, type = ptr*, var = ^5
	leaq -16(%rbp), %r8
	# LowerAlloca(7877:3): size = 8, type = ptr*, var = ^6
	leaq -24(%rbp), %rbx
	# LowerAlloca(7878:3): size = 8, type = ptr*, var = ^7
	leaq -32(%rbp), %rcx
	# LowerStore(7879:3).9: mov ptr %rdi, (^5)
	movq %rdi, (%r8)
	# LowerStore(7880:3).9: mov ptr %rsi, (^6)
	movq %rsi, (%rbx)
	# LowerStore(7881:3).9: mov ptr %rdx, (^7)
	movq %rdx, (%rcx)
	# LowerLoad(7882:3).2: (^5) into ptr ^8
	movq (%r8), %rax
	# LowerLoad(7883:3).2: (^6) into ptr ^9
	movq (%rbx), %rdx
	# tt = Pointer, type = %struct.LsItem
	# LowerGetelementptr(7884:3): struct-type: ptr ^9 -> ^10, indices=0,1
	addq $32, %rdx
	# LowerGetelementptr(7884:3): type of ^10 is i8*
	# LowerLoad(7885:3).2: (^10) into i8 ^11
	movb (%rdx), %al
	# LowerTrunc(7886:3): 8 to 1, move
	# LowerTrunc(7886:3): 8 to 1, apply mask
	andq $1, %rax
	# LowerBasicConversion(7887:3): i1 ^12 -> i32 ^13
	movl %eax, %edx
	# Truncate value to 8 bits
	andl $255, %edx
	# LowerLoad(7888:3).2: (^7) into ptr ^14
	movq (%rcx), %rax
	# tt = Pointer, type = %struct.LsItem
	# LowerGetelementptr(7889:3): struct-type: ptr ^14 -> ^15, indices=0,1
	addq $32, %rax
	# LowerGetelementptr(7889:3): type of ^15 is i8*
	# LowerLoad(7890:3).2: (^15) into i8 ^16
	movb (%rax), %sil
	# LowerTrunc(7891:3): 8 to 1, move
	# LowerTrunc(7891:3): 8 to 1, apply mask
	andq $1, %rsi
	# LowerBasicConversion(7892:3): i1 ^17 -> i32 ^18
	movl %esi, %eax
	# Truncate value to 8 bits
	andl $255, %eax
	# LowerIcmp(7893:3): i32 ^13 vs. operand i32 ^18
	cmpl %eax, %edx
	setne %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEENK3$_0clERK6LsItemSB___M56
	jmp .___ZZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEENK3$_0clERK6LsItemSB___M72
	.___ZZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEENK3$_0clERK6LsItemSB___M56:
	# LowerLoad(7897:3).2: (^6) into ptr ^21
	movq (%rbx), %rax
	# tt = Pointer, type = %struct.LsItem
	# LowerGetelementptr(7898:3): struct-type: ptr ^21 -> ^22, indices=0,1
	addq $32, %rax
	# LowerGetelementptr(7898:3): type of ^22 is i8*
	# LowerLoad(7899:3).2: (^22) into i8 ^23
	movb (%rax), %bl
	# LowerTrunc(7900:3): 8 to 1, move
	# LowerTrunc(7900:3): 8 to 1, apply mask
	andq $1, %rbx
	# LowerStore(7901:3).9: mov i1 ^24, (^4)
	movb %bl, (%r12)
	jmp .___ZZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEENK3$_0clERK6LsItemSB___M112
	.___ZZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEENK3$_0clERK6LsItemSB___M72:
	# LowerLoad(7905:3).2: (^6) into ptr ^26
	movq (%rbx), %rax
	# tt = Pointer, type = %struct.LsItem
	# LowerGetelementptr(7906:3): struct-type: ptr ^26 -> ^27, indices=0,0
	# LowerGetelementptr(7906:3): type of ^27 is %"class.std::__cxx11::basic_string"*
	# LowerLoad(7907:3).2: (^7) into ptr ^28
	movq (%rcx), %rbx
	# tt = Pointer, type = %struct.LsItem
	# LowerGetelementptr(7908:3): struct-type: ptr ^28 -> ^29, indices=0,0
	# LowerGetelementptr(7908:3): type of ^29 is %"class.std::__cxx11::basic_string"*
	# SetupCalls(7909:3): move argument ptr nonnull dereferenceable(32) align 8 ^27
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(7909:3): move argument ptr nonnull dereferenceable(32) align 8 ^29
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_
	# SetupCalls(7909:3): move i1 result from %rax
	movb %al, %bl
	# LowerStore(7910:3).9: mov i1 ^30, (^4)
	movb %bl, (%r12)
	.___ZZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEENK3$_0clERK6LsItemSB___M112:
	# LowerLoad(7914:3).2: (^4) into i1 ^32
	movb (%r12), %al
	movq -40(%rbp), %r12
	movq -48(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt17basic_string_viewIcSt11char_traitsIcEEC2EPKcm
.p2align 4, 0x90
_ZNSt17basic_string_viewIcSt11char_traitsIcEEC2EPKcm:
	.___ZNSt17basic_string_viewIcSt11char_traitsIcEEC2EPKcm__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(48 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	movq %r15, -40(%rbp)
	# LowerAlloca(2948:3): size = 8, type = ptr*, var = ^4
	leaq -8(%rbp), %rax
	# LowerAlloca(2949:3): size = 8, type = ptr*, var = ^5
	leaq -16(%rbp), %r8
	# LowerAlloca(2950:3): size = 8, type = i64*, var = ^6
	leaq -24(%rbp), %rbx
	# LowerStore(2951:3).9: mov ptr %rdi, (^4)
	movq %rdi, (%rax)
	# LowerStore(2952:3).9: mov ptr %rsi, (^5)
	movq %rsi, (%r8)
	# LowerStore(2953:3).9: mov i64 %rdx, (^6)
	movq %rdx, (%rbx)
	# LowerLoad(2954:3).2: (^4) into ptr ^7
	movq (%rax), %rcx
	# tt = Pointer, type = %"class.std::basic_string_view"
	# LowerGetelementptr(2955:3): struct-type: ptr ^7 -> ^8, indices=0,0
	movq %rcx, %rax
	# LowerGetelementptr(2955:3): type of ^8 is i64*
	# LowerLoad(2956:3).2: (^6) into i64 ^9
	# Fixing source-to-dest movq (%rbx), (%rax)
	movq (%rbx), %r15
	movq %r15, (%rax)
	# LowerStore(2957:3).9: mov i64 ^9, (^8)
	# tt = Pointer, type = %"class.std::basic_string_view"
	# LowerGetelementptr(2958:3): struct-type: ptr ^7 -> ^10, indices=0,1
	movq %rcx, %rax
	addq $8, %rax
	# LowerGetelementptr(2958:3): type of ^10 is ptr*
	# LowerLoad(2959:3).2: (^5) into ptr ^11
	# Fixing source-to-dest movq (%r8), (%rax)
	movq (%r8), %r15
	movq %r15, (%rax)
	# LowerStore(2960:3).9: mov ptr ^11, (^10)
	movq -40(%rbp), %r15
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt12_Vector_baseI6LsItemSaIS0_EE17_Vector_impl_dataC2Ev
.p2align 4, 0x90
_ZNSt12_Vector_baseI6LsItemSaIS0_EE17_Vector_impl_dataC2Ev:
	.___ZNSt12_Vector_baseI6LsItemSaIS0_EE17_Vector_impl_dataC2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(3037:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(3038:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(3039:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"
	# LowerGetelementptr(3040:3): struct-type: ptr ^3 -> ^4, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(3040:3): type of ^4 is ptr*
	# LowerStore(3041:3).3: mov $imm, (^4)
	movq $0, (%rax)
	# tt = Pointer, type = %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"
	# LowerGetelementptr(3042:3): struct-type: ptr ^3 -> ^5, indices=0,1
	movq %rbx, %rax
	addq $8, %rax
	# LowerGetelementptr(3042:3): type of ^5 is ptr*
	# LowerStore(3043:3).3: mov $imm, (^5)
	movq $0, (%rax)
	# tt = Pointer, type = %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"
	# LowerGetelementptr(3044:3): struct-type: ptr ^3 -> ^6, indices=0,2
	movq %rbx, %rax
	addq $16, %rax
	# LowerGetelementptr(3044:3): type of ^6 is ptr*
	# LowerStore(3045:3).3: mov $imm, (^6)
	movq $0, (%rax)
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE4backEv
.p2align 4, 0x90
_ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE4backEv:
	.___ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE4backEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(72 + 0, 16)
	subq $80, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -48(%rbp)
	movq %r12, -32(%rbp)
	movq %r13, -40(%rbp)
	# LowerAlloca(5396:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerAlloca(5397:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator.19"*, var = ^3
	leaq -16(%rbp), %r12
	# LowerAlloca(5398:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator.19"*, var = ^4
	leaq -24(%rbp), %r13
	# LowerStore(5399:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(5400:3).2: (^2) into ptr ^5
	movq (%rax), %rbx
	# SetupCalls(5401:3): move argument ptr nonnull dereferenceable(24) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE3endEv
	# SetupCalls(5401:3): move ptr result from %rax
	movq %rax, %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator.19"
	# LowerGetelementptr(5402:3): struct-type: ptr ^4 -> ^7, indices=0,0
	movq %r13, %rax
	# LowerGetelementptr(5402:3): type of ^7 is ptr*
	# LowerStore(5403:3).9: mov ptr ^6, (^7)
	movq %rbx, (%rax)
	# SetupCalls(5404:3): move argument ptr nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	# SetupCalls(5404:3): move argument i64 1
	movq $1, %rsi
	callq _ZNK9__gnu_cxx17__normal_iteratorIPSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEEmiEl
	# SetupCalls(5404:3): move ptr result from %rax
	movq %rax, %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator.19"
	# LowerGetelementptr(5405:3): struct-type: ptr ^3 -> ^9, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(5405:3): type of ^9 is ptr*
	# LowerStore(5406:3).9: mov ptr ^8, (^9)
	movq %rbx, (%rax)
	# SetupCalls(5407:3): move argument ptr nonnull dereferenceable(8) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIPSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEEdeEv
	# SetupCalls(5407:3): move ptr result from %rax
	movq %rax, %rbx
	movq %rbx, %rax
	movq -40(%rbp), %r13
	movq -32(%rbp), %r12
	movq -48(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEC2Ev
.p2align 4, 0x90
_ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEC2Ev:
	.___ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEC2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(2654:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(2655:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(2656:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(2657:3): struct-type: ptr ^3 -> ^4, indices=0,0
	# LowerGetelementptr(2657:3): type of ^4 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# SetupCalls(2658:3): move argument ptr nonnull dereferenceable(24) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12_Vector_implC2Ev
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global pr
.p2align 4, 0x90
pr:
	.__pr__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(2639:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %rbx
	# LowerAlloca(2640:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %rdx
	# LowerStore(2641:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rbx)
	# LowerStore(2642:3).9: mov ptr %rsi, (^4)
	movq %rsi, (%rdx)
	# LowerLoad(2643:3).4: stderr into ^5
	movq stderr(%rip), %rcx
	# LowerLoad(2644:3).2: (^3) into ptr ^6
	movq (%rbx), %rax
	# LowerLoad(2645:3).2: (^4) into ptr ^7
	movq (%rdx), %rbx
	# SetupCalls(2646:3): move argument ptr ^5
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(2646:3): move argument ptr @.str.22
	leaq .str.22(%rip), %rsi
	# SetupCalls(2646:3): move argument ptr ^6
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdx
	# SetupCalls(2646:3): move argument ptr ^7
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rcx
	movq $0, %rax
	callq fprintf@PLT
	# SetupCalls(2646:3): move i32 result from %rax
	movl %eax, %eax
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEdeEv
.p2align 4, 0x90
_ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEdeEv:
	.___ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEdeEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(1837:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(1838:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(1839:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(1840:3): struct-type: ptr ^3 -> ^4, indices=0,0
	# LowerGetelementptr(1840:3): type of ^4 is ptr*
	# LowerLoad(1841:3).2: (^4) into ptr ^5
	movq (%rbx), %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZN9__gnu_cxxneIP6LsItemSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_
.p2align 4, 0x90
_ZN9__gnu_cxxneIP6LsItemSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_:
	.___ZN9__gnu_cxxneIP6LsItemSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(56 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	movq %r12, -48(%rbp)
	movq %r13, -32(%rbp)
	# LowerAlloca(1821:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %rbx
	# LowerAlloca(1822:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %r13
	# LowerStore(1823:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rbx)
	# LowerStore(1824:3).9: mov ptr %rsi, (^4)
	movq %rsi, (%r13)
	# LowerLoad(1825:3).2: (^3) into ptr ^5
	movq (%rbx), %rax
	# SetupCalls(1826:3): move argument ptr nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEE4baseEv
	# SetupCalls(1826:3): move ptr result from %rax
	movq %rax, %rbx
	# LowerLoad(1827:3).2: (^6) into ptr ^7
	movq (%rbx), %r12
	# LowerLoad(1828:3).2: (^4) into ptr ^8
	movq (%r13), %rax
	# SetupCalls(1829:3): move argument ptr nonnull dereferenceable(8) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEE4baseEv
	# SetupCalls(1829:3): move ptr result from %rax
	movq %rax, %rbx
	# LowerLoad(1830:3).2: (^9) into ptr ^10
	movq (%rbx), %rax
	# LowerIcmp(1831:3): ptr ^7 vs. operand ptr ^10
	cmpq %rax, %r12
	setne %al
	andq $1, %rax
	movq -32(%rbp), %r13
	movq -48(%rbp), %r12
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE
.p2align 4, 0x90
_Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE:
	.___Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(328 + 0, 16)
	subq $336, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -216(%rbp)
	movq %r12, -208(%rbp)
	movq %r13, -192(%rbp)
	movq %r14, -176(%rbp)
	movq %r15, -168(%rbp)
	# LowerAlloca(1924:3): size = 4, type = i32*, var = ^2
	# Fixing source-to-dest leaq -4(%rbp), -144(%rbp)
	leaq -4(%rbp), %r15
	movq %r15, -144(%rbp)
	# LowerAlloca(1925:3): size = 8, type = ptr*, var = ^3
	leaq -16(%rbp), %r14
	# LowerAlloca(1926:3): size = 40, type = %"class.std::filesystem::__cxx11::path"*, var = ^4
	# Fixing source-to-dest leaq -56(%rbp), -152(%rbp)
	leaq -56(%rbp), %r15
	movq %r15, -152(%rbp)
	# LowerAlloca(1927:3): size = 8, type = ptr*, var = ^5
	leaq -64(%rbp), %r13
	# LowerAlloca(1928:3): size = 4, type = i32*, var = ^6
	# Fixing source-to-dest leaq -68(%rbp), -160(%rbp)
	leaq -68(%rbp), %r15
	movq %r15, -160(%rbp)
	# LowerAlloca(1929:3): size = 32, type = %"class.std::__cxx11::basic_string"*, var = ^7
	leaq -104(%rbp), %r12
	# LowerAlloca(1930:3): size = 32, type = %"class.std::__cxx11::basic_string"*, var = ^8
	leaq -136(%rbp), %rbx
	# LowerStore(1931:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%r14)
	# LowerLoad(1932:3).2: (^3) into ptr ^9
	movq (%r14), %rax
	# SetupCalls(1933:3): move argument ptr nonnull dereferenceable(24) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE4sizeEv
	# SetupCalls(1933:3): move i64 result from %rax
	movq %rax, %r15
	movq $2, %rax
	# LowerIcmp(1934:3): i64 ^56 vs. operand i64 ^10
	cmpq %r15, %rax
	setb %al
	andq $1, %rax
	cmpb $0, %al
	jne .___Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M47
	jmp .___Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M151
	.___Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M47:
	# SetupCalls(1938:3): move argument ptr nonnull dereferenceable(8) align 8 @_ZSt4cerr
	leaq _ZSt4cerr(%rip), %rdi
	# SetupCalls(1938:3): move argument ptr @.str.1
	leaq .str.1(%rip), %rsi
	callq _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
	# SetupCalls(1938:3): move ptr result from %rax
	movq %rax, %rbx
	# LowerLoad(1939:3).2: (^3) into ptr ^14
	movq (%r14), %rax
	# SetupCalls(1940:3): move argument ptr nonnull dereferenceable(24) align 8 ^14
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE4sizeEv
	# SetupCalls(1940:3): move i64 result from %rax
	movq %rax, %r12
	# SetupCalls(1941:3): move argument ptr nonnull dereferenceable(8) align 8 ^13
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(1941:3): move argument i64 ^15
	# Fixed movzx with identical source and destination widths
	movq %r12, %rsi
	callq _ZNSolsEm@PLT
	# SetupCalls(1941:3): move ptr result from %rax
	movq %rax, %rbx
	# SetupCalls(1942:3): move argument ptr nonnull dereferenceable(8) align 8 ^16
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(1942:3): move argument i8 signext 10
	movq $10, %rsi
	movsbq %sil, %rsi
	callq _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@PLT
	# SetupCalls(1942:3): move ptr result from %rax
	movq %rax, %rax
	# LowerStore(1943:3).3: mov $imm, (^2)
	movq -144(%rbp), %rax
	movl $1, (%rax)
	jmp .___Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M701
	.___Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M151:
	# SetupCalls(1947:3): move argument ptr nonnull dereferenceable(40) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -152(%rbp), %rdi
	callq _ZNSt10filesystem7__cxx114pathC2Ev
	# LowerLoad(1948:3).2: (^3) into ptr ^19
	movq (%r14), %rax
	# SetupCalls(1949:3): move argument ptr nonnull dereferenceable(24) align 8 ^19
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE4sizeEv
	# SetupCalls(1949:3): move i64 result from %rax
	movq %rax, %r15
	# LowerIcmp(1950:3): i64 ^20 vs. intlike 2
	cmpq $2, %r15
	sete %al
	andq $1, %rax
	cmpb $0, %al
	jne .___Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M202
	jmp .___Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M255
	.___Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M202:
	# LowerLoad(1954:3).2: (^3) into ptr ^23
	movq (%r14), %rax
	# SetupCalls(1955:3): move argument ptr nonnull dereferenceable(24) align 8 ^23
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(1955:3): move argument i64 1
	movq $1, %rsi
	callq _ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEixEm
	# SetupCalls(1955:3): move ptr result from %rax
	movq %rax, %r13
	# SetupCalls(1956:3): move argument ptr nonnull dereferenceable(40) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -152(%rbp), %rdi
	# SetupCalls(1956:3): move argument ptr nonnull dereferenceable(16) align 8 ^24
	# Fixed movzx with identical source and destination widths
	movq %r13, %rsi
	callq _ZNSt10filesystem7__cxx114pathaSISt17basic_string_viewIcSt11char_traitsIcEEEERNSt9enable_ifIX13__is_path_srcIT_EES1_E4typeERKS8_
	# SetupCalls(1956:3): move ptr result from %rax
	movq %rax, %rax
	jmp .___Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M357
	.___Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M255:
	# SetupCalls(1960:3): move argument ptr @.str.5
	leaq .str.5(%rip), %rdi
	callq getenv@PLT
	# SetupCalls(1960:3): move ptr result from %rax
	movq %rax, %r14
	# LowerStore(1961:3).9: mov ptr ^27, (^5)
	movq %r14, (%r13)
	# LowerLoad(1962:3).2: (^5) into ptr ^28
	movq (%r13), %rax
	# LowerIcmp(1963:3): ptr ^28 vs. intlike 0
	cmpq $0, %rax
	setne %al
	andq $1, %rax
	cmpb $0, %al
	jne .___Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M287
	jmp .___Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M326
	.___Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M287:
	# LowerLoad(1967:3).2: (^5) into ptr ^31
	movq (%r13), %rax
	# tt = Pointer, type = i8
	# LowerGetelementptr(1968:3): struct-type: ptr ^31 -> ^32, indices=0
	# LowerGetelementptr(1968:3): type of ^32 is i8*
	# LowerLoad(1969:3).2: (^32) into i8 ^33
	movb (%rax), %cl
	# LowerIcmp(1970:3): i8 ^33 vs. intlike 0
	cmpb $0, %cl
	setne %al
	andq $1, %rax
	cmpb $0, %al
	jne .___Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M300
	jmp .___Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M326
	.___Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M300:
	# SetupCalls(1974:3): move argument ptr nonnull dereferenceable(40) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -152(%rbp), %rdi
	# SetupCalls(1974:3): move argument ptr nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r13, %rsi
	callq _ZNSt10filesystem7__cxx114pathaSIPKcEERNSt9enable_ifIX13__is_path_srcIT_EES1_E4typeERKS6_
	# SetupCalls(1974:3): move ptr result from %rax
	movq %rax, %rax
	jmp .___Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M356
	.___Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M326:
	# SetupCalls(1978:3): move argument ptr nonnull dereferenceable(8) align 8 @_ZSt4cerr
	leaq _ZSt4cerr(%rip), %rdi
	# SetupCalls(1978:3): move argument ptr @.str.6
	leaq .str.6(%rip), %rsi
	callq _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
	# SetupCalls(1978:3): move ptr result from %rax
	movq %rax, %rax
	# LowerStore(1979:3).3: mov $imm, (^2)
	movq -144(%rbp), %rax
	movl $2, (%rax)
	# LowerStore(1980:3).3: mov $imm, (^6)
	movq -160(%rbp), %rax
	movl $1, (%rax)
	jmp .___Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M679
	.___Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M356:
	.___Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M357:
	# SetupCalls(1987:3): move argument ptr nonnull dereferenceable(40) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -152(%rbp), %rdi
	callq _ZNSt10filesystem6existsERKNS_7__cxx114pathE
	# SetupCalls(1987:3): move i1 result from %rax
	movb %al, %r13b
	cmpb $0, %r13b
	jne .___Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M505
	.___Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M381:
	# SetupCalls(1991:3): move argument ptr nonnull dereferenceable(8) align 8 @_ZSt4cerr
	leaq _ZSt4cerr(%rip), %rdi
	# SetupCalls(1991:3): move argument ptr @.str.7
	leaq .str.7(%rip), %rsi
	callq _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
	# SetupCalls(1991:3): move ptr result from %rax
	movq %rax, %rbx
	# SetupCalls(1992:3): move argument ptr sret align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(1992:3): move argument ptr nonnull dereferenceable(40) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -152(%rbp), %rsi
	callq _ZNKSt10filesystem7__cxx114path6stringEv
	# SetupCalls(1993:3): move argument ptr nonnull dereferenceable(8) align 8 ^43
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(1993:3): move argument ptr nonnull dereferenceable(32) align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq %r12, %rsi
	callq _ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKNSt7__cxx1112basic_stringIS4_S5_T1_EE@PLT
	# SetupCalls(1993:3): move ptr result from %rax
	movq %rax, %rbx
	# SetupCalls(1994:3): move argument ptr nonnull dereferenceable(8) align 8 ^44
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(1994:3): move argument ptr @.str.8
	leaq .str.8(%rip), %rsi
	callq _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
	# SetupCalls(1994:3): move ptr result from %rax
	movq %rax, %rax
	# SetupCalls(1995:3): move argument ptr nonnull dereferenceable(32) align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
	# LowerStore(1996:3).3: mov $imm, (^2)
	movq -144(%rbp), %rax
	movl $3, (%rax)
	# LowerStore(1997:3).3: mov $imm, (^6)
	movq -160(%rbp), %rax
	movl $1, (%rax)
	jmp .___Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M679
	.___Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M505:
	# SetupCalls(2001:3): move argument ptr nonnull dereferenceable(40) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -152(%rbp), %rdi
	callq _ZNSt10filesystem12is_directoryERKNS_7__cxx114pathE
	# SetupCalls(2001:3): move i1 result from %rax
	movb %al, %r12b
	cmpb $0, %r12b
	jne .___Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M653
	.___Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M529:
	# SetupCalls(2005:3): move argument ptr nonnull dereferenceable(8) align 8 @_ZSt4cerr
	leaq _ZSt4cerr(%rip), %rdi
	# SetupCalls(2005:3): move argument ptr @.str.7
	leaq .str.7(%rip), %rsi
	callq _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
	# SetupCalls(2005:3): move ptr result from %rax
	movq %rax, %r12
	# SetupCalls(2006:3): move argument ptr sret align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(2006:3): move argument ptr nonnull dereferenceable(40) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -152(%rbp), %rsi
	callq _ZNKSt10filesystem7__cxx114path6stringEv
	# SetupCalls(2007:3): move argument ptr nonnull dereferenceable(8) align 8 ^49
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(2007:3): move argument ptr nonnull dereferenceable(32) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKNSt7__cxx1112basic_stringIS4_S5_T1_EE@PLT
	# SetupCalls(2007:3): move ptr result from %rax
	movq %rax, %r12
	# SetupCalls(2008:3): move argument ptr nonnull dereferenceable(8) align 8 ^50
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(2008:3): move argument ptr @.str.9
	leaq .str.9(%rip), %rsi
	callq _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
	# SetupCalls(2008:3): move ptr result from %rax
	movq %rax, %rax
	# SetupCalls(2009:3): move argument ptr nonnull dereferenceable(32) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
	# LowerStore(2010:3).3: mov $imm, (^2)
	movq -144(%rbp), %rax
	movl $4, (%rax)
	# LowerStore(2011:3).3: mov $imm, (^6)
	movq -160(%rbp), %rax
	movl $1, (%rax)
	jmp .___Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M679
	.___Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M653:
	# SetupCalls(2015:3): move argument ptr nonnull dereferenceable(40) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -152(%rbp), %rdi
	callq _ZNSt10filesystem12current_pathERKNS_7__cxx114pathE@PLT
	# LowerStore(2016:3).3: mov $imm, (^2)
	movq -144(%rbp), %rax
	movl $0, (%rax)
	# LowerStore(2017:3).3: mov $imm, (^6)
	movq -160(%rbp), %rax
	movl $1, (%rax)
	.___Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M679:
	# SetupCalls(2021:3): move argument ptr nonnull dereferenceable(40) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -152(%rbp), %rdi
	callq _ZNSt10filesystem7__cxx114pathD2Ev
	.___Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M701:
	# LowerLoad(2025:3).2: (^2) into i32 ^55
	movq -144(%rbp), %rax
	movl (%rax), %ebx
	movl %ebx, %eax
	movq -168(%rbp), %r15
	movq -176(%rbp), %r14
	movq -192(%rbp), %r13
	movq -208(%rbp), %r12
	movq -216(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEC2ESt16initializer_listIS3_ERKS4_
.p2align 4, 0x90
_ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEC2ESt16initializer_listIS3_ERKS4_:
	.___ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEC2ESt16initializer_listIS3_ERKS4___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(80 + 0, 16)
	subq $80, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -56(%rbp)
	movq %r12, -64(%rbp)
	movq %r13, -48(%rbp)
	# LowerAlloca(998:3): size = 16, type = %"class.std::initializer_list"*, var = ^5
	leaq -16(%rbp), %r13
	# LowerAlloca(999:3): size = 8, type = ptr*, var = ^6
	leaq -24(%rbp), %rbx
	# LowerAlloca(1000:3): size = 8, type = ptr*, var = ^7
	leaq -32(%rbp), %r8
	# LowerAlloca(1001:3): size = 1, type = %"struct.std::forward_iterator_tag"*, var = ^8
	leaq -33(%rbp), %rax
	# LowerAlloca(1002:3): size = 1, type = %"struct.std::random_access_iterator_tag"*, var = ^9
	leaq -34(%rbp), %rax
	# tt = Pointer, type = {ptr, i64}
	# LowerGetelementptr(1003:3): struct-type: ptr ^5 -> ^10, indices=0,0
	movq %r13, %rax
	# LowerGetelementptr(1003:3): type of ^10 is ptr*
	# LowerStore(1004:3).9: mov ptr %rsi, (^10)
	movq %rsi, (%rax)
	# tt = Pointer, type = {ptr, i64}
	# LowerGetelementptr(1005:3): struct-type: ptr ^5 -> ^11, indices=0,1
	movq %r13, %rax
	addq $8, %rax
	# LowerGetelementptr(1005:3): type of ^11 is i64*
	# LowerStore(1006:3).9: mov i64 %rdx, (^11)
	movq %rdx, (%rax)
	# LowerStore(1007:3).9: mov ptr %rdi, (^6)
	movq %rdi, (%rbx)
	# LowerStore(1008:3).9: mov ptr %rcx, (^7)
	movq %rcx, (%r8)
	# LowerLoad(1009:3).2: (^6) into ptr ^12
	movq (%rbx), %r12
	# LowerLoad(1010:3).2: (^7) into ptr ^13
	movq (%r8), %rax
	# SetupCalls(1011:3): move argument ptr nonnull dereferenceable(24) align 8 ^12
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(1011:3): move argument ptr nonnull dereferenceable(1) align 1 ^13
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEC2ERKS4_
	# SetupCalls(1012:3): move argument ptr nonnull dereferenceable(16) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	callq _ZNKSt16initializer_listISt17basic_string_viewIcSt11char_traitsIcEEE5beginEv
	# SetupCalls(1012:3): move ptr result from %rax
	movq %rax, %rbx
	# SetupCalls(1013:3): move argument ptr nonnull dereferenceable(16) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	callq _ZNKSt16initializer_listISt17basic_string_viewIcSt11char_traitsIcEEE3endEv
	# SetupCalls(1013:3): move ptr result from %rax
	movq %rax, %r13
	# SetupCalls(1014:3): move argument ptr nonnull dereferenceable(24) align 8 ^12
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(1014:3): move argument ptr ^14
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(1014:3): move argument ptr ^15
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdx
	callq _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE19_M_range_initializeIPKS3_EEvT_S9_St20forward_iterator_tag
	movq -48(%rbp), %r13
	movq -64(%rbp), %r12
	movq -56(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10filesystem7__cxx114pathC2IA2_cS1_EERKT_NS1_6formatE
.p2align 4, 0x90
_ZNSt10filesystem7__cxx114pathC2IA2_cS1_EERKT_NS1_6formatE:
	.___ZNSt10filesystem7__cxx114pathC2IA2_cS1_EERKT_NS1_6formatE__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(264 + 0, 16)
	subq $272, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -152(%rbp)
	movq %r12, -168(%rbp)
	movq %r13, -192(%rbp)
	movq %r14, -200(%rbp)
	movq %r15, -136(%rbp)
	# LowerAlloca(5845:3): size = 8, type = ptr*, var = ^4
	# Fixing source-to-dest leaq -8(%rbp), -128(%rbp)
	leaq -8(%rbp), %r15
	movq %r15, -128(%rbp)
	# LowerAlloca(5846:3): size = 8, type = ptr*, var = ^5
	# Fixing source-to-dest leaq -16(%rbp), -104(%rbp)
	leaq -16(%rbp), %r15
	movq %r15, -104(%rbp)
	# LowerAlloca(5847:3): size = 8, type = ptr*, var = ^6
	leaq -24(%rbp), %rbx
	# LowerAlloca(5848:3): size = 8, type = ptr*, var = ^7
	leaq -32(%rbp), %rcx
	# LowerAlloca(5849:3): size = 8, type = ptr*, var = ^8
	leaq -40(%rbp), %rax
	# LowerAlloca(5850:3): size = 1, type = i8*, var = ^9
	leaq -41(%rbp), %r9
	# LowerAlloca(5851:3): size = 16, type = %"class.std::basic_string_view"*, var = ^10
	# Fixing source-to-dest leaq -64(%rbp), -120(%rbp)
	leaq -64(%rbp), %r15
	movq %r15, -120(%rbp)
	# LowerAlloca(5852:3): size = 16, type = %"class.std::basic_string_view"*, var = ^11
	leaq -80(%rbp), %r12
	# LowerAlloca(5853:3): size = 1, type = %"class.std::allocator.0"*, var = ^12
	# Fixing source-to-dest leaq -81(%rbp), -112(%rbp)
	leaq -81(%rbp), %r15
	movq %r15, -112(%rbp)
	# LowerStore(5854:3).9: mov ptr %rdi, (^7)
	movq %rdi, (%rcx)
	# LowerStore(5855:3).9: mov ptr %rsi, (^8)
	movq %rsi, (%rax)
	# LowerStore(5856:3).9: mov i8 %dl, (^9)
	movb %dl, (%r9)
	# LowerLoad(5857:3).2: (^7) into ptr ^13
	# Fixing source-to-dest movq (%rcx), -96(%rbp)
	movq (%rcx), %r15
	movq %r15, -96(%rbp)
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path"
	# LowerGetelementptr(5858:3): struct-type: ptr ^13 -> ^14, indices=0,0
	movq -96(%rbp), %r13
	# LowerGetelementptr(5858:3): type of ^14 is %"class.std::__cxx11::basic_string"*
	# LowerLoad(5859:3).2: (^8) into ptr ^15
	movq (%rax), %rcx
	# SetupCalls(5860:3): move argument ptr nonnull dereferenceable(2) align 1 ^15
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	callq _ZNSt10filesystem7__cxx118__detail17__effective_rangeIA2_cEEDaRKT_
	# SetupCalls(5860:3): move 128-bit result from %rax and %rdx
	# Multireg move: <%hax %hdx> -> <%hr14 %hr15>
	movq %rax, %r14
	movq %rdx, %r15
	# tt = Pointer, type = {i64, ptr}
	# LowerGetelementptr(5861:3): struct-type: ptr ^11 -> ^17, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(5861:3): type of ^17 is i64*
	# LowerExtractvalue(5863:3)
	# PaddedStructs({i64, ptr} -> i64): move from pack ^16 ({i64, ptr}) to ^36 (opaque), index = 0
	movq %r14, %rdx
	movq %rdx, %rcx
	# LowerStore(5863:3).9: mov i64 ^18, (^17)
	movq %rcx, (%rax)
	# tt = Pointer, type = {i64, ptr}
	# LowerGetelementptr(5864:3): struct-type: ptr ^11 -> ^19, indices=0,1
	movq %r12, %rax
	addq $8, %rax
	# LowerGetelementptr(5864:3): type of ^19 is ptr*
	# LowerExtractvalue(5866:3)
	# PaddedStructs({i64, ptr} -> ptr): move from pack ^16 ({i64, ptr}) to ^37 (opaque), index = 1
	movq %r15, %rdx
	movq %rdx, %rcx
	# LowerStore(5866:3).9: mov ptr ^20, (^19)
	movq %rcx, (%rax)
	# tt = Pointer, type = {i64, ptr}
	# LowerGetelementptr(5867:3): struct-type: ptr ^11 -> ^21, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(5867:3): type of ^21 is i64*
	# LowerLoad(5868:3).2: (^21) into i64 ^22
	movq (%rax), %rcx
	# tt = Pointer, type = {i64, ptr}
	# LowerGetelementptr(5869:3): struct-type: ptr ^11 -> ^23, indices=0,1
	movq %r12, %rax
	addq $8, %rax
	# LowerGetelementptr(5869:3): type of ^23 is ptr*
	# LowerLoad(5870:3).2: (^23) into ptr ^24
	movq (%rax), %rdx
	# SetupCalls(5871:3): move argument i64 ^22
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(5871:3): move argument ptr ^24
	# Fixed movzx with identical source and destination widths
	movq %rdx, %rsi
	callq _ZNSt10filesystem7__cxx114path10_S_convertISt17basic_string_viewIcSt11char_traitsIcEEEEDaT_
	# SetupCalls(5871:3): move 128-bit result from %rax and %rdx
	# Multireg move: <%hax %hdx> -> <%hr12 %hr14>
	movq %rax, %r12
	movq %rdx, %r14
	# tt = Pointer, type = {i64, ptr}
	# LowerGetelementptr(5872:3): struct-type: ptr ^10 -> ^26, indices=0,0
	movq -120(%rbp), %rax
	# LowerGetelementptr(5872:3): type of ^26 is i64*
	# LowerExtractvalue(5874:3)
	# PaddedStructs({i64, ptr} -> i64): move from pack ^25 ({i64, ptr}) to ^38 (opaque), index = 0
	movq %r12, %rdx
	movq %rdx, %rcx
	# LowerStore(5874:3).9: mov i64 ^27, (^26)
	movq %rcx, (%rax)
	# tt = Pointer, type = {i64, ptr}
	# LowerGetelementptr(5875:3): struct-type: ptr ^10 -> ^28, indices=0,1
	movq -120(%rbp), %rax
	addq $8, %rax
	# LowerGetelementptr(5875:3): type of ^28 is ptr*
	# LowerExtractvalue(5877:3)
	# PaddedStructs({i64, ptr} -> ptr): move from pack ^25 ({i64, ptr}) to ^39 (opaque), index = 1
	movq %r14, %rdx
	movq %rdx, %rcx
	# LowerStore(5877:3).9: mov ptr ^29, (^28)
	movq %rcx, (%rax)
	# LowerStore(5878:3).9: mov %"class.std::allocator.0"* ^12, (^6)
	# Fixing source-to-dest movq -112(%rbp), (%rbx)
	movq -112(%rbp), %r15
	movq %r15, (%rbx)
	# LowerLoad(5879:3).2: (^6) into ptr ^30
	movq -128(%rbp), %rax
	# Fixing source-to-dest movq (%rbx), (%rax)
	movq (%rbx), %r15
	movq %r15, (%rax)
	# LowerStore(5880:3).9: mov ptr ^30, (^4)
	# LowerLoad(5881:3).2: (^4) into ptr ^31
	movq -128(%rbp), %rbx
	movq (%rbx), %rax
	# SetupCalls(5882:3): move argument ptr nonnull dereferenceable(32) align 8 ^14
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	# SetupCalls(5882:3): move argument ptr nonnull dereferenceable(16) align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq -120(%rbp), %rsi
	# SetupCalls(5882:3): move argument ptr nonnull dereferenceable(1) align 1 ^12
	# Fixed movzx with identical source and destination widths
	movq -112(%rbp), %rdx
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ISt17basic_string_viewIcS2_EvEERKT_RKS3_
	# LowerStore(5883:3).9: mov %"class.std::allocator.0"* ^12, (^5)
	movq -104(%rbp), %rax
	# Fixing source-to-dest movq -112(%rbp), (%rax)
	movq -112(%rbp), %r15
	movq %r15, (%rax)
	# LowerLoad(5884:3).2: (^5) into ptr ^32
	movq -104(%rbp), %rbx
	movq (%rbx), %rax
	# SetupCalls(5885:3): move argument ptr nonnull dereferenceable(1) align 1 ^32
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt15__new_allocatorIcED2Ev
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path"
	# LowerGetelementptr(5886:3): struct-type: ptr ^13 -> ^33, indices=0,1
	movq -96(%rbp), %rax
	addq $32, %rax
	# LowerGetelementptr(5886:3): type of ^33 is %"struct.std::filesystem::__cxx11::path::_List"*
	# SetupCalls(5887:3): move argument ptr nonnull dereferenceable(8) align 8 ^33
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt10filesystem7__cxx114path5_ListC1Ev@PLT
	# SetupCalls(5888:3): move argument ptr nonnull dereferenceable(40) align 8 ^13
	# Fixed movzx with identical source and destination widths
	movq -96(%rbp), %rdi
	callq _ZNSt10filesystem7__cxx114path14_M_split_cmptsEv@PLT
	movq -136(%rbp), %r15
	movq -200(%rbp), %r14
	movq -192(%rbp), %r13
	movq -168(%rbp), %r12
	movq -152(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10filesystem7__cxx115beginENS0_18directory_iteratorE
.p2align 4, 0x90
_ZNSt10filesystem7__cxx115beginENS0_18directory_iteratorE:
	.___ZNSt10filesystem7__cxx115beginENS0_18directory_iteratorE__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(8 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	# LowerAlloca(1501:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %rax
	# LowerStore(1502:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rax)
	# SetupCalls(1503:3): move argument ptr nonnull dereferenceable(16) align 8 %rdi
	# Semiunclobber non-live %rdi into %rdi
	movq %rdi, %rdi
	# SetupCalls(1503:3): move argument ptr nonnull dereferenceable(16) align 8 %rsi
	# Semiunclobber non-live %rsi into %rsi
	movq %rsi, %rsi
	callq _ZNSt10filesystem7__cxx1118directory_iteratorC2EOS1_
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardC2EPS4_
.p2align 4, 0x90
_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardC2EPS4_:
	.___ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardC2EPS4___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	movq %r15, -32(%rbp)
	# LowerAlloca(4141:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %rbx
	# LowerAlloca(4142:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %rcx
	# LowerStore(4143:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rbx)
	# LowerStore(4144:3).9: mov ptr %rsi, (^4)
	movq %rsi, (%rcx)
	# LowerLoad(4145:3).2: (^3) into ptr ^5
	movq (%rbx), %rax
	# tt = Pointer, type = %struct._Guard
	# LowerGetelementptr(4146:3): struct-type: ptr ^5 -> ^6, indices=0,0
	# LowerGetelementptr(4146:3): type of ^6 is ptr*
	# LowerLoad(4147:3).2: (^4) into ptr ^7
	# Fixing source-to-dest movq (%rcx), (%rax)
	movq (%rcx), %r15
	movq %r15, (%rax)
	# LowerStore(4148:3).9: mov ptr ^7, (^6)
	movq -32(%rbp), %r15
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EED2Ev
.p2align 4, 0x90
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EED2Ev:
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EED2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	movq %r12, -24(%rbp)
	# LowerAlloca(4492:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(4493:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(4494:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# SetupCalls(4495:3): move argument ptr nonnull dereferenceable(48) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE8_M_beginEv
	# SetupCalls(4495:3): move ptr result from %rax
	movq %rax, %r12
	# SetupCalls(4496:3): move argument ptr nonnull dereferenceable(48) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(4496:3): move argument ptr ^4
	# Fixed movzx with identical source and destination widths
	movq %r12, %rsi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE8_M_eraseEPSt13_Rb_tree_nodeISI_E
	# tt = Pointer, type = %"class.std::_Rb_tree"
	# LowerGetelementptr(4497:3): struct-type: ptr ^3 -> ^5, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(4497:3): type of ^5 is %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Rb_tree_impl"*
	# SetupCalls(4498:3): move argument ptr nonnull dereferenceable(48) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE13_Rb_tree_implISM_Lb1EED2Ev
	movq -24(%rbp), %r12
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0_
.p2align 4, 0x90
_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0_:
	.___ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(304 + 0, 16)
	subq $304, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -208(%rbp)
	movq %r12, -240(%rbp)
	movq %r13, -248(%rbp)
	movq %r14, -256(%rbp)
	movq %r15, -168(%rbp)
	# LowerAlloca(7182:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^3
	# Fixing source-to-dest leaq -8(%rbp), -144(%rbp)
	leaq -8(%rbp), %r15
	movq %r15, -144(%rbp)
	# LowerAlloca(7183:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^4
	# Fixing source-to-dest leaq -16(%rbp), -112(%rbp)
	leaq -16(%rbp), %r15
	movq %r15, -112(%rbp)
	# LowerAlloca(7184:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, var = ^5
	# Fixing source-to-dest leaq -17(%rbp), -104(%rbp)
	leaq -17(%rbp), %r15
	movq %r15, -104(%rbp)
	# LowerAlloca(7185:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^6
	# Fixing source-to-dest leaq -32(%rbp), -160(%rbp)
	leaq -32(%rbp), %r15
	movq %r15, -160(%rbp)
	# LowerAlloca(7186:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^7
	# Fixing source-to-dest leaq -40(%rbp), -152(%rbp)
	leaq -40(%rbp), %r15
	movq %r15, -152(%rbp)
	# LowerAlloca(7187:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, var = ^8
	leaq -41(%rbp), %rbx
	# LowerAlloca(7188:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^9
	# Fixing source-to-dest leaq -56(%rbp), -128(%rbp)
	leaq -56(%rbp), %r15
	movq %r15, -128(%rbp)
	# LowerAlloca(7189:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^10
	# Fixing source-to-dest leaq -64(%rbp), -120(%rbp)
	leaq -64(%rbp), %r15
	movq %r15, -120(%rbp)
	# LowerAlloca(7190:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, var = ^11
	# Fixing source-to-dest leaq -65(%rbp), -136(%rbp)
	leaq -65(%rbp), %r15
	movq %r15, -136(%rbp)
	# LowerAlloca(7191:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^12
	leaq -80(%rbp), %r12
	# LowerAlloca(7192:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^13
	leaq -88(%rbp), %r13
	# LowerAlloca(7193:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, var = ^14
	leaq -89(%rbp), %r14
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7194:3): struct-type: ptr ^3 -> ^15, indices=0,0
	movq -144(%rbp), %rax
	# LowerGetelementptr(7194:3): type of ^15 is ptr*
	# LowerStore(7195:3).9: mov ptr %rdi, (^15)
	movq %rdi, (%rax)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7196:3): struct-type: ptr ^4 -> ^16, indices=0,0
	movq -112(%rbp), %rax
	# LowerGetelementptr(7196:3): type of ^16 is ptr*
	# LowerStore(7197:3).9: mov ptr %rsi, (^16)
	movq %rsi, (%rax)
	# SetupCalls(7198:3): move argument ptr nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -112(%rbp), %rdi
	# SetupCalls(7198:3): move argument ptr nonnull dereferenceable(8) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq -144(%rbp), %rsi
	callq _ZN9__gnu_cxxmiIP6LsItemSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_
	# SetupCalls(7198:3): move i64 result from %rax
	movq %rax, %r15
	# LowerIcmp(7199:3): i64 ^17 vs. intlike 16
	cmpq $16, %r15
	setg %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M67
	jmp .___ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M300
	.___ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M67:
	# SetupCalls(7203:3): move argument ptr align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq -160(%rbp), %rdi
	# SetupCalls(7203:3): move argument ptr align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq -144(%rbp), %rsi
	# SetupCalls(7203:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# SetupCalls(7204:3): move argument ptr nonnull dereferenceable(8) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq -144(%rbp), %rdi
	# SetupCalls(7204:3): move argument i64 16
	movq $16, %rsi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEplEl
	# SetupCalls(7204:3): move ptr result from %rax
	movq %rax, %r12
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7205:3): struct-type: ptr ^7 -> ^21, indices=0,0
	movq -152(%rbp), %rax
	# LowerGetelementptr(7205:3): type of ^21 is ptr*
	# LowerStore(7206:3).9: mov ptr ^20, (^21)
	movq %r12, (%rax)
	# SetupCalls(7207:3): move argument ptr align 1 ^8
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(7207:3): move argument ptr align 1 ^5
	# Fixed movzx with identical source and destination widths
	movq -104(%rbp), %rsi
	# SetupCalls(7207:3): move argument i64 1
	movq $1, %rdx
	callq memcpy@PLT
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7208:3): struct-type: ptr ^6 -> ^22, indices=0,0
	movq -160(%rbp), %rax
	# LowerGetelementptr(7208:3): type of ^22 is ptr*
	# LowerLoad(7209:3).2: (^22) into ptr ^23
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7210:3): struct-type: ptr ^7 -> ^24, indices=0,0
	movq -152(%rbp), %rax
	# LowerGetelementptr(7210:3): type of ^24 is ptr*
	# LowerLoad(7211:3).2: (^24) into ptr ^25
	movq (%rax), %rcx
	# SetupCalls(7212:3): move argument ptr ^23
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(7212:3): move argument ptr ^25
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	callq _ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0_
	# SetupCalls(7213:3): move argument ptr nonnull dereferenceable(8) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq -144(%rbp), %rdi
	# SetupCalls(7213:3): move argument i64 16
	movq $16, %rsi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEplEl
	# SetupCalls(7213:3): move ptr result from %rax
	movq %rax, %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7214:3): struct-type: ptr ^9 -> ^27, indices=0,0
	movq -128(%rbp), %rax
	# LowerGetelementptr(7214:3): type of ^27 is ptr*
	# LowerStore(7215:3).9: mov ptr ^26, (^27)
	movq %rbx, (%rax)
	# SetupCalls(7216:3): move argument ptr align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq -120(%rbp), %rdi
	# SetupCalls(7216:3): move argument ptr align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -112(%rbp), %rsi
	# SetupCalls(7216:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# SetupCalls(7217:3): move argument ptr align 1 ^11
	# Fixed movzx with identical source and destination widths
	movq -136(%rbp), %rdi
	# SetupCalls(7217:3): move argument ptr align 1 ^5
	# Fixed movzx with identical source and destination widths
	movq -104(%rbp), %rsi
	# SetupCalls(7217:3): move argument i64 1
	movq $1, %rdx
	callq memcpy@PLT
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7218:3): struct-type: ptr ^9 -> ^28, indices=0,0
	movq -128(%rbp), %rax
	# LowerGetelementptr(7218:3): type of ^28 is ptr*
	# LowerLoad(7219:3).2: (^28) into ptr ^29
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7220:3): struct-type: ptr ^10 -> ^30, indices=0,0
	movq -120(%rbp), %rax
	# LowerGetelementptr(7220:3): type of ^30 is ptr*
	# LowerLoad(7221:3).2: (^30) into ptr ^31
	movq (%rax), %rcx
	# SetupCalls(7222:3): move argument ptr ^29
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(7222:3): move argument ptr ^31
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	callq _ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0_
	jmp .___ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M411
	.___ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M300:
	# SetupCalls(7226:3): move argument ptr align 8 ^12
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(7226:3): move argument ptr align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq -144(%rbp), %rsi
	# SetupCalls(7226:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# SetupCalls(7227:3): move argument ptr align 8 ^13
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	# SetupCalls(7227:3): move argument ptr align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -112(%rbp), %rsi
	# SetupCalls(7227:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# SetupCalls(7228:3): move argument ptr align 1 ^14
	# Fixed movzx with identical source and destination widths
	movq %r14, %rdi
	# SetupCalls(7228:3): move argument ptr align 1 ^5
	# Fixed movzx with identical source and destination widths
	movq -104(%rbp), %rsi
	# SetupCalls(7228:3): move argument i64 1
	movq $1, %rdx
	callq memcpy@PLT
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7229:3): struct-type: ptr ^12 -> ^33, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(7229:3): type of ^33 is ptr*
	# LowerLoad(7230:3).2: (^33) into ptr ^34
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7231:3): struct-type: ptr ^13 -> ^35, indices=0,0
	movq %r13, %rax
	# LowerGetelementptr(7231:3): type of ^35 is ptr*
	# LowerLoad(7232:3).2: (^35) into ptr ^36
	movq (%rax), %rcx
	# SetupCalls(7233:3): move argument ptr ^34
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(7233:3): move argument ptr ^36
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	callq _ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0_
	.___ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M411:
	movq -168(%rbp), %r15
	movq -256(%rbp), %r14
	movq -248(%rbp), %r13
	movq -240(%rbp), %r12
	movq -208(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt6vectorI6LsItemSaIS0_EEC2Ev
.p2align 4, 0x90
_ZNSt6vectorI6LsItemSaIS0_EEC2Ev:
	.___ZNSt6vectorI6LsItemSaIS0_EEC2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(1480:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(1481:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(1482:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# SetupCalls(1483:3): move argument ptr nonnull dereferenceable(24) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt12_Vector_baseI6LsItemSaIS0_EEC2Ev
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaIS9_EEEESt4lessIS5_ESaISt4pairIKS5_SF_EEED2Ev
.p2align 4, 0x90
_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaIS9_EEEESt4lessIS5_ESaISt4pairIKS5_SF_EEED2Ev:
	.___ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaIS9_EEEESt4lessIS5_ESaISt4pairIKS5_SF_EEED2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(2629:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(2630:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(2631:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::map"
	# LowerGetelementptr(2632:3): struct-type: ptr ^3 -> ^4, indices=0,0
	# LowerGetelementptr(2632:3): type of ^4 is %"class.std::_Rb_tree"*
	# SetupCalls(2633:3): move argument ptr nonnull dereferenceable(48) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EED2Ev
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10filesystem7__cxx11neERKNS0_18directory_iteratorES3_
.p2align 4, 0x90
_ZNSt10filesystem7__cxx11neERKNS0_18directory_iteratorES3_:
	.___ZNSt10filesystem7__cxx11neERKNS0_18directory_iteratorES3___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(1542:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %rax
	# LowerAlloca(1543:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %rcx
	# LowerStore(1544:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rax)
	# LowerStore(1545:3).9: mov ptr %rsi, (^4)
	movq %rsi, (%rcx)
	# LowerLoad(1546:3).2: (^3) into ptr ^5
	movq (%rax), %rbx
	# LowerLoad(1547:3).2: (^4) into ptr ^6
	movq (%rcx), %rax
	# SetupCalls(1548:3): move argument ptr nonnull dereferenceable(16) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(1548:3): move argument ptr nonnull dereferenceable(16) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNSt10filesystem7__cxx11eqERKNS0_18directory_iteratorES3_
	# SetupCalls(1548:3): move i1 result from %rax
	movb %al, %bl
	# LowerLogic(1550:3): ^7, true into i1 ^8
	movb %bl, %al
	xorb $1, %al
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10filesystem7__cxx11lsIcSt11char_traitsIcEEERSt13basic_ostreamIT_T0_ES8_RKNS0_4pathE
.p2align 4, 0x90
_ZNSt10filesystem7__cxx11lsIcSt11char_traitsIcEEERSt13basic_ostreamIT_T0_ES8_RKNS0_4pathE:
	.___ZNSt10filesystem7__cxx11lsIcSt11char_traitsIcEEERSt13basic_ostreamIT_T0_ES8_RKNS0_4pathE__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(224 + 0, 16)
	subq $224, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -144(%rbp)
	movq %r12, -152(%rbp)
	movq %r13, -168(%rbp)
	movq %r14, -192(%rbp)
	movq %r15, -128(%rbp)
	# LowerAlloca(1445:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %r8
	# LowerAlloca(1446:3): size = 8, type = ptr*, var = ^4
	# Fixing source-to-dest leaq -16(%rbp), -112(%rbp)
	leaq -16(%rbp), %r15
	movq %r15, -112(%rbp)
	# LowerAlloca(1447:3): size = 8, type = ptr*, var = ^5
	leaq -24(%rbp), %rdx
	# LowerAlloca(1448:3): size = 8, type = ptr*, var = ^6
	# Fixing source-to-dest leaq -32(%rbp), -104(%rbp)
	leaq -32(%rbp), %r15
	movq %r15, -104(%rbp)
	# LowerAlloca(1449:3): size = 8, type = ptr*, var = ^7
	leaq -40(%rbp), %rax
	# LowerAlloca(1450:3): size = 16, type = %"struct.std::__detail::_Quoted_string"*, var = ^8
	leaq -56(%rbp), %rbx
	# LowerAlloca(1451:3): size = 32, type = %"class.std::__cxx11::basic_string"*, var = ^9
	leaq -88(%rbp), %r12
	# LowerAlloca(1452:3): size = 1, type = %"class.std::allocator.0"*, var = ^10
	# Fixing source-to-dest leaq -89(%rbp), -120(%rbp)
	leaq -89(%rbp), %r15
	movq %r15, -120(%rbp)
	# LowerStore(1453:3).9: mov ptr %rdi, (^6)
	movq -104(%rbp), %rcx
	movq %rdi, (%rcx)
	# LowerStore(1454:3).9: mov ptr %rsi, (^7)
	movq %rsi, (%rax)
	# LowerLoad(1455:3).2: (^6) into ptr ^11
	movq -104(%rbp), %rcx
	movq (%rcx), %r13
	# LowerLoad(1456:3).2: (^7) into ptr ^12
	movq (%rax), %rcx
	# LowerStore(1457:3).9: mov %"class.std::allocator.0"* ^10, (^5)
	# Fixing source-to-dest movq -120(%rbp), (%rdx)
	movq -120(%rbp), %r15
	movq %r15, (%rdx)
	# LowerLoad(1458:3).2: (^5) into ptr ^13
	# Fixing source-to-dest movq (%rdx), (%r8)
	movq (%rdx), %r15
	movq %r15, (%r8)
	# LowerStore(1459:3).9: mov ptr ^13, (^3)
	# LowerLoad(1460:3).2: (^3) into ptr ^14
	movq (%r8), %rax
	# SetupCalls(1461:3): move argument ptr sret align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(1461:3): move argument ptr nonnull dereferenceable(40) align 8 ^12
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(1461:3): move argument ptr nonnull dereferenceable(1) align 1 ^10
	# Fixed movzx with identical source and destination widths
	movq -120(%rbp), %rdx
	callq _ZNKSt10filesystem7__cxx114path6stringIcSt11char_traitsIcESaIcEEENSt7__cxx1112basic_stringIT_T0_T1_EERKSA_
	# SetupCalls(1462:3): move argument ptr nonnull dereferenceable(32) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(1462:3): move argument i8 signext 34
	movq $34, %rsi
	movsbq %sil, %rsi
	# SetupCalls(1462:3): move argument i8 signext 92
	movq $92, %rdx
	movsbq %dl, %rdx
	callq _ZSt6quotedIcSt11char_traitsIcESaIcEEDaRKNSt7__cxx1112basic_stringIT_T0_T1_EES5_S5_
	# SetupCalls(1462:3): move 128-bit result from %rax and %rdx
	# Multireg move: <%hax %hdx> -> <%hr14 %hr15>
	movq %rax, %r14
	movq %rdx, %r15
	# tt = Pointer, type = {ptr, i64}
	# LowerGetelementptr(1463:3): struct-type: ptr ^8 -> ^16, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(1463:3): type of ^16 is ptr*
	# LowerExtractvalue(1465:3)
	# PaddedStructs({ptr, i64} -> ptr): move from pack ^15 ({ptr, i64}) to ^24 (opaque), index = 0
	movq %r14, %rdx
	movq %rdx, %rcx
	# LowerStore(1465:3).9: mov ptr ^17, (^16)
	movq %rcx, (%rax)
	# tt = Pointer, type = {ptr, i64}
	# LowerGetelementptr(1466:3): struct-type: ptr ^8 -> ^18, indices=0,1
	movq %rbx, %rcx
	addq $8, %rcx
	# LowerGetelementptr(1466:3): type of ^18 is i64*
	# LowerExtractvalue(1468:3)
	# PaddedStructs({ptr, i64} -> i64): move from pack ^15 ({ptr, i64}) to ^25 (opaque), index = 1
	movq %r15, %rdx
	movq %rdx, %rax
	# LowerStore(1468:3).9: mov i64 ^19, (^18)
	movq %rax, (%rcx)
	# SetupCalls(1469:3): move argument ptr nonnull dereferenceable(8) align 8 ^11
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	# SetupCalls(1469:3): move argument ptr nonnull dereferenceable(10) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZNSt8__detaillsIcSt11char_traitsIcERKNSt7__cxx1112basic_stringIcS2_SaIcEEEEERSt13basic_ostreamIT_T0_ESD_RKNS_14_Quoted_stringIT1_SA_EE
	# SetupCalls(1469:3): move ptr result from %rax
	movq %rax, %rax
	# SetupCalls(1470:3): move argument ptr nonnull dereferenceable(32) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
	# LowerStore(1471:3).9: mov %"class.std::allocator.0"* ^10, (^4)
	movq -112(%rbp), %rax
	# Fixing source-to-dest movq -120(%rbp), (%rax)
	movq -120(%rbp), %r15
	movq %r15, (%rax)
	# LowerLoad(1472:3).2: (^4) into ptr ^21
	movq -112(%rbp), %rbx
	movq (%rbx), %rax
	# SetupCalls(1473:3): move argument ptr nonnull dereferenceable(1) align 1 ^21
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt15__new_allocatorIcED2Ev
	# LowerLoad(1474:3).2: (^6) into ptr ^22
	movq -104(%rbp), %rax
	movq (%rax), %rbx
	movq %rbx, %rax
	movq -128(%rbp), %r15
	movq -192(%rbp), %r14
	movq -168(%rbp), %r13
	movq -152(%rbp), %r12
	movq -144(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS8_ESaISF_EEEEEERS1_Lb1EEEOT_OT0_
.p2align 4, 0x90
_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS8_ESaISF_EEEEEERS1_Lb1EEEOT_OT0_:
	.___ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS8_ESaISF_EEEEEERS1_Lb1EEEOT_OT0___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(48 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	movq %r15, -40(%rbp)
	# LowerAlloca(9665:3): size = 8, type = ptr*, var = ^4
	leaq -8(%rbp), %rax
	# LowerAlloca(9666:3): size = 8, type = ptr*, var = ^5
	leaq -16(%rbp), %r8
	# LowerAlloca(9667:3): size = 8, type = ptr*, var = ^6
	leaq -24(%rbp), %rbx
	# LowerStore(9668:3).9: mov ptr %rdi, (^4)
	movq %rdi, (%rax)
	# LowerStore(9669:3).9: mov ptr %rsi, (^5)
	movq %rsi, (%r8)
	# LowerStore(9670:3).9: mov ptr %rdx, (^6)
	movq %rdx, (%rbx)
	# LowerLoad(9671:3).2: (^4) into ptr ^7
	movq (%rax), %rcx
	# tt = Pointer, type = %"struct.std::pair.21"
	# LowerGetelementptr(9672:3): struct-type: ptr ^7 -> ^8, indices=0,0
	movq %rcx, %rax
	# LowerGetelementptr(9672:3): type of ^8 is ptr*
	# LowerLoad(9673:3).2: (^5) into ptr ^9
	movq (%r8), %rdx
	# LowerLoad(9674:3).2: (^9) into ptr ^10
	# Fixing source-to-dest movq (%rdx), (%rax)
	movq (%rdx), %r15
	movq %r15, (%rax)
	# LowerStore(9675:3).9: mov ptr ^10, (^8)
	# tt = Pointer, type = %"struct.std::pair.21"
	# LowerGetelementptr(9676:3): struct-type: ptr ^7 -> ^11, indices=0,1
	movq %rcx, %rdx
	addq $8, %rdx
	# LowerGetelementptr(9676:3): type of ^11 is ptr*
	# LowerLoad(9677:3).2: (^6) into ptr ^12
	movq (%rbx), %rax
	# LowerLoad(9678:3).2: (^12) into ptr ^13
	# Fixing source-to-dest movq (%rax), (%rdx)
	movq (%rax), %r15
	movq %r15, (%rdx)
	# LowerStore(9679:3).9: mov ptr ^13, (^11)
	movq -40(%rbp), %r15
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZN9__gnu_cxxeqIP6LsItemSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_
.p2align 4, 0x90
_ZN9__gnu_cxxeqIP6LsItemSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_:
	.___ZN9__gnu_cxxeqIP6LsItemSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(56 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	movq %r12, -48(%rbp)
	movq %r13, -32(%rbp)
	# LowerAlloca(8397:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %rbx
	# LowerAlloca(8398:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %r13
	# LowerStore(8399:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rbx)
	# LowerStore(8400:3).9: mov ptr %rsi, (^4)
	movq %rsi, (%r13)
	# LowerLoad(8401:3).2: (^3) into ptr ^5
	movq (%rbx), %rax
	# SetupCalls(8402:3): move argument ptr nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEE4baseEv
	# SetupCalls(8402:3): move ptr result from %rax
	movq %rax, %rbx
	# LowerLoad(8403:3).2: (^6) into ptr ^7
	movq (%rbx), %r12
	# LowerLoad(8404:3).2: (^4) into ptr ^8
	movq (%r13), %rax
	# SetupCalls(8405:3): move argument ptr nonnull dereferenceable(8) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEE4baseEv
	# SetupCalls(8405:3): move ptr result from %rax
	movq %rax, %rbx
	# LowerLoad(8406:3).2: (^9) into ptr ^10
	movq (%rbx), %rax
	# LowerIcmp(8407:3): ptr ^7 vs. operand ptr ^10
	cmpq %rax, %r12
	sete %al
	andq $1, %rax
	movq -32(%rbp), %r13
	movq -48(%rbp), %r12
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10filesystem7__cxx114pathaSIA2_cEERNSt9enable_ifIX13__is_path_srcIT_EES1_E4typeERKS5_
.p2align 4, 0x90
_ZNSt10filesystem7__cxx114pathaSIA2_cEERNSt9enable_ifIX13__is_path_srcIT_EES1_E4typeERKS5_:
	.___ZNSt10filesystem7__cxx114pathaSIA2_cEERNSt9enable_ifIX13__is_path_srcIT_EES1_E4typeERKS5___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(80 + 0, 16)
	subq $80, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -72(%rbp)
	movq %r12, -64(%rbp)
	# LowerAlloca(1381:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %rax
	# LowerAlloca(1382:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %rcx
	# LowerAlloca(1383:3): size = 40, type = %"class.std::filesystem::__cxx11::path"*, var = ^5
	leaq -56(%rbp), %r12
	# LowerStore(1384:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rax)
	# LowerStore(1385:3).9: mov ptr %rsi, (^4)
	movq %rsi, (%rcx)
	# LowerLoad(1386:3).2: (^3) into ptr ^6
	movq (%rax), %rbx
	# LowerLoad(1387:3).2: (^4) into ptr ^7
	movq (%rcx), %rax
	# SetupCalls(1388:3): move argument ptr nonnull dereferenceable(40) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(1388:3): move argument ptr nonnull dereferenceable(2) align 1 ^7
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(1388:3): move argument i8 zeroext 2
	movq $2, %rdx
	andq $255, %rdx
	callq _ZNSt10filesystem7__cxx114pathC2IA2_cS1_EERKT_NS1_6formatE
	# SetupCalls(1389:3): move argument ptr nonnull dereferenceable(40) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(1389:3): move argument ptr nonnull dereferenceable(40) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r12, %rsi
	callq _ZNSt10filesystem7__cxx114pathaSEOS1_
	# SetupCalls(1389:3): move ptr result from %rax
	movq %rax, %rbx
	# SetupCalls(1390:3): move argument ptr nonnull dereferenceable(40) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	callq _ZNSt10filesystem7__cxx114pathD2Ev
	movq %rbx, %rax
	movq -64(%rbp), %r12
	movq -72(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt15__new_allocatorI6LsItemE10deallocateEPS0_m
.p2align 4, 0x90
_ZNSt15__new_allocatorI6LsItemE10deallocateEPS0_m:
	.___ZNSt15__new_allocatorI6LsItemE10deallocateEPS0_m__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	# LowerAlloca(6457:3): size = 8, type = ptr*, var = ^4
	leaq -8(%rbp), %rcx
	# LowerAlloca(6458:3): size = 8, type = ptr*, var = ^5
	leaq -16(%rbp), %rbx
	# LowerAlloca(6459:3): size = 8, type = i64*, var = ^6
	leaq -24(%rbp), %rax
	# LowerStore(6460:3).9: mov ptr %rdi, (^4)
	movq %rdi, (%rcx)
	# LowerStore(6461:3).9: mov ptr %rsi, (^5)
	movq %rsi, (%rbx)
	# LowerStore(6462:3).9: mov i64 %rdx, (^6)
	movq %rdx, (%rax)
	# LowerLoad(6463:3).2: (^4) into ptr ^7
	movq (%rcx), %rax
	# LowerLoad(6464:3).2: (^5) into ptr ^8
	movq (%rbx), %rax
	# SetupCalls(6465:3): move argument ptr ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZdlPv@PLT
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt11_Tuple_implILm0EJPNSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEEE7_M_headERS7_
.p2align 4, 0x90
_ZNSt11_Tuple_implILm0EJPNSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEEE7_M_headERS7_:
	.___ZNSt11_Tuple_implILm0EJPNSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEEE7_M_headERS7___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(3915:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(3916:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(3917:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# SetupCalls(3918:3): move argument ptr nonnull dereferenceable(8) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt10_Head_baseILm0EPNSt10filesystem7__cxx114path5_List5_ImplELb0EE7_M_headERS6_
	# SetupCalls(3918:3): move ptr result from %rax
	movq %rax, %rbx
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10filesystem7__cxx113endENS0_18directory_iteratorE
.p2align 4, 0x90
_ZNSt10filesystem7__cxx113endENS0_18directory_iteratorE:
	.___ZNSt10filesystem7__cxx113endENS0_18directory_iteratorE__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	# LowerAlloca(1533:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %rax
	# LowerStore(1534:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rax)
	# Clobber %rdi
	movq %rdi, -16(%rbp)
	# SetupCalls(1535:3): move argument ptr align 8 %rdi
	# Semiunclobber live %rdi into %rdi
	movq -16(%rbp), %rdi
	# SetupCalls(1535:3): move argument i32 0
	movq $0, %rsi
	# SetupCalls(1535:3): move argument i64 16
	movq $16, %rdx
	callq memset@PLT
	# Unclobber %rdi, live inside %rdi:0
	movq -16(%rbp), %rdi
	# SetupCalls(1536:3): move argument ptr nonnull dereferenceable(16) align 8 %rdi
	# Semiunclobber non-live %rdi into %rdi
	movq %rdi, %rdi
	callq _ZNSt10filesystem7__cxx1118directory_iteratorC2Ev
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10filesystem6existsENS_11file_statusE
.p2align 4, 0x90
_ZNSt10filesystem6existsENS_11file_statusE:
	.___ZNSt10filesystem6existsENS_11file_statusE__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(56 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	movq %r12, -32(%rbp)
	movq %r13, -48(%rbp)
	# LowerAlloca(2971:3): size = 8, type = %"class.std::filesystem::file_status"*, var = ^2
	leaq -8(%rbp), %rbx
	# LowerAlloca(2972:3): size = 8, type = %"class.std::filesystem::file_status"*, var = ^3
	leaq -16(%rbp), %r12
	# LowerStore(2973:3).9: mov i64 %rdi, (^2)
	movq %rdi, (%rbx)
	# SetupCalls(2974:3): move argument ptr align 4 ^3
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(2974:3): move argument ptr align 4 ^2
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(2974:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# LowerLoad(2975:3).2: (^3) into i64 ^4
	movq (%r12), %rax
	# SetupCalls(2976:3): move argument i64 ^4
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt10filesystem12status_knownENS_11file_statusE
	# SetupCalls(2976:3): move i1 result from %rax
	movb %al, %r12b
	cmpb $0, %r12b
	jne .___ZNSt10filesystem6existsENS_11file_statusE__M60
	.___ZNSt10filesystem6existsENS_11file_statusE__M57:
	# MovePhi: intlike -> ^10 (in new block 11 whose parent is 1)
	movb $0, %r13b
	jmp .___ZNSt10filesystem6existsENS_11file_statusE__M90
	.___ZNSt10filesystem6existsENS_11file_statusE__M60:
	# SetupCalls(2980:3): move argument ptr nonnull dereferenceable(8) align 4 ^2
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNKSt10filesystem11file_status4typeEv
	# SetupCalls(2980:3): move i8 result from %rax
	movb %al, %bl
	# LowerIcmp(2981:3): i8 ^7 vs. intlike -1
	cmpb $-1, %bl
	setne %al
	andq $1, %rax
	# MovePhi: ^8 -> ^10
	movb %al, %r13b
	.___ZNSt10filesystem6existsENS_11file_statusE__M90:
	movb %r13b, %al
	movq -48(%rbp), %r13
	movq -32(%rbp), %r12
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_T2_
.p2align 4, 0x90
_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_T2_:
	.___ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_T2___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(680 + 0, 16)
	subq $688, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -384(%rbp)
	movq %r12, -320(%rbp)
	movq %r13, -328(%rbp)
	movq %r14, -336(%rbp)
	movq %r15, -264(%rbp)
	# LowerAlloca(7624:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^5
	# Fixing source-to-dest leaq -8(%rbp), -200(%rbp)
	leaq -8(%rbp), %r15
	movq %r15, -200(%rbp)
	# LowerAlloca(7625:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, var = ^6
	# Fixing source-to-dest leaq -9(%rbp), -208(%rbp)
	leaq -9(%rbp), %r15
	movq %r15, -208(%rbp)
	# LowerAlloca(7626:3): size = 8, type = i64*, var = ^7
	# Fixing source-to-dest leaq -24(%rbp), -184(%rbp)
	leaq -24(%rbp), %r15
	movq %r15, -184(%rbp)
	# LowerAlloca(7627:3): size = 8, type = i64*, var = ^8
	# Fixing source-to-dest leaq -32(%rbp), -240(%rbp)
	leaq -32(%rbp), %r15
	movq %r15, -240(%rbp)
	# LowerAlloca(7628:3): size = 8, type = i64*, var = ^9
	# Fixing source-to-dest leaq -40(%rbp), -192(%rbp)
	leaq -40(%rbp), %r15
	movq %r15, -192(%rbp)
	# LowerAlloca(7629:3): size = 8, type = i64*, var = ^10
	# Fixing source-to-dest leaq -48(%rbp), -216(%rbp)
	leaq -48(%rbp), %r15
	movq %r15, -216(%rbp)
	# LowerAlloca(7630:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^11
	# Fixing source-to-dest leaq -56(%rbp), -248(%rbp)
	leaq -56(%rbp), %r15
	movq %r15, -248(%rbp)
	# LowerAlloca(7631:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^12
	leaq -64(%rbp), %r12
	# LowerAlloca(7632:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^13
	leaq -72(%rbp), %r13
	# LowerAlloca(7633:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^14
	leaq -80(%rbp), %r14
	# LowerAlloca(7634:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^15
	# Fixing source-to-dest leaq -88(%rbp), -232(%rbp)
	leaq -88(%rbp), %r15
	movq %r15, -232(%rbp)
	# LowerAlloca(7635:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^16
	# Fixing source-to-dest leaq -96(%rbp), -224(%rbp)
	leaq -96(%rbp), %r15
	movq %r15, -224(%rbp)
	# LowerAlloca(7636:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Iter_comp_val"*, var = ^17
	# Fixing source-to-dest leaq -97(%rbp), -168(%rbp)
	leaq -97(%rbp), %r15
	movq %r15, -168(%rbp)
	# LowerAlloca(7637:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^18
	# Fixing source-to-dest leaq -112(%rbp), -176(%rbp)
	leaq -112(%rbp), %r15
	movq %r15, -176(%rbp)
	# LowerAlloca(7638:3): size = 40, type = %struct.LsItem*, var = ^19
	# Fixing source-to-dest leaq -152(%rbp), -160(%rbp)
	leaq -152(%rbp), %r15
	movq %r15, -160(%rbp)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7639:3): struct-type: ptr ^5 -> ^20, indices=0,0
	movq -200(%rbp), %rax
	# LowerGetelementptr(7639:3): type of ^20 is ptr*
	# LowerStore(7640:3).9: mov ptr %rdi, (^20)
	movq %rdi, (%rax)
	# LowerStore(7641:3).9: mov i64 %rsi, (^7)
	movq -184(%rbp), %rax
	movq %rsi, (%rax)
	# LowerStore(7642:3).9: mov i64 %rdx, (^8)
	movq -240(%rbp), %rax
	movq %rdx, (%rax)
	# LowerLoad(7643:3).2: (^7) into i64 ^21
	movq -184(%rbp), %rax
	movq -192(%rbp), %rbx
	# Fixing source-to-dest movq (%rax), (%rbx)
	movq (%rax), %r15
	movq %r15, (%rbx)
	# LowerStore(7644:3).9: mov i64 ^21, (^9)
	# LowerLoad(7645:3).2: (^7) into i64 ^22
	movq -184(%rbp), %rax
	movq -216(%rbp), %rbx
	# Fixing source-to-dest movq (%rax), (%rbx)
	movq (%rax), %r15
	movq %r15, (%rbx)
	# LowerStore(7646:3).9: mov i64 ^22, (^10)
	.___ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_T2___M50:
	# LowerLoad(7650:3).2: (^10) into i64 ^24
	movq -216(%rbp), %rax
	movq (%rax), %rsi
	# LowerLoad(7651:3).2: (^8) into i64 ^25
	movq -240(%rbp), %rbx
	movq (%rbx), %rax
	# LowerMath(7652:3): ^25, 1 into i64 ^26
	subq $1, %rax
	# LowerSdiv(7653:3): ^26, 2 into i64 ^27
	movq %rax, %rbx
	movq $0, %rdx
	movq %rbx, %rax
	movq $2, %rbx
	idivq %rbx
	movq %rax, %rbx
	# LowerIcmp(7654:3): i64 ^24 vs. operand i64 ^27
	cmpq %rbx, %rsi
	setl %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_T2___M73
	jmp .___ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_T2___M348
	.___ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_T2___M73:
	# LowerLoad(7658:3).2: (^10) into i64 ^30
	movq -216(%rbp), %rax
	movq (%rax), %rbx
	# LowerMath(7659:3): ^30, 1 into i64 ^31
	addq $1, %rbx
	# LowerMath(7660:3): 2, ^31 into i64 ^32
	movq $2, %rax
	mulq %rbx
	movq %rax, %rbx
	# LowerStore(7661:3).9: mov i64 ^32, (^10)
	movq -216(%rbp), %rax
	movq %rbx, (%rax)
	# LowerLoad(7662:3).2: (^10) into i64 ^33
	movq -216(%rbp), %rbx
	movq (%rbx), %rax
	# Clobber %rcx
	movq %rcx, -256(%rbp)
	# SetupCalls(7663:3): move argument ptr nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq -200(%rbp), %rdi
	# SetupCalls(7663:3): move argument i64 ^33
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEplEl
	# SetupCalls(7663:3): move ptr result from %rax
	movq %rax, %rbx
	# Unclobber %rcx, live inside %rcx:3
	movq -256(%rbp), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7664:3): struct-type: ptr ^11 -> ^35, indices=0,0
	movq -248(%rbp), %rax
	# LowerGetelementptr(7664:3): type of ^35 is ptr*
	# LowerStore(7665:3).9: mov ptr ^34, (^35)
	movq %rbx, (%rax)
	# LowerLoad(7666:3).2: (^10) into i64 ^36
	movq -216(%rbp), %rbx
	movq (%rbx), %rax
	# LowerMath(7667:3): ^36, 1 into i64 ^37
	subq $1, %rax
	# Clobber %rcx
	movq %rcx, -256(%rbp)
	# SetupCalls(7668:3): move argument ptr nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq -200(%rbp), %rdi
	# SetupCalls(7668:3): move argument i64 ^37
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEplEl
	# SetupCalls(7668:3): move ptr result from %rax
	movq %rax, %rbx
	# Unclobber %rcx, live inside %rcx:3
	movq -256(%rbp), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7669:3): struct-type: ptr ^12 -> ^39, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(7669:3): type of ^39 is ptr*
	# LowerStore(7670:3).9: mov ptr ^38, (^39)
	movq %rbx, (%rax)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7671:3): struct-type: ptr ^11 -> ^40, indices=0,0
	movq -248(%rbp), %rax
	# LowerGetelementptr(7671:3): type of ^40 is ptr*
	# LowerLoad(7672:3).2: (^40) into ptr ^41
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7673:3): struct-type: ptr ^12 -> ^42, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(7673:3): type of ^42 is ptr*
	# LowerLoad(7674:3).2: (^42) into ptr ^43
	movq (%rax), %r8
	# Clobber %rcx
	movq %rcx, -256(%rbp)
	# SetupCalls(7675:3): move argument ptr nonnull dereferenceable(1) align 1 ^6
	# Fixed movzx with identical source and destination widths
	movq -208(%rbp), %rdi
	# SetupCalls(7675:3): move argument ptr ^41
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(7675:3): move argument ptr ^43
	# Fixed movzx with identical source and destination widths
	movq %r8, %rdx
	callq _ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EclINS_17__normal_iteratorIP6LsItemS2_ISF_SaISF_EEEESJ_EEbT_T0_
	# SetupCalls(7675:3): move i1 result from %rax
	movb %al, %bl
	# Unclobber %rcx, live inside %rcx:3
	movq -256(%rbp), %rcx
	cmpb $0, %bl
	jne .___ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_T2___M198
	jmp .___ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_T2___M206
	.___ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_T2___M198:
	# LowerLoad(7679:3).2: (^10) into i64 ^46
	movq -216(%rbp), %rbx
	movq (%rbx), %rax
	# LowerMath(7680:3): ^46, -1 into i64 ^47
	addq $-1, %rax
	# LowerStore(7681:3).9: mov i64 ^47, (^10)
	movq -216(%rbp), %rbx
	movq %rax, (%rbx)
	.___ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_T2___M206:
	# LowerLoad(7685:3).2: (^10) into i64 ^49
	movq -216(%rbp), %rbx
	movq (%rbx), %rax
	# Clobber %rcx
	movq %rcx, -256(%rbp)
	# SetupCalls(7686:3): move argument ptr nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq -200(%rbp), %rdi
	# SetupCalls(7686:3): move argument i64 ^49
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEplEl
	# SetupCalls(7686:3): move ptr result from %rax
	movq %rax, %rbx
	# Unclobber %rcx, live inside %rcx:3
	movq -256(%rbp), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7687:3): struct-type: ptr ^13 -> ^51, indices=0,0
	movq %r13, %rax
	# LowerGetelementptr(7687:3): type of ^51 is ptr*
	# LowerStore(7688:3).9: mov ptr ^50, (^51)
	movq %rbx, (%rax)
	# Clobber %rcx
	movq %rcx, -256(%rbp)
	# SetupCalls(7689:3): move argument ptr nonnull dereferenceable(8) align 8 ^13
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEdeEv
	# SetupCalls(7689:3): move ptr result from %rax
	movq %rax, %rbx
	# Unclobber %rcx, live inside %rcx:3
	movq -256(%rbp), %rcx
	# LowerLoad(7690:3).2: (^7) into i64 ^53
	movq -184(%rbp), %rax
	movq (%rax), %rdx
	# Clobber %rcx
	movq %rcx, -256(%rbp)
	# SetupCalls(7691:3): move argument ptr nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq -200(%rbp), %rdi
	# SetupCalls(7691:3): move argument i64 ^53
	# Fixed movzx with identical source and destination widths
	movq %rdx, %rsi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEplEl
	# SetupCalls(7691:3): move ptr result from %rax
	movq %rax, %r15
	# Unclobber %rcx, live inside %rcx:3
	movq -256(%rbp), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7692:3): struct-type: ptr ^14 -> ^55, indices=0,0
	movq %r14, %rax
	# LowerGetelementptr(7692:3): type of ^55 is ptr*
	# LowerStore(7693:3).9: mov ptr ^54, (^55)
	movq %r15, (%rax)
	# Clobber %rcx
	movq %rcx, -256(%rbp)
	# SetupCalls(7694:3): move argument ptr nonnull dereferenceable(8) align 8 ^14
	# Fixed movzx with identical source and destination widths
	movq %r14, %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEdeEv
	# SetupCalls(7694:3): move ptr result from %rax
	movq %rax, %r15
	# Unclobber %rcx, live inside %rcx:3
	movq -256(%rbp), %rcx
	# Clobber %rcx
	movq %rcx, -256(%rbp)
	# SetupCalls(7695:3): move argument ptr nonnull dereferenceable(33) align 8 ^56
	# Fixed movzx with identical source and destination widths
	movq %r15, %rdi
	# SetupCalls(7695:3): move argument ptr nonnull dereferenceable(33) align 8 ^52
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZN6LsItemaSEOS_
	# SetupCalls(7695:3): move ptr result from %rax
	movq %rax, %rax
	# Unclobber %rcx, live inside %rcx:3
	movq -256(%rbp), %rcx
	# LowerLoad(7696:3).2: (^10) into i64 ^58
	movq -184(%rbp), %rax
	movq -216(%rbp), %rbx
	# Fixing source-to-dest movq (%rbx), (%rax)
	movq (%rbx), %r15
	movq %r15, (%rax)
	# LowerStore(7697:3).9: mov i64 ^58, (^7)
	jmp .___ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_T2___M50
	.___ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_T2___M348:
	# LowerLoad(7701:3).2: (^8) into i64 ^60
	movq -240(%rbp), %rbx
	movq (%rbx), %rax
	# LowerLogic(7703:3): ^60, 1 into i64 ^61
	andq $1, %rax
	# LowerIcmp(7703:3): i64 ^61 vs. intlike 0
	cmpq $0, %rax
	sete %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_T2___M358
	jmp .___ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_T2___M545
	.___ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_T2___M358:
	# LowerLoad(7707:3).2: (^10) into i64 ^64
	movq -216(%rbp), %rax
	movq (%rax), %rbx
	# LowerLoad(7708:3).2: (^8) into i64 ^65
	movq -240(%rbp), %rdx
	movq (%rdx), %rax
	# LowerMath(7709:3): ^65, 2 into i64 ^66
	subq $2, %rax
	# LowerSdiv(7710:3): ^66, 2 into i64 ^67
	movq %rax, %rsi
	movq $0, %rdx
	movq %rsi, %rax
	movq $2, %rsi
	idivq %rsi
	movq %rax, %rsi
	# LowerIcmp(7711:3): i64 ^64 vs. operand i64 ^67
	cmpq %rsi, %rbx
	sete %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_T2___M381
	jmp .___ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_T2___M545
	.___ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_T2___M381:
	# LowerLoad(7715:3).2: (^10) into i64 ^70
	movq -216(%rbp), %rax
	movq (%rax), %rbx
	# LowerMath(7716:3): ^70, 1 into i64 ^71
	addq $1, %rbx
	# LowerMath(7717:3): 2, ^71 into i64 ^72
	movq $2, %rax
	mulq %rbx
	movq %rax, %rbx
	# LowerStore(7718:3).9: mov i64 ^72, (^10)
	movq -216(%rbp), %rax
	movq %rbx, (%rax)
	# LowerLoad(7719:3).2: (^10) into i64 ^73
	movq -216(%rbp), %rbx
	movq (%rbx), %rax
	# LowerMath(7720:3): ^73, 1 into i64 ^74
	subq $1, %rax
	# Clobber %rcx
	movq %rcx, -256(%rbp)
	# SetupCalls(7721:3): move argument ptr nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq -200(%rbp), %rdi
	# SetupCalls(7721:3): move argument i64 ^74
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEplEl
	# SetupCalls(7721:3): move ptr result from %rax
	movq %rax, %rbx
	# Unclobber %rcx, live inside %rcx:3
	movq -256(%rbp), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7722:3): struct-type: ptr ^15 -> ^76, indices=0,0
	movq -232(%rbp), %rax
	# LowerGetelementptr(7722:3): type of ^76 is ptr*
	# LowerStore(7723:3).9: mov ptr ^75, (^76)
	movq %rbx, (%rax)
	# Clobber %rcx
	movq %rcx, -256(%rbp)
	# SetupCalls(7724:3): move argument ptr nonnull dereferenceable(8) align 8 ^15
	# Fixed movzx with identical source and destination widths
	movq -232(%rbp), %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEdeEv
	# SetupCalls(7724:3): move ptr result from %rax
	movq %rax, %rbx
	# Unclobber %rcx, live inside %rcx:3
	movq -256(%rbp), %rcx
	# LowerLoad(7725:3).2: (^7) into i64 ^78
	movq -184(%rbp), %rax
	movq (%rax), %rdx
	# Clobber %rcx
	movq %rcx, -256(%rbp)
	# SetupCalls(7726:3): move argument ptr nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq -200(%rbp), %rdi
	# SetupCalls(7726:3): move argument i64 ^78
	# Fixed movzx with identical source and destination widths
	movq %rdx, %rsi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEplEl
	# SetupCalls(7726:3): move ptr result from %rax
	movq %rax, %r12
	# Unclobber %rcx, live inside %rcx:3
	movq -256(%rbp), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7727:3): struct-type: ptr ^16 -> ^80, indices=0,0
	movq -224(%rbp), %rax
	# LowerGetelementptr(7727:3): type of ^80 is ptr*
	# LowerStore(7728:3).9: mov ptr ^79, (^80)
	movq %r12, (%rax)
	# Clobber %rcx
	movq %rcx, -256(%rbp)
	# SetupCalls(7729:3): move argument ptr nonnull dereferenceable(8) align 8 ^16
	# Fixed movzx with identical source and destination widths
	movq -224(%rbp), %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEdeEv
	# SetupCalls(7729:3): move ptr result from %rax
	movq %rax, %r12
	# Unclobber %rcx, live inside %rcx:3
	movq -256(%rbp), %rcx
	# Clobber %rcx
	movq %rcx, -256(%rbp)
	# SetupCalls(7730:3): move argument ptr nonnull dereferenceable(33) align 8 ^81
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(7730:3): move argument ptr nonnull dereferenceable(33) align 8 ^77
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZN6LsItemaSEOS_
	# SetupCalls(7730:3): move ptr result from %rax
	movq %rax, %rax
	# Unclobber %rcx, live inside %rcx:3
	movq -256(%rbp), %rcx
	# LowerLoad(7731:3).2: (^10) into i64 ^83
	movq -216(%rbp), %rbx
	movq (%rbx), %rax
	# LowerMath(7732:3): ^83, 1 into i64 ^84
	movq %rax, %rbx
	subq $1, %rbx
	# LowerStore(7733:3).9: mov i64 ^84, (^7)
	movq -184(%rbp), %rax
	movq %rbx, (%rax)
	.___ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_T2___M545:
	# Clobber %rcx
	movq %rcx, -256(%rbp)
	# SetupCalls(7737:3): move argument ptr nonnull dereferenceable(1) align 1 ^17
	# Fixed movzx with identical source and destination widths
	movq -168(%rbp), %rdi
	# SetupCalls(7737:3): move argument ptr nonnull dereferenceable(1) align 1 ^6
	# Fixed movzx with identical source and destination widths
	movq -208(%rbp), %rsi
	callq _ZN9__gnu_cxx5__ops14_Iter_comp_valIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EC2EONS0_15_Iter_comp_iterISB_EE
	# Unclobber %rcx, live inside %rcx:3
	movq -256(%rbp), %rcx
	# Clobber %rcx
	movq %rcx, -256(%rbp)
	# SetupCalls(7738:3): move argument ptr align 8 ^18
	# Fixed movzx with identical source and destination widths
	movq -176(%rbp), %rdi
	# SetupCalls(7738:3): move argument ptr align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq -200(%rbp), %rsi
	# SetupCalls(7738:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rcx, live inside %rcx:3
	movq -256(%rbp), %rcx
	# LowerLoad(7739:3).2: (^7) into i64 ^86
	movq -184(%rbp), %rax
	movq (%rax), %r12
	# LowerLoad(7740:3).2: (^9) into i64 ^87
	movq -192(%rbp), %rax
	movq (%rax), %r13
	# SetupCalls(7741:3): move argument ptr nonnull dereferenceable(33) align 8 ^19
	# Fixed movzx with identical source and destination widths
	movq -160(%rbp), %rdi
	# SetupCalls(7741:3): move argument ptr nonnull dereferenceable(33) align 8 %rcx
	# Semiunclobber non-live %rcx into %rsi
	movq %rcx, %rsi
	callq _ZN6LsItemC2EOS_
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7742:3): struct-type: ptr ^18 -> ^88, indices=0,0
	movq -176(%rbp), %rax
	# LowerGetelementptr(7742:3): type of ^88 is ptr*
	# LowerLoad(7743:3).2: (^88) into ptr ^89
	movq (%rax), %rbx
	# SetupCalls(7744:3): move argument ptr ^89
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(7744:3): move argument i64 ^86
	# Fixed movzx with identical source and destination widths
	movq %r12, %rsi
	# SetupCalls(7744:3): move argument i64 ^87
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdx
	# SetupCalls(7744:3): move argument ptr ^19
	# Fixed movzx with identical source and destination widths
	movq -160(%rbp), %rcx
	# SetupCalls(7744:3): move argument ptr nonnull dereferenceable(1) align 1 ^17
	# Fixed movzx with identical source and destination widths
	movq -168(%rbp), %r8
	callq _ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops14_Iter_comp_valIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_RT2_
	# SetupCalls(7745:3): move argument ptr nonnull dereferenceable(33) align 8 ^19
	# Fixed movzx with identical source and destination widths
	movq -160(%rbp), %rdi
	callq _ZN6LsItemD2Ev
	movq -264(%rbp), %r15
	movq -336(%rbp), %r14
	movq -328(%rbp), %r13
	movq -320(%rbp), %r12
	movq -384(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE9_M_createIRSA_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE
.p2align 4, 0x90
_ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE9_M_createIRSA_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE:
	.___ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE9_M_createIRSA_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(56 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	movq %r12, -40(%rbp)
	movq %r15, -56(%rbp)
	# LowerAlloca(4269:3): size = 1, type = %"struct.std::integral_constant"*, var = ^3
	leaq -1(%rbp), %rax
	# LowerAlloca(4270:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %rbx
	# LowerAlloca(4271:3): size = 8, type = ptr*, var = ^5
	leaq -24(%rbp), %r12
	# LowerStore(4272:3).9: mov ptr %rdi, (^4)
	movq %rdi, (%rbx)
	# LowerStore(4273:3).9: mov ptr %rsi, (^5)
	movq %rsi, (%r12)
	# LowerLoad(4274:3).2: (^4) into ptr ^6
	movq (%rbx), %rax
	# SetupCalls(4275:3): move argument ptr nonnull dereferenceable(16) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt9_Any_data9_M_accessEv
	# SetupCalls(4275:3): move ptr result from %rax
	movq %rax, %rbx
	# LowerLoad(4276:3).2: (^5) into ptr ^8
	# Fixing source-to-dest movq (%r12), (%rbx)
	movq (%r12), %r15
	movq %r15, (%rbx)
	# LowerStore(4277:3).9: mov ptr ^8, (^7)
	movq -56(%rbp), %r15
	movq -40(%rbp), %r12
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10filesystem7__cxx1118directory_iteratorD2Ev
.p2align 4, 0x90
_ZNSt10filesystem7__cxx1118directory_iteratorD2Ev:
	.___ZNSt10filesystem7__cxx1118directory_iteratorD2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(1523:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(1524:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(1525:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::directory_iterator"
	# LowerGetelementptr(1526:3): struct-type: ptr ^3 -> ^4, indices=0,0
	# LowerGetelementptr(1526:3): type of ^4 is %"class.std::__shared_ptr"*
	# SetupCalls(1527:3): move argument ptr nonnull dereferenceable(16) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt12__shared_ptrINSt10filesystem7__cxx114_DirELN9__gnu_cxx12_Lock_policyE2EED2Ev
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt15__new_allocatorISt17basic_string_viewIcSt11char_traitsIcEEE8allocateEmPKv
.p2align 4, 0x90
_ZNSt15__new_allocatorISt17basic_string_viewIcSt11char_traitsIcEEE8allocateEmPKv:
	.___ZNSt15__new_allocatorISt17basic_string_viewIcSt11char_traitsIcEEE8allocateEmPKv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(48 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -40(%rbp)
	# LowerAlloca(4942:3): size = 8, type = ptr*, var = ^4
	leaq -8(%rbp), %r8
	# LowerAlloca(4943:3): size = 8, type = ptr*, var = ^5
	leaq -16(%rbp), %rcx
	# LowerAlloca(4944:3): size = 8, type = i64*, var = ^6
	leaq -24(%rbp), %rbx
	# LowerAlloca(4945:3): size = 8, type = ptr*, var = ^7
	leaq -32(%rbp), %rax
	# LowerStore(4946:3).9: mov ptr %rdi, (^5)
	movq %rdi, (%rcx)
	# LowerStore(4947:3).9: mov i64 %rsi, (^6)
	movq %rsi, (%rbx)
	# LowerStore(4948:3).9: mov ptr %rdx, (^7)
	movq %rdx, (%rax)
	# LowerLoad(4949:3).2: (^5) into ptr ^8
	movq (%rcx), %rax
	# LowerLoad(4950:3).2: (^6) into i64 ^9
	movq (%rbx), %rcx
	# LowerStore(4951:3).9: mov ptr ^8, (^4)
	movq %rax, (%r8)
	# LowerLoad(4952:3).2: (^4) into ptr ^10
	movq (%r8), %rax
	# LowerIcmp(4953:3): i64 ^9 vs. intlike 576460752303423487
	movabsq $576460752303423487, %rax
	cmpq %rax, %rcx
	seta %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt15__new_allocatorISt17basic_string_viewIcSt11char_traitsIcEEE8allocateEmPKv__M28
	jmp .___ZNSt15__new_allocatorISt17basic_string_viewIcSt11char_traitsIcEEE8allocateEmPKv__M76
	.___ZNSt15__new_allocatorISt17basic_string_viewIcSt11char_traitsIcEEE8allocateEmPKv__M28:
	# LowerLoad(4957:3).2: (^6) into i64 ^13
	movq (%rbx), %rax
	# LowerIcmp(4958:3): i64 ^13 vs. intlike 1152921504606846975
	movabsq $1152921504606846975, %rcx
	cmpq %rcx, %rax
	seta %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt15__new_allocatorISt17basic_string_viewIcSt11char_traitsIcEEE8allocateEmPKv__M36
	jmp .___ZNSt15__new_allocatorISt17basic_string_viewIcSt11char_traitsIcEEE8allocateEmPKv__M56
	.___ZNSt15__new_allocatorISt17basic_string_viewIcSt11char_traitsIcEEE8allocateEmPKv__M36:
	callq _ZSt28__throw_bad_array_new_lengthv@PLT
	.___ZNSt15__new_allocatorISt17basic_string_viewIcSt11char_traitsIcEEE8allocateEmPKv__M56:
	callq _ZSt17__throw_bad_allocv@PLT
	.___ZNSt15__new_allocatorISt17basic_string_viewIcSt11char_traitsIcEEE8allocateEmPKv__M76:
	# LowerLoad(4970:3).2: (^6) into i64 ^18
	movq (%rbx), %rax
	# LowerMath(4971:3): ^18, 16 into i64 ^19
	shlq $4, %rax
	# SetupCalls(4972:3): move argument i64 ^19
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _Znwm@PLT
	# SetupCalls(4972:3): move ptr result from %rax
	movq %rax, %rbx
	movq %rbx, %rax
	movq -40(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10unique_ptrINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE11get_deleterEv
.p2align 4, 0x90
_ZNSt10unique_ptrINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE11get_deleterEv:
	.___ZNSt10unique_ptrINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE11get_deleterEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(3884:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(3885:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(3886:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::unique_ptr"
	# LowerGetelementptr(3887:3): struct-type: ptr ^3 -> ^4, indices=0,0
	# LowerGetelementptr(3887:3): type of ^4 is %"struct.std::__uniq_ptr_data"*
	# SetupCalls(3888:3): move argument ptr nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE10_M_deleterEv
	# SetupCalls(3888:3): move ptr result from %rax
	movq %rax, %rbx
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10filesystem7__cxx114path5_ListaSEOS2_
.p2align 4, 0x90
_ZNSt10filesystem7__cxx114path5_ListaSEOS2_:
	.___ZNSt10filesystem7__cxx114path5_ListaSEOS2___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	movq %r12, -24(%rbp)
	# LowerAlloca(5959:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %rax
	# LowerAlloca(5960:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %rcx
	# LowerStore(5961:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rax)
	# LowerStore(5962:3).9: mov ptr %rsi, (^4)
	movq %rsi, (%rcx)
	# LowerLoad(5963:3).2: (^3) into ptr ^5
	movq (%rax), %r12
	# tt = Pointer, type = %"struct.std::filesystem::__cxx11::path::_List"
	# LowerGetelementptr(5964:3): struct-type: ptr ^5 -> ^6, indices=0,0
	movq %r12, %rbx
	# LowerGetelementptr(5964:3): type of ^6 is %"class.std::unique_ptr"*
	# LowerLoad(5965:3).2: (^4) into ptr ^7
	movq (%rcx), %rax
	# tt = Pointer, type = %"struct.std::filesystem::__cxx11::path::_List"
	# LowerGetelementptr(5966:3): struct-type: ptr ^7 -> ^8, indices=0,0
	# LowerGetelementptr(5966:3): type of ^8 is %"class.std::unique_ptr"*
	# SetupCalls(5967:3): move argument ptr nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(5967:3): move argument ptr nonnull dereferenceable(8) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNSt10unique_ptrINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEEaSEOS6_
	# SetupCalls(5967:3): move ptr result from %rax
	movq %rax, %rax
	movq %r12, %rax
	movq -24(%rbp), %r12
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10unique_ptrINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEED2Ev
.p2align 4, 0x90
_ZNSt10unique_ptrINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEED2Ev:
	.___ZNSt10unique_ptrINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEED2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(64 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -40(%rbp)
	movq %r12, -24(%rbp)
	movq %r13, -32(%rbp)
	# LowerAlloca(3847:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerAlloca(3848:3): size = 8, type = ptr*, var = ^3
	leaq -16(%rbp), %r12
	# LowerStore(3849:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(3850:3).2: (^2) into ptr ^4
	movq (%rax), %r13
	# tt = Pointer, type = %"class.std::unique_ptr"
	# LowerGetelementptr(3851:3): struct-type: ptr ^4 -> ^5, indices=0,0
	movq %r13, %rax
	# LowerGetelementptr(3851:3): type of ^5 is %"struct.std::__uniq_ptr_data"*
	# SetupCalls(3852:3): move argument ptr nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE6_M_ptrEv
	# SetupCalls(3852:3): move ptr result from %rax
	movq %rax, %rbx
	# LowerStore(3853:3).9: mov ptr ^6, (^3)
	movq %rbx, (%r12)
	# LowerLoad(3854:3).2: (^3) into ptr ^7
	movq (%r12), %rbx
	# LowerLoad(3855:3).2: (^7) into ptr ^8
	movq (%rbx), %rax
	# LowerIcmp(3856:3): ptr ^8 vs. intlike 0
	cmpq $0, %rax
	setne %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt10unique_ptrINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEED2Ev__M46
	jmp .___ZNSt10unique_ptrINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEED2Ev__M97
	.___ZNSt10unique_ptrINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEED2Ev__M46:
	# SetupCalls(3860:3): move argument ptr nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	callq _ZNSt10unique_ptrINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE11get_deleterEv
	# SetupCalls(3860:3): move ptr result from %rax
	movq %rax, %r13
	# LowerLoad(3861:3).2: (^3) into ptr ^12
	movq (%r12), %rax
	# LowerLoad(3862:3).2: (^12) into ptr ^13
	movq (%rax), %rbx
	# SetupCalls(3863:3): move argument ptr nonnull dereferenceable(1) align 1 ^11
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	# SetupCalls(3863:3): move argument ptr ^13
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZNKSt10filesystem7__cxx114path5_List13_Impl_deleterclEPNS2_5_ImplE@PLT
	.___ZNSt10unique_ptrINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEED2Ev__M97:
	# LowerLoad(3867:3).2: (^3) into ptr ^15
	movq (%r12), %rax
	# LowerStore(3868:3).3: mov $imm, (^15)
	movq $0, (%rax)
	movq -32(%rbp), %r13
	movq -24(%rbp), %r12
	movq -40(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt17basic_string_viewIcSt11char_traitsIcEEC2EPKc
.p2align 4, 0x90
_ZNSt17basic_string_viewIcSt11char_traitsIcEEC2EPKc:
	.___ZNSt17basic_string_viewIcSt11char_traitsIcEEC2EPKc__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(56 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -48(%rbp)
	movq %r12, -40(%rbp)
	movq %r13, -32(%rbp)
	movq %r14, -24(%rbp)
	movq %r15, -56(%rbp)
	# LowerAlloca(2444:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %rax
	# LowerAlloca(2445:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %r14
	# LowerStore(2446:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rax)
	# LowerStore(2447:3).9: mov ptr %rsi, (^4)
	movq %rsi, (%r14)
	# LowerLoad(2448:3).2: (^3) into ptr ^5
	movq (%rax), %r13
	# tt = Pointer, type = %"class.std::basic_string_view"
	# LowerGetelementptr(2449:3): struct-type: ptr ^5 -> ^6, indices=0,0
	movq %r13, %r12
	# LowerGetelementptr(2449:3): type of ^6 is i64*
	# LowerLoad(2450:3).2: (^4) into ptr ^7
	movq (%r14), %rax
	# SetupCalls(2451:3): move argument ptr ^7
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt11char_traitsIcE6lengthEPKc
	# SetupCalls(2451:3): move i64 result from %rax
	movq %rax, %rbx
	# LowerStore(2452:3).9: mov i64 ^8, (^6)
	movq %rbx, (%r12)
	# tt = Pointer, type = %"class.std::basic_string_view"
	# LowerGetelementptr(2453:3): struct-type: ptr ^5 -> ^9, indices=0,1
	movq %r13, %rax
	addq $8, %rax
	# LowerGetelementptr(2453:3): type of ^9 is ptr*
	# LowerLoad(2454:3).2: (^4) into ptr ^10
	# Fixing source-to-dest movq (%r14), (%rax)
	movq (%r14), %r15
	movq %r15, (%rax)
	# LowerStore(2455:3).9: mov ptr ^10, (^9)
	movq -56(%rbp), %r15
	movq -24(%rbp), %r14
	movq -32(%rbp), %r13
	movq -40(%rbp), %r12
	movq -48(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10filesystem12is_directoryERKNS_7__cxx114pathE
.p2align 4, 0x90
_ZNSt10filesystem12is_directoryERKNS_7__cxx114pathE:
	.___ZNSt10filesystem12is_directoryERKNS_7__cxx114pathE__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(48 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	movq %r12, -24(%rbp)
	# LowerAlloca(2049:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerAlloca(2050:3): size = 8, type = %"class.std::filesystem::file_status"*, var = ^3
	leaq -16(%rbp), %r12
	# LowerStore(2051:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(2052:3).2: (^2) into ptr ^4
	movq (%rax), %rbx
	# SetupCalls(2053:3): move argument ptr nonnull dereferenceable(40) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt10filesystem6statusERKNS_7__cxx114pathE@PLT
	# SetupCalls(2053:3): move i64 result from %rax
	movq %rax, %rbx
	# LowerStore(2054:3).9: mov i64 ^5, (^3)
	movq %rbx, (%r12)
	# LowerLoad(2055:3).2: (^3) into i64 ^6
	movq (%r12), %rax
	# SetupCalls(2056:3): move argument i64 ^6
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt10filesystem12is_directoryENS_11file_statusE
	# SetupCalls(2056:3): move i1 result from %rax
	movb %al, %bl
	movb %bl, %al
	movq -24(%rbp), %r12
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE22_M_insert_range_uniqueIPKSI_EENSt9enable_ifIXsr17__same_value_typeIT_EE5valueEvE4typeEST_ST_
.p2align 4, 0x90
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE22_M_insert_range_uniqueIPKSI_EENSt9enable_ifIXsr17__same_value_typeIT_EE5valueEvE4typeEST_ST_:
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE22_M_insert_range_uniqueIPKSI_EENSt9enable_ifIXsr17__same_value_typeIT_EE5valueEvE4typeEST_ST___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(152 + 0, 16)
	subq $160, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -112(%rbp)
	movq %r12, -120(%rbp)
	movq %r13, -128(%rbp)
	movq %r14, -136(%rbp)
	movq %r15, -88(%rbp)
	# LowerAlloca(8802:3): size = 8, type = ptr*, var = ^4
	leaq -8(%rbp), %rcx
	# LowerAlloca(8803:3): size = 8, type = ptr*, var = ^5
	# Fixing source-to-dest leaq -16(%rbp), -64(%rbp)
	leaq -16(%rbp), %r15
	movq %r15, -64(%rbp)
	# LowerAlloca(8804:3): size = 8, type = ptr*, var = ^6
	# Fixing source-to-dest leaq -24(%rbp), -72(%rbp)
	leaq -24(%rbp), %r15
	movq %r15, -72(%rbp)
	# LowerAlloca(8805:3): size = 8, type = %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Alloc_node"*, var = ^7
	# Fixing source-to-dest leaq -32(%rbp), -80(%rbp)
	leaq -32(%rbp), %r15
	movq %r15, -80(%rbp)
	# LowerAlloca(8806:3): size = 8, type = %"struct.std::_Rb_tree_const_iterator"*, var = ^8
	leaq -40(%rbp), %rbx
	# LowerAlloca(8807:3): size = 8, type = %"struct.std::_Rb_tree_iterator"*, var = ^9
	leaq -48(%rbp), %r12
	# LowerAlloca(8808:3): size = 8, type = %"struct.std::_Rb_tree_iterator"*, var = ^10
	leaq -56(%rbp), %r13
	# LowerStore(8809:3).9: mov ptr %rdi, (^4)
	movq %rdi, (%rcx)
	# LowerStore(8810:3).9: mov ptr %rsi, (^5)
	movq -64(%rbp), %rax
	movq %rsi, (%rax)
	# LowerStore(8811:3).9: mov ptr %rdx, (^6)
	movq -72(%rbp), %rax
	movq %rdx, (%rax)
	# LowerLoad(8812:3).2: (^4) into ptr ^11
	movq (%rcx), %r14
	# SetupCalls(8813:3): move argument ptr nonnull dereferenceable(8) align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq -80(%rbp), %rdi
	# SetupCalls(8813:3): move argument ptr nonnull dereferenceable(48) align 8 ^11
	# Fixed movzx with identical source and destination widths
	movq %r14, %rsi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE11_Alloc_nodeC2ERSO_
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE22_M_insert_range_uniqueIPKSI_EENSt9enable_ifIXsr17__same_value_typeIT_EE5valueEvE4typeEST_ST___M46:
	# LowerLoad(8817:3).2: (^5) into ptr ^13
	movq -64(%rbp), %rax
	movq (%rax), %rcx
	# LowerLoad(8818:3).2: (^6) into ptr ^14
	movq -72(%rbp), %rdx
	movq (%rdx), %rax
	# LowerIcmp(8819:3): ptr ^13 vs. operand ptr ^14
	cmpq %rax, %rcx
	setne %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE22_M_insert_range_uniqueIPKSI_EENSt9enable_ifIXsr17__same_value_typeIT_EE5valueEvE4typeEST_ST___M55
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE22_M_insert_range_uniqueIPKSI_EENSt9enable_ifIXsr17__same_value_typeIT_EE5valueEvE4typeEST_ST___M161
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE22_M_insert_range_uniqueIPKSI_EENSt9enable_ifIXsr17__same_value_typeIT_EE5valueEvE4typeEST_ST___M55:
	# SetupCalls(8823:3): move argument ptr nonnull dereferenceable(48) align 8 ^11
	# Fixed movzx with identical source and destination widths
	movq %r14, %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE3endEv
	# SetupCalls(8823:3): move ptr result from %rax
	movq %rax, %r15
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(8824:3): struct-type: ptr ^9 -> ^18, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(8824:3): type of ^18 is ptr*
	# LowerStore(8825:3).9: mov ptr ^17, (^18)
	movq %r15, (%rax)
	# SetupCalls(8826:3): move argument ptr nonnull dereferenceable(8) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(8826:3): move argument ptr nonnull dereferenceable(8) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq %r12, %rsi
	callq _ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEEC2ERKSt17_Rb_tree_iteratorISI_E
	# LowerLoad(8827:3).2: (^5) into ptr ^19
	movq -64(%rbp), %rcx
	movq (%rcx), %rax
	# tt = Pointer, type = %"struct.std::_Rb_tree_const_iterator"
	# LowerGetelementptr(8828:3): struct-type: ptr ^8 -> ^20, indices=0,0
	movq %rbx, %rdx
	# LowerGetelementptr(8828:3): type of ^20 is ptr*
	# LowerLoad(8829:3).2: (^20) into ptr ^21
	movq (%rdx), %rcx
	# SetupCalls(8830:3): move argument ptr nonnull dereferenceable(48) align 8 ^11
	# Fixed movzx with identical source and destination widths
	movq %r14, %rdi
	# SetupCalls(8830:3): move argument ptr ^21
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(8830:3): move argument ptr nonnull dereferenceable(64) align 8 ^19
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdx
	# SetupCalls(8830:3): move argument ptr nonnull dereferenceable(8) align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq -80(%rbp), %rcx
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE17_M_insert_unique_IRKSI_NSO_11_Alloc_nodeEEESt17_Rb_tree_iteratorISI_ESt23_Rb_tree_const_iteratorISI_EOT_RT0_
	# SetupCalls(8830:3): move ptr result from %rax
	movq %rax, %r15
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(8831:3): struct-type: ptr ^10 -> ^23, indices=0,0
	movq %r13, %rax
	# LowerGetelementptr(8831:3): type of ^23 is ptr*
	# LowerStore(8832:3).9: mov ptr ^22, (^23)
	movq %r15, (%rax)
	# LowerLoad(8836:3).2: (^5) into ptr ^25
	movq -64(%rbp), %rcx
	movq (%rcx), %rax
	# tt = Pointer, type = %"struct.std::pair"
	# LowerGetelementptr(8837:3): struct-type: ptr ^25 -> ^26, indices=1
	addq $64, %rax
	# LowerGetelementptr(8837:3): type of ^26 is %"struct.std::pair"*
	# LowerStore(8838:3).9: mov %"struct.std::pair"* ^26, (^5)
	movq -64(%rbp), %rcx
	movq %rax, (%rcx)
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE22_M_insert_range_uniqueIPKSI_EENSt9enable_ifIXsr17__same_value_typeIT_EE5valueEvE4typeEST_ST___M46
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE22_M_insert_range_uniqueIPKSI_EENSt9enable_ifIXsr17__same_value_typeIT_EE5valueEvE4typeEST_ST___M161:
	movq -88(%rbp), %r15
	movq -136(%rbp), %r14
	movq -128(%rbp), %r13
	movq -120(%rbp), %r12
	movq -112(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt3getILm0EJPNSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSB_
.p2align 4, 0x90
_ZSt3getILm0EJPNSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSB_:
	.___ZSt3getILm0EJPNSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSB___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(3664:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(3665:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(3666:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# SetupCalls(3667:3): move argument ptr nonnull dereferenceable(8) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZSt12__get_helperILm0EPNSt10filesystem7__cxx114path5_List5_ImplEJNS3_13_Impl_deleterEEERKT0_RKSt11_Tuple_implIXT_EJS7_DpT1_EE
	# SetupCalls(3667:3): move ptr result from %rax
	movq %rax, %rbx
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE
.p2align 4, 0x90
_Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE:
	.___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(880 + 0, 16)
	subq $880, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -504(%rbp)
	movq %r12, -544(%rbp)
	movq %r13, -472(%rbp)
	movq %r14, -528(%rbp)
	movq %r15, -464(%rbp)
	# LowerAlloca(1164:3): size = 4, type = i32*, var = ^2
	# Fixing source-to-dest leaq -4(%rbp), -328(%rbp)
	leaq -4(%rbp), %r15
	movq %r15, -328(%rbp)
	# LowerAlloca(1165:3): size = 8, type = ptr*, var = ^3
	leaq -16(%rbp), %r13
	# LowerAlloca(1166:3): size = 40, type = %"class.std::filesystem::__cxx11::path"*, var = ^4
	# Fixing source-to-dest leaq -56(%rbp), -336(%rbp)
	leaq -56(%rbp), %r15
	movq %r15, -336(%rbp)
	# LowerAlloca(1167:3): size = 4, type = i32*, var = ^5
	# Fixing source-to-dest leaq -60(%rbp), -344(%rbp)
	leaq -60(%rbp), %r15
	movq %r15, -344(%rbp)
	# LowerAlloca(1168:3): size = 24, type = %"class.std::vector.5"*, var = ^6
	# Fixing source-to-dest leaq -88(%rbp), -352(%rbp)
	leaq -88(%rbp), %r15
	movq %r15, -352(%rbp)
	# LowerAlloca(1169:3): size = 8, type = ptr*, var = ^7
	leaq -96(%rbp), %rbx
	# LowerAlloca(1170:3): size = 16, type = %"class.std::filesystem::__cxx11::directory_iterator"*, var = ^8
	# Fixing source-to-dest leaq -112(%rbp), -408(%rbp)
	leaq -112(%rbp), %r15
	movq %r15, -408(%rbp)
	# LowerAlloca(1171:3): size = 16, type = %"class.std::filesystem::__cxx11::directory_iterator"*, var = ^9
	# Fixing source-to-dest leaq -128(%rbp), -416(%rbp)
	leaq -128(%rbp), %r15
	movq %r15, -416(%rbp)
	# LowerAlloca(1172:3): size = 16, type = %"class.std::filesystem::__cxx11::directory_iterator"*, var = ^10
	leaq -144(%rbp), %r14
	# LowerAlloca(1173:3): size = 16, type = %"class.std::filesystem::__cxx11::directory_iterator"*, var = ^11
	# Fixing source-to-dest leaq -160(%rbp), -424(%rbp)
	leaq -160(%rbp), %r15
	movq %r15, -424(%rbp)
	# LowerAlloca(1174:3): size = 16, type = %"class.std::filesystem::__cxx11::directory_iterator"*, var = ^12
	leaq -176(%rbp), %r12
	# LowerAlloca(1175:3): size = 8, type = ptr*, var = ^13
	# Fixing source-to-dest leaq -184(%rbp), -432(%rbp)
	leaq -184(%rbp), %r15
	movq %r15, -432(%rbp)
	# LowerAlloca(1176:3): size = 32, type = %"class.std::__cxx11::basic_string"*, var = ^14
	# Fixing source-to-dest leaq -216(%rbp), -440(%rbp)
	leaq -216(%rbp), %r15
	movq %r15, -440(%rbp)
	# LowerAlloca(1177:3): size = 40, type = %"class.std::filesystem::__cxx11::path"*, var = ^15
	# Fixing source-to-dest leaq -256(%rbp), -448(%rbp)
	leaq -256(%rbp), %r15
	movq %r15, -448(%rbp)
	# LowerAlloca(1178:3): size = 1, type = i8*, var = ^16
	# Fixing source-to-dest leaq -257(%rbp), -456(%rbp)
	leaq -257(%rbp), %r15
	movq %r15, -456(%rbp)
	# LowerAlloca(1179:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^17
	# Fixing source-to-dest leaq -272(%rbp), -400(%rbp)
	leaq -272(%rbp), %r15
	movq %r15, -400(%rbp)
	# LowerAlloca(1180:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^18
	# Fixing source-to-dest leaq -280(%rbp), -392(%rbp)
	leaq -280(%rbp), %r15
	movq %r15, -392(%rbp)
	# LowerAlloca(1181:3): size = 1, type = %class.anon*, var = ^19
	leaq -281(%rbp), %rax
	# LowerAlloca(1182:3): size = 8, type = ptr*, var = ^20
	# Fixing source-to-dest leaq -296(%rbp), -384(%rbp)
	leaq -296(%rbp), %r15
	movq %r15, -384(%rbp)
	# LowerAlloca(1183:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^21
	# Fixing source-to-dest leaq -304(%rbp), -360(%rbp)
	leaq -304(%rbp), %r15
	movq %r15, -360(%rbp)
	# LowerAlloca(1184:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^22
	# Fixing source-to-dest leaq -312(%rbp), -368(%rbp)
	leaq -312(%rbp), %r15
	movq %r15, -368(%rbp)
	# LowerAlloca(1185:3): size = 8, type = ptr*, var = ^23
	# Fixing source-to-dest leaq -320(%rbp), -376(%rbp)
	leaq -320(%rbp), %r15
	movq %r15, -376(%rbp)
	# LowerStore(1186:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%r13)
	# SetupCalls(1187:3): move argument ptr nonnull dereferenceable(40) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -336(%rbp), %rdi
	callq _ZNSt10filesystem7__cxx114pathC2Ev
	# LowerLoad(1188:3).2: (^3) into ptr ^24
	movq (%r13), %rax
	# SetupCalls(1189:3): move argument ptr nonnull dereferenceable(24) align 8 ^24
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE4sizeEv
	# SetupCalls(1189:3): move i64 result from %rax
	movq %rax, %r15
	# LowerIcmp(1190:3): i64 ^25 vs. intlike 1
	cmpq $1, %r15
	sete %al
	andq $1, %rax
	cmpb $0, %al
	jne .___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M98
	jmp .___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M124
	.___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M98:
	# SetupCalls(1194:3): move argument ptr nonnull dereferenceable(40) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -336(%rbp), %rdi
	# SetupCalls(1194:3): move argument ptr nonnull dereferenceable(2) align 1 @.str
	leaq .str(%rip), %rsi
	callq _ZNSt10filesystem7__cxx114pathaSIA2_cEERNSt9enable_ifIX13__is_path_srcIT_EES1_E4typeERKS5_
	# SetupCalls(1194:3): move ptr result from %rax
	movq %rax, %rax
	jmp .___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M314
	.___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M124:
	# LowerLoad(1198:3).2: (^3) into ptr ^30
	movq (%r13), %rax
	# SetupCalls(1199:3): move argument ptr nonnull dereferenceable(24) align 8 ^30
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE4sizeEv
	# SetupCalls(1199:3): move i64 result from %rax
	movq %rax, %r15
	# LowerIcmp(1200:3): i64 ^31 vs. intlike 2
	cmpq $2, %r15
	sete %al
	andq $1, %rax
	cmpb $0, %al
	jne .___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M154
	jmp .___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M207
	.___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M154:
	# LowerLoad(1204:3).2: (^3) into ptr ^34
	movq (%r13), %rax
	# SetupCalls(1205:3): move argument ptr nonnull dereferenceable(24) align 8 ^34
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(1205:3): move argument i64 1
	movq $1, %rsi
	callq _ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEixEm
	# SetupCalls(1205:3): move ptr result from %rax
	movq %rax, %r13
	# SetupCalls(1206:3): move argument ptr nonnull dereferenceable(40) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -336(%rbp), %rdi
	# SetupCalls(1206:3): move argument ptr nonnull dereferenceable(16) align 8 ^35
	# Fixed movzx with identical source and destination widths
	movq %r13, %rsi
	callq _ZNSt10filesystem7__cxx114pathaSISt17basic_string_viewIcSt11char_traitsIcEEEERNSt9enable_ifIX13__is_path_srcIT_EES1_E4typeERKS8_
	# SetupCalls(1206:3): move ptr result from %rax
	movq %rax, %rax
	jmp .___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M313
	.___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M207:
	# SetupCalls(1210:3): move argument ptr nonnull dereferenceable(8) align 8 @_ZSt4cerr
	leaq _ZSt4cerr(%rip), %rdi
	# SetupCalls(1210:3): move argument ptr @.str.1
	leaq .str.1(%rip), %rsi
	callq _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
	# SetupCalls(1210:3): move ptr result from %rax
	movq %rax, %rbx
	# LowerLoad(1211:3).2: (^3) into ptr ^39
	movq (%r13), %rax
	# SetupCalls(1212:3): move argument ptr nonnull dereferenceable(24) align 8 ^39
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE4sizeEv
	# SetupCalls(1212:3): move i64 result from %rax
	movq %rax, %r12
	# SetupCalls(1213:3): move argument ptr nonnull dereferenceable(8) align 8 ^38
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(1213:3): move argument i64 ^40
	# Fixed movzx with identical source and destination widths
	movq %r12, %rsi
	callq _ZNSolsEm@PLT
	# SetupCalls(1213:3): move ptr result from %rax
	movq %rax, %rbx
	# SetupCalls(1214:3): move argument ptr nonnull dereferenceable(8) align 8 ^41
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(1214:3): move argument i8 signext 10
	movq $10, %rsi
	movsbq %sil, %rsi
	callq _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@PLT
	# SetupCalls(1214:3): move ptr result from %rax
	movq %rax, %rax
	# LowerStore(1215:3).3: mov $imm, (^2)
	movq -328(%rbp), %rax
	movl $1, (%rax)
	# LowerStore(1216:3).3: mov $imm, (^5)
	movq -344(%rbp), %rax
	movl $1, (%rax)
	jmp .___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M1329
	.___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M313:
	.___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M314:
	# SetupCalls(1223:3): move argument ptr nonnull dereferenceable(40) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -336(%rbp), %rdi
	callq _ZNSt10filesystem6existsERKNS_7__cxx114pathE
	# SetupCalls(1223:3): move i1 result from %rax
	movb %al, %r13b
	cmpb $0, %r13b
	jne .___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M419
	.___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M338:
	# SetupCalls(1227:3): move argument ptr nonnull dereferenceable(8) align 8 @_ZSt4cerr
	leaq _ZSt4cerr(%rip), %rdi
	# SetupCalls(1227:3): move argument ptr @.str.2
	leaq .str.2(%rip), %rsi
	callq _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
	# SetupCalls(1227:3): move ptr result from %rax
	movq %rax, %rbx
	# SetupCalls(1228:3): move argument ptr nonnull dereferenceable(8) align 8 ^47
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(1228:3): move argument ptr nonnull dereferenceable(40) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -336(%rbp), %rsi
	callq _ZNSt10filesystem7__cxx11lsIcSt11char_traitsIcEEERSt13basic_ostreamIT_T0_ES8_RKNS0_4pathE
	# SetupCalls(1228:3): move ptr result from %rax
	movq %rax, %rbx
	# SetupCalls(1229:3): move argument ptr nonnull dereferenceable(8) align 8 ^48
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(1229:3): move argument i8 signext 10
	movq $10, %rsi
	movsbq %sil, %rsi
	callq _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@PLT
	# SetupCalls(1229:3): move ptr result from %rax
	movq %rax, %rax
	# LowerStore(1230:3).3: mov $imm, (^2)
	movq -328(%rbp), %rax
	movl $2, (%rax)
	# LowerStore(1231:3).3: mov $imm, (^5)
	movq -344(%rbp), %rax
	movl $1, (%rax)
	jmp .___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M1329
	.___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M419:
	# SetupCalls(1235:3): move argument ptr nonnull dereferenceable(24) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq -352(%rbp), %rdi
	callq _ZNSt6vectorI6LsItemSaIS0_EEC2Ev
	# SetupCalls(1236:3): move argument ptr nonnull dereferenceable(16) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq -408(%rbp), %rdi
	# SetupCalls(1236:3): move argument ptr nonnull dereferenceable(40) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -336(%rbp), %rsi
	callq _ZNSt10filesystem7__cxx1118directory_iteratorC2ERKNS0_4pathE
	# LowerStore(1237:3).9: mov %"class.std::filesystem::__cxx11::directory_iterator"* ^8, (^7)
	# Fixing source-to-dest movq -408(%rbp), (%rbx)
	movq -408(%rbp), %r15
	movq %r15, (%rbx)
	# LowerLoad(1238:3).2: (^7) into ptr ^51
	movq (%rbx), %rax
	# SetupCalls(1239:3): move argument ptr nonnull dereferenceable(16) align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq %r14, %rdi
	# SetupCalls(1239:3): move argument ptr nonnull dereferenceable(16) align 8 ^51
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNSt10filesystem7__cxx1118directory_iteratorC2ERKS1_
	# SetupCalls(1240:3): move argument ptr sret align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq -416(%rbp), %rdi
	# SetupCalls(1240:3): move argument ptr ^10
	# Fixed movzx with identical source and destination widths
	movq %r14, %rsi
	callq _ZNSt10filesystem7__cxx115beginENS0_18directory_iteratorE
	# SetupCalls(1241:3): move argument ptr nonnull dereferenceable(16) align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq %r14, %rdi
	callq _ZNSt10filesystem7__cxx1118directory_iteratorD2Ev
	# LowerLoad(1242:3).2: (^7) into ptr ^52
	movq (%rbx), %rax
	# SetupCalls(1243:3): move argument ptr nonnull dereferenceable(16) align 8 ^12
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(1243:3): move argument ptr nonnull dereferenceable(16) align 8 ^52
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNSt10filesystem7__cxx1118directory_iteratorC2ERKS1_
	# SetupCalls(1244:3): move argument ptr sret align 8 ^11
	# Fixed movzx with identical source and destination widths
	movq -424(%rbp), %rdi
	# SetupCalls(1244:3): move argument ptr ^12
	# Fixed movzx with identical source and destination widths
	movq %r12, %rsi
	callq _ZNSt10filesystem7__cxx113endENS0_18directory_iteratorE
	# SetupCalls(1245:3): move argument ptr nonnull dereferenceable(16) align 8 ^12
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	callq _ZNSt10filesystem7__cxx1118directory_iteratorD2Ev
	.___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M604:
	# SetupCalls(1249:3): move argument ptr nonnull dereferenceable(16) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq -416(%rbp), %rdi
	# SetupCalls(1249:3): move argument ptr nonnull dereferenceable(16) align 8 ^11
	# Fixed movzx with identical source and destination widths
	movq -424(%rbp), %rsi
	callq _ZNSt10filesystem7__cxx11neERKNS0_18directory_iteratorES3_
	# SetupCalls(1249:3): move i1 result from %rax
	movb %al, %bl
	cmpb $0, %bl
	jne .___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M696
	.___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M630:
	# LowerStore(1253:3).3: mov $imm, (^5)
	movq -344(%rbp), %rax
	movl $2, (%rax)
	# SetupCalls(1254:3): move argument ptr nonnull dereferenceable(16) align 8 ^11
	# Fixed movzx with identical source and destination widths
	movq -424(%rbp), %rdi
	callq _ZNSt10filesystem7__cxx1118directory_iteratorD2Ev
	# SetupCalls(1255:3): move argument ptr nonnull dereferenceable(16) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq -416(%rbp), %rdi
	callq _ZNSt10filesystem7__cxx1118directory_iteratorD2Ev
	# SetupCalls(1256:3): move argument ptr nonnull dereferenceable(16) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq -408(%rbp), %rdi
	callq _ZNSt10filesystem7__cxx1118directory_iteratorD2Ev
	jmp .___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M915
	.___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M696:
	# SetupCalls(1260:3): move argument ptr nonnull dereferenceable(16) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq -416(%rbp), %rdi
	callq _ZNKSt10filesystem7__cxx1118directory_iteratordeEv@PLT
	# SetupCalls(1260:3): move ptr result from %rax
	movq %rax, %rbx
	# LowerStore(1261:3).9: mov ptr ^57, (^13)
	movq -432(%rbp), %rax
	movq %rbx, (%rax)
	# LowerLoad(1262:3).2: (^13) into ptr ^58
	movq -432(%rbp), %rax
	movq (%rax), %rbx
	# SetupCalls(1263:3): move argument ptr nonnull dereferenceable(41) align 8 ^58
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNKSt10filesystem7__cxx1115directory_entry4pathEv
	# SetupCalls(1263:3): move ptr result from %rax
	movq %rax, %rbx
	# SetupCalls(1264:3): move argument ptr sret align 8 ^15
	# Fixed movzx with identical source and destination widths
	movq -448(%rbp), %rdi
	# SetupCalls(1264:3): move argument ptr nonnull dereferenceable(40) align 8 ^59
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZNKSt10filesystem7__cxx114path8filenameEv
	# SetupCalls(1265:3): move argument ptr sret align 8 ^14
	# Fixed movzx with identical source and destination widths
	movq -440(%rbp), %rdi
	# SetupCalls(1265:3): move argument ptr nonnull dereferenceable(40) align 8 ^15
	# Fixed movzx with identical source and destination widths
	movq -448(%rbp), %rsi
	callq _ZNKSt10filesystem7__cxx114path6stringEv
	# LowerLoad(1266:3).2: (^13) into ptr ^60
	movq -432(%rbp), %rax
	movq (%rax), %rbx
	# SetupCalls(1267:3): move argument ptr nonnull dereferenceable(41) align 8 ^60
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNKSt10filesystem7__cxx1115directory_entry12is_directoryEv
	# SetupCalls(1267:3): move i1 result from %rax
	movb %al, %bl
	# LowerBasicConversion(1268:3): i1 ^61 -> i8 ^62
	movq -456(%rbp), %rax
	movb %bl, (%rax)
	# LowerStore(1269:3).9: mov i8 ^62, (^16)
	# SetupCalls(1270:3): move argument ptr nonnull dereferenceable(24) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq -352(%rbp), %rdi
	# SetupCalls(1270:3): move argument ptr nonnull dereferenceable(32) align 8 ^14
	# Fixed movzx with identical source and destination widths
	movq -440(%rbp), %rsi
	# SetupCalls(1270:3): move argument ptr nonnull dereferenceable(1) align 1 ^16
	# Fixed movzx with identical source and destination widths
	movq -456(%rbp), %rdx
	callq _ZNSt6vectorI6LsItemSaIS0_EE12emplace_backIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbEEERS0_DpOT_
	# SetupCalls(1270:3): move ptr result from %rax
	movq %rax, %rax
	# SetupCalls(1271:3): move argument ptr nonnull dereferenceable(32) align 8 ^14
	# Fixed movzx with identical source and destination widths
	movq -440(%rbp), %rdi
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
	# SetupCalls(1272:3): move argument ptr nonnull dereferenceable(40) align 8 ^15
	# Fixed movzx with identical source and destination widths
	movq -448(%rbp), %rdi
	callq _ZNSt10filesystem7__cxx114pathD2Ev
	# SetupCalls(1276:3): move argument ptr nonnull dereferenceable(16) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq -416(%rbp), %rdi
	callq _ZNSt10filesystem7__cxx1118directory_iteratorppEv@PLT
	# SetupCalls(1276:3): move ptr result from %rax
	movq %rax, %rax
	jmp .___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M604
	.___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M915:
	# SetupCalls(1280:3): move argument ptr nonnull dereferenceable(24) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq -352(%rbp), %rdi
	callq _ZNSt6vectorI6LsItemSaIS0_EE5beginEv
	# SetupCalls(1280:3): move ptr result from %rax
	movq %rax, %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(1281:3): struct-type: ptr ^17 -> ^68, indices=0,0
	movq -400(%rbp), %rax
	# LowerGetelementptr(1281:3): type of ^68 is ptr*
	# LowerStore(1282:3).9: mov ptr ^67, (^68)
	movq %rbx, (%rax)
	# SetupCalls(1283:3): move argument ptr nonnull dereferenceable(24) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq -352(%rbp), %rdi
	callq _ZNSt6vectorI6LsItemSaIS0_EE3endEv
	# SetupCalls(1283:3): move ptr result from %rax
	movq %rax, %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(1284:3): struct-type: ptr ^18 -> ^70, indices=0,0
	movq -392(%rbp), %rax
	# LowerGetelementptr(1284:3): type of ^70 is ptr*
	# LowerStore(1285:3).9: mov ptr ^69, (^70)
	movq %rbx, (%rax)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(1286:3): struct-type: ptr ^17 -> ^71, indices=0,0
	movq -400(%rbp), %rax
	# LowerGetelementptr(1286:3): type of ^71 is ptr*
	# LowerLoad(1287:3).2: (^71) into ptr ^72
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(1288:3): struct-type: ptr ^18 -> ^73, indices=0,0
	movq -392(%rbp), %rax
	# LowerGetelementptr(1288:3): type of ^73 is ptr*
	# LowerLoad(1289:3).2: (^73) into ptr ^74
	movq (%rax), %rcx
	# SetupCalls(1290:3): move argument ptr ^72
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(1290:3): move argument ptr ^74
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	callq _ZSt4sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEEZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISB_EEE3$_0EvT_SH_T0_
	# LowerStore(1291:3).9: mov %"class.std::vector.5"* ^6, (^20)
	movq -384(%rbp), %rax
	# Fixing source-to-dest movq -352(%rbp), (%rax)
	movq -352(%rbp), %r15
	movq %r15, (%rax)
	# LowerLoad(1292:3).2: (^20) into ptr ^75
	movq -384(%rbp), %rax
	movq (%rax), %rbx
	# SetupCalls(1293:3): move argument ptr nonnull dereferenceable(24) align 8 ^75
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt6vectorI6LsItemSaIS0_EE5beginEv
	# SetupCalls(1293:3): move ptr result from %rax
	movq %rax, %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(1294:3): struct-type: ptr ^21 -> ^77, indices=0,0
	movq -360(%rbp), %rax
	# LowerGetelementptr(1294:3): type of ^77 is ptr*
	# LowerStore(1295:3).9: mov ptr ^76, (^77)
	movq %rbx, (%rax)
	# LowerLoad(1296:3).2: (^20) into ptr ^78
	movq -384(%rbp), %rbx
	movq (%rbx), %rax
	# SetupCalls(1297:3): move argument ptr nonnull dereferenceable(24) align 8 ^78
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt6vectorI6LsItemSaIS0_EE3endEv
	# SetupCalls(1297:3): move ptr result from %rax
	movq %rax, %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(1298:3): struct-type: ptr ^22 -> ^80, indices=0,0
	movq -368(%rbp), %rax
	# LowerGetelementptr(1298:3): type of ^80 is ptr*
	# LowerStore(1299:3).9: mov ptr ^79, (^80)
	movq %rbx, (%rax)
	.___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M1073:
	# SetupCalls(1303:3): move argument ptr nonnull dereferenceable(8) align 8 ^21
	# Fixed movzx with identical source and destination widths
	movq -360(%rbp), %rdi
	# SetupCalls(1303:3): move argument ptr nonnull dereferenceable(8) align 8 ^22
	# Fixed movzx with identical source and destination widths
	movq -368(%rbp), %rsi
	callq _ZN9__gnu_cxxneIP6LsItemSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_
	# SetupCalls(1303:3): move i1 result from %rax
	movb %al, %bl
	cmpb $0, %bl
	jne .___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M1099
	jmp .___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M1303
	.___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M1099:
	# SetupCalls(1307:3): move argument ptr nonnull dereferenceable(8) align 8 ^21
	# Fixed movzx with identical source and destination widths
	movq -360(%rbp), %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEdeEv
	# SetupCalls(1307:3): move ptr result from %rax
	movq %rax, %rbx
	# LowerStore(1308:3).9: mov ptr ^84, (^23)
	movq -376(%rbp), %rax
	movq %rbx, (%rax)
	# LowerLoad(1309:3).2: (^23) into ptr ^85
	movq -376(%rbp), %rax
	movq (%rax), %rbx
	# tt = Pointer, type = %struct.LsItem
	# LowerGetelementptr(1310:3): struct-type: ptr ^85 -> ^86, indices=0,1
	addq $32, %rbx
	# LowerGetelementptr(1310:3): type of ^86 is i8*
	# LowerLoad(1311:3).2: (^86) into i8 ^87
	movb (%rbx), %al
	# LowerTrunc(1312:3): 8 to 1, move
	# LowerTrunc(1312:3): 8 to 1, apply mask
	andq $1, %rax
	cmpb $0, %al
	jne .___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M1138
	jmp .___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M1220
	.___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M1138:
	# SetupCalls(1316:3): move argument ptr nonnull dereferenceable(8) align 8 @_ZSt4cout
	leaq _ZSt4cout(%rip), %rdi
	# SetupCalls(1316:3): move argument ptr @.str.3
	leaq .str.3(%rip), %rsi
	callq _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
	# SetupCalls(1316:3): move ptr result from %rax
	movq %rax, %rbx
	# LowerLoad(1317:3).2: (^23) into ptr ^91
	movq -376(%rbp), %rcx
	movq (%rcx), %rax
	# tt = Pointer, type = %struct.LsItem
	# LowerGetelementptr(1318:3): struct-type: ptr ^91 -> ^92, indices=0,0
	# LowerGetelementptr(1318:3): type of ^92 is %"class.std::__cxx11::basic_string"*
	# SetupCalls(1319:3): move argument ptr nonnull dereferenceable(8) align 8 ^90
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(1319:3): move argument ptr nonnull dereferenceable(32) align 8 ^92
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKNSt7__cxx1112basic_stringIS4_S5_T1_EE@PLT
	# SetupCalls(1319:3): move ptr result from %rax
	movq %rax, %rbx
	# SetupCalls(1320:3): move argument ptr nonnull dereferenceable(8) align 8 ^93
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(1320:3): move argument ptr @.str.4
	leaq .str.4(%rip), %rsi
	callq _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
	# SetupCalls(1320:3): move ptr result from %rax
	movq %rax, %rax
	jmp .___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M1278
	.___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M1220:
	# LowerLoad(1324:3).2: (^23) into ptr ^96
	movq -376(%rbp), %rax
	movq (%rax), %rbx
	# tt = Pointer, type = %struct.LsItem
	# LowerGetelementptr(1325:3): struct-type: ptr ^96 -> ^97, indices=0,0
	# LowerGetelementptr(1325:3): type of ^97 is %"class.std::__cxx11::basic_string"*
	# SetupCalls(1326:3): move argument ptr nonnull dereferenceable(8) align 8 @_ZSt4cout
	leaq _ZSt4cout(%rip), %rdi
	# SetupCalls(1326:3): move argument ptr nonnull dereferenceable(32) align 8 ^97
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKNSt7__cxx1112basic_stringIS4_S5_T1_EE@PLT
	# SetupCalls(1326:3): move ptr result from %rax
	movq %rax, %rbx
	# SetupCalls(1327:3): move argument ptr nonnull dereferenceable(8) align 8 ^98
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(1327:3): move argument i8 signext 10
	movq $10, %rsi
	movsbq %sil, %rsi
	callq _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@PLT
	# SetupCalls(1327:3): move ptr result from %rax
	movq %rax, %rax
	.___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M1278:
	# SetupCalls(1334:3): move argument ptr nonnull dereferenceable(8) align 8 ^21
	# Fixed movzx with identical source and destination widths
	movq -360(%rbp), %rdi
	callq _ZN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEppEv
	# SetupCalls(1334:3): move ptr result from %rax
	movq %rax, %rax
	jmp .___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M1073
	.___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M1303:
	# LowerStore(1338:3).3: mov $imm, (^2)
	movq -328(%rbp), %rax
	movl $0, (%rax)
	# LowerStore(1339:3).3: mov $imm, (^5)
	movq -344(%rbp), %rax
	movl $1, (%rax)
	# SetupCalls(1340:3): move argument ptr nonnull dereferenceable(24) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq -352(%rbp), %rdi
	callq _ZNSt6vectorI6LsItemSaIS0_EED2Ev
	.___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M1329:
	# SetupCalls(1344:3): move argument ptr nonnull dereferenceable(40) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -336(%rbp), %rdi
	callq _ZNSt10filesystem7__cxx114pathD2Ev
	# LowerLoad(1345:3).2: (^2) into i32 ^105
	movq -328(%rbp), %rax
	movl (%rax), %ebx
	movl %ebx, %eax
	movq -464(%rbp), %r15
	movq -528(%rbp), %r14
	movq -472(%rbp), %r13
	movq -544(%rbp), %r12
	movq -504(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEES3_ET_S8_T0_
.p2align 4, 0x90
_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEES3_ET_S8_T0_:
	.___ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEES3_ET_S8_T0___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(112 + 0, 16)
	subq $112, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -64(%rbp)
	movq %r12, -56(%rbp)
	movq %r13, -40(%rbp)
	movq %r14, -48(%rbp)
	# LowerAlloca(8554:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^3
	leaq -8(%rbp), %r13
	# LowerAlloca(8555:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^4
	leaq -16(%rbp), %r14
	# LowerAlloca(8556:3): size = 8, type = ptr*, var = ^5
	leaq -24(%rbp), %rcx
	# LowerAlloca(8557:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^6
	leaq -32(%rbp), %r12
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8558:3): struct-type: ptr ^4 -> ^7, indices=0,0
	movq %r14, %rax
	# LowerGetelementptr(8558:3): type of ^7 is ptr*
	# LowerStore(8559:3).9: mov ptr %rdi, (^7)
	movq %rdi, (%rax)
	# LowerStore(8560:3).9: mov ptr %rsi, (^5)
	movq %rsi, (%rcx)
	# LowerLoad(8561:3).2: (^5) into ptr ^8
	movq (%rcx), %rbx
	# SetupCalls(8562:3): move argument ptr align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(8562:3): move argument ptr align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %r14, %rsi
	# SetupCalls(8562:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8563:3): struct-type: ptr ^6 -> ^9, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(8563:3): type of ^9 is ptr*
	# LowerLoad(8564:3).2: (^9) into ptr ^10
	movq (%rax), %rcx
	# SetupCalls(8565:3): move argument ptr ^10
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	callq _ZSt12__niter_baseIP6LsItemSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE
	# SetupCalls(8565:3): move ptr result from %rax
	movq %rax, %r12
	# LowerBasicConversion(8566:3): ptr ^8 -> i64 ^12
	movq %rbx, %rax
	# LowerBasicConversion(8567:3): ptr ^11 -> i64 ^13
	movq %r12, %rbx
	# LowerMath(8568:3): ^12, ^13 into i64 ^14
	movq %rax, %rcx
	subq %rbx, %rcx
	# LowerSdiv(8569:3): ^14, 40 into i64 ^15
	movq %rcx, %rbx
	movq $0, %rdx
	movq %rbx, %rax
	movq $40, %rbx
	idivq %rbx
	movq %rax, %rbx
	# SetupCalls(8570:3): move argument ptr nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %r14, %rdi
	# SetupCalls(8570:3): move argument i64 ^15
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEplEl
	# SetupCalls(8570:3): move ptr result from %rax
	movq %rax, %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8571:3): struct-type: ptr ^3 -> ^17, indices=0,0
	movq %r13, %rax
	# LowerGetelementptr(8571:3): type of ^17 is ptr*
	# LowerStore(8572:3).9: mov ptr ^16, (^17)
	movq %rbx, (%rax)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8573:3): struct-type: ptr ^3 -> ^18, indices=0,0
	movq %r13, %rbx
	# LowerGetelementptr(8573:3): type of ^18 is ptr*
	# LowerLoad(8574:3).2: (^18) into ptr ^19
	movq (%rbx), %rax
	movq -48(%rbp), %r14
	movq -40(%rbp), %r13
	movq -56(%rbp), %r12
	movq -64(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISA_EEEEEC2IRA5_KcRSF_Lb1EEEOT_OT0_
.p2align 4, 0x90
_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISA_EEEEEC2IRA5_KcRSF_Lb1EEEOT_OT0_:
	.___ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISA_EEEEEC2IRA5_KcRSF_Lb1EEEOT_OT0___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(112 + 0, 16)
	subq $112, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -72(%rbp)
	movq %r12, -64(%rbp)
	movq %r13, -80(%rbp)
	movq %r14, -88(%rbp)
	movq %r15, -96(%rbp)
	# LowerAlloca(2321:3): size = 8, type = ptr*, var = ^4
	leaq -8(%rbp), %r8
	# LowerAlloca(2322:3): size = 8, type = ptr*, var = ^5
	leaq -16(%rbp), %r12
	# LowerAlloca(2323:3): size = 8, type = ptr*, var = ^6
	leaq -24(%rbp), %rbx
	# LowerAlloca(2324:3): size = 8, type = ptr*, var = ^7
	leaq -32(%rbp), %rcx
	# LowerAlloca(2325:3): size = 8, type = ptr*, var = ^8
	leaq -40(%rbp), %rax
	# LowerAlloca(2326:3): size = 8, type = ptr*, var = ^9
	leaq -48(%rbp), %r13
	# LowerAlloca(2327:3): size = 1, type = %"class.std::allocator.0"*, var = ^10
	leaq -49(%rbp), %r14
	# LowerStore(2328:3).9: mov ptr %rdi, (^7)
	movq %rdi, (%rcx)
	# LowerStore(2329:3).9: mov ptr %rsi, (^8)
	movq %rsi, (%rax)
	# LowerStore(2330:3).9: mov ptr %rdx, (^9)
	movq %rdx, (%r13)
	# LowerLoad(2331:3).2: (^7) into ptr ^11
	movq (%rcx), %r15
	# tt = Pointer, type = %"struct.std::pair"
	# LowerGetelementptr(2332:3): struct-type: ptr ^11 -> ^12, indices=0,0
	movq %r15, %rcx
	# LowerGetelementptr(2332:3): type of ^12 is %"class.std::__cxx11::basic_string"*
	# LowerLoad(2333:3).2: (^8) into ptr ^13
	movq (%rax), %rdx
	# tt = Pointer, type = [5 x i8]
	# LowerGetelementptr(2334:3): struct-type: ptr ^13 -> ^14, indices=0,0
	# LowerGetelementptr(2334:3): type of ^14 is i8*
	# LowerStore(2335:3).9: mov %"class.std::allocator.0"* ^10, (^6)
	movq %r14, (%rbx)
	# LowerLoad(2336:3).2: (^6) into ptr ^15
	# Fixing source-to-dest movq (%rbx), (%r8)
	pushq %r15
	movq (%rbx), %r15
	movq %r15, (%r8)
	popq %r15
	# LowerStore(2337:3).9: mov ptr ^15, (^4)
	# LowerLoad(2338:3).2: (^4) into ptr ^16
	movq (%r8), %rax
	# SetupCalls(2339:3): move argument ptr nonnull dereferenceable(32) align 8 ^12
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(2339:3): move argument ptr ^14
	# Fixed movzx with identical source and destination widths
	movq %rdx, %rsi
	# SetupCalls(2339:3): move argument ptr nonnull dereferenceable(1) align 1 ^10
	# Fixed movzx with identical source and destination widths
	movq %r14, %rdx
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_
	# LowerStore(2340:3).9: mov %"class.std::allocator.0"* ^10, (^5)
	movq %r14, (%r12)
	# LowerLoad(2341:3).2: (^5) into ptr ^17
	movq (%r12), %rax
	# SetupCalls(2342:3): move argument ptr nonnull dereferenceable(1) align 1 ^17
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt15__new_allocatorIcED2Ev
	# tt = Pointer, type = %"struct.std::pair"
	# LowerGetelementptr(2343:3): struct-type: ptr ^11 -> ^18, indices=0,1
	movq %r15, %rbx
	addq $32, %rbx
	# LowerGetelementptr(2343:3): type of ^18 is %"class.std::function"*
	# LowerLoad(2344:3).2: (^9) into ptr ^19
	movq (%r13), %rax
	# SetupCalls(2345:3): move argument ptr nonnull dereferenceable(32) align 8 ^18
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(2345:3): move argument ptr nonnull ^19
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNSt8functionIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEEC2IRS9_vEEOT_
	movq -96(%rbp), %r15
	movq -88(%rbp), %r14
	movq -80(%rbp), %r13
	movq -64(%rbp), %r12
	movq -72(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt16initializer_listISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEE3endEv
.p2align 4, 0x90
_ZNKSt16initializer_listISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEE3endEv:
	.___ZNKSt16initializer_listISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEE3endEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	movq %r12, -24(%rbp)
	# LowerAlloca(8857:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(8858:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(8859:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# SetupCalls(8860:3): move argument ptr nonnull dereferenceable(16) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNKSt16initializer_listISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEE5beginEv
	# SetupCalls(8860:3): move ptr result from %rax
	movq %rax, %r12
	# SetupCalls(8861:3): move argument ptr nonnull dereferenceable(16) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNKSt16initializer_listISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEE4sizeEv
	# SetupCalls(8861:3): move i64 result from %rax
	movq %rax, %rbx
	# tt = Pointer, type = %"struct.std::pair"
	# LowerGetelementptr(8862:3): pointer-type -> ^6
	movq %rbx, %rax
	shlq $6, %rax
	addq %r12, %rax
	movq -24(%rbp), %r12
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEppEv
.p2align 4, 0x90
_ZN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEppEv:
	.___ZN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEppEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(1849:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(1850:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(1851:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(1852:3): struct-type: ptr ^3 -> ^4, indices=0,0
	movq %rbx, %rcx
	# LowerGetelementptr(1852:3): type of ^4 is ptr*
	# LowerLoad(1853:3).2: (^4) into ptr ^5
	movq (%rcx), %rax
	# tt = Pointer, type = %struct.LsItem
	# LowerGetelementptr(1854:3): struct-type: ptr ^5 -> ^6, indices=1
	addq $40, %rax
	# LowerGetelementptr(1854:3): type of ^6 is %struct.LsItem*
	# LowerStore(1855:3).9: mov %struct.LsItem* ^6, (^4)
	movq %rax, (%rcx)
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZN9__gnu_cxxneIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKNS_17__normal_iteratorIT_T0_EESE_
.p2align 4, 0x90
_ZN9__gnu_cxxneIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKNS_17__normal_iteratorIT_T0_EESE_:
	.___ZN9__gnu_cxxneIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKNS_17__normal_iteratorIT_T0_EESE___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(56 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	movq %r12, -48(%rbp)
	movq %r13, -32(%rbp)
	# LowerAlloca(6244:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %rbx
	# LowerAlloca(6245:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %r13
	# LowerStore(6246:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rbx)
	# LowerStore(6247:3).9: mov ptr %rsi, (^4)
	movq %rsi, (%r13)
	# LowerLoad(6248:3).2: (^3) into ptr ^5
	movq (%rbx), %rax
	# SetupCalls(6249:3): move argument ptr nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv
	# SetupCalls(6249:3): move ptr result from %rax
	movq %rax, %rbx
	# LowerLoad(6250:3).2: (^6) into ptr ^7
	movq (%rbx), %r12
	# LowerLoad(6251:3).2: (^4) into ptr ^8
	movq (%r13), %rax
	# SetupCalls(6252:3): move argument ptr nonnull dereferenceable(8) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv
	# SetupCalls(6252:3): move ptr result from %rax
	movq %rax, %rbx
	# LowerLoad(6253:3).2: (^9) into ptr ^10
	movq (%rbx), %rax
	# LowerIcmp(6254:3): ptr ^7 vs. operand ptr ^10
	cmpq %rax, %r12
	setne %al
	andq $1, %rax
	movq -32(%rbp), %r13
	movq -48(%rbp), %r12
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZStlsIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_St17basic_string_viewIS3_S4_E
.p2align 4, 0x90
_ZStlsIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_St17basic_string_viewIS3_S4_E:
	.___ZStlsIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_St17basic_string_viewIS3_S4_E__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(64 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -40(%rbp)
	movq %r12, -32(%rbp)
	movq %r13, -48(%rbp)
	# LowerAlloca(2613:3): size = 16, type = %"class.std::basic_string_view"*, var = ^4
	leaq -16(%rbp), %r12
	# LowerAlloca(2614:3): size = 8, type = ptr*, var = ^5
	leaq -24(%rbp), %rcx
	# tt = Pointer, type = {i64, ptr}
	# LowerGetelementptr(2615:3): struct-type: ptr ^4 -> ^6, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(2615:3): type of ^6 is i64*
	# LowerStore(2616:3).9: mov i64 %rsi, (^6)
	movq %rsi, (%rax)
	# tt = Pointer, type = {i64, ptr}
	# LowerGetelementptr(2617:3): struct-type: ptr ^4 -> ^7, indices=0,1
	movq %r12, %rax
	addq $8, %rax
	# LowerGetelementptr(2617:3): type of ^7 is ptr*
	# LowerStore(2618:3).9: mov ptr %rdx, (^7)
	movq %rdx, (%rax)
	# LowerStore(2619:3).9: mov ptr %rdi, (^5)
	movq %rdi, (%rcx)
	# LowerLoad(2620:3).2: (^5) into ptr ^8
	movq (%rcx), %rbx
	# SetupCalls(2621:3): move argument ptr nonnull dereferenceable(16) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	callq _ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv
	# SetupCalls(2621:3): move ptr result from %rax
	movq %rax, %r13
	# SetupCalls(2622:3): move argument ptr nonnull dereferenceable(16) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	callq _ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv
	# SetupCalls(2622:3): move i64 result from %rax
	movq %rax, %r12
	# SetupCalls(2623:3): move argument ptr nonnull dereferenceable(8) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(2623:3): move argument ptr ^9
	# Fixed movzx with identical source and destination widths
	movq %r13, %rsi
	# SetupCalls(2623:3): move argument i64 ^10
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdx
	callq _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT
	# SetupCalls(2623:3): move ptr result from %rax
	movq %rax, %rbx
	movq %rbx, %rax
	movq -48(%rbp), %r13
	movq -32(%rbp), %r12
	movq -40(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt3getILm1EJPNSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSB_
.p2align 4, 0x90
_ZSt3getILm1EJPNSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSB_:
	.___ZSt3getILm1EJPNSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSB___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(3943:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(3944:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(3945:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# SetupCalls(3946:3): move argument ptr nonnull dereferenceable(1) align 1 ^3
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZSt12__get_helperILm1ENSt10filesystem7__cxx114path5_List13_Impl_deleterEJEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE
	# SetupCalls(3946:3): move ptr result from %rax
	movq %rax, %rbx
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt4__lgIlET_S0_
.p2align 4, 0x90
_ZSt4__lgIlET_S0_:
	.___ZSt4__lgIlET_S0___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	movq %r12, -24(%rbp)
	# LowerAlloca(7171:3): size = 8, type = i64*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(7172:3).9: mov i64 %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(7173:3).2: (^2) into i64 ^3
	movq (%rax), %rbx
	# SetupCalls(7174:3): move argument i64 ^3
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZSt11__bit_widthImEiT_
	# SetupCalls(7174:3): move i32 result from %rax
	movl %eax, %r12d
	# LowerMath(7175:3): ^4, 1 into i32 ^5
	movl %r12d, %ebx
	subl $1, %ebx
	movslq %ebx, %rax
	movq -24(%rbp), %r12
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10filesystem7__cxx114path8iteratorC2EPKS1_b
.p2align 4, 0x90
_ZNSt10filesystem7__cxx114path8iteratorC2EPKS1_b:
	.___ZNSt10filesystem7__cxx114path8iteratorC2EPKS1_b__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(40 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	movq %r15, -40(%rbp)
	# LowerAlloca(3727:3): size = 8, type = ptr*, var = ^4
	leaq -8(%rbp), %r8
	# LowerAlloca(3728:3): size = 8, type = ptr*, var = ^5
	leaq -16(%rbp), %rcx
	# LowerAlloca(3729:3): size = 1, type = i8*, var = ^6
	leaq -17(%rbp), %rbx
	# LowerStore(3730:3).9: mov ptr %rdi, (^4)
	movq %rdi, (%r8)
	# LowerStore(3731:3).9: mov ptr %rsi, (^5)
	movq %rsi, (%rcx)
	# LowerBasicConversion(3732:3): i1 %dl -> i8 ^7
	movb %dl, (%rbx)
	# LowerStore(3733:3).9: mov i8 ^7, (^6)
	# LowerLoad(3734:3).2: (^4) into ptr ^8
	movq (%r8), %rax
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path::iterator"
	# LowerGetelementptr(3735:3): struct-type: ptr ^8 -> ^9, indices=0,0
	movq %rax, %rdx
	# LowerGetelementptr(3735:3): type of ^9 is ptr*
	# LowerLoad(3736:3).2: (^5) into ptr ^10
	# Fixing source-to-dest movq (%rcx), (%rdx)
	movq (%rcx), %r15
	movq %r15, (%rdx)
	# LowerStore(3737:3).9: mov ptr ^10, (^9)
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path::iterator"
	# LowerGetelementptr(3738:3): struct-type: ptr ^8 -> ^11, indices=0,1
	movq %rax, %rcx
	addq $8, %rcx
	# LowerGetelementptr(3738:3): type of ^11 is ptr*
	# LowerStore(3739:3).3: mov $imm, (^11)
	movq $0, (%rcx)
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path::iterator"
	# LowerGetelementptr(3740:3): struct-type: ptr ^8 -> ^12, indices=0,2
	movq %rax, %rcx
	addq $16, %rcx
	# LowerGetelementptr(3740:3): type of ^12 is i8*
	# LowerLoad(3741:3).2: (^6) into i8 ^13
	movb (%rbx), %al
	# LowerTrunc(3742:3): 8 to 1, move
	# LowerTrunc(3742:3): 8 to 1, apply mask
	andq $1, %rax
	# LowerBasicConversion(3743:3): i1 ^14 -> i8 ^15
	movb %al, (%rcx)
	# LowerStore(3744:3).9: mov i8 ^15, (^12)
	movq -40(%rbp), %r15
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt12_Vector_baseI6LsItemSaIS0_EE19_M_get_Tp_allocatorEv
.p2align 4, 0x90
_ZNSt12_Vector_baseI6LsItemSaIS0_EE19_M_get_Tp_allocatorEv:
	.___ZNSt12_Vector_baseI6LsItemSaIS0_EE19_M_get_Tp_allocatorEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(6319:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(6320:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(6321:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"struct.std::_Vector_base.6"
	# LowerGetelementptr(6322:3): struct-type: ptr ^3 -> ^4, indices=0,0
	# LowerGetelementptr(6322:3): type of ^4 is %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl"*
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10unique_ptrINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEEaSEOS6_
.p2align 4, 0x90
_ZNSt10unique_ptrINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEEaSEOS6_:
	.___ZNSt10unique_ptrINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEEaSEOS6___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	movq %r12, -24(%rbp)
	# LowerAlloca(5984:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %rax
	# LowerAlloca(5985:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %rcx
	# LowerStore(5986:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rax)
	# LowerStore(5987:3).9: mov ptr %rsi, (^4)
	movq %rsi, (%rcx)
	# LowerLoad(5988:3).2: (^3) into ptr ^5
	movq (%rax), %r12
	# tt = Pointer, type = %"class.std::unique_ptr"
	# LowerGetelementptr(5989:3): struct-type: ptr ^5 -> ^6, indices=0,0
	movq %r12, %rbx
	# LowerGetelementptr(5989:3): type of ^6 is %"struct.std::__uniq_ptr_data"*
	# LowerLoad(5990:3).2: (^4) into ptr ^7
	movq (%rcx), %rax
	# tt = Pointer, type = %"class.std::unique_ptr"
	# LowerGetelementptr(5991:3): struct-type: ptr ^7 -> ^8, indices=0,0
	# LowerGetelementptr(5991:3): type of ^8 is %"struct.std::__uniq_ptr_data"*
	# SetupCalls(5992:3): move argument ptr nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(5992:3): move argument ptr nonnull dereferenceable(8) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNSt15__uniq_ptr_dataINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterELb1ELb1EEaSEOS6_
	# SetupCalls(5992:3): move ptr result from %rax
	movq %rax, %rax
	movq %r12, %rax
	movq -24(%rbp), %r12
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt8functionIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEEC2ERKSA_
.p2align 4, 0x90
_ZNSt8functionIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEEC2ERKSA_:
	.___ZNSt8functionIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEEC2ERKSA___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(40 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	movq %r12, -24(%rbp)
	movq %r13, -40(%rbp)
	# LowerAlloca(9832:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %rax
	# LowerAlloca(9833:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %r12
	# LowerStore(9834:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rax)
	# LowerStore(9835:3).9: mov ptr %rsi, (^4)
	movq %rsi, (%r12)
	# LowerLoad(9836:3).2: (^3) into ptr ^5
	movq (%rax), %rbx
	# tt = Pointer, type = i8
	# LowerGetelementptr(9837:3): struct-type: ptr ^5 -> ^6, indices=0
	movq %rbx, %rax
	# LowerGetelementptr(9837:3): type of ^6 is i8*
	# SetupCalls(9838:3): move argument ptr align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(9838:3): move argument i32 0
	movq $0, %rsi
	# SetupCalls(9838:3): move argument i64 24
	movq $24, %rdx
	callq memset@PLT
	# SetupCalls(9839:3): move argument ptr nonnull dereferenceable(24) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt14_Function_baseC2Ev
	# tt = Pointer, type = %"class.std::function"
	# LowerGetelementptr(9840:3): struct-type: ptr ^5 -> ^7, indices=0,1
	movq %rbx, %rax
	addq $24, %rax
	# LowerGetelementptr(9840:3): type of ^7 is ptr*
	# LowerStore(9841:3).3: mov $imm, (^7)
	movq $0, (%rax)
	# LowerLoad(9842:3).2: (^4) into ptr ^8
	movq (%r12), %rax
	# SetupCalls(9843:3): move argument ptr nonnull dereferenceable(32) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNKSt8functionIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEEcvbEv
	# SetupCalls(9843:3): move i1 result from %rax
	movb %al, %r13b
	cmpb $0, %r13b
	jne .___ZNSt8functionIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEEC2ERKSA___M93
	jmp .___ZNSt8functionIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEEC2ERKSA___M174
	.___ZNSt8functionIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEEC2ERKSA___M93:
	# LowerLoad(9847:3).2: (^4) into ptr ^11
	movq (%r12), %rax
	# tt = Pointer, type = %"class.std::_Function_base"
	# LowerGetelementptr(9848:3): struct-type: ptr ^11 -> ^12, indices=0,1
	addq $16, %rax
	# LowerGetelementptr(9848:3): type of ^12 is ptr*
	# LowerLoad(9849:3).2: (^12) into ptr ^13
	movq (%rax), %rcx
	# tt = Pointer, type = %"class.std::_Function_base"
	# LowerGetelementptr(9850:3): struct-type: ptr ^5 -> ^14, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(9850:3): type of ^14 is %"union.std::_Any_data"*
	# LowerLoad(9851:3).2: (^4) into ptr ^15
	movq (%r12), %rdx
	# tt = Pointer, type = %"class.std::_Function_base"
	# LowerGetelementptr(9852:3): struct-type: ptr ^15 -> ^16, indices=0,0
	# LowerGetelementptr(9852:3): type of ^16 is %"union.std::_Any_data"*
	# SetupCalls(9853:3): move argument ptr nonnull dereferenceable(16) align 8 ^14
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(9853:3): move argument ptr nonnull dereferenceable(16) align 8 ^16
	# Fixed movzx with identical source and destination widths
	movq %rdx, %rsi
	# SetupCalls(9853:3): move argument i32 2
	movq $2, %rdx
	# SetupCalls(9853:3): jump to function operand ^13
	callq *%rcx
	# SetupCalls(9853:3): move i1 result from %rax
	movb %al, %al
	# LowerLoad(9854:3).2: (^4) into ptr ^18
	movq (%r12), %rax
	# tt = Pointer, type = %"class.std::function"
	# LowerGetelementptr(9855:3): struct-type: ptr ^18 -> ^19, indices=0,1
	addq $24, %rax
	# LowerGetelementptr(9855:3): type of ^19 is ptr*
	# LowerLoad(9856:3).2: (^19) into ptr ^20
	movq (%rax), %rcx
	# tt = Pointer, type = %"class.std::function"
	# LowerGetelementptr(9857:3): struct-type: ptr ^5 -> ^21, indices=0,1
	movq %rbx, %rax
	addq $24, %rax
	# LowerGetelementptr(9857:3): type of ^21 is ptr*
	# LowerStore(9858:3).9: mov ptr ^20, (^21)
	movq %rcx, (%rax)
	# LowerLoad(9859:3).2: (^4) into ptr ^22
	movq (%r12), %rax
	# tt = Pointer, type = %"class.std::_Function_base"
	# LowerGetelementptr(9860:3): struct-type: ptr ^22 -> ^23, indices=0,1
	addq $16, %rax
	# LowerGetelementptr(9860:3): type of ^23 is ptr*
	# LowerLoad(9861:3).2: (^23) into ptr ^24
	movq (%rax), %rcx
	# tt = Pointer, type = %"class.std::_Function_base"
	# LowerGetelementptr(9862:3): struct-type: ptr ^5 -> ^25, indices=0,1
	movq %rbx, %rax
	addq $16, %rax
	# LowerGetelementptr(9862:3): type of ^25 is ptr*
	# LowerStore(9863:3).9: mov ptr ^24, (^25)
	movq %rcx, (%rax)
	.___ZNSt8functionIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEEC2ERKSA___M174:
	movq -40(%rbp), %r13
	movq -24(%rbp), %r12
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt10filesystem7__cxx114path5_List4typeEv
.p2align 4, 0x90
_ZNKSt10filesystem7__cxx114path5_List4typeEv:
	.___ZNKSt10filesystem7__cxx114path5_List4typeEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	movq %r12, -24(%rbp)
	# LowerAlloca(3630:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(3631:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(3632:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"struct.std::filesystem::__cxx11::path::_List"
	# LowerGetelementptr(3633:3): struct-type: ptr ^3 -> ^4, indices=0,0
	# LowerGetelementptr(3633:3): type of ^4 is %"class.std::unique_ptr"*
	# SetupCalls(3634:3): move argument ptr nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNKSt10unique_ptrINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE3getEv
	# SetupCalls(3634:3): move ptr result from %rax
	movq %rax, %r12
	# LowerBasicConversion(3635:3): ptr ^5 -> i64 ^6
	movq %r12, %rbx
	# LowerLogic(3637:3): ^6, 3 into i64 ^7
	andq $3, %rbx
	# LowerTrunc(3637:3): 64 to 8, move
	movb %bl, %al
	# LowerTrunc(3637:3): 64 to 8, apply mask
	andq $255, %rax
	movq -24(%rbp), %r12
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaIS9_EEEESt4lessIS5_ESaISt4pairIKS5_SF_EEEC2ESt16initializer_listISK_ERKSH_RKSL_
.p2align 4, 0x90
_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaIS9_EEEESt4lessIS5_ESaISt4pairIKS5_SF_EEEC2ESt16initializer_listISK_ERKSH_RKSL_:
	.___ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaIS9_EEEESt4lessIS5_ESaISt4pairIKS5_SF_EEEC2ESt16initializer_listISK_ERKSH_RKSL___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(200 + 0, 16)
	subq $208, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -112(%rbp)
	movq %r12, -120(%rbp)
	movq %r13, -144(%rbp)
	movq %r14, -152(%rbp)
	movq %r15, -128(%rbp)
	# LowerAlloca(2381:3): size = 8, type = ptr*, var = ^6
	leaq -8(%rbp), %rbx
	# LowerAlloca(2382:3): size = 8, type = ptr*, var = ^7
	leaq -16(%rbp), %r9
	# LowerAlloca(2383:3): size = 8, type = ptr*, var = ^8
	leaq -24(%rbp), %rax
	# LowerAlloca(2384:3): size = 8, type = ptr*, var = ^9
	leaq -32(%rbp), %r12
	# LowerAlloca(2385:3): size = 8, type = ptr*, var = ^10
	# Fixing source-to-dest leaq -40(%rbp), -104(%rbp)
	leaq -40(%rbp), %r15
	movq %r15, -104(%rbp)
	# LowerAlloca(2386:3): size = 16, type = %"class.std::initializer_list.13"*, var = ^11
	# Fixing source-to-dest leaq -56(%rbp), -96(%rbp)
	leaq -56(%rbp), %r15
	movq %r15, -96(%rbp)
	# LowerAlloca(2387:3): size = 8, type = ptr*, var = ^12
	leaq -64(%rbp), %r10
	# LowerAlloca(2388:3): size = 8, type = ptr*, var = ^13
	leaq -72(%rbp), %r11
	# LowerAlloca(2389:3): size = 8, type = ptr*, var = ^14
	leaq -80(%rbp), %r13
	# LowerAlloca(2390:3): size = 1, type = %"class.std::allocator.14"*, var = ^15
	leaq -81(%rbp), %r14
	# tt = Pointer, type = {ptr, i64}
	# LowerGetelementptr(2391:3): struct-type: ptr ^11 -> ^16, indices=0,0
	movq -96(%rbp), %r15
	# LowerGetelementptr(2391:3): type of ^16 is ptr*
	# LowerStore(2392:3).9: mov ptr %rsi, (^16)
	movq %rsi, (%r15)
	# tt = Pointer, type = {ptr, i64}
	# LowerGetelementptr(2393:3): struct-type: ptr ^11 -> ^17, indices=0,1
	movq -96(%rbp), %rsi
	addq $8, %rsi
	# LowerGetelementptr(2393:3): type of ^17 is i64*
	# LowerStore(2394:3).9: mov i64 %rdx, (^17)
	movq %rdx, (%rsi)
	# LowerStore(2395:3).9: mov ptr %rdi, (^12)
	movq %rdi, (%r10)
	# LowerStore(2396:3).9: mov ptr %rcx, (^13)
	movq %rcx, (%r11)
	# LowerStore(2397:3).9: mov ptr %r8, (^14)
	movq %r8, (%r13)
	# LowerLoad(2398:3).2: (^12) into ptr ^18
	movq (%r10), %r15
	# tt = Pointer, type = %"class.std::map"
	# LowerGetelementptr(2399:3): struct-type: ptr ^18 -> ^19, indices=0,0
	movq %r15, %rcx
	# LowerGetelementptr(2399:3): type of ^19 is %"class.std::_Rb_tree"*
	# LowerLoad(2400:3).2: (^13) into ptr ^20
	movq (%r11), %r8
	# LowerLoad(2401:3).2: (^14) into ptr ^21
	movq (%r13), %rdx
	# LowerStore(2402:3).9: mov %"class.std::allocator.14"* ^15, (^8)
	movq %r14, (%rax)
	# LowerStore(2403:3).9: mov ptr ^21, (^9)
	movq %rdx, (%r12)
	# LowerLoad(2404:3).2: (^8) into ptr ^22
	movq (%rax), %rdx
	# LowerLoad(2405:3).2: (^9) into ptr ^23
	movq (%r12), %rax
	# LowerStore(2406:3).9: mov ptr ^22, (^6)
	movq %rdx, (%rbx)
	# LowerStore(2407:3).9: mov ptr ^23, (^7)
	movq %rax, (%r9)
	# LowerLoad(2408:3).2: (^6) into ptr ^24
	movq (%rbx), %rax
	# SetupCalls(2409:3): move argument ptr nonnull dereferenceable(48) align 8 ^19
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(2409:3): move argument ptr nonnull dereferenceable(1) align 1 ^20
	# Fixed movzx with identical source and destination widths
	movq %r8, %rsi
	# SetupCalls(2409:3): move argument ptr nonnull dereferenceable(1) align 1 ^15
	# Fixed movzx with identical source and destination widths
	movq %r14, %rdx
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EEC2ERKSM_RKSN_
	# LowerStore(2410:3).9: mov %"class.std::allocator.14"* ^15, (^10)
	movq -104(%rbp), %rax
	movq %r14, (%rax)
	# LowerLoad(2411:3).2: (^10) into ptr ^25
	movq -104(%rbp), %rbx
	movq (%rbx), %rax
	# SetupCalls(2412:3): move argument ptr nonnull dereferenceable(1) align 1 ^25
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt15__new_allocatorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEED2Ev
	# tt = Pointer, type = %"class.std::map"
	# LowerGetelementptr(2413:3): struct-type: ptr ^18 -> ^26, indices=0,0
	movq %r15, %rbx
	# LowerGetelementptr(2413:3): type of ^26 is %"class.std::_Rb_tree"*
	# SetupCalls(2414:3): move argument ptr nonnull dereferenceable(16) align 8 ^11
	# Fixed movzx with identical source and destination widths
	movq -96(%rbp), %rdi
	callq _ZNKSt16initializer_listISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEE5beginEv
	# SetupCalls(2414:3): move ptr result from %rax
	movq %rax, %r12
	# SetupCalls(2415:3): move argument ptr nonnull dereferenceable(16) align 8 ^11
	# Fixed movzx with identical source and destination widths
	movq -96(%rbp), %rdi
	callq _ZNKSt16initializer_listISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEE3endEv
	# SetupCalls(2415:3): move ptr result from %rax
	movq %rax, %r13
	# SetupCalls(2416:3): move argument ptr nonnull dereferenceable(48) align 8 ^26
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(2416:3): move argument ptr ^27
	# Fixed movzx with identical source and destination widths
	movq %r12, %rsi
	# SetupCalls(2416:3): move argument ptr ^28
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdx
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE22_M_insert_range_uniqueIPKSI_EENSt9enable_ifIXsr17__same_value_typeIT_EE5valueEvE4typeEST_ST_
	movq -128(%rbp), %r15
	movq -152(%rbp), %r14
	movq -144(%rbp), %r13
	movq -120(%rbp), %r12
	movq -112(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10filesystem7__cxx118__detail17__effective_rangeIA2_cEEDaRKT_
.p2align 4, 0x90
_ZNSt10filesystem7__cxx118__detail17__effective_rangeIA2_cEEDaRKT_:
	.___ZNSt10filesystem7__cxx118__detail17__effective_rangeIA2_cEEDaRKT___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(48 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -40(%rbp)
	movq %r12, -32(%rbp)
	# LowerAlloca(5942:3): size = 16, type = %"class.std::basic_string_view"*, var = ^2
	leaq -16(%rbp), %r12
	# LowerAlloca(5943:3): size = 8, type = ptr*, var = ^3
	leaq -24(%rbp), %rbx
	# LowerStore(5944:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rbx)
	# LowerLoad(5945:3).2: (^3) into ptr ^4
	movq (%rbx), %rax
	# tt = Pointer, type = [2 x i8]
	# LowerGetelementptr(5946:3): struct-type: ptr ^4 -> ^5, indices=0,0
	# LowerGetelementptr(5946:3): type of ^5 is i8*
	# SetupCalls(5947:3): move argument ptr nonnull dereferenceable(16) align 8 ^2
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(5947:3): move argument ptr ^5
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNSt17basic_string_viewIcSt11char_traitsIcEEC2EPKc
	# LowerLoad(5948:3).2: (^2) into {i64, ptr} ^6
	# FinishMultireg: mov (%reg), <%pack...>
	movq (%r12), %rax
	movq 8(%r12), %rbx
	# LowerRet: two-register return
	movq %rax, %rax
	movq %rbx, %rdx
	movq -32(%rbp), %r12
	movq -40(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE5beginEv
.p2align 4, 0x90
_ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE5beginEv:
	.___ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE5beginEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(40 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	movq %r12, -24(%rbp)
	# LowerAlloca(9920:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator.24"*, var = ^2
	leaq -8(%rbp), %r12
	# LowerAlloca(9921:3): size = 8, type = ptr*, var = ^3
	leaq -16(%rbp), %rax
	# LowerStore(9922:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rax)
	# LowerLoad(9923:3).2: (^3) into ptr ^4
	movq (%rax), %rbx
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(9924:3): struct-type: ptr ^4 -> ^5, indices=0,0
	# LowerGetelementptr(9924:3): type of ^5 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(9925:3): struct-type: ptr ^5 -> ^6, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(9925:3): type of ^6 is ptr*
	# SetupCalls(9926:3): move argument ptr nonnull dereferenceable(8) align 8 ^2
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(9926:3): move argument ptr nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZN9__gnu_cxx17__normal_iteratorIPKSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEEC2ERKS6_
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator.24"
	# LowerGetelementptr(9927:3): struct-type: ptr ^2 -> ^7, indices=0,0
	movq %r12, %rbx
	# LowerGetelementptr(9927:3): type of ^7 is ptr*
	# LowerLoad(9928:3).2: (^7) into ptr ^8
	movq (%rbx), %rax
	movq -24(%rbp), %r12
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv
.p2align 4, 0x90
_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv:
	.___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(1020:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(1021:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(1022:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::basic_string_view"
	# LowerGetelementptr(1023:3): struct-type: ptr ^3 -> ^4, indices=0,0
	# LowerGetelementptr(1023:3): type of ^4 is i64*
	# LowerLoad(1024:3).2: (^4) into i64 ^5
	movq (%rbx), %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEEmmEv
.p2align 4, 0x90
_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEEmmEv:
	.___ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEEmmEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	movq %r12, -16(%rbp)
	# LowerAlloca(9567:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(9568:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(9569:3).2: (^2) into ptr ^3
	movq (%rax), %r12
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(9570:3): struct-type: ptr ^3 -> ^4, indices=0,0
	movq %r12, %rbx
	# LowerGetelementptr(9570:3): type of ^4 is ptr*
	# LowerLoad(9571:3).2: (^4) into ptr ^5
	movq (%rbx), %rax
	# SetupCalls(9572:3): move argument ptr ^5
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base@PLT
	# SetupCalls(9572:3): move ptr result from %rax
	movq %rax, %rbx
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(9573:3): struct-type: ptr ^3 -> ^7, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(9573:3): type of ^7 is ptr*
	# LowerStore(9574:3).9: mov ptr ^6, (^7)
	movq %rbx, (%rax)
	movq %r12, %rax
	movq -16(%rbp), %r12
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEEptEv
.p2align 4, 0x90
_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEEptEv:
	.___ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEEptEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(2579:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(2580:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(2581:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(2582:3): struct-type: ptr ^3 -> ^4, indices=0,0
	# LowerGetelementptr(2582:3): type of ^4 is ptr*
	# LowerLoad(2583:3).2: (^4) into ptr ^5
	movq (%rbx), %rax
	# SetupCalls(2584:3): move argument ptr nonnull dereferenceable(96) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEE9_M_valptrEv
	# SetupCalls(2584:3): move ptr result from %rax
	movq %rax, %rbx
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt6vectorI6LsItemSaIS0_EE12emplace_backIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbEEERS0_DpOT_
.p2align 4, 0x90
_ZNSt6vectorI6LsItemSaIS0_EE12emplace_backIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbEEERS0_DpOT_:
	.___ZNSt6vectorI6LsItemSaIS0_EE12emplace_backIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbEEERS0_DpOT___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(264 + 0, 16)
	subq $272, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -160(%rbp)
	movq %r12, -184(%rbp)
	movq %r13, -192(%rbp)
	movq %r14, -200(%rbp)
	movq %r15, -168(%rbp)
	# LowerAlloca(1558:3): size = 8, type = ptr*, var = ^4
	leaq -8(%rbp), %r9
	# LowerAlloca(1559:3): size = 8, type = ptr*, var = ^5
	leaq -16(%rbp), %r8
	# LowerAlloca(1560:3): size = 8, type = ptr*, var = ^6
	leaq -24(%rbp), %rbx
	# LowerAlloca(1561:3): size = 8, type = ptr*, var = ^7
	# Fixing source-to-dest leaq -32(%rbp), -152(%rbp)
	leaq -32(%rbp), %r15
	movq %r15, -152(%rbp)
	# LowerAlloca(1562:3): size = 32, type = %"class.std::__cxx11::basic_string"*, var = ^8
	# Fixing source-to-dest leaq -64(%rbp), -144(%rbp)
	leaq -64(%rbp), %r15
	movq %r15, -144(%rbp)
	# LowerAlloca(1563:3): size = 8, type = ptr*, var = ^9
	leaq -72(%rbp), %r10
	# LowerAlloca(1564:3): size = 8, type = ptr*, var = ^10
	leaq -80(%rbp), %r11
	# LowerAlloca(1565:3): size = 8, type = ptr*, var = ^11
	leaq -88(%rbp), %r12
	# LowerAlloca(1566:3): size = 8, type = ptr*, var = ^12
	leaq -96(%rbp), %rcx
	# LowerAlloca(1567:3): size = 8, type = ptr*, var = ^13
	leaq -104(%rbp), %rax
	# LowerAlloca(1568:3): size = 8, type = ptr*, var = ^14
	leaq -112(%rbp), %r13
	# LowerAlloca(1569:3): size = 8, type = ptr*, var = ^15
	leaq -120(%rbp), %r14
	# LowerAlloca(1570:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^16
	leaq -128(%rbp), %r15
	# LowerStore(1571:3).9: mov ptr %rdi, (^13)
	movq %rdi, (%rax)
	# LowerStore(1572:3).9: mov ptr %rsi, (^14)
	movq %rsi, (%r13)
	# LowerStore(1573:3).9: mov ptr %rdx, (^15)
	movq %rdx, (%r14)
	# LowerLoad(1574:3).2: (^13) into ptr ^17
	# Fixing source-to-dest movq (%rax), -136(%rbp)
	pushq %r15
	movq (%rax), %r15
	movq %r15, -136(%rbp)
	popq %r15
	# tt = Pointer, type = %"struct.std::_Vector_base.6"
	# LowerGetelementptr(1575:3): struct-type: ptr ^17 -> ^18, indices=0,0
	movq -136(%rbp), %rax
	# LowerGetelementptr(1575:3): type of ^18 is %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl"*
	# tt = Pointer, type = %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"
	# LowerGetelementptr(1576:3): struct-type: ptr ^18 -> ^19, indices=0,1
	addq $8, %rax
	# LowerGetelementptr(1576:3): type of ^19 is ptr*
	# LowerLoad(1577:3).2: (^19) into ptr ^20
	movq (%rax), %rdx
	# tt = Pointer, type = %"struct.std::_Vector_base.6"
	# LowerGetelementptr(1578:3): struct-type: ptr ^17 -> ^21, indices=0,0
	movq -136(%rbp), %rax
	# LowerGetelementptr(1578:3): type of ^21 is %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl"*
	# tt = Pointer, type = %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"
	# LowerGetelementptr(1579:3): struct-type: ptr ^21 -> ^22, indices=0,2
	addq $16, %rax
	# LowerGetelementptr(1579:3): type of ^22 is ptr*
	# LowerLoad(1580:3).2: (^22) into ptr ^23
	movq (%rax), %rsi
	# LowerIcmp(1581:3): ptr ^20 vs. operand ptr ^23
	cmpq %rsi, %rdx
	setne %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt6vectorI6LsItemSaIS0_EE12emplace_backIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbEEERS0_DpOT___M62
	jmp .___ZNSt6vectorI6LsItemSaIS0_EE12emplace_backIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbEEERS0_DpOT___M209
	.___ZNSt6vectorI6LsItemSaIS0_EE12emplace_backIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbEEERS0_DpOT___M62:
	# tt = Pointer, type = %"struct.std::_Vector_base.6"
	# LowerGetelementptr(1585:3): struct-type: ptr ^17 -> ^26, indices=0,0
	movq -136(%rbp), %rdx
	# LowerGetelementptr(1585:3): type of ^26 is %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl"*
	# tt = Pointer, type = %"struct.std::_Vector_base.6"
	# LowerGetelementptr(1586:3): struct-type: ptr ^17 -> ^27, indices=0,0
	movq -136(%rbp), %rax
	# LowerGetelementptr(1586:3): type of ^27 is %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl"*
	# tt = Pointer, type = %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"
	# LowerGetelementptr(1587:3): struct-type: ptr ^27 -> ^28, indices=0,1
	addq $8, %rax
	# LowerGetelementptr(1587:3): type of ^28 is ptr*
	# LowerLoad(1588:3).2: (^28) into ptr ^29
	movq (%rax), %rsi
	# LowerLoad(1589:3).2: (^14) into ptr ^30
	movq (%r13), %rax
	# LowerLoad(1590:3).2: (^15) into ptr ^31
	movq (%r14), %rdi
	# LowerStore(1591:3).9: mov %"struct.std::_Vector_base.6"* ^26, (^9)
	movq %rdx, (%r10)
	# LowerStore(1592:3).9: mov ptr ^29, (^10)
	movq %rsi, (%r11)
	# LowerStore(1593:3).9: mov ptr ^30, (^11)
	movq %rax, (%r12)
	# LowerStore(1594:3).9: mov ptr ^31, (^12)
	movq %rdi, (%rcx)
	# LowerLoad(1595:3).2: (^9) into ptr ^32
	movq (%r10), %rax
	# LowerLoad(1596:3).2: (^10) into ptr ^33
	movq (%r11), %rdx
	# LowerLoad(1597:3).2: (^11) into ptr ^34
	movq (%r12), %rsi
	# LowerLoad(1598:3).2: (^12) into ptr ^35
	movq (%rcx), %rdi
	# LowerStore(1599:3).9: mov ptr ^32, (^4)
	movq %rax, (%r9)
	# LowerStore(1600:3).9: mov ptr ^33, (^5)
	movq %rdx, (%r8)
	# LowerStore(1601:3).9: mov ptr ^34, (^6)
	movq %rsi, (%rbx)
	# LowerStore(1602:3).9: mov ptr ^35, (^7)
	movq -152(%rbp), %rax
	movq %rdi, (%rax)
	# LowerLoad(1603:3).2: (^4) into ptr ^36
	movq (%r9), %rax
	# LowerLoad(1604:3).2: (^5) into ptr ^37
	movq (%r8), %r12
	# LowerLoad(1605:3).2: (^6) into ptr ^38
	movq (%rbx), %rax
	# SetupCalls(1606:3): move argument ptr nonnull dereferenceable(32) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq -144(%rbp), %rdi
	# SetupCalls(1606:3): move argument ptr nonnull dereferenceable(32) align 8 ^38
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_@PLT
	# LowerLoad(1607:3).2: (^7) into ptr ^39
	movq -152(%rbp), %rax
	movq (%rax), %rbx
	# LowerLoad(1608:3).2: (^39) into i8 ^40
	movb (%rbx), %al
	# LowerTrunc(1609:3): 8 to 1, move
	# LowerTrunc(1609:3): 8 to 1, apply mask
	andq $1, %rax
	# SetupCalls(1610:3): move argument ptr nonnull dereferenceable(33) align 8 ^37
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(1610:3): move argument ptr ^8
	# Fixed movzx with identical source and destination widths
	movq -144(%rbp), %rsi
	# SetupCalls(1610:3): move argument i1 zeroext ^41
	movzbq %al, %rdx
	andq $1, %rdx
	callq _ZN6LsItemC2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
	# SetupCalls(1611:3): move argument ptr nonnull dereferenceable(32) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq -144(%rbp), %rdi
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
	# tt = Pointer, type = %"struct.std::_Vector_base.6"
	# LowerGetelementptr(1612:3): struct-type: ptr ^17 -> ^42, indices=0,0
	movq -136(%rbp), %rax
	# LowerGetelementptr(1612:3): type of ^42 is %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl"*
	# tt = Pointer, type = %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"
	# LowerGetelementptr(1613:3): struct-type: ptr ^42 -> ^43, indices=0,1
	addq $8, %rax
	# LowerGetelementptr(1613:3): type of ^43 is ptr*
	# LowerLoad(1614:3).2: (^43) into ptr ^44
	movq (%rax), %rbx
	# tt = Pointer, type = %struct.LsItem
	# LowerGetelementptr(1615:3): struct-type: ptr ^44 -> ^45, indices=1
	addq $40, %rbx
	# LowerGetelementptr(1615:3): type of ^45 is %struct.LsItem*
	# LowerStore(1616:3).9: mov %struct.LsItem* ^45, (^43)
	movq %rbx, (%rax)
	jmp .___ZNSt6vectorI6LsItemSaIS0_EE12emplace_backIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbEEERS0_DpOT___M276
	.___ZNSt6vectorI6LsItemSaIS0_EE12emplace_backIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbEEERS0_DpOT___M209:
	# SetupCalls(1620:3): move argument ptr nonnull dereferenceable(24) align 8 ^17
	# Fixed movzx with identical source and destination widths
	movq -136(%rbp), %rdi
	callq _ZNSt6vectorI6LsItemSaIS0_EE3endEv
	# SetupCalls(1620:3): move ptr result from %rax
	movq %rax, %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(1621:3): struct-type: ptr ^16 -> ^48, indices=0,0
	movq %r15, %rax
	# LowerGetelementptr(1621:3): type of ^48 is ptr*
	# LowerStore(1622:3).9: mov ptr ^47, (^48)
	movq %rbx, (%rax)
	# LowerLoad(1623:3).2: (^14) into ptr ^49
	movq (%r13), %rax
	# LowerLoad(1624:3).2: (^15) into ptr ^50
	movq (%r14), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(1625:3): struct-type: ptr ^16 -> ^51, indices=0,0
	movq %r15, %rcx
	# LowerGetelementptr(1625:3): type of ^51 is ptr*
	# LowerLoad(1626:3).2: (^51) into ptr ^52
	movq (%rcx), %rdx
	# SetupCalls(1627:3): move argument ptr nonnull dereferenceable(24) align 8 ^17
	# Fixed movzx with identical source and destination widths
	movq -136(%rbp), %rdi
	# SetupCalls(1627:3): move argument ptr ^52
	# Fixed movzx with identical source and destination widths
	movq %rdx, %rsi
	# SetupCalls(1627:3): move argument ptr nonnull dereferenceable(32) align 8 ^49
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdx
	# SetupCalls(1627:3): move argument ptr nonnull dereferenceable(1) align 1 ^50
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rcx
	callq _ZNSt6vectorI6LsItemSaIS0_EE17_M_realloc_insertIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbEEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_
	.___ZNSt6vectorI6LsItemSaIS0_EE12emplace_backIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbEEERS0_DpOT___M276:
	# SetupCalls(1631:3): move argument ptr nonnull dereferenceable(24) align 8 ^17
	# Fixed movzx with identical source and destination widths
	movq -136(%rbp), %rdi
	callq _ZNSt6vectorI6LsItemSaIS0_EE4backEv
	# SetupCalls(1631:3): move ptr result from %rax
	movq %rax, %rbx
	movq %rbx, %rax
	movq -168(%rbp), %r15
	movq -200(%rbp), %r14
	movq -192(%rbp), %r13
	movq -184(%rbp), %r12
	movq -160(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt15__new_allocatorIcED2Ev
.p2align 4, 0x90
_ZNSt15__new_allocatorIcED2Ev:
	.___ZNSt15__new_allocatorIcED2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(4715:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(4716:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(4717:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE13_Rb_tree_implISM_Lb1EEC2ERKSM_OSaISt13_Rb_tree_nodeISI_EE
.p2align 4, 0x90
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE13_Rb_tree_implISM_Lb1EEC2ERKSM_OSaISt13_Rb_tree_nodeISI_EE:
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE13_Rb_tree_implISM_Lb1EEC2ERKSM_OSaISt13_Rb_tree_nodeISI_EE__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(80 + 0, 16)
	subq $80, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -64(%rbp)
	movq %r12, -72(%rbp)
	# LowerAlloca(8868:3): size = 8, type = ptr*, var = ^4
	leaq -8(%rbp), %r9
	# LowerAlloca(8869:3): size = 8, type = ptr*, var = ^5
	leaq -16(%rbp), %r8
	# LowerAlloca(8870:3): size = 8, type = ptr*, var = ^6
	leaq -24(%rbp), %rbx
	# LowerAlloca(8871:3): size = 8, type = ptr*, var = ^7
	leaq -32(%rbp), %rcx
	# LowerAlloca(8872:3): size = 8, type = ptr*, var = ^8
	leaq -40(%rbp), %rax
	# LowerAlloca(8873:3): size = 8, type = ptr*, var = ^9
	leaq -48(%rbp), %r10
	# LowerAlloca(8874:3): size = 8, type = ptr*, var = ^10
	leaq -56(%rbp), %r11
	# LowerStore(8875:3).9: mov ptr %rdi, (^8)
	movq %rdi, (%rax)
	# LowerStore(8876:3).9: mov ptr %rsi, (^9)
	movq %rsi, (%r10)
	# LowerStore(8877:3).9: mov ptr %rdx, (^10)
	movq %rdx, (%r11)
	# LowerLoad(8878:3).2: (^8) into ptr ^11
	movq (%rax), %r12
	# LowerLoad(8879:3).2: (^10) into ptr ^12
	movq (%r11), %rax
	# LowerStore(8880:3).9: mov ptr ^11, (^6)
	movq %r12, (%rbx)
	# LowerStore(8881:3).9: mov ptr ^12, (^7)
	movq %rax, (%rcx)
	# LowerLoad(8882:3).2: (^6) into ptr ^13
	movq (%rbx), %rax
	# LowerLoad(8883:3).2: (^7) into ptr ^14
	movq (%rcx), %rbx
	# LowerStore(8884:3).9: mov ptr ^13, (^4)
	movq %rax, (%r9)
	# LowerStore(8885:3).9: mov ptr ^14, (^5)
	movq %rbx, (%r8)
	# LowerLoad(8886:3).2: (^4) into ptr ^15
	movq (%r9), %rax
	# LowerLoad(8887:3).2: (^9) into ptr ^16
	movq (%r10), %rax
	# SetupCalls(8888:3): move argument ptr nonnull dereferenceable(1) align 1 ^11
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(8888:3): move argument ptr nonnull dereferenceable(1) align 1 ^16
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2ERKS7_
	# tt = Pointer, type = i8
	# LowerGetelementptr(8889:3): struct-type: ptr ^11 -> ^17, indices=8
	movq %r12, %rax
	addq $8, %rax
	# LowerGetelementptr(8889:3): type of ^17 is i8*
	# SetupCalls(8890:3): move argument ptr nonnull dereferenceable(40) align 8 ^17
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt15_Rb_tree_headerC2Ev
	movq -72(%rbp), %r12
	movq -64(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaIS9_EEEESt4lessIS5_ESaISt4pairIKS5_SF_EEE3endEv
.p2align 4, 0x90
_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaIS9_EEEESt4lessIS5_ESaISt4pairIKS5_SF_EEE3endEv:
	.___ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaIS9_EEEESt4lessIS5_ESaISt4pairIKS5_SF_EEE3endEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(48 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	movq %r12, -24(%rbp)
	# LowerAlloca(2564:3): size = 8, type = %"struct.std::_Rb_tree_iterator"*, var = ^2
	leaq -8(%rbp), %r12
	# LowerAlloca(2565:3): size = 8, type = ptr*, var = ^3
	leaq -16(%rbp), %rbx
	# LowerStore(2566:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rbx)
	# LowerLoad(2567:3).2: (^3) into ptr ^4
	movq (%rbx), %rax
	# tt = Pointer, type = %"class.std::map"
	# LowerGetelementptr(2568:3): struct-type: ptr ^4 -> ^5, indices=0,0
	# LowerGetelementptr(2568:3): type of ^5 is %"class.std::_Rb_tree"*
	# SetupCalls(2569:3): move argument ptr nonnull dereferenceable(48) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE3endEv
	# SetupCalls(2569:3): move ptr result from %rax
	movq %rax, %rbx
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(2570:3): struct-type: ptr ^2 -> ^7, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(2570:3): type of ^7 is ptr*
	# LowerStore(2571:3).9: mov ptr ^6, (^7)
	movq %rbx, (%rax)
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(2572:3): struct-type: ptr ^2 -> ^8, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(2572:3): type of ^8 is ptr*
	# LowerLoad(2573:3).2: (^8) into ptr ^9
	movq (%rax), %rbx
	movq %rbx, %rax
	movq -24(%rbp), %r12
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt14__relocate_a_1IPSt17basic_string_viewIcSt11char_traitsIcEES4_SaIS3_EET0_T_S7_S6_RT1_
.p2align 4, 0x90
_ZSt14__relocate_a_1IPSt17basic_string_viewIcSt11char_traitsIcEES4_SaIS3_EET0_T_S7_S6_RT1_:
	.___ZSt14__relocate_a_1IPSt17basic_string_viewIcSt11char_traitsIcEES4_SaIS3_EET0_T_S7_S6_RT1___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(80 + 0, 16)
	subq $80, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -64(%rbp)
	movq %r12, -56(%rbp)
	movq %r13, -48(%rbp)
	movq %r14, -72(%rbp)
	movq %r15, -80(%rbp)
	# LowerAlloca(5611:3): size = 8, type = ptr*, var = ^5
	leaq -8(%rbp), %r13
	# LowerAlloca(5612:3): size = 8, type = ptr*, var = ^6
	leaq -16(%rbp), %r12
	# LowerAlloca(5613:3): size = 8, type = ptr*, var = ^7
	leaq -24(%rbp), %rax
	# LowerAlloca(5614:3): size = 8, type = ptr*, var = ^8
	leaq -32(%rbp), %rbx
	# LowerAlloca(5615:3): size = 8, type = ptr*, var = ^9
	leaq -40(%rbp), %r14
	# LowerStore(5616:3).9: mov ptr %rdi, (^5)
	movq %rdi, (%r13)
	# LowerStore(5617:3).9: mov ptr %rsi, (^6)
	movq %rsi, (%r12)
	# LowerStore(5618:3).9: mov ptr %rdx, (^7)
	movq %rdx, (%rax)
	# LowerStore(5619:3).9: mov ptr %rcx, (^8)
	movq %rcx, (%rbx)
	# LowerLoad(5620:3).2: (^7) into ptr ^10
	# Fixing source-to-dest movq (%rax), (%r14)
	movq (%rax), %r15
	movq %r15, (%r14)
	# LowerStore(5621:3).9: mov ptr ^10, (^9)
	.___ZSt14__relocate_a_1IPSt17basic_string_viewIcSt11char_traitsIcEES4_SaIS3_EET0_T_S7_S6_RT1___M23:
	# LowerLoad(5625:3).2: (^5) into ptr ^12
	movq (%r13), %rax
	# LowerLoad(5626:3).2: (^6) into ptr ^13
	movq (%r12), %rcx
	# LowerIcmp(5627:3): ptr ^12 vs. operand ptr ^13
	cmpq %rcx, %rax
	setne %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZSt14__relocate_a_1IPSt17basic_string_viewIcSt11char_traitsIcEES4_SaIS3_EET0_T_S7_S6_RT1___M32
	jmp .___ZSt14__relocate_a_1IPSt17basic_string_viewIcSt11char_traitsIcEES4_SaIS3_EET0_T_S7_S6_RT1___M83
	.___ZSt14__relocate_a_1IPSt17basic_string_viewIcSt11char_traitsIcEES4_SaIS3_EET0_T_S7_S6_RT1___M32:
	# LowerLoad(5631:3).2: (^9) into ptr ^16
	movq (%r14), %rax
	# LowerLoad(5632:3).2: (^5) into ptr ^17
	movq (%r13), %rcx
	# LowerLoad(5633:3).2: (^8) into ptr ^18
	movq (%rbx), %r8
	# SetupCalls(5634:3): move argument ptr ^16
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(5634:3): move argument ptr ^17
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(5634:3): move argument ptr nonnull dereferenceable(1) align 1 ^18
	# Fixed movzx with identical source and destination widths
	movq %r8, %rdx
	callq _ZSt19__relocate_object_aISt17basic_string_viewIcSt11char_traitsIcEES3_SaIS3_EEvPT_PT0_RT1_
	# LowerLoad(5638:3).2: (^5) into ptr ^20
	movq (%r13), %rax
	# tt = Pointer, type = %"class.std::basic_string_view"
	# LowerGetelementptr(5639:3): struct-type: ptr ^20 -> ^21, indices=1
	addq $16, %rax
	# LowerGetelementptr(5639:3): type of ^21 is %"class.std::basic_string_view"*
	# LowerStore(5640:3).9: mov %"class.std::basic_string_view"* ^21, (^5)
	movq %rax, (%r13)
	# LowerLoad(5641:3).2: (^9) into ptr ^22
	movq (%r14), %rax
	# tt = Pointer, type = %"class.std::basic_string_view"
	# LowerGetelementptr(5642:3): struct-type: ptr ^22 -> ^23, indices=1
	addq $16, %rax
	# LowerGetelementptr(5642:3): type of ^23 is %"class.std::basic_string_view"*
	# LowerStore(5643:3).9: mov %"class.std::basic_string_view"* ^23, (^9)
	movq %rax, (%r14)
	jmp .___ZSt14__relocate_a_1IPSt17basic_string_viewIcSt11char_traitsIcEES4_SaIS3_EET0_T_S7_S6_RT1___M23
	.___ZSt14__relocate_a_1IPSt17basic_string_viewIcSt11char_traitsIcEES4_SaIS3_EET0_T_S7_S6_RT1___M83:
	# LowerLoad(5647:3).2: (^9) into ptr ^25
	movq (%r14), %rax
	movq -80(%rbp), %r15
	movq -72(%rbp), %r14
	movq -48(%rbp), %r13
	movq -56(%rbp), %r12
	movq -64(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10filesystem6existsERKNS_7__cxx114pathE
.p2align 4, 0x90
_ZNSt10filesystem6existsERKNS_7__cxx114pathE:
	.___ZNSt10filesystem6existsERKNS_7__cxx114pathE__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(48 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	movq %r12, -24(%rbp)
	# LowerAlloca(1432:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerAlloca(1433:3): size = 8, type = %"class.std::filesystem::file_status"*, var = ^3
	leaq -16(%rbp), %r12
	# LowerStore(1434:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(1435:3).2: (^2) into ptr ^4
	movq (%rax), %rbx
	# SetupCalls(1436:3): move argument ptr nonnull dereferenceable(40) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt10filesystem6statusERKNS_7__cxx114pathE@PLT
	# SetupCalls(1436:3): move i64 result from %rax
	movq %rax, %rbx
	# LowerStore(1437:3).9: mov i64 ^5, (^3)
	movq %rbx, (%r12)
	# LowerLoad(1438:3).2: (^3) into i64 ^6
	movq (%r12), %rax
	# SetupCalls(1439:3): move argument i64 ^6
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt10filesystem6existsENS_11file_statusE
	# SetupCalls(1439:3): move i1 result from %rax
	movb %al, %bl
	movb %bl, %al
	movq -24(%rbp), %r12
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE19_M_get_Tp_allocatorEv
.p2align 4, 0x90
_ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE19_M_get_Tp_allocatorEv:
	.___ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE19_M_get_Tp_allocatorEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(4916:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(4917:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(4918:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(4919:3): struct-type: ptr ^3 -> ^4, indices=0,0
	# LowerGetelementptr(4919:3): type of ^4 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZN9__gnu_cxx17__normal_iteratorIPSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEEC2ERKS5_
.p2align 4, 0x90
_ZN9__gnu_cxx17__normal_iteratorIPSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEEC2ERKS5_:
	.___ZN9__gnu_cxx17__normal_iteratorIPSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEEC2ERKS5___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(40 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	movq %r15, -40(%rbp)
	# LowerAlloca(5576:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %rbx
	# LowerAlloca(5577:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %rcx
	# LowerStore(5578:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rbx)
	# LowerStore(5579:3).9: mov ptr %rsi, (^4)
	movq %rsi, (%rcx)
	# LowerLoad(5580:3).2: (^3) into ptr ^5
	movq (%rbx), %rax
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator.19"
	# LowerGetelementptr(5581:3): struct-type: ptr ^5 -> ^6, indices=0,0
	# LowerGetelementptr(5581:3): type of ^6 is ptr*
	# LowerLoad(5582:3).2: (^4) into ptr ^7
	movq (%rcx), %rbx
	# LowerLoad(5583:3).2: (^7) into ptr ^8
	# Fixing source-to-dest movq (%rbx), (%rax)
	movq (%rbx), %r15
	movq %r15, (%rax)
	# LowerStore(5584:3).9: mov ptr ^8, (^6)
	movq -40(%rbp), %r15
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt6vectorI6LsItemSaIS0_EE5beginEv
.p2align 4, 0x90
_ZNSt6vectorI6LsItemSaIS0_EE5beginEv:
	.___ZNSt6vectorI6LsItemSaIS0_EE5beginEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(40 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	movq %r12, -24(%rbp)
	# LowerAlloca(1793:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^2
	leaq -8(%rbp), %r12
	# LowerAlloca(1794:3): size = 8, type = ptr*, var = ^3
	leaq -16(%rbp), %rax
	# LowerStore(1795:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rax)
	# LowerLoad(1796:3).2: (^3) into ptr ^4
	movq (%rax), %rbx
	# tt = Pointer, type = %"struct.std::_Vector_base.6"
	# LowerGetelementptr(1797:3): struct-type: ptr ^4 -> ^5, indices=0,0
	# LowerGetelementptr(1797:3): type of ^5 is %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl"*
	# tt = Pointer, type = %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"
	# LowerGetelementptr(1798:3): struct-type: ptr ^5 -> ^6, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(1798:3): type of ^6 is ptr*
	# SetupCalls(1799:3): move argument ptr nonnull dereferenceable(8) align 8 ^2
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(1799:3): move argument ptr nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEC2ERKS2_
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(1800:3): struct-type: ptr ^2 -> ^7, indices=0,0
	movq %r12, %rbx
	# LowerGetelementptr(1800:3): type of ^7 is ptr*
	# LowerLoad(1801:3).2: (^7) into ptr ^8
	movq (%rbx), %rax
	movq -24(%rbp), %r12
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt17basic_string_viewIcSt11char_traitsIcEE6substrEmm
.p2align 4, 0x90
_ZNKSt17basic_string_viewIcSt11char_traitsIcEE6substrEmm:
	.___ZNKSt17basic_string_viewIcSt11char_traitsIcEE6substrEmm__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(168 + 0, 16)
	subq $176, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -88(%rbp)
	movq %r12, -96(%rbp)
	movq %r13, -128(%rbp)
	movq %r14, -112(%rbp)
	movq %r15, -80(%rbp)
	# LowerAlloca(1042:3): size = 16, type = %"class.std::basic_string_view"*, var = ^4
	# Fixing source-to-dest leaq -16(%rbp), -64(%rbp)
	leaq -16(%rbp), %r15
	movq %r15, -64(%rbp)
	# LowerAlloca(1043:3): size = 8, type = ptr*, var = ^5
	leaq -24(%rbp), %rcx
	# LowerAlloca(1044:3): size = 8, type = i64*, var = ^6
	leaq -32(%rbp), %rbx
	# LowerAlloca(1045:3): size = 8, type = i64*, var = ^7
	leaq -40(%rbp), %r12
	# LowerAlloca(1046:3): size = 8, type = i64*, var = ^8
	# Fixing source-to-dest leaq -48(%rbp), -72(%rbp)
	leaq -48(%rbp), %r15
	movq %r15, -72(%rbp)
	# LowerAlloca(1047:3): size = 8, type = i64*, var = ^9
	leaq -56(%rbp), %r14
	# LowerStore(1048:3).9: mov ptr %rdi, (^5)
	movq %rdi, (%rcx)
	# LowerStore(1049:3).9: mov i64 %rsi, (^6)
	movq %rsi, (%rbx)
	# LowerStore(1050:3).9: mov i64 %rdx, (^7)
	movq %rdx, (%r12)
	# LowerLoad(1051:3).2: (^5) into ptr ^10
	movq (%rcx), %r15
	# SetupCalls(1052:3): move argument ptr nonnull dereferenceable(16) align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq %r15, %rdi
	callq _ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv
	# SetupCalls(1052:3): move i64 result from %rax
	movq %rax, %r13
	# LowerLoad(1053:3).2: (^6) into i64 ^12
	movq (%rbx), %rax
	# SetupCalls(1054:3): move argument i64 ^11
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	# SetupCalls(1054:3): move argument i64 ^12
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(1054:3): move argument ptr @.str.23
	leaq .str.23(%rip), %rdx
	callq _ZSt10__sv_checkmmPKc
	# SetupCalls(1054:3): move i64 result from %rax
	movq %rax, %r13
	# LowerStore(1055:3).9: mov i64 ^13, (^6)
	movq %r13, (%rbx)
	# tt = Pointer, type = %"class.std::basic_string_view"
	# LowerGetelementptr(1056:3): struct-type: ptr ^10 -> ^14, indices=0,0
	movq %r15, %rax
	# LowerGetelementptr(1056:3): type of ^14 is i64*
	# LowerLoad(1057:3).2: (^14) into i64 ^15
	movq (%rax), %rcx
	# LowerLoad(1058:3).2: (^6) into i64 ^16
	movq (%rbx), %rax
	# LowerMath(1059:3): ^15, ^16 into i64 ^17
	movq %rcx, %rdx
	subq %rax, %rdx
	# LowerStore(1060:3).9: mov i64 ^17, (^9)
	movq %rdx, (%r14)
	# SetupCalls(1061:3): move argument ptr nonnull dereferenceable(8) align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(1061:3): move argument ptr nonnull dereferenceable(8) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq %r14, %rsi
	callq _ZSt3minImERKT_S2_S2_
	# SetupCalls(1061:3): move ptr result from %rax
	movq %rax, %r12
	# LowerLoad(1062:3).2: (^18) into i64 ^19
	movq -72(%rbp), %rax
	# Fixing source-to-dest movq (%r12), (%rax)
	pushq %r15
	movq (%r12), %r15
	movq %r15, (%rax)
	popq %r15
	# LowerStore(1063:3).9: mov i64 ^19, (^8)
	# tt = Pointer, type = %"class.std::basic_string_view"
	# LowerGetelementptr(1064:3): struct-type: ptr ^10 -> ^20, indices=0,1
	movq %r15, %rcx
	addq $8, %rcx
	# LowerGetelementptr(1064:3): type of ^20 is ptr*
	# LowerLoad(1065:3).2: (^20) into ptr ^21
	movq (%rcx), %rax
	# LowerLoad(1066:3).2: (^6) into i64 ^22
	movq (%rbx), %rcx
	# tt = Pointer, type = i8
	# LowerGetelementptr(1067:3): pointer-type -> ^23
	addq %rax, %rcx
	# LowerLoad(1068:3).2: (^8) into i64 ^24
	movq -72(%rbp), %rbx
	movq (%rbx), %rax
	# SetupCalls(1069:3): move argument ptr nonnull dereferenceable(16) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -64(%rbp), %rdi
	# SetupCalls(1069:3): move argument ptr ^23
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(1069:3): move argument i64 ^24
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdx
	callq _ZNSt17basic_string_viewIcSt11char_traitsIcEEC2EPKcm
	# LowerLoad(1070:3).2: (^4) into {i64, ptr} ^25
	movq -64(%rbp), %rax
	# FinishMultireg: mov (%reg), <%pack...>
	movq (%rax), %rbx
	movq 8(%rax), %rcx
	# LowerRet: two-register return
	movq %rbx, %rax
	movq %rcx, %rdx
	movq -80(%rbp), %r15
	movq -112(%rbp), %r14
	movq -128(%rbp), %r13
	movq -96(%rbp), %r12
	movq -88(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE9push_backERKS3_
.p2align 4, 0x90
_ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE9push_backERKS3_:
	.___ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE9push_backERKS3___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(144 + 0, 16)
	subq $144, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -80(%rbp)
	movq %r12, -104(%rbp)
	movq %r13, -88(%rbp)
	movq %r14, -96(%rbp)
	# LowerAlloca(1076:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %r8
	# LowerAlloca(1077:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %r9
	# LowerAlloca(1078:3): size = 8, type = ptr*, var = ^5
	leaq -24(%rbp), %rdx
	# LowerAlloca(1079:3): size = 8, type = ptr*, var = ^6
	leaq -32(%rbp), %rbx
	# LowerAlloca(1080:3): size = 8, type = ptr*, var = ^7
	leaq -40(%rbp), %rcx
	# LowerAlloca(1081:3): size = 8, type = ptr*, var = ^8
	leaq -48(%rbp), %rax
	# LowerAlloca(1082:3): size = 8, type = ptr*, var = ^9
	leaq -56(%rbp), %r10
	# LowerAlloca(1083:3): size = 8, type = ptr*, var = ^10
	leaq -64(%rbp), %r13
	# LowerAlloca(1084:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator.19"*, var = ^11
	leaq -72(%rbp), %r14
	# LowerStore(1085:3).9: mov ptr %rdi, (^9)
	movq %rdi, (%r10)
	# LowerStore(1086:3).9: mov ptr %rsi, (^10)
	movq %rsi, (%r13)
	# LowerLoad(1087:3).2: (^9) into ptr ^12
	movq (%r10), %r12
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(1088:3): struct-type: ptr ^12 -> ^13, indices=0,0
	movq %r12, %rsi
	# LowerGetelementptr(1088:3): type of ^13 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(1089:3): struct-type: ptr ^13 -> ^14, indices=0,1
	addq $8, %rsi
	# LowerGetelementptr(1089:3): type of ^14 is ptr*
	# LowerLoad(1090:3).2: (^14) into ptr ^15
	movq (%rsi), %rdi
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(1091:3): struct-type: ptr ^12 -> ^16, indices=0,0
	movq %r12, %rsi
	# LowerGetelementptr(1091:3): type of ^16 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(1092:3): struct-type: ptr ^16 -> ^17, indices=0,2
	movq %rsi, %r10
	addq $16, %r10
	# LowerGetelementptr(1092:3): type of ^17 is ptr*
	# LowerLoad(1093:3).2: (^17) into ptr ^18
	movq (%r10), %rsi
	# LowerIcmp(1094:3): ptr ^15 vs. operand ptr ^18
	cmpq %rsi, %rdi
	setne %sil
	andq $1, %rsi
	cmpb $0, %sil
	jne .___ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE9push_backERKS3___M52
	jmp .___ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE9push_backERKS3___M138
	.___ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE9push_backERKS3___M52:
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(1098:3): struct-type: ptr ^12 -> ^21, indices=0,0
	movq %r12, %rsi
	# LowerGetelementptr(1098:3): type of ^21 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(1099:3): struct-type: ptr ^12 -> ^22, indices=0,0
	movq %r12, %rdi
	# LowerGetelementptr(1099:3): type of ^22 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(1100:3): struct-type: ptr ^22 -> ^23, indices=0,1
	addq $8, %rdi
	# LowerGetelementptr(1100:3): type of ^23 is ptr*
	# LowerLoad(1101:3).2: (^23) into ptr ^24
	movq (%rdi), %r10
	# LowerLoad(1102:3).2: (^10) into ptr ^25
	movq (%r13), %rdi
	# LowerStore(1103:3).9: mov %"struct.std::_Vector_base"* ^21, (^6)
	movq %rsi, (%rbx)
	# LowerStore(1104:3).9: mov ptr ^24, (^7)
	movq %r10, (%rcx)
	# LowerStore(1105:3).9: mov ptr ^25, (^8)
	movq %rdi, (%rax)
	# LowerLoad(1106:3).2: (^6) into ptr ^26
	movq (%rbx), %rsi
	# LowerLoad(1107:3).2: (^7) into ptr ^27
	movq (%rcx), %rbx
	# LowerLoad(1108:3).2: (^8) into ptr ^28
	movq (%rax), %rcx
	# LowerStore(1109:3).9: mov ptr ^26, (^3)
	movq %rsi, (%r8)
	# LowerStore(1110:3).9: mov ptr ^27, (^4)
	movq %rbx, (%r9)
	# LowerStore(1111:3).9: mov ptr ^28, (^5)
	movq %rcx, (%rdx)
	# LowerLoad(1112:3).2: (^3) into ptr ^29
	movq (%r8), %rax
	# LowerLoad(1113:3).2: (^4) into ptr ^30
	movq (%r9), %rax
	# LowerLoad(1114:3).2: (^5) into ptr ^31
	movq (%rdx), %rbx
	# SetupCalls(1115:3): move argument ptr align 8 ^30
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(1115:3): move argument ptr align 8 ^31
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(1115:3): move argument i64 16
	movq $16, %rdx
	callq memcpy@PLT
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(1116:3): struct-type: ptr ^12 -> ^32, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(1116:3): type of ^32 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(1117:3): struct-type: ptr ^32 -> ^33, indices=0,1
	addq $8, %rax
	# LowerGetelementptr(1117:3): type of ^33 is ptr*
	# LowerLoad(1118:3).2: (^33) into ptr ^34
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::basic_string_view"
	# LowerGetelementptr(1119:3): struct-type: ptr ^34 -> ^35, indices=1
	movq %rbx, %rcx
	addq $16, %rcx
	# LowerGetelementptr(1119:3): type of ^35 is %"class.std::basic_string_view"*
	# LowerStore(1120:3).9: mov %"class.std::basic_string_view"* ^35, (^33)
	movq %rcx, (%rax)
	jmp .___ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE9push_backERKS3___M201
	.___ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE9push_backERKS3___M138:
	# SetupCalls(1124:3): move argument ptr nonnull dereferenceable(24) align 8 ^12
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	callq _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE3endEv
	# SetupCalls(1124:3): move ptr result from %rax
	movq %rax, %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator.19"
	# LowerGetelementptr(1125:3): struct-type: ptr ^11 -> ^38, indices=0,0
	movq %r14, %rax
	# LowerGetelementptr(1125:3): type of ^38 is ptr*
	# LowerStore(1126:3).9: mov ptr ^37, (^38)
	movq %rbx, (%rax)
	# LowerLoad(1127:3).2: (^10) into ptr ^39
	movq (%r13), %rax
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator.19"
	# LowerGetelementptr(1128:3): struct-type: ptr ^11 -> ^40, indices=0,0
	movq %r14, %rbx
	# LowerGetelementptr(1128:3): type of ^40 is ptr*
	# LowerLoad(1129:3).2: (^40) into ptr ^41
	movq (%rbx), %rcx
	# SetupCalls(1130:3): move argument ptr nonnull dereferenceable(24) align 8 ^12
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(1130:3): move argument ptr ^41
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(1130:3): move argument ptr nonnull dereferenceable(16) align 8 ^39
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdx
	callq _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_
	.___ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE9push_backERKS3___M201:
	movq -96(%rbp), %r14
	movq -88(%rbp), %r13
	movq -104(%rbp), %r12
	movq -80(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt6vectorI6LsItemSaIS0_EE3endEv
.p2align 4, 0x90
_ZNSt6vectorI6LsItemSaIS0_EE3endEv:
	.___ZNSt6vectorI6LsItemSaIS0_EE3endEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(40 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	movq %r12, -24(%rbp)
	# LowerAlloca(1807:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^2
	leaq -8(%rbp), %r12
	# LowerAlloca(1808:3): size = 8, type = ptr*, var = ^3
	leaq -16(%rbp), %rax
	# LowerStore(1809:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rax)
	# LowerLoad(1810:3).2: (^3) into ptr ^4
	movq (%rax), %rbx
	# tt = Pointer, type = %"struct.std::_Vector_base.6"
	# LowerGetelementptr(1811:3): struct-type: ptr ^4 -> ^5, indices=0,0
	# LowerGetelementptr(1811:3): type of ^5 is %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl"*
	# tt = Pointer, type = %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"
	# LowerGetelementptr(1812:3): struct-type: ptr ^5 -> ^6, indices=0,1
	movq %rbx, %rax
	addq $8, %rax
	# LowerGetelementptr(1812:3): type of ^6 is ptr*
	# SetupCalls(1813:3): move argument ptr nonnull dereferenceable(8) align 8 ^2
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(1813:3): move argument ptr nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEC2ERKS2_
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(1814:3): struct-type: ptr ^2 -> ^7, indices=0,0
	movq %r12, %rbx
	# LowerGetelementptr(1814:3): type of ^7 is ptr*
	# LowerLoad(1815:3).2: (^7) into ptr ^8
	movq (%rbx), %rax
	movq -24(%rbp), %r12
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10filesystem7__cxx114pathC2ERKS1_
.p2align 4, 0x90
_ZNSt10filesystem7__cxx114pathC2ERKS1_:
	.___ZNSt10filesystem7__cxx114pathC2ERKS1___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(48 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -40(%rbp)
	movq %r12, -32(%rbp)
	movq %r13, -24(%rbp)
	# LowerAlloca(3494:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %rax
	# LowerAlloca(3495:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %r13
	# LowerStore(3496:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rax)
	# LowerStore(3497:3).9: mov ptr %rsi, (^4)
	movq %rsi, (%r13)
	# LowerLoad(3498:3).2: (^3) into ptr ^5
	movq (%rax), %r12
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path"
	# LowerGetelementptr(3499:3): struct-type: ptr ^5 -> ^6, indices=0,0
	movq %r12, %rbx
	# LowerGetelementptr(3499:3): type of ^6 is %"class.std::__cxx11::basic_string"*
	# LowerLoad(3500:3).2: (^4) into ptr ^7
	movq (%r13), %rax
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path"
	# LowerGetelementptr(3501:3): struct-type: ptr ^7 -> ^8, indices=0,0
	# LowerGetelementptr(3501:3): type of ^8 is %"class.std::__cxx11::basic_string"*
	# SetupCalls(3502:3): move argument ptr nonnull dereferenceable(32) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(3502:3): move argument ptr nonnull dereferenceable(32) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_@PLT
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path"
	# LowerGetelementptr(3503:3): struct-type: ptr ^5 -> ^9, indices=0,1
	movq %r12, %rax
	addq $32, %rax
	# LowerGetelementptr(3503:3): type of ^9 is %"struct.std::filesystem::__cxx11::path::_List"*
	# LowerLoad(3504:3).2: (^4) into ptr ^10
	movq (%r13), %rbx
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path"
	# LowerGetelementptr(3505:3): struct-type: ptr ^10 -> ^11, indices=0,1
	addq $32, %rbx
	# LowerGetelementptr(3505:3): type of ^11 is %"struct.std::filesystem::__cxx11::path::_List"*
	# SetupCalls(3506:3): move argument ptr nonnull dereferenceable(8) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(3506:3): move argument ptr nonnull dereferenceable(8) align 8 ^11
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZNSt10filesystem7__cxx114path5_ListC1ERKS2_@PLT
	movq -24(%rbp), %r13
	movq -32(%rbp), %r12
	movq -40(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt10filesystem7__cxx114path6stringEv
.p2align 4, 0x90
_ZNKSt10filesystem7__cxx114path6stringEv:
	.___ZNKSt10filesystem7__cxx114path6stringEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(72 + 0, 16)
	subq $80, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -64(%rbp)
	movq %r12, -56(%rbp)
	movq %r15, -72(%rbp)
	# LowerAlloca(1719:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %r8
	# LowerAlloca(1720:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %r12
	# LowerAlloca(1721:3): size = 8, type = ptr*, var = ^5
	leaq -24(%rbp), %rdx
	# LowerAlloca(1722:3): size = 8, type = ptr*, var = ^6
	leaq -32(%rbp), %rax
	# LowerAlloca(1723:3): size = 8, type = ptr*, var = ^7
	leaq -40(%rbp), %rcx
	# LowerAlloca(1724:3): size = 1, type = %"class.std::allocator.0"*, var = ^8
	leaq -41(%rbp), %rbx
	# LowerStore(1725:3).9: mov ptr %rdi, (^6)
	movq %rdi, (%rax)
	# LowerStore(1726:3).9: mov ptr %rsi, (^7)
	movq %rsi, (%rcx)
	# LowerLoad(1727:3).2: (^7) into ptr ^9
	movq (%rcx), %rax
	# LowerStore(1728:3).9: mov %"class.std::allocator.0"* ^8, (^5)
	movq %rbx, (%rdx)
	# LowerLoad(1729:3).2: (^5) into ptr ^10
	# Fixing source-to-dest movq (%rdx), (%r8)
	movq (%rdx), %r15
	movq %r15, (%r8)
	# LowerStore(1730:3).9: mov ptr ^10, (^3)
	# LowerLoad(1731:3).2: (^3) into ptr ^11
	movq (%r8), %rcx
	# SetupCalls(1732:3): move argument ptr sret align 8 %rdi
	# Semiunclobber non-live %rdi into %rdi
	movq %rdi, %rdi
	# SetupCalls(1732:3): move argument ptr nonnull dereferenceable(40) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(1732:3): move argument ptr nonnull dereferenceable(1) align 1 ^8
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdx
	callq _ZNKSt10filesystem7__cxx114path6stringIcSt11char_traitsIcESaIcEEENSt7__cxx1112basic_stringIT_T0_T1_EERKSA_
	# LowerStore(1733:3).9: mov %"class.std::allocator.0"* ^8, (^4)
	movq %rbx, (%r12)
	# LowerLoad(1734:3).2: (^4) into ptr ^12
	movq (%r12), %rax
	# SetupCalls(1735:3): move argument ptr nonnull dereferenceable(1) align 1 ^12
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt15__new_allocatorIcED2Ev
	movq -72(%rbp), %r15
	movq -56(%rbp), %r12
	movq -64(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ISt17basic_string_viewIcS2_EvEERKT_RKS3_
.p2align 4, 0x90
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ISt17basic_string_viewIcS2_EvEERKT_RKS3_:
	.___ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ISt17basic_string_viewIcS2_EvEERKT_RKS3___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(152 + 0, 16)
	subq $160, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -104(%rbp)
	movq %r12, -88(%rbp)
	movq %r13, -96(%rbp)
	movq %r14, -112(%rbp)
	movq %r15, -120(%rbp)
	# LowerAlloca(2509:3): size = 8, type = ptr*, var = ^4
	leaq -8(%rbp), %rcx
	# LowerAlloca(2510:3): size = 8, type = ptr*, var = ^5
	leaq -16(%rbp), %rax
	# LowerAlloca(2511:3): size = 8, type = ptr*, var = ^6
	leaq -24(%rbp), %r12
	# LowerAlloca(2512:3): size = 16, type = %"struct.std::__cxx11::basic_string<char>::__sv_wrapper"*, var = ^7
	leaq -40(%rbp), %r13
	# LowerAlloca(2513:3): size = 16, type = %"class.std::basic_string_view"*, var = ^8
	leaq -56(%rbp), %rbx
	# LowerAlloca(2514:3): size = 16, type = %"class.std::basic_string_view"*, var = ^9
	leaq -72(%rbp), %r14
	# LowerStore(2515:3).9: mov ptr %rdi, (^4)
	movq %rdi, (%rcx)
	# LowerStore(2516:3).9: mov ptr %rsi, (^5)
	movq %rsi, (%rax)
	# LowerStore(2517:3).9: mov ptr %rdx, (^6)
	movq %rdx, (%r12)
	# LowerLoad(2518:3).2: (^4) into ptr ^10
	# Fixing source-to-dest movq (%rcx), -80(%rbp)
	movq (%rcx), %r15
	movq %r15, -80(%rbp)
	# LowerLoad(2519:3).2: (^5) into ptr ^11
	movq (%rax), %rcx
	# SetupCalls(2520:3): move argument ptr align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq %r14, %rdi
	# SetupCalls(2520:3): move argument ptr align 8 ^11
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(2520:3): move argument i64 16
	movq $16, %rdx
	callq memcpy@PLT
	# tt = Pointer, type = {i64, ptr}
	# LowerGetelementptr(2521:3): struct-type: ptr ^9 -> ^12, indices=0,0
	movq %r14, %rax
	# LowerGetelementptr(2521:3): type of ^12 is i64*
	# LowerLoad(2522:3).2: (^12) into i64 ^13
	movq (%rax), %rcx
	# tt = Pointer, type = {i64, ptr}
	# LowerGetelementptr(2523:3): struct-type: ptr ^9 -> ^14, indices=0,1
	movq %r14, %rax
	addq $8, %rax
	# LowerGetelementptr(2523:3): type of ^14 is ptr*
	# LowerLoad(2524:3).2: (^14) into ptr ^15
	movq (%rax), %rdx
	# SetupCalls(2525:3): move argument i64 ^13
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(2525:3): move argument ptr ^15
	# Fixed movzx with identical source and destination widths
	movq %rdx, %rsi
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE17_S_to_string_viewESt17basic_string_viewIcS2_E@PLT
	# SetupCalls(2525:3): move 128-bit result from %rax and %rdx
	# Multireg move: <%hax %hdx> -> <%hr14 %hr15>
	movq %rax, %r14
	movq %rdx, %r15
	# tt = Pointer, type = {i64, ptr}
	# LowerGetelementptr(2526:3): struct-type: ptr ^8 -> ^17, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(2526:3): type of ^17 is i64*
	# LowerExtractvalue(2528:3)
	# PaddedStructs({i64, ptr} -> i64): move from pack ^16 ({i64, ptr}) to ^31 (opaque), index = 0
	movq %r14, %rdx
	movq %rdx, %rcx
	# LowerStore(2528:3).9: mov i64 ^18, (^17)
	movq %rcx, (%rax)
	# tt = Pointer, type = {i64, ptr}
	# LowerGetelementptr(2529:3): struct-type: ptr ^8 -> ^19, indices=0,1
	movq %rbx, %rax
	addq $8, %rax
	# LowerGetelementptr(2529:3): type of ^19 is ptr*
	# LowerExtractvalue(2531:3)
	# PaddedStructs({i64, ptr} -> ptr): move from pack ^16 ({i64, ptr}) to ^32 (opaque), index = 1
	movq %r15, %rdx
	movq %rdx, %rcx
	# LowerStore(2531:3).9: mov ptr ^20, (^19)
	movq %rcx, (%rax)
	# tt = Pointer, type = {i64, ptr}
	# LowerGetelementptr(2532:3): struct-type: ptr ^8 -> ^21, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(2532:3): type of ^21 is i64*
	# LowerLoad(2533:3).2: (^21) into i64 ^22
	movq (%rax), %rcx
	# tt = Pointer, type = {i64, ptr}
	# LowerGetelementptr(2534:3): struct-type: ptr ^8 -> ^23, indices=0,1
	movq %rbx, %rax
	addq $8, %rax
	# LowerGetelementptr(2534:3): type of ^23 is ptr*
	# LowerLoad(2535:3).2: (^23) into ptr ^24
	movq (%rax), %rbx
	# SetupCalls(2536:3): move argument ptr nonnull dereferenceable(16) align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	# SetupCalls(2536:3): move argument i64 ^22
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(2536:3): move argument ptr ^24
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdx
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12__sv_wrapperC1ESt17basic_string_viewIcS2_E@PLT
	# LowerLoad(2537:3).2: (^6) into ptr ^25
	movq (%r12), %rbx
	# tt = Pointer, type = {i64, ptr}
	# LowerGetelementptr(2538:3): struct-type: ptr ^7 -> ^26, indices=0,0
	movq %r13, %rax
	# LowerGetelementptr(2538:3): type of ^26 is i64*
	# LowerLoad(2539:3).2: (^26) into i64 ^27
	movq (%rax), %rcx
	# tt = Pointer, type = {i64, ptr}
	# LowerGetelementptr(2540:3): struct-type: ptr ^7 -> ^28, indices=0,1
	movq %r13, %rax
	addq $8, %rax
	# LowerGetelementptr(2540:3): type of ^28 is ptr*
	# LowerLoad(2541:3).2: (^28) into ptr ^29
	movq (%rax), %r8
	# SetupCalls(2542:3): move argument ptr nonnull dereferenceable(32) align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq -80(%rbp), %rdi
	# SetupCalls(2542:3): move argument i64 ^27
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(2542:3): move argument ptr ^29
	# Fixed movzx with identical source and destination widths
	movq %r8, %rdx
	# SetupCalls(2542:3): move argument ptr nonnull dereferenceable(1) align 1 ^25
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rcx
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ENS4_12__sv_wrapperERKS3_@PLT
	movq -120(%rbp), %r15
	movq -112(%rbp), %r14
	movq -96(%rbp), %r13
	movq -88(%rbp), %r12
	movq -104(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EE7_M_lessERKS2_
.p2align 4, 0x90
_ZNKSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EE7_M_lessERKS2_:
	.___ZNKSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EE7_M_lessERKS2___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(48 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	# LowerAlloca(3440:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %rax
	# LowerAlloca(3441:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %rdx
	# LowerAlloca(3442:3): size = 1, type = %"struct.std::less.17"*, var = ^5
	leaq -17(%rbp), %rcx
	# LowerStore(3443:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rax)
	# LowerStore(3444:3).9: mov ptr %rsi, (^4)
	movq %rsi, (%rdx)
	# LowerLoad(3445:3).2: (^3) into ptr ^6
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::__shared_count"
	# LowerGetelementptr(3446:3): struct-type: ptr ^6 -> ^7, indices=0,0
	# LowerGetelementptr(3446:3): type of ^7 is ptr*
	# LowerLoad(3447:3).2: (^7) into ptr ^8
	movq (%rbx), %rax
	# LowerLoad(3448:3).2: (^4) into ptr ^9
	movq (%rdx), %rbx
	# tt = Pointer, type = %"class.std::__shared_count"
	# LowerGetelementptr(3449:3): struct-type: ptr ^9 -> ^10, indices=0,0
	# LowerGetelementptr(3449:3): type of ^10 is ptr*
	# LowerLoad(3450:3).2: (^10) into ptr ^11
	movq (%rbx), %r8
	# SetupCalls(3451:3): move argument ptr nonnull dereferenceable(1) align 1 ^5
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(3451:3): move argument ptr ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(3451:3): move argument ptr ^11
	# Fixed movzx with identical source and destination widths
	movq %r8, %rdx
	callq _ZNKSt4lessIPSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EEEclES4_S4_
	# SetupCalls(3451:3): move i1 result from %rax
	movb %al, %bl
	movb %bl, %al
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt19__relocate_object_aI6LsItemS0_SaIS0_EEvPT_PT0_RT1_
.p2align 4, 0x90
_ZSt19__relocate_object_aI6LsItemS0_SaIS0_EEvPT_PT0_RT1_:
	.___ZSt19__relocate_object_aI6LsItemS0_SaIS0_EEvPT_PT0_RT1___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(216 + 0, 16)
	subq $224, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -144(%rbp)
	movq %r12, -152(%rbp)
	movq %r13, -160(%rbp)
	movq %r14, -168(%rbp)
	movq %r15, -128(%rbp)
	# LowerAlloca(6936:3): size = 8, type = ptr*, var = ^4
	# Fixing source-to-dest leaq -8(%rbp), -120(%rbp)
	leaq -8(%rbp), %r15
	movq %r15, -120(%rbp)
	# LowerAlloca(6937:3): size = 8, type = ptr*, var = ^5
	# Fixing source-to-dest leaq -16(%rbp), -112(%rbp)
	leaq -16(%rbp), %r15
	movq %r15, -112(%rbp)
	# LowerAlloca(6938:3): size = 8, type = ptr*, var = ^6
	leaq -24(%rbp), %rbx
	# LowerAlloca(6939:3): size = 8, type = ptr*, var = ^7
	leaq -32(%rbp), %rcx
	# LowerAlloca(6940:3): size = 8, type = ptr*, var = ^8
	leaq -40(%rbp), %rax
	# LowerAlloca(6941:3): size = 8, type = ptr*, var = ^9
	leaq -48(%rbp), %r12
	# LowerAlloca(6942:3): size = 8, type = ptr*, var = ^10
	leaq -56(%rbp), %r13
	# LowerAlloca(6943:3): size = 8, type = ptr*, var = ^11
	leaq -64(%rbp), %r10
	# LowerAlloca(6944:3): size = 8, type = ptr*, var = ^12
	leaq -72(%rbp), %r8
	# LowerAlloca(6945:3): size = 8, type = ptr*, var = ^13
	leaq -80(%rbp), %r9
	# LowerAlloca(6946:3): size = 8, type = ptr*, var = ^14
	leaq -88(%rbp), %r11
	# LowerAlloca(6947:3): size = 8, type = ptr*, var = ^15
	leaq -96(%rbp), %r14
	# LowerAlloca(6948:3): size = 8, type = ptr*, var = ^16
	leaq -104(%rbp), %r15
	# LowerStore(6949:3).9: mov ptr %rdi, (^14)
	movq %rdi, (%r11)
	# LowerStore(6950:3).9: mov ptr %rsi, (^15)
	movq %rsi, (%r14)
	# LowerStore(6951:3).9: mov ptr %rdx, (^16)
	movq %rdx, (%r15)
	# LowerLoad(6952:3).2: (^16) into ptr ^17
	movq (%r15), %rsi
	# LowerLoad(6953:3).2: (^14) into ptr ^18
	movq (%r11), %rdi
	# LowerLoad(6954:3).2: (^15) into ptr ^19
	movq (%r14), %rdx
	# LowerStore(6955:3).9: mov ptr ^17, (^11)
	movq %rsi, (%r10)
	# LowerStore(6956:3).9: mov ptr ^18, (^12)
	movq %rdi, (%r8)
	# LowerStore(6957:3).9: mov ptr ^19, (^13)
	movq %rdx, (%r9)
	# LowerLoad(6958:3).2: (^11) into ptr ^20
	movq (%r10), %rsi
	# LowerLoad(6959:3).2: (^12) into ptr ^21
	movq (%r8), %rdx
	# LowerLoad(6960:3).2: (^13) into ptr ^22
	movq (%r9), %rdi
	# LowerStore(6961:3).9: mov ptr ^20, (^6)
	movq %rsi, (%rbx)
	# LowerStore(6962:3).9: mov ptr ^21, (^7)
	movq %rdx, (%rcx)
	# LowerStore(6963:3).9: mov ptr ^22, (^8)
	movq %rdi, (%rax)
	# LowerLoad(6964:3).2: (^6) into ptr ^23
	movq (%rbx), %rdx
	# LowerLoad(6965:3).2: (^7) into ptr ^24
	movq (%rcx), %rbx
	# LowerLoad(6966:3).2: (^8) into ptr ^25
	movq (%rax), %rcx
	# SetupCalls(6967:3): move argument ptr nonnull dereferenceable(33) align 8 ^24
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(6967:3): move argument ptr nonnull dereferenceable(33) align 8 ^25
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	callq _ZN6LsItemC2EOS_
	# LowerLoad(6968:3).2: (^16) into ptr ^26
	movq (%r15), %rax
	# LowerLoad(6969:3).2: (^15) into ptr ^27
	movq (%r14), %rbx
	# LowerStore(6970:3).9: mov ptr ^26, (^9)
	movq %rax, (%r12)
	# LowerStore(6971:3).9: mov ptr ^27, (^10)
	movq %rbx, (%r13)
	# LowerLoad(6972:3).2: (^9) into ptr ^28
	movq (%r12), %rax
	# LowerLoad(6973:3).2: (^10) into ptr ^29
	movq (%r13), %rbx
	# LowerStore(6974:3).9: mov ptr ^28, (^4)
	movq -120(%rbp), %rcx
	movq %rax, (%rcx)
	# LowerStore(6975:3).9: mov ptr ^29, (^5)
	movq -112(%rbp), %rax
	movq %rbx, (%rax)
	# LowerLoad(6976:3).2: (^4) into ptr ^30
	movq -120(%rbp), %rbx
	movq (%rbx), %rax
	# LowerLoad(6977:3).2: (^5) into ptr ^31
	movq -112(%rbp), %rbx
	movq (%rbx), %rax
	# SetupCalls(6978:3): move argument ptr nonnull dereferenceable(33) align 8 ^31
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZN6LsItemD2Ev
	movq -128(%rbp), %r15
	movq -168(%rbp), %r14
	movq -160(%rbp), %r13
	movq -152(%rbp), %r12
	movq -144(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt10__sv_checkmmPKc
.p2align 4, 0x90
_ZSt10__sv_checkmmPKc:
	.___ZSt10__sv_checkmmPKc__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(48 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -40(%rbp)
	movq %r12, -32(%rbp)
	# LowerAlloca(2894:3): size = 8, type = i64*, var = ^4
	leaq -8(%rbp), %r8
	# LowerAlloca(2895:3): size = 8, type = i64*, var = ^5
	leaq -16(%rbp), %r12
	# LowerAlloca(2896:3): size = 8, type = ptr*, var = ^6
	leaq -24(%rbp), %rbx
	# LowerStore(2897:3).9: mov i64 %rdi, (^4)
	movq %rdi, (%r8)
	# LowerStore(2898:3).9: mov i64 %rsi, (^5)
	movq %rsi, (%r12)
	# LowerStore(2899:3).9: mov ptr %rdx, (^6)
	movq %rdx, (%rbx)
	# LowerLoad(2900:3).2: (^5) into i64 ^7
	movq (%r12), %rcx
	# LowerLoad(2901:3).2: (^4) into i64 ^8
	movq (%r8), %rax
	# LowerIcmp(2902:3): i64 ^7 vs. operand i64 ^8
	cmpq %rax, %rcx
	seta %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZSt10__sv_checkmmPKc__M21
	jmp .___ZSt10__sv_checkmmPKc__M56
	.___ZSt10__sv_checkmmPKc__M21:
	# LowerLoad(2906:3).2: (^6) into ptr ^11
	movq (%rbx), %rcx
	# LowerLoad(2907:3).2: (^5) into i64 ^12
	movq (%r12), %rax
	# LowerLoad(2908:3).2: (^4) into i64 ^13
	movq (%r8), %rbx
	# SetupCalls(2909:3): move argument ptr @.str.24
	leaq .str.24(%rip), %rdi
	# SetupCalls(2909:3): move argument ptr ^11
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(2909:3): move argument i64 ^12
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdx
	# SetupCalls(2909:3): move argument i64 ^13
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rcx
	movq $0, %rax
	callq _ZSt24__throw_out_of_range_fmtPKcz@PLT
	.___ZSt10__sv_checkmmPKc__M56:
	# LowerLoad(2913:3).2: (^5) into i64 ^15
	movq (%r12), %rax
	movq -32(%rbp), %r12
	movq -40(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE9push_backEOS3_
.p2align 4, 0x90
_ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE9push_backEOS3_:
	.___ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE9push_backEOS3___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(1030:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %rax
	# LowerAlloca(1031:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %rcx
	# LowerStore(1032:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rax)
	# LowerStore(1033:3).9: mov ptr %rsi, (^4)
	movq %rsi, (%rcx)
	# LowerLoad(1034:3).2: (^3) into ptr ^5
	movq (%rax), %rbx
	# LowerLoad(1035:3).2: (^4) into ptr ^6
	movq (%rcx), %rax
	# SetupCalls(1036:3): move argument ptr nonnull dereferenceable(24) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(1036:3): move argument ptr nonnull dereferenceable(16) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12emplace_backIJS3_EEERS3_DpOT_
	# SetupCalls(1036:3): move ptr result from %rax
	movq %rax, %rax
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt8functionIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEEcvbEv
.p2align 4, 0x90
_ZNKSt8functionIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEEcvbEv:
	.___ZNKSt8functionIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEEcvbEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(9872:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(9873:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(9874:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# SetupCalls(9875:3): move argument ptr nonnull dereferenceable(24) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNKSt14_Function_base8_M_emptyEv
	# SetupCalls(9875:3): move i1 result from %rax
	movb %al, %bl
	# LowerLogic(9877:3): ^4, true into i1 ^5
	movb %bl, %al
	xorb $1, %al
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt6vectorI6LsItemSaIS0_EE4backEv
.p2align 4, 0x90
_ZNSt6vectorI6LsItemSaIS0_EE4backEv:
	.___ZNSt6vectorI6LsItemSaIS0_EE4backEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(72 + 0, 16)
	subq $80, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -48(%rbp)
	movq %r12, -32(%rbp)
	movq %r13, -40(%rbp)
	# LowerAlloca(6599:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerAlloca(6600:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^3
	leaq -16(%rbp), %r12
	# LowerAlloca(6601:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^4
	leaq -24(%rbp), %r13
	# LowerStore(6602:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(6603:3).2: (^2) into ptr ^5
	movq (%rax), %rbx
	# SetupCalls(6604:3): move argument ptr nonnull dereferenceable(24) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt6vectorI6LsItemSaIS0_EE3endEv
	# SetupCalls(6604:3): move ptr result from %rax
	movq %rax, %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(6605:3): struct-type: ptr ^4 -> ^7, indices=0,0
	movq %r13, %rax
	# LowerGetelementptr(6605:3): type of ^7 is ptr*
	# LowerStore(6606:3).9: mov ptr ^6, (^7)
	movq %rbx, (%rax)
	# SetupCalls(6607:3): move argument ptr nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	# SetupCalls(6607:3): move argument i64 1
	movq $1, %rsi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEmiEl
	# SetupCalls(6607:3): move ptr result from %rax
	movq %rax, %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(6608:3): struct-type: ptr ^3 -> ^9, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(6608:3): type of ^9 is ptr*
	# LowerStore(6609:3).9: mov ptr ^8, (^9)
	movq %rbx, (%rax)
	# SetupCalls(6610:3): move argument ptr nonnull dereferenceable(8) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEdeEv
	# SetupCalls(6610:3): move ptr result from %rax
	movq %rax, %rbx
	movq %rbx, %rax
	movq -40(%rbp), %r13
	movq -32(%rbp), %r12
	movq -48(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt4sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEEZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISB_EEE3$_0EvT_SH_T0_
.p2align 4, 0x90
_ZSt4sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEEZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISB_EEE3$_0EvT_SH_T0_:
	.___ZSt4sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEEZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISB_EEE3$_0EvT_SH_T0___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(80 + 0, 16)
	subq $80, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -64(%rbp)
	movq %r12, -72(%rbp)
	movq %r13, -56(%rbp)
	# LowerAlloca(1768:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^3
	leaq -8(%rbp), %rcx
	# LowerAlloca(1769:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^4
	leaq -16(%rbp), %r13
	# LowerAlloca(1770:3): size = 1, type = %class.anon*, var = ^5
	leaq -17(%rbp), %rax
	# LowerAlloca(1771:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^6
	leaq -32(%rbp), %rbx
	# LowerAlloca(1772:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^7
	leaq -40(%rbp), %r12
	# LowerAlloca(1773:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, var = ^8
	leaq -41(%rbp), %rax
	# LowerAlloca(1774:3): size = 1, type = %class.anon*, var = ^9
	leaq -42(%rbp), %rax
	# LowerAlloca(1775:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, var = ^10
	leaq -43(%rbp), %rax
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(1776:3): struct-type: ptr ^3 -> ^11, indices=0,0
	movq %rcx, %rax
	# LowerGetelementptr(1776:3): type of ^11 is ptr*
	# LowerStore(1777:3).9: mov ptr %rdi, (^11)
	movq %rdi, (%rax)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(1778:3): struct-type: ptr ^4 -> ^12, indices=0,0
	movq %r13, %rax
	# LowerGetelementptr(1778:3): type of ^12 is ptr*
	# LowerStore(1779:3).9: mov ptr %rsi, (^12)
	movq %rsi, (%rax)
	# SetupCalls(1780:3): move argument ptr align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(1780:3): move argument ptr align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(1780:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# SetupCalls(1781:3): move argument ptr align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(1781:3): move argument ptr align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %r13, %rsi
	# SetupCalls(1781:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	callq _ZN9__gnu_cxx5__ops16__iter_comp_iterIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EENS0_15_Iter_comp_iterIT_EESD_
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(1783:3): struct-type: ptr ^6 -> ^13, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(1783:3): type of ^13 is ptr*
	# LowerLoad(1784:3).2: (^13) into ptr ^14
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(1785:3): struct-type: ptr ^7 -> ^15, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(1785:3): type of ^15 is ptr*
	# LowerLoad(1786:3).2: (^15) into ptr ^16
	movq (%rax), %rcx
	# SetupCalls(1787:3): move argument ptr ^14
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(1787:3): move argument ptr ^16
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	callq _ZSt6__sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0_
	movq -56(%rbp), %r13
	movq -72(%rbp), %r12
	movq -64(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10filesystem7__cxx1118directory_iteratorC2ERKNS0_4pathE
.p2align 4, 0x90
_ZNSt10filesystem7__cxx1118directory_iteratorC2ERKNS0_4pathE:
	.___ZNSt10filesystem7__cxx1118directory_iteratorC2ERKNS0_4pathE__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(1489:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %rax
	# LowerAlloca(1490:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %rcx
	# LowerStore(1491:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rax)
	# LowerStore(1492:3).9: mov ptr %rsi, (^4)
	movq %rsi, (%rcx)
	# LowerLoad(1493:3).2: (^3) into ptr ^5
	movq (%rax), %rbx
	# LowerLoad(1494:3).2: (^4) into ptr ^6
	movq (%rcx), %rax
	# SetupCalls(1495:3): move argument ptr nonnull dereferenceable(16) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(1495:3): move argument ptr nonnull dereferenceable(40) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(1495:3): move argument i8 zeroext 0
	movq $0, %rdx
	andq $255, %rdx
	# SetupCalls(1495:3): move argument ptr null
	movq $0, %rcx
	callq _ZNSt10filesystem7__cxx1118directory_iteratorC2ERKNS0_4pathENS_17directory_optionsEPSt10error_code@PLT
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt10filesystem7__cxx114path8iterator11_M_is_multiEv
.p2align 4, 0x90
_ZNKSt10filesystem7__cxx114path8iterator11_M_is_multiEv:
	.___ZNKSt10filesystem7__cxx114path8iterator11_M_is_multiEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(3750:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(3751:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(3752:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path::iterator"
	# LowerGetelementptr(3753:3): struct-type: ptr ^3 -> ^4, indices=0,0
	# LowerGetelementptr(3753:3): type of ^4 is ptr*
	# LowerLoad(3754:3).2: (^4) into ptr ^5
	movq (%rbx), %rax
	# SetupCalls(3755:3): move argument ptr nonnull dereferenceable(40) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNKSt10filesystem7__cxx114path7_M_typeEv
	# SetupCalls(3755:3): move i8 result from %rax
	movb %al, %bl
	# LowerIcmp(3756:3): i8 ^6 vs. intlike 0
	cmpb $0, %bl
	sete %al
	andq $1, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt12__get_helperILm0EPNSt10filesystem7__cxx114path5_List5_ImplEJNS3_13_Impl_deleterEEERT0_RSt11_Tuple_implIXT_EJS7_DpT1_EE
.p2align 4, 0x90
_ZSt12__get_helperILm0EPNSt10filesystem7__cxx114path5_List5_ImplEJNS3_13_Impl_deleterEEERT0_RSt11_Tuple_implIXT_EJS7_DpT1_EE:
	.___ZSt12__get_helperILm0EPNSt10filesystem7__cxx114path5_List5_ImplEJNS3_13_Impl_deleterEEERT0_RSt11_Tuple_implIXT_EJS7_DpT1_EE__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(3906:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(3907:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(3908:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# SetupCalls(3909:3): move argument ptr nonnull dereferenceable(8) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt11_Tuple_implILm0EJPNSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEEE7_M_headERS7_
	# SetupCalls(3909:3): move ptr result from %rax
	movq %rax, %rbx
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv
.p2align 4, 0x90
_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv:
	.___ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(376 + 0, 16)
	subq $384, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -208(%rbp)
	movq %r12, -232(%rbp)
	movq %r13, -240(%rbp)
	movq %r14, -248(%rbp)
	movq %r15, -176(%rbp)
	# LowerAlloca(3197:3): size = 8, type = ptr*, var = ^2
	# Fixing source-to-dest leaq -8(%rbp), -168(%rbp)
	leaq -8(%rbp), %r15
	movq %r15, -168(%rbp)
	# LowerAlloca(3198:3): size = 4, type = i32*, var = ^3
	leaq -12(%rbp), %rsi
	# LowerAlloca(3199:3): size = 4, type = i32*, var = ^4
	# Fixing source-to-dest leaq -16(%rbp), -152(%rbp)
	leaq -16(%rbp), %r15
	movq %r15, -152(%rbp)
	# LowerAlloca(3200:3): size = 4, type = i32*, var = ^5
	# Fixing source-to-dest leaq -20(%rbp), -136(%rbp)
	leaq -20(%rbp), %r15
	movq %r15, -136(%rbp)
	# LowerAlloca(3201:3): size = 8, type = ptr*, var = ^6
	# Fixing source-to-dest leaq -32(%rbp), -160(%rbp)
	leaq -32(%rbp), %r15
	movq %r15, -160(%rbp)
	# LowerAlloca(3202:3): size = 4, type = i32*, var = ^7
	leaq -36(%rbp), %rbx
	# LowerAlloca(3203:3): size = 4, type = i32*, var = ^8
	# Fixing source-to-dest leaq -40(%rbp), -144(%rbp)
	leaq -40(%rbp), %r15
	movq %r15, -144(%rbp)
	# LowerAlloca(3204:3): size = 4, type = i32*, var = ^9
	# Fixing source-to-dest leaq -44(%rbp), -128(%rbp)
	leaq -44(%rbp), %r15
	movq %r15, -128(%rbp)
	# LowerAlloca(3205:3): size = 8, type = ptr*, var = ^10
	leaq -56(%rbp), %r8
	# LowerAlloca(3206:3): size = 4, type = i32*, var = ^11
	leaq -60(%rbp), %r9
	# LowerAlloca(3207:3): size = 8, type = ptr*, var = ^12
	leaq -72(%rbp), %rax
	# LowerAlloca(3208:3): size = 1, type = i8*, var = ^13
	leaq -73(%rbp), %rcx
	# LowerAlloca(3209:3): size = 1, type = i8*, var = ^14
	leaq -74(%rbp), %r10
	# LowerAlloca(3210:3): size = 1, type = i8*, var = ^15
	leaq -75(%rbp), %r11
	# LowerAlloca(3211:3): size = 4, type = i32*, var = ^16
	leaq -80(%rbp), %r12
	# LowerAlloca(3212:3): size = 4, type = i32*, var = ^17
	leaq -84(%rbp), %r13
	# LowerAlloca(3213:3): size = 8, type = i64*, var = ^18
	leaq -96(%rbp), %r14
	# LowerAlloca(3214:3): size = 8, type = ptr*, var = ^19
	leaq -104(%rbp), %rdx
	# LowerAlloca(3215:3): size = 8, type = i64*, var = ^20
	leaq -112(%rbp), %r15
	# LowerStore(3216:3).9: mov ptr %rdi, (^12)
	movq %rdi, (%rax)
	# LowerLoad(3217:3).2: (^12) into ptr ^21
	# Fixing source-to-dest movq (%rax), -120(%rbp)
	pushq %r15
	movq (%rax), %r15
	movq %r15, -120(%rbp)
	popq %r15
	# LowerStore(3218:3).3: mov $imm, (^13)
	movb $1, (%rcx)
	# LowerStore(3219:3).3: mov $imm, (^14)
	movb $1, (%r10)
	# LowerStore(3220:3).3: mov $imm, (^15)
	movb $1, (%r11)
	# LowerStore(3221:3).3: mov $imm, (^16)
	movl $32, (%r12)
	# LowerStore(3222:3).3: mov $imm, (^17)
	movl $32, (%r13)
	# LowerStore(3223:3).3: mov $imm, (^18)
	movabsq $4294967297, %rax
	movq %rax, (%r14)
	# tt = Pointer, type = %"class.std::_Sp_counted_base"
	# LowerGetelementptr(3224:3): struct-type: ptr ^21 -> ^22, indices=0,1
	movq -120(%rbp), %rax
	addq $8, %rax
	# LowerGetelementptr(3224:3): type of ^22 is i32*
	# LowerStore(3225:3).9: mov %"class.std::_Sp_counted_base"* ^22, (^19)
	movq %rax, (%rdx)
	# LowerLoad(3226:3).2: (^19) into ptr ^23
	movq (%rdx), %rax
	# LowerLoad(3227:3).2: (^23) into i64 ^24
	# Fixing source-to-dest movq (%rax), (%r15)
	movq (%rax), %r14
	movq %r14, (%r15)
	# LowerStore(3228:3).9: mov i64 ^24, (^20)
	# LowerLoad(3229:3).2: (^20) into i64 ^25
	movq (%r15), %rax
	# LowerIcmp(3230:3): i64 ^25 vs. intlike 4294967297
	movabsq $4294967297, %rcx
	cmpq %rcx, %rax
	sete %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv__M77
	jmp .___ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv__M154
	.___ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv__M77:
	# tt = Pointer, type = %"class.std::_Sp_counted_base"
	# LowerGetelementptr(3234:3): struct-type: ptr ^21 -> ^28, indices=0,1
	movq -120(%rbp), %rax
	addq $8, %rax
	# LowerGetelementptr(3234:3): type of ^28 is i32*
	# LowerStore(3235:3).3: mov $imm, (^28)
	movl $0, (%rax)
	# tt = Pointer, type = %"class.std::_Sp_counted_base"
	# LowerGetelementptr(3236:3): struct-type: ptr ^21 -> ^29, indices=0,2
	movq -120(%rbp), %rax
	addq $12, %rax
	# LowerGetelementptr(3236:3): type of ^29 is i32*
	# LowerStore(3237:3).3: mov $imm, (^29)
	movl $0, (%rax)
	# LowerLoad(3238:3).2: (^21) into ptr ^30
	movq -120(%rbp), %rax
	movq (%rax), %rbx
	# tt = Pointer, type = ptr
	# LowerGetelementptr(3239:3): struct-type: ptr ^30 -> ^31, indices=2
	addq $16, %rbx
	# LowerGetelementptr(3239:3): type of ^31 is ptr*
	# LowerLoad(3240:3).2: (^31) into ptr ^32
	movq (%rbx), %rax
	# SetupCalls(3241:3): move argument ptr nonnull dereferenceable(16) align 8 ^21
	# Fixed movzx with identical source and destination widths
	movq -120(%rbp), %rdi
	# SetupCalls(3241:3): jump to function operand ^32
	callq *%rax
	# LowerLoad(3242:3).2: (^21) into ptr ^33
	movq -120(%rbp), %rax
	movq (%rax), %rbx
	# tt = Pointer, type = ptr
	# LowerGetelementptr(3243:3): struct-type: ptr ^33 -> ^34, indices=3
	addq $24, %rbx
	# LowerGetelementptr(3243:3): type of ^34 is ptr*
	# LowerLoad(3244:3).2: (^34) into ptr ^35
	movq (%rbx), %rax
	# SetupCalls(3245:3): move argument ptr nonnull dereferenceable(16) align 8 ^21
	# Fixed movzx with identical source and destination widths
	movq -120(%rbp), %rdi
	# SetupCalls(3245:3): jump to function operand ^35
	callq *%rax
	jmp .___ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv__M254
	.___ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv__M154:
	# tt = Pointer, type = %"class.std::_Sp_counted_base"
	# LowerGetelementptr(3249:3): struct-type: ptr ^21 -> ^37, indices=0,1
	movq -120(%rbp), %rax
	addq $8, %rax
	# LowerGetelementptr(3249:3): type of ^37 is i32*
	# LowerStore(3250:3).9: mov %"class.std::_Sp_counted_base"* ^37, (^10)
	movq %rax, (%r8)
	# LowerStore(3251:3).3: mov $imm, (^11)
	movl $-1, (%r9)
	# LowerLoad(3252:3).4: __libc_single_threaded into ^38
	movb __libc_single_threaded(%rip), %al
	# LowerIcmp(3253:3): i8 ^38 vs. intlike 0
	cmpb $0, %al
	setne %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv__M170
	jmp .___ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv__M200
	.___ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv__M170:
	# LowerLoad(3257:3).2: (^10) into ptr ^41
	movq (%r8), %rax
	# LowerLoad(3258:3).2: (^11) into i32 ^42
	movl (%r9), %ecx
	# LowerStore(3259:3).9: mov ptr ^41, (^6)
	movq -160(%rbp), %rdx
	movq %rax, (%rdx)
	# LowerStore(3260:3).9: mov i32 ^42, (^7)
	movl %ecx, (%rbx)
	# LowerLoad(3261:3).2: (^6) into ptr ^43
	movq -160(%rbp), %rcx
	movq (%rcx), %rax
	# LowerLoad(3262:3).2: (^43) into i32 ^44
	movq -144(%rbp), %rcx
	# Fixing source-to-dest movl (%rax), (%rcx)
	movl (%rax), %r15d
	movl %r15d, (%rcx)
	# LowerStore(3263:3).9: mov i32 ^44, (^8)
	# LowerLoad(3264:3).2: (^7) into i32 ^45
	movl (%rbx), %ecx
	# LowerLoad(3265:3).2: (^6) into ptr ^46
	movq -160(%rbp), %rbx
	movq (%rbx), %rax
	# LowerLoad(3266:3).2: (^46) into i32 ^47
	movl (%rax), %ebx
	# LowerMath(3267:3): ^47, ^45 into i32 ^48
	addl %ecx, %ebx
	# LowerStore(3268:3).9: mov i32 ^48, (^46)
	movl %ebx, (%rax)
	# LowerLoad(3269:3).2: (^8) into i32 ^49
	movq -128(%rbp), %rax
	movq -144(%rbp), %rbx
	# Fixing source-to-dest movl (%rbx), (%rax)
	movl (%rbx), %r15d
	movl %r15d, (%rax)
	# LowerStore(3270:3).9: mov i32 ^49, (^9)
	jmp .___ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv__M225
	.___ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv__M200:
	# LowerLoad(3274:3).2: (^10) into ptr ^51
	movq (%r8), %rax
	# LowerLoad(3275:3).2: (^11) into i32 ^52
	movl (%r9), %ebx
	# LowerStore(3276:3).9: mov ptr ^51, (^2)
	movq -168(%rbp), %rcx
	movq %rax, (%rcx)
	# LowerStore(3277:3).9: mov i32 ^52, (^3)
	movl %ebx, (%rsi)
	# LowerLoad(3278:3).2: (^2) into ptr ^53
	movq -168(%rbp), %rax
	movq (%rax), %rbx
	# LowerLoad(3279:3).2: (^3) into i32 ^54
	movq -152(%rbp), %rax
	# Fixing source-to-dest movl (%rsi), (%rax)
	movl (%rsi), %r15d
	movl %r15d, (%rax)
	# LowerStore(3280:3).9: mov i32 ^54, (^4)
	# LowerLoad(3281:3).2: (^4) into i32 ^55
	movq -152(%rbp), %rax
	movl (%rax), %ecx
	lock addl %ecx, (%rbx)
	# LowerStore(3283:3).9: mov i32 ^56, (^5)
	movq -136(%rbp), %rax
	movl %ecx, (%rax)
	# LowerLoad(3284:3).2: (^5) into i32 ^57
	movq -128(%rbp), %rax
	movq -136(%rbp), %rbx
	# Fixing source-to-dest movl (%rbx), (%rax)
	movl (%rbx), %r15d
	movl %r15d, (%rax)
	# LowerStore(3285:3).9: mov i32 ^57, (^9)
	.___ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv__M225:
	# LowerLoad(3289:3).2: (^9) into i32 ^59
	movq -128(%rbp), %rax
	movl (%rax), %ebx
	# LowerIcmp(3290:3): i32 ^59 vs. intlike 1
	cmpl $1, %ebx
	sete %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv__M232
	jmp .___ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv__M254
	.___ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv__M232:
	# SetupCalls(3294:3): move argument ptr nonnull dereferenceable(16) align 8 ^21
	# Fixed movzx with identical source and destination widths
	movq -120(%rbp), %rdi
	callq _ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE24_M_release_last_use_coldEv
	.___ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv__M254:
	movq -176(%rbp), %r15
	movq -248(%rbp), %r14
	movq -240(%rbp), %r13
	movq -232(%rbp), %r12
	movq -208(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt10filesystem7__cxx114path8filenameEv
.p2align 4, 0x90
_ZNKSt10filesystem7__cxx114path8filenameEv:
	.___ZNKSt10filesystem7__cxx114path8filenameEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(168 + 0, 16)
	subq $176, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -80(%rbp)
	movq %r12, -96(%rbp)
	movq %r13, -104(%rbp)
	movq %r14, -88(%rbp)
	# LowerAlloca(1646:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %rax
	# LowerAlloca(1647:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %rbx
	# LowerAlloca(1648:3): size = 24, type = %"class.std::filesystem::__cxx11::path::iterator"*, var = ^5
	leaq -40(%rbp), %r14
	# LowerAlloca(1649:3): size = 24, type = %"class.std::filesystem::__cxx11::path::iterator"*, var = ^6
	leaq -64(%rbp), %r12
	# LowerStore(1650:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rax)
	# LowerStore(1651:3).9: mov ptr %rsi, (^4)
	movq %rsi, (%rbx)
	# LowerLoad(1652:3).2: (^4) into ptr ^7
	movq (%rbx), %r13
	# Clobber %rdi
	movq %rdi, -72(%rbp)
	# SetupCalls(1653:3): move argument ptr nonnull dereferenceable(40) align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	callq _ZNKSt10filesystem7__cxx114path5emptyEv
	# SetupCalls(1653:3): move i1 result from %rax
	movb %al, %bl
	# Unclobber %rdi, live inside %rdi:0
	movq -72(%rbp), %rdi
	cmpb $0, %bl
	jne .___ZNKSt10filesystem7__cxx114path8filenameEv__M38
	jmp .___ZNKSt10filesystem7__cxx114path8filenameEv__M60
	.___ZNKSt10filesystem7__cxx114path8filenameEv__M38:
	# SetupCalls(1657:3): move argument ptr nonnull dereferenceable(40) align 8 %rdi
	# Semiunclobber non-live %rdi into %rdi
	movq %rdi, %rdi
	callq _ZNSt10filesystem7__cxx114pathC2Ev
	jmp .___ZNKSt10filesystem7__cxx114path8filenameEv__M391
	.___ZNKSt10filesystem7__cxx114path8filenameEv__M60:
	# Clobber %rdi
	movq %rdi, -72(%rbp)
	# SetupCalls(1661:3): move argument ptr nonnull dereferenceable(40) align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	callq _ZNKSt10filesystem7__cxx114path7_M_typeEv
	# SetupCalls(1661:3): move i8 result from %rax
	movb %al, %bl
	# Unclobber %rdi, live inside %rdi:0
	movq -72(%rbp), %rdi
	# LowerIcmp(1662:3): i8 ^11 vs. intlike 3
	cmpb $3, %bl
	sete %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNKSt10filesystem7__cxx114path8filenameEv__M88
	jmp .___ZNKSt10filesystem7__cxx114path8filenameEv__M112
	.___ZNKSt10filesystem7__cxx114path8filenameEv__M88:
	# SetupCalls(1666:3): move argument ptr nonnull dereferenceable(40) align 8 %rdi
	# Semiunclobber non-live %rdi into %rdi
	movq %rdi, %rdi
	# SetupCalls(1666:3): move argument ptr nonnull dereferenceable(40) align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq %r13, %rsi
	callq _ZNSt10filesystem7__cxx114pathC2ERKS1_
	jmp .___ZNKSt10filesystem7__cxx114path8filenameEv__M391
	.___ZNKSt10filesystem7__cxx114path8filenameEv__M112:
	# Clobber %rdi
	movq %rdi, -72(%rbp)
	# SetupCalls(1670:3): move argument ptr nonnull dereferenceable(40) align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	callq _ZNKSt10filesystem7__cxx114path7_M_typeEv
	# SetupCalls(1670:3): move i8 result from %rax
	movb %al, %bl
	# Unclobber %rdi, live inside %rdi:0
	movq -72(%rbp), %rdi
	# LowerIcmp(1671:3): i8 ^15 vs. intlike 0
	cmpb $0, %bl
	sete %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNKSt10filesystem7__cxx114path8filenameEv__M140
	jmp .___ZNKSt10filesystem7__cxx114path8filenameEv__M367
	.___ZNKSt10filesystem7__cxx114path8filenameEv__M140:
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path"
	# LowerGetelementptr(1675:3): struct-type: ptr ^7 -> ^18, indices=0,0
	movq %r13, %rax
	# LowerGetelementptr(1675:3): type of ^18 is %"class.std::__cxx11::basic_string"*
	# Clobber %rdi
	movq %rdi, -72(%rbp)
	# SetupCalls(1676:3): move argument ptr nonnull dereferenceable(32) align 8 ^18
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4backEv@PLT
	# SetupCalls(1676:3): move ptr result from %rax
	movq %rax, %rbx
	# Unclobber %rdi, live inside %rdi:0
	movq -72(%rbp), %rdi
	# LowerLoad(1677:3).2: (^19) into i8 ^20
	movb (%rbx), %cl
	movsbl %cl, %eax
	# LowerIcmp(1679:3): i32 ^21 vs. intlike 47
	cmpl $47, %eax
	sete %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNKSt10filesystem7__cxx114path8filenameEv__M175
	jmp .___ZNKSt10filesystem7__cxx114path8filenameEv__M197
	.___ZNKSt10filesystem7__cxx114path8filenameEv__M175:
	# SetupCalls(1683:3): move argument ptr nonnull dereferenceable(40) align 8 %rdi
	# Semiunclobber non-live %rdi into %rdi
	movq %rdi, %rdi
	callq _ZNSt10filesystem7__cxx114pathC2Ev
	jmp .___ZNKSt10filesystem7__cxx114path8filenameEv__M391
	.___ZNKSt10filesystem7__cxx114path8filenameEv__M197:
	# Clobber %rdi
	movq %rdi, -72(%rbp)
	# SetupCalls(1687:3): move argument ptr sret align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(1687:3): move argument ptr nonnull dereferenceable(40) align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq %r13, %rsi
	callq _ZNKSt10filesystem7__cxx114path3endEv
	# Unclobber %rdi, live inside %rdi:0
	movq -72(%rbp), %rdi
	# Clobber %rdi
	movq %rdi, -72(%rbp)
	# SetupCalls(1688:3): move argument ptr nonnull dereferenceable(17) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	callq _ZNSt10filesystem7__cxx114path8iteratormmEv
	# SetupCalls(1688:3): move ptr result from %rax
	movq %rax, %rbx
	# Unclobber %rdi, live inside %rdi:0
	movq -72(%rbp), %rdi
	# Clobber %rdi
	movq %rdi, -72(%rbp)
	# SetupCalls(1689:3): move argument ptr align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r14, %rdi
	# SetupCalls(1689:3): move argument ptr align 8 ^25
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(1689:3): move argument i64 24
	movq $24, %rdx
	callq memcpy@PLT
	# Unclobber %rdi, live inside %rdi:0
	movq -72(%rbp), %rdi
	# Clobber %rdi
	movq %rdi, -72(%rbp)
	# SetupCalls(1690:3): move argument ptr nonnull dereferenceable(17) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r14, %rdi
	callq _ZNKSt10filesystem7__cxx114path8iteratorptEv
	# SetupCalls(1690:3): move ptr result from %rax
	movq %rax, %rbx
	# Unclobber %rdi, live inside %rdi:0
	movq -72(%rbp), %rdi
	# Clobber %rdi
	movq %rdi, -72(%rbp)
	# SetupCalls(1691:3): move argument ptr nonnull dereferenceable(40) align 8 ^26
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNKSt10filesystem7__cxx114path7_M_typeEv
	# SetupCalls(1691:3): move i8 result from %rax
	movb %al, %bl
	# Unclobber %rdi, live inside %rdi:0
	movq -72(%rbp), %rdi
	# LowerIcmp(1692:3): i8 ^27 vs. intlike 3
	cmpb $3, %bl
	sete %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNKSt10filesystem7__cxx114path8filenameEv__M319
	jmp .___ZNKSt10filesystem7__cxx114path8filenameEv__M366
	.___ZNKSt10filesystem7__cxx114path8filenameEv__M319:
	# Clobber %rdi
	movq %rdi, -72(%rbp)
	# SetupCalls(1696:3): move argument ptr nonnull dereferenceable(17) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r14, %rdi
	callq _ZNKSt10filesystem7__cxx114path8iteratordeEv
	# SetupCalls(1696:3): move ptr result from %rax
	movq %rax, %rbx
	# Unclobber %rdi, live inside %rdi:0
	movq -72(%rbp), %rdi
	# SetupCalls(1697:3): move argument ptr nonnull dereferenceable(40) align 8 %rdi
	# Semiunclobber non-live %rdi into %rdi
	movq %rdi, %rdi
	# SetupCalls(1697:3): move argument ptr nonnull dereferenceable(40) align 8 ^30
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZNSt10filesystem7__cxx114pathC2ERKS1_
	jmp .___ZNKSt10filesystem7__cxx114path8filenameEv__M391
	.___ZNKSt10filesystem7__cxx114path8filenameEv__M366:
	.___ZNKSt10filesystem7__cxx114path8filenameEv__M367:
	# SetupCalls(1710:3): move argument ptr nonnull dereferenceable(40) align 8 %rdi
	# Semiunclobber non-live %rdi into %rdi
	movq %rdi, %rdi
	callq _ZNSt10filesystem7__cxx114pathC2Ev
	.___ZNKSt10filesystem7__cxx114path8filenameEv__M391:
	movq -88(%rbp), %r14
	movq -104(%rbp), %r13
	movq -96(%rbp), %r12
	movq -80(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt16initializer_listISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEE5beginEv
.p2align 4, 0x90
_ZNKSt16initializer_listISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEE5beginEv:
	.___ZNKSt16initializer_listISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEE5beginEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(8847:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(8848:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(8849:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::initializer_list.13"
	# LowerGetelementptr(8850:3): struct-type: ptr ^3 -> ^4, indices=0,0
	# LowerGetelementptr(8850:3): type of ^4 is ptr*
	# LowerLoad(8851:3).2: (^4) into ptr ^5
	movq (%rbx), %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt10filesystem7__cxx114path3endEv
.p2align 4, 0x90
_ZNKSt10filesystem7__cxx114path3endEv:
	.___ZNKSt10filesystem7__cxx114path3endEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(40 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	movq %r12, -24(%rbp)
	# LowerAlloca(3515:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %rax
	# LowerStore(3516:3).9: mov ptr %rsi, (^3)
	movq %rsi, (%rax)
	# LowerLoad(3517:3).2: (^3) into ptr ^4
	movq (%rax), %r12
	# Clobber %rdi
	movq %rdi, -16(%rbp)
	# SetupCalls(3518:3): move argument ptr nonnull dereferenceable(40) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	callq _ZNKSt10filesystem7__cxx114path7_M_typeEv
	# SetupCalls(3518:3): move i8 result from %rax
	movb %al, %bl
	# Unclobber %rdi, live inside %rdi:0
	movq -16(%rbp), %rdi
	# LowerIcmp(3519:3): i8 ^5 vs. intlike 0
	cmpb $0, %bl
	sete %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNKSt10filesystem7__cxx114path3endEv__M34
	jmp .___ZNKSt10filesystem7__cxx114path3endEv__M88
	.___ZNKSt10filesystem7__cxx114path3endEv__M34:
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path"
	# LowerGetelementptr(3523:3): struct-type: ptr ^4 -> ^8, indices=0,1
	movq %r12, %rax
	addq $32, %rax
	# LowerGetelementptr(3523:3): type of ^8 is %"struct.std::filesystem::__cxx11::path::_List"*
	# Clobber %rdi
	movq %rdi, -16(%rbp)
	# SetupCalls(3524:3): move argument ptr nonnull dereferenceable(8) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNKSt10filesystem7__cxx114path5_List3endEv@PLT
	# SetupCalls(3524:3): move ptr result from %rax
	movq %rax, %rbx
	# Unclobber %rdi, live inside %rdi:0
	movq -16(%rbp), %rdi
	# SetupCalls(3525:3): move argument ptr nonnull dereferenceable(17) align 8 %rdi
	# Semiunclobber non-live %rdi into %rdi
	movq %rdi, %rdi
	# SetupCalls(3525:3): move argument ptr ^4
	# Fixed movzx with identical source and destination widths
	movq %r12, %rsi
	# SetupCalls(3525:3): move argument ptr ^9
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdx
	callq _ZNSt10filesystem7__cxx114path8iteratorC2EPKS1_PKNS1_5_CmptE
	jmp .___ZNKSt10filesystem7__cxx114path3endEv__M115
	.___ZNKSt10filesystem7__cxx114path3endEv__M88:
	# SetupCalls(3529:3): move argument ptr nonnull dereferenceable(17) align 8 %rdi
	# Semiunclobber non-live %rdi into %rdi
	movq %rdi, %rdi
	# SetupCalls(3529:3): move argument ptr ^4
	# Fixed movzx with identical source and destination widths
	movq %r12, %rsi
	# SetupCalls(3529:3): move argument i1 zeroext true
	movq $1, %rdx
	andq $1, %rdx
	callq _ZNSt10filesystem7__cxx114path8iteratorC2EPKS1_b
	.___ZNKSt10filesystem7__cxx114path3endEv__M115:
	movq -24(%rbp), %r12
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt8functionIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEED2Ev
.p2align 4, 0x90
_ZNSt8functionIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEED2Ev:
	.___ZNSt8functionIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEED2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(4461:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(4462:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(4463:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# SetupCalls(4464:3): move argument ptr nonnull dereferenceable(24) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt14_Function_baseD2Ev
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt12__shared_ptrINSt10filesystem7__cxx114_DirELN9__gnu_cxx12_Lock_policyE2EE12owner_beforeIS2_EEbRKS_IT_LS4_2EE
.p2align 4, 0x90
_ZNKSt12__shared_ptrINSt10filesystem7__cxx114_DirELN9__gnu_cxx12_Lock_policyE2EE12owner_beforeIS2_EEbRKS_IT_LS4_2EE:
	.___ZNKSt12__shared_ptrINSt10filesystem7__cxx114_DirELN9__gnu_cxx12_Lock_policyE2EE12owner_beforeIS2_EEbRKS_IT_LS4_2EE__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(3426:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %rax
	# LowerAlloca(3427:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %rcx
	# LowerStore(3428:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rax)
	# LowerStore(3429:3).9: mov ptr %rsi, (^4)
	movq %rsi, (%rcx)
	# LowerLoad(3430:3).2: (^3) into ptr ^5
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::__shared_ptr"
	# LowerGetelementptr(3431:3): struct-type: ptr ^5 -> ^6, indices=0,1
	addq $8, %rbx
	# LowerGetelementptr(3431:3): type of ^6 is %"class.std::__shared_count"*
	# LowerLoad(3432:3).2: (^4) into ptr ^7
	movq (%rcx), %rax
	# tt = Pointer, type = %"class.std::__shared_ptr"
	# LowerGetelementptr(3433:3): struct-type: ptr ^7 -> ^8, indices=0,1
	addq $8, %rax
	# LowerGetelementptr(3433:3): type of ^8 is %"class.std::__shared_count"*
	# SetupCalls(3434:3): move argument ptr nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(3434:3): move argument ptr nonnull dereferenceable(8) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNKSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EE7_M_lessERKS2_
	# SetupCalls(3434:3): move i1 result from %rax
	movb %al, %bl
	movb %bl, %al
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt10filesystem7__cxx114path7_M_typeEv
.p2align 4, 0x90
_ZNKSt10filesystem7__cxx114path7_M_typeEv:
	.___ZNKSt10filesystem7__cxx114path7_M_typeEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(3484:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(3485:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(3486:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path"
	# LowerGetelementptr(3487:3): struct-type: ptr ^3 -> ^4, indices=0,1
	addq $32, %rbx
	# LowerGetelementptr(3487:3): type of ^4 is %"struct.std::filesystem::__cxx11::path::_List"*
	# SetupCalls(3488:3): move argument ptr nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNKSt10filesystem7__cxx114path5_List4typeEv
	# SetupCalls(3488:3): move i8 result from %rax
	movb %al, %bl
	movb %bl, %al
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12_Vector_implC2Ev
.p2align 4, 0x90
_ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12_Vector_implC2Ev:
	.___ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12_Vector_implC2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(40 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	movq %r15, -40(%rbp)
	# LowerAlloca(2664:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rbx
	# LowerAlloca(2665:3): size = 8, type = ptr*, var = ^3
	leaq -16(%rbp), %rax
	# LowerAlloca(2666:3): size = 8, type = ptr*, var = ^4
	leaq -24(%rbp), %rdx
	# LowerStore(2667:3).9: mov ptr %rdi, (^4)
	movq %rdi, (%rdx)
	# LowerLoad(2668:3).2: (^4) into ptr ^5
	movq (%rdx), %rcx
	# LowerStore(2669:3).9: mov ptr ^5, (^3)
	movq %rcx, (%rax)
	# LowerLoad(2670:3).2: (^3) into ptr ^6
	# Fixing source-to-dest movq (%rax), (%rbx)
	movq (%rax), %r15
	movq %r15, (%rbx)
	# LowerStore(2671:3).9: mov ptr ^6, (^2)
	# LowerLoad(2672:3).2: (^2) into ptr ^7
	movq (%rbx), %rax
	# SetupCalls(2673:3): move argument ptr nonnull dereferenceable(24) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	callq _ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE17_Vector_impl_dataC2Ev
	movq -40(%rbp), %r15
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt12_Vector_baseI6LsItemSaIS0_EE12_Vector_implC2Ev
.p2align 4, 0x90
_ZNSt12_Vector_baseI6LsItemSaIS0_EE12_Vector_implC2Ev:
	.___ZNSt12_Vector_baseI6LsItemSaIS0_EE12_Vector_implC2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(40 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	movq %r15, -40(%rbp)
	# LowerAlloca(3022:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rbx
	# LowerAlloca(3023:3): size = 8, type = ptr*, var = ^3
	leaq -16(%rbp), %rax
	# LowerAlloca(3024:3): size = 8, type = ptr*, var = ^4
	leaq -24(%rbp), %rdx
	# LowerStore(3025:3).9: mov ptr %rdi, (^4)
	movq %rdi, (%rdx)
	# LowerLoad(3026:3).2: (^4) into ptr ^5
	movq (%rdx), %rcx
	# LowerStore(3027:3).9: mov ptr ^5, (^3)
	movq %rcx, (%rax)
	# LowerLoad(3028:3).2: (^3) into ptr ^6
	# Fixing source-to-dest movq (%rax), (%rbx)
	movq (%rax), %r15
	movq %r15, (%rbx)
	# LowerStore(3029:3).9: mov ptr ^6, (^2)
	# LowerLoad(3030:3).2: (^2) into ptr ^7
	movq (%rbx), %rax
	# SetupCalls(3031:3): move argument ptr nonnull dereferenceable(24) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	callq _ZNSt12_Vector_baseI6LsItemSaIS0_EE17_Vector_impl_dataC2Ev
	movq -40(%rbp), %r15
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt15__new_allocatorI6LsItemED2Ev
.p2align 4, 0x90
_ZNSt15__new_allocatorI6LsItemED2Ev:
	.___ZNSt15__new_allocatorI6LsItemED2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(6471:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(6472:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(6473:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE11_S_max_sizeERKS4_
.p2align 4, 0x90
_ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE11_S_max_sizeERKS4_:
	.___ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE11_S_max_sizeERKS4___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(88 + 0, 16)
	subq $96, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -56(%rbp)
	movq %r15, -64(%rbp)
	# LowerAlloca(4987:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rcx
	# LowerAlloca(4988:3): size = 8, type = ptr*, var = ^3
	leaq -16(%rbp), %rsi
	# LowerAlloca(4989:3): size = 8, type = ptr*, var = ^4
	leaq -24(%rbp), %r8
	# LowerAlloca(4990:3): size = 8, type = ptr*, var = ^5
	leaq -32(%rbp), %rdx
	# LowerAlloca(4991:3): size = 8, type = i64*, var = ^6
	leaq -40(%rbp), %rax
	# LowerAlloca(4992:3): size = 8, type = i64*, var = ^7
	leaq -48(%rbp), %rbx
	# LowerStore(4993:3).9: mov ptr %rdi, (^5)
	movq %rdi, (%rdx)
	# LowerStore(4994:3).3: mov $imm, (^6)
	movabsq $576460752303423487, %rdi
	movq %rdi, (%rax)
	# LowerLoad(4995:3).2: (^5) into ptr ^8
	# Fixing source-to-dest movq (%rdx), (%r8)
	movq (%rdx), %r15
	movq %r15, (%r8)
	# LowerStore(4996:3).9: mov ptr ^8, (^4)
	# LowerLoad(4997:3).2: (^4) into ptr ^9
	# Fixing source-to-dest movq (%r8), (%rsi)
	movq (%r8), %r15
	movq %r15, (%rsi)
	# LowerStore(4998:3).9: mov ptr ^9, (^3)
	# LowerLoad(4999:3).2: (^3) into ptr ^10
	# Fixing source-to-dest movq (%rsi), (%rcx)
	movq (%rsi), %r15
	movq %r15, (%rcx)
	# LowerStore(5000:3).9: mov ptr ^10, (^2)
	# LowerLoad(5001:3).2: (^2) into ptr ^11
	movq (%rcx), %rdx
	# LowerStore(5002:3).3: mov $imm, (^7)
	movabsq $576460752303423487, %rcx
	movq %rcx, (%rbx)
	# SetupCalls(5003:3): move argument ptr nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(5003:3): move argument ptr nonnull dereferenceable(8) align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZSt3minImERKT_S2_S2_
	# SetupCalls(5003:3): move ptr result from %rax
	movq %rax, %rbx
	# LowerLoad(5004:3).2: (^12) into i64 ^13
	movq (%rbx), %rax
	movq -64(%rbp), %r15
	movq -56(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE4sizeEv
.p2align 4, 0x90
_ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE4sizeEv:
	.___ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE4sizeEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(40 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(1363:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(1364:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(1365:3).2: (^2) into ptr ^3
	movq (%rax), %rcx
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(1366:3): struct-type: ptr ^3 -> ^4, indices=0,0
	movq %rcx, %rax
	# LowerGetelementptr(1366:3): type of ^4 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(1367:3): struct-type: ptr ^4 -> ^5, indices=0,1
	addq $8, %rax
	# LowerGetelementptr(1367:3): type of ^5 is ptr*
	# LowerLoad(1368:3).2: (^5) into ptr ^6
	movq (%rax), %rbx
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(1369:3): struct-type: ptr ^3 -> ^7, indices=0,0
	movq %rcx, %rax
	# LowerGetelementptr(1369:3): type of ^7 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(1370:3): struct-type: ptr ^7 -> ^8, indices=0,0
	# LowerGetelementptr(1370:3): type of ^8 is ptr*
	# LowerLoad(1371:3).2: (^8) into ptr ^9
	movq (%rax), %rcx
	# LowerBasicConversion(1372:3): ptr ^6 -> i64 ^10
	movq %rbx, %rdx
	# LowerBasicConversion(1373:3): ptr ^9 -> i64 ^11
	movq %rcx, %rbx
	# LowerMath(1374:3): ^10, ^11 into i64 ^12
	movq %rdx, %rax
	subq %rbx, %rax
	# LowerSdiv(1375:3): ^12, 16 into i64 ^13
	movq %rax, %rbx
	movq $0, %rdx
	movq %rbx, %rax
	movq $16, %rbx
	idivq %rbx
	movq %rax, %rbx
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt12__get_helperILm1ENSt10filesystem7__cxx114path5_List13_Impl_deleterEJEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE
.p2align 4, 0x90
_ZSt12__get_helperILm1ENSt10filesystem7__cxx114path5_List13_Impl_deleterEJEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE:
	.___ZSt12__get_helperILm1ENSt10filesystem7__cxx114path5_List13_Impl_deleterEJEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(3952:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(3953:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(3954:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# SetupCalls(3955:3): move argument ptr nonnull dereferenceable(1) align 1 ^3
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt11_Tuple_implILm1EJNSt10filesystem7__cxx114path5_List13_Impl_deleterEEE7_M_headERS5_
	# SetupCalls(3955:3): move ptr result from %rax
	movq %rax, %rbx
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEE9_M_valptrEv
.p2align 4, 0x90
_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEE9_M_valptrEv:
	.___ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEE9_M_valptrEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(9604:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(9605:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(9606:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"struct.std::_Rb_tree_node"
	# LowerGetelementptr(9607:3): struct-type: ptr ^3 -> ^4, indices=0,1
	addq $32, %rbx
	# LowerGetelementptr(9607:3): type of ^4 is %"struct.__gnu_cxx::__aligned_membuf"*
	# SetupCalls(9608:3): move argument ptr nonnull dereferenceable(64) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEE6_M_ptrEv
	# SetupCalls(9608:3): move ptr result from %rax
	movq %rax, %rbx
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISA_EEEEEC2IRA3_KcRSF_Lb1EEEOT_OT0_
.p2align 4, 0x90
_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISA_EEEEEC2IRA3_KcRSF_Lb1EEEOT_OT0_:
	.___ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISA_EEEEEC2IRA3_KcRSF_Lb1EEEOT_OT0___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(112 + 0, 16)
	subq $112, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -72(%rbp)
	movq %r12, -64(%rbp)
	movq %r13, -80(%rbp)
	movq %r14, -88(%rbp)
	movq %r15, -96(%rbp)
	# LowerAlloca(2261:3): size = 8, type = ptr*, var = ^4
	leaq -8(%rbp), %r8
	# LowerAlloca(2262:3): size = 8, type = ptr*, var = ^5
	leaq -16(%rbp), %r12
	# LowerAlloca(2263:3): size = 8, type = ptr*, var = ^6
	leaq -24(%rbp), %rbx
	# LowerAlloca(2264:3): size = 8, type = ptr*, var = ^7
	leaq -32(%rbp), %rcx
	# LowerAlloca(2265:3): size = 8, type = ptr*, var = ^8
	leaq -40(%rbp), %rax
	# LowerAlloca(2266:3): size = 8, type = ptr*, var = ^9
	leaq -48(%rbp), %r13
	# LowerAlloca(2267:3): size = 1, type = %"class.std::allocator.0"*, var = ^10
	leaq -49(%rbp), %r14
	# LowerStore(2268:3).9: mov ptr %rdi, (^7)
	movq %rdi, (%rcx)
	# LowerStore(2269:3).9: mov ptr %rsi, (^8)
	movq %rsi, (%rax)
	# LowerStore(2270:3).9: mov ptr %rdx, (^9)
	movq %rdx, (%r13)
	# LowerLoad(2271:3).2: (^7) into ptr ^11
	movq (%rcx), %r15
	# tt = Pointer, type = %"struct.std::pair"
	# LowerGetelementptr(2272:3): struct-type: ptr ^11 -> ^12, indices=0,0
	movq %r15, %rcx
	# LowerGetelementptr(2272:3): type of ^12 is %"class.std::__cxx11::basic_string"*
	# LowerLoad(2273:3).2: (^8) into ptr ^13
	movq (%rax), %rdx
	# tt = Pointer, type = [3 x i8]
	# LowerGetelementptr(2274:3): struct-type: ptr ^13 -> ^14, indices=0,0
	# LowerGetelementptr(2274:3): type of ^14 is i8*
	# LowerStore(2275:3).9: mov %"class.std::allocator.0"* ^10, (^6)
	movq %r14, (%rbx)
	# LowerLoad(2276:3).2: (^6) into ptr ^15
	# Fixing source-to-dest movq (%rbx), (%r8)
	pushq %r15
	movq (%rbx), %r15
	movq %r15, (%r8)
	popq %r15
	# LowerStore(2277:3).9: mov ptr ^15, (^4)
	# LowerLoad(2278:3).2: (^4) into ptr ^16
	movq (%r8), %rax
	# SetupCalls(2279:3): move argument ptr nonnull dereferenceable(32) align 8 ^12
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(2279:3): move argument ptr ^14
	# Fixed movzx with identical source and destination widths
	movq %rdx, %rsi
	# SetupCalls(2279:3): move argument ptr nonnull dereferenceable(1) align 1 ^10
	# Fixed movzx with identical source and destination widths
	movq %r14, %rdx
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_
	# LowerStore(2280:3).9: mov %"class.std::allocator.0"* ^10, (^5)
	movq %r14, (%r12)
	# LowerLoad(2281:3).2: (^5) into ptr ^17
	movq (%r12), %rax
	# SetupCalls(2282:3): move argument ptr nonnull dereferenceable(1) align 1 ^17
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt15__new_allocatorIcED2Ev
	# tt = Pointer, type = %"struct.std::pair"
	# LowerGetelementptr(2283:3): struct-type: ptr ^11 -> ^18, indices=0,1
	movq %r15, %rbx
	addq $32, %rbx
	# LowerGetelementptr(2283:3): type of ^18 is %"class.std::function"*
	# LowerLoad(2284:3).2: (^9) into ptr ^19
	movq (%r13), %rax
	# SetupCalls(2285:3): move argument ptr nonnull dereferenceable(32) align 8 ^18
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(2285:3): move argument ptr nonnull ^19
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNSt8functionIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEEC2IRS9_vEEOT_
	movq -96(%rbp), %r15
	movq -88(%rbp), %r14
	movq -80(%rbp), %r13
	movq -64(%rbp), %r12
	movq -72(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE13_Rb_tree_implISM_Lb1EED2Ev
.p2align 4, 0x90
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE13_Rb_tree_implISM_Lb1EED2Ev:
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE13_Rb_tree_implISM_Lb1EED2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(40 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	movq %r15, -32(%rbp)
	# LowerAlloca(4545:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerAlloca(4546:3): size = 8, type = ptr*, var = ^3
	leaq -16(%rbp), %rbx
	# LowerStore(4547:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rbx)
	# LowerLoad(4548:3).2: (^3) into ptr ^4
	# Fixing source-to-dest movq (%rbx), (%rax)
	movq (%rbx), %r15
	movq %r15, (%rax)
	# LowerStore(4549:3).9: mov ptr ^4, (^2)
	# LowerLoad(4550:3).2: (^2) into ptr ^5
	movq (%rax), %rbx
	# SetupCalls(4551:3): move argument ptr nonnull dereferenceable(1) align 1 ^5
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEEED2Ev
	movq -32(%rbp), %r15
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt18uninitialized_copyIPKSt17basic_string_viewIcSt11char_traitsIcEEPS3_ET0_T_S8_S7_
.p2align 4, 0x90
_ZSt18uninitialized_copyIPKSt17basic_string_viewIcSt11char_traitsIcEEPS3_ET0_T_S8_S7_:
	.___ZSt18uninitialized_copyIPKSt17basic_string_viewIcSt11char_traitsIcEEPS3_ET0_T_S8_S7___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(48 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -40(%rbp)
	# LowerAlloca(5013:3): size = 8, type = ptr*, var = ^4
	leaq -8(%rbp), %r9
	# LowerAlloca(5014:3): size = 8, type = ptr*, var = ^5
	leaq -16(%rbp), %r8
	# LowerAlloca(5015:3): size = 8, type = ptr*, var = ^6
	leaq -24(%rbp), %rbx
	# LowerAlloca(5016:3): size = 1, type = i8*, var = ^7
	leaq -25(%rbp), %rcx
	# LowerAlloca(5017:3): size = 1, type = i8*, var = ^8
	leaq -26(%rbp), %rax
	# LowerStore(5018:3).9: mov ptr %rdi, (^4)
	movq %rdi, (%r9)
	# LowerStore(5019:3).9: mov ptr %rsi, (^5)
	movq %rsi, (%r8)
	# LowerStore(5020:3).9: mov ptr %rdx, (^6)
	movq %rdx, (%rbx)
	# LowerStore(5021:3).3: mov $imm, (^7)
	movb $0, (%rcx)
	# LowerStore(5022:3).3: mov $imm, (^8)
	movb $0, (%rax)
	# LowerLoad(5023:3).2: (^4) into ptr ^9
	movq (%r9), %rax
	# LowerLoad(5024:3).2: (^5) into ptr ^10
	movq (%r8), %rcx
	# LowerLoad(5025:3).2: (^6) into ptr ^11
	movq (%rbx), %r8
	# SetupCalls(5026:3): move argument ptr ^9
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(5026:3): move argument ptr ^10
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(5026:3): move argument ptr ^11
	# Fixed movzx with identical source and destination widths
	movq %r8, %rdx
	callq _ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKSt17basic_string_viewIcSt11char_traitsIcEEPS5_EET0_T_SA_S9_
	# SetupCalls(5026:3): move ptr result from %rax
	movq %rax, %rbx
	movq %rbx, %rax
	movq -40(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10filesystem7__cxx114path8iteratormmEv
.p2align 4, 0x90
_ZNSt10filesystem7__cxx114path8iteratormmEv:
	.___ZNSt10filesystem7__cxx114path8iteratormmEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	movq %r12, -16(%rbp)
	# LowerAlloca(3538:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(3539:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(3540:3).2: (^2) into ptr ^3
	movq (%rax), %r12
	# SetupCalls(3547:3): move argument ptr nonnull dereferenceable(17) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	callq _ZNKSt10filesystem7__cxx114path8iterator11_M_is_multiEv
	# SetupCalls(3547:3): move i1 result from %rax
	movb %al, %bl
	cmpb $0, %bl
	jne .___ZNSt10filesystem7__cxx114path8iteratormmEv__M32
	jmp .___ZNSt10filesystem7__cxx114path8iteratormmEv__M49
	.___ZNSt10filesystem7__cxx114path8iteratormmEv__M32:
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path::iterator"
	# LowerGetelementptr(3557:3): struct-type: ptr ^3 -> ^10, indices=0,1
	movq %r12, %rbx
	addq $8, %rbx
	# LowerGetelementptr(3557:3): type of ^10 is ptr*
	# LowerLoad(3558:3).2: (^10) into ptr ^11
	movq (%rbx), %rax
	# tt = Pointer, type = %"struct.std::filesystem::__cxx11::path::_Cmpt"
	# LowerGetelementptr(3559:3): struct-type: ptr ^11 -> ^12, indices=-1
	addq $-48, %rax
	# LowerGetelementptr(3559:3): type of ^12 is %"struct.std::filesystem::__cxx11::path::_Cmpt"*
	# LowerStore(3560:3).9: mov %"struct.std::filesystem::__cxx11::path::_Cmpt"* ^12, (^10)
	movq %rax, (%rbx)
	jmp .___ZNSt10filesystem7__cxx114path8iteratormmEv__M59
	.___ZNSt10filesystem7__cxx114path8iteratormmEv__M49:
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path::iterator"
	# LowerGetelementptr(3570:3): struct-type: ptr ^3 -> ^16, indices=0,2
	movq %r12, %rax
	addq $16, %rax
	# LowerGetelementptr(3570:3): type of ^16 is i8*
	# LowerStore(3571:3).3: mov $imm, (^16)
	movb $0, (%rax)
	.___ZNSt10filesystem7__cxx114path8iteratormmEv__M59:
	movq %r12, %rax
	movq -16(%rbp), %r12
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt10filesystem7__cxx1115directory_entry12is_directoryEv
.p2align 4, 0x90
_ZNKSt10filesystem7__cxx1115directory_entry12is_directoryEv:
	.___ZNKSt10filesystem7__cxx1115directory_entry12is_directoryEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(1741:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(1742:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(1743:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# SetupCalls(1744:3): move argument ptr nonnull dereferenceable(41) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNKSt10filesystem7__cxx1115directory_entry12_M_file_typeEv
	# SetupCalls(1744:3): move i8 result from %rax
	movb %al, %bl
	# LowerIcmp(1745:3): i8 ^4 vs. intlike 2
	cmpb $2, %bl
	sete %al
	andq $1, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10filesystem7__cxx114pathD2Ev
.p2align 4, 0x90
_ZNSt10filesystem7__cxx114pathD2Ev:
	.___ZNSt10filesystem7__cxx114pathD2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(1754:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(1755:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(1756:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path"
	# LowerGetelementptr(1757:3): struct-type: ptr ^3 -> ^4, indices=0,1
	movq %rbx, %rax
	addq $32, %rax
	# LowerGetelementptr(1757:3): type of ^4 is %"struct.std::filesystem::__cxx11::path::_List"*
	# SetupCalls(1758:3): move argument ptr nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt10filesystem7__cxx114path5_ListD2Ev
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path"
	# LowerGetelementptr(1759:3): struct-type: ptr ^3 -> ^5, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(1759:3): type of ^5 is %"class.std::__cxx11::basic_string"*
	# SetupCalls(1760:3): move argument ptr nonnull dereferenceable(32) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE19_M_get_Tp_allocatorEv
.p2align 4, 0x90
_ZNKSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE19_M_get_Tp_allocatorEv:
	.___ZNKSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE19_M_get_Tp_allocatorEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(5567:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(5568:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(5569:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(5570:3): struct-type: ptr ^3 -> ^4, indices=0,0
	# LowerGetelementptr(5570:3): type of ^4 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10filesystem7__cxx114path10_S_convertISt17basic_string_viewIcSt11char_traitsIcEEEEDaT_
.p2align 4, 0x90
_ZNSt10filesystem7__cxx114path10_S_convertISt17basic_string_viewIcSt11char_traitsIcEEEEDaT_:
	.___ZNSt10filesystem7__cxx114path10_S_convertISt17basic_string_viewIcSt11char_traitsIcEEEEDaT___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(56 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -48(%rbp)
	movq %r12, -40(%rbp)
	# LowerAlloca(5929:3): size = 16, type = %"class.std::basic_string_view"*, var = ^3
	leaq -16(%rbp), %r12
	# LowerAlloca(5930:3): size = 16, type = %"class.std::basic_string_view"*, var = ^4
	leaq -32(%rbp), %rbx
	# tt = Pointer, type = {i64, ptr}
	# LowerGetelementptr(5931:3): struct-type: ptr ^4 -> ^5, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(5931:3): type of ^5 is i64*
	# LowerStore(5932:3).9: mov i64 %rdi, (^5)
	movq %rdi, (%rax)
	# tt = Pointer, type = {i64, ptr}
	# LowerGetelementptr(5933:3): struct-type: ptr ^4 -> ^6, indices=0,1
	movq %rbx, %rax
	addq $8, %rax
	# LowerGetelementptr(5933:3): type of ^6 is ptr*
	# LowerStore(5934:3).9: mov ptr %rsi, (^6)
	movq %rsi, (%rax)
	# SetupCalls(5935:3): move argument ptr align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(5935:3): move argument ptr align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(5935:3): move argument i64 16
	movq $16, %rdx
	callq memcpy@PLT
	# LowerLoad(5936:3).2: (^3) into {i64, ptr} ^7
	# FinishMultireg: mov (%reg), <%pack...>
	movq (%r12), %rax
	movq 8(%r12), %rbx
	# LowerRet: two-register return
	movq %rax, %rax
	movq %rbx, %rdx
	movq -40(%rbp), %r12
	movq -48(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE6_M_ptrEv
.p2align 4, 0x90
_ZNSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE6_M_ptrEv:
	.___ZNSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE6_M_ptrEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(3874:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(3875:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(3876:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::__uniq_ptr_impl"
	# LowerGetelementptr(3877:3): struct-type: ptr ^3 -> ^4, indices=0,0
	# LowerGetelementptr(3877:3): type of ^4 is %"class.std::tuple"*
	# SetupCalls(3878:3): move argument ptr nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZSt3getILm0EJPNSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSB_
	# SetupCalls(3878:3): move ptr result from %rax
	movq %rax, %rbx
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10_Head_baseILm1ENSt10filesystem7__cxx114path5_List13_Impl_deleterELb1EE7_M_headERS5_
.p2align 4, 0x90
_ZNSt10_Head_baseILm1ENSt10filesystem7__cxx114path5_List13_Impl_deleterELb1EE7_M_headERS5_:
	.___ZNSt10_Head_baseILm1ENSt10filesystem7__cxx114path5_List13_Impl_deleterELb1EE7_M_headERS5___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(3970:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(3971:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(3972:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNK9__gnu_cxx17__normal_iteratorIPSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEEdeEv
.p2align 4, 0x90
_ZNK9__gnu_cxx17__normal_iteratorIPSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEEdeEv:
	.___ZNK9__gnu_cxx17__normal_iteratorIPSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEEdeEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(5729:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(5730:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(5731:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator.19"
	# LowerGetelementptr(5732:3): struct-type: ptr ^3 -> ^4, indices=0,0
	# LowerGetelementptr(5732:3): type of ^4 is ptr*
	# LowerLoad(5733:3).2: (^4) into ptr ^5
	movq (%rbx), %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12_Vector_implD2Ev
.p2align 4, 0x90
_ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12_Vector_implD2Ev:
	.___ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12_Vector_implD2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(40 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	movq %r15, -32(%rbp)
	# LowerAlloca(5186:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerAlloca(5187:3): size = 8, type = ptr*, var = ^3
	leaq -16(%rbp), %rbx
	# LowerStore(5188:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rbx)
	# LowerLoad(5189:3).2: (^3) into ptr ^4
	# Fixing source-to-dest movq (%rbx), (%rax)
	movq (%rbx), %r15
	movq %r15, (%rax)
	# LowerStore(5190:3).9: mov ptr ^4, (^2)
	# LowerLoad(5191:3).2: (^2) into ptr ^5
	movq (%rax), %rbx
	# SetupCalls(5192:3): move argument ptr nonnull dereferenceable(1) align 1 ^5
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt15__new_allocatorISt17basic_string_viewIcSt11char_traitsIcEEED2Ev
	movq -32(%rbp), %r15
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE17_Vector_impl_dataC2Ev
.p2align 4, 0x90
_ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE17_Vector_impl_dataC2Ev:
	.___ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE17_Vector_impl_dataC2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(2679:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(2680:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(2681:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(2682:3): struct-type: ptr ^3 -> ^4, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(2682:3): type of ^4 is ptr*
	# LowerStore(2683:3).3: mov $imm, (^4)
	movq $0, (%rax)
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(2684:3): struct-type: ptr ^3 -> ^5, indices=0,1
	movq %rbx, %rax
	addq $8, %rax
	# LowerGetelementptr(2684:3): type of ^5 is ptr*
	# LowerStore(2685:3).3: mov $imm, (^5)
	movq $0, (%rax)
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(2686:3): struct-type: ptr ^3 -> ^6, indices=0,2
	movq %rbx, %rax
	addq $16, %rax
	# LowerGetelementptr(2686:3): type of ^6 is ptr*
	# LowerStore(2687:3).3: mov $imm, (^6)
	movq $0, (%rax)
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt10filesystem7__cxx114path6stringIcSt11char_traitsIcESaIcEEENSt7__cxx1112basic_stringIT_T0_T1_EERKSA_
.p2align 4, 0x90
_ZNKSt10filesystem7__cxx114path6stringIcSt11char_traitsIcESaIcEEENSt7__cxx1112basic_stringIT_T0_T1_EERKSA_:
	.___ZNKSt10filesystem7__cxx114path6stringIcSt11char_traitsIcESaIcEEENSt7__cxx1112basic_stringIT_T0_T1_EERKSA___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(64 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -40(%rbp)
	movq %r12, -48(%rbp)
	movq %r13, -56(%rbp)
	# LowerAlloca(3762:3): size = 8, type = ptr*, var = ^4
	leaq -8(%rbp), %rcx
	# LowerAlloca(3763:3): size = 8, type = ptr*, var = ^5
	leaq -16(%rbp), %rax
	# LowerAlloca(3764:3): size = 8, type = ptr*, var = ^6
	leaq -24(%rbp), %rbx
	# LowerStore(3765:3).9: mov ptr %rdi, (^4)
	movq %rdi, (%rcx)
	# LowerStore(3766:3).9: mov ptr %rsi, (^5)
	movq %rsi, (%rax)
	# LowerStore(3767:3).9: mov ptr %rdx, (^6)
	movq %rdx, (%rbx)
	# LowerLoad(3768:3).2: (^5) into ptr ^7
	movq (%rax), %r12
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path"
	# LowerGetelementptr(3769:3): struct-type: ptr ^7 -> ^8, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(3769:3): type of ^8 is %"class.std::__cxx11::basic_string"*
	# Clobber %rdi
	movq %rdi, -32(%rbp)
	# SetupCalls(3770:3): move argument ptr nonnull dereferenceable(32) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv@PLT
	# SetupCalls(3770:3): move ptr result from %rax
	movq %rax, %r13
	# Unclobber %rdi, live inside %rdi:0
	movq -32(%rbp), %rdi
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path"
	# LowerGetelementptr(3771:3): struct-type: ptr ^7 -> ^10, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(3771:3): type of ^10 is %"class.std::__cxx11::basic_string"*
	# Clobber %rdi
	movq %rdi, -32(%rbp)
	# SetupCalls(3772:3): move argument ptr nonnull dereferenceable(32) align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv@PLT
	# SetupCalls(3772:3): move i64 result from %rax
	movq %rax, %r12
	# Unclobber %rdi, live inside %rdi:0
	movq -32(%rbp), %rdi
	# LowerLoad(3773:3).2: (^6) into ptr ^12
	movq (%rbx), %rax
	# SetupCalls(3774:3): move argument ptr nonnull dereferenceable(32) align 8 %rdi
	# Semiunclobber non-live %rdi into %rdi
	movq %rdi, %rdi
	# SetupCalls(3774:3): move argument ptr ^9
	# Fixed movzx with identical source and destination widths
	movq %r13, %rsi
	# SetupCalls(3774:3): move argument i64 ^11
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdx
	# SetupCalls(3774:3): move argument ptr nonnull dereferenceable(1) align 1 ^12
	# Fixed movzx with identical source and destination widths
	movq %rax, %rcx
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcmRKS3_@PLT
	movq -56(%rbp), %r13
	movq -48(%rbp), %r12
	movq -40(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt9_Any_data9_M_accessIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEEERKT_v
.p2align 4, 0x90
_ZNKSt9_Any_data9_M_accessIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEEERKT_v:
	.___ZNKSt9_Any_data9_M_accessIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEEERKT_v__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(4331:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(4332:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(4333:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# SetupCalls(4334:3): move argument ptr nonnull dereferenceable(16) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNKSt9_Any_data9_M_accessEv
	# SetupCalls(4334:3): move ptr result from %rax
	movq %rax, %rbx
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt12__relocate_aIP6LsItemS1_SaIS0_EET0_T_S4_S3_RT1_
.p2align 4, 0x90
_ZSt12__relocate_aIP6LsItemS1_SaIS0_EET0_T_S4_S3_RT1_:
	.___ZSt12__relocate_aIP6LsItemS1_SaIS0_EET0_T_S4_S3_RT1___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(88 + 0, 16)
	subq $96, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -56(%rbp)
	movq %r12, -40(%rbp)
	movq %r13, -48(%rbp)
	movq %r14, -64(%rbp)
	# LowerAlloca(6865:3): size = 8, type = ptr*, var = ^5
	leaq -8(%rbp), %rax
	# LowerAlloca(6866:3): size = 8, type = ptr*, var = ^6
	leaq -16(%rbp), %r12
	# LowerAlloca(6867:3): size = 8, type = ptr*, var = ^7
	leaq -24(%rbp), %r13
	# LowerAlloca(6868:3): size = 8, type = ptr*, var = ^8
	leaq -32(%rbp), %rbx
	# LowerStore(6869:3).9: mov ptr %rdi, (^5)
	movq %rdi, (%rax)
	# LowerStore(6870:3).9: mov ptr %rsi, (^6)
	movq %rsi, (%r12)
	# LowerStore(6871:3).9: mov ptr %rdx, (^7)
	movq %rdx, (%r13)
	# LowerStore(6872:3).9: mov ptr %rcx, (^8)
	movq %rcx, (%rbx)
	# LowerLoad(6873:3).2: (^5) into ptr ^9
	movq (%rax), %rcx
	# SetupCalls(6874:3): move argument ptr ^9
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	callq _ZSt12__niter_baseIP6LsItemET_S2_
	# SetupCalls(6874:3): move ptr result from %rax
	movq %rax, %r14
	# LowerLoad(6875:3).2: (^6) into ptr ^11
	movq (%r12), %rax
	# SetupCalls(6876:3): move argument ptr ^11
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZSt12__niter_baseIP6LsItemET_S2_
	# SetupCalls(6876:3): move ptr result from %rax
	movq %rax, %r12
	# LowerLoad(6877:3).2: (^7) into ptr ^13
	movq (%r13), %rax
	# SetupCalls(6878:3): move argument ptr ^13
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZSt12__niter_baseIP6LsItemET_S2_
	# SetupCalls(6878:3): move ptr result from %rax
	movq %rax, %r13
	# LowerLoad(6879:3).2: (^8) into ptr ^15
	movq (%rbx), %rax
	# SetupCalls(6880:3): move argument ptr ^10
	# Fixed movzx with identical source and destination widths
	movq %r14, %rdi
	# SetupCalls(6880:3): move argument ptr ^12
	# Fixed movzx with identical source and destination widths
	movq %r12, %rsi
	# SetupCalls(6880:3): move argument ptr ^14
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdx
	# SetupCalls(6880:3): move argument ptr nonnull dereferenceable(1) align 1 ^15
	# Fixed movzx with identical source and destination widths
	movq %rax, %rcx
	callq _ZSt14__relocate_a_1IP6LsItemS1_SaIS0_EET0_T_S4_S3_RT1_
	# SetupCalls(6880:3): move ptr result from %rax
	movq %rax, %rbx
	movq %rbx, %rax
	movq -64(%rbp), %r14
	movq -48(%rbp), %r13
	movq -40(%rbp), %r12
	movq -56(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _Z3pwdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE
.p2align 4, 0x90
_Z3pwdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE:
	.___Z3pwdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(160 + 0, 16)
	subq $160, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -128(%rbp)
	movq %r12, -96(%rbp)
	movq %r13, -120(%rbp)
	movq %r14, -104(%rbp)
	movq %r15, -112(%rbp)
	# LowerAlloca(1886:3): size = 4, type = i32*, var = ^2
	leaq -4(%rbp), %r12
	# LowerAlloca(1887:3): size = 8, type = ptr*, var = ^3
	leaq -16(%rbp), %r14
	# LowerAlloca(1888:3): size = 32, type = %"class.std::__cxx11::basic_string"*, var = ^4
	leaq -48(%rbp), %r15
	# LowerAlloca(1889:3): size = 40, type = %"class.std::filesystem::__cxx11::path"*, var = ^5
	leaq -88(%rbp), %r13
	# LowerStore(1890:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%r14)
	# LowerLoad(1891:3).2: (^3) into ptr ^6
	movq (%r14), %rax
	# SetupCalls(1892:3): move argument ptr nonnull dereferenceable(24) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE4sizeEv
	# SetupCalls(1892:3): move i64 result from %rax
	movq %rax, %rbx
	# LowerIcmp(1893:3): i64 ^7 vs. intlike 1
	cmpq $1, %rbx
	setne %al
	andq $1, %rax
	cmpb $0, %al
	jne .___Z3pwdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M40
	jmp .___Z3pwdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M144
	.___Z3pwdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M40:
	# SetupCalls(1897:3): move argument ptr nonnull dereferenceable(8) align 8 @_ZSt4cerr
	leaq _ZSt4cerr(%rip), %rdi
	# SetupCalls(1897:3): move argument ptr @.str.1
	leaq .str.1(%rip), %rsi
	callq _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
	# SetupCalls(1897:3): move ptr result from %rax
	movq %rax, %r13
	# LowerLoad(1898:3).2: (^3) into ptr ^11
	movq (%r14), %rax
	# SetupCalls(1899:3): move argument ptr nonnull dereferenceable(24) align 8 ^11
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE4sizeEv
	# SetupCalls(1899:3): move i64 result from %rax
	movq %rax, %rbx
	# SetupCalls(1900:3): move argument ptr nonnull dereferenceable(8) align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	# SetupCalls(1900:3): move argument i64 ^12
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZNSolsEm@PLT
	# SetupCalls(1900:3): move ptr result from %rax
	movq %rax, %rbx
	# SetupCalls(1901:3): move argument ptr nonnull dereferenceable(8) align 8 ^13
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(1901:3): move argument i8 signext 10
	movq $10, %rsi
	movsbq %sil, %rsi
	callq _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@PLT
	# SetupCalls(1901:3): move ptr result from %rax
	movq %rax, %rax
	# LowerStore(1902:3).3: mov $imm, (^2)
	movl $1, (%r12)
	jmp .___Z3pwdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M284
	.___Z3pwdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M144:
	# SetupCalls(1906:3): move argument ptr sret align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	callq _ZNSt10filesystem12current_pathB5cxx11Ev@PLT
	# SetupCalls(1907:3): move argument ptr sret align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %r15, %rdi
	# SetupCalls(1907:3): move argument ptr nonnull dereferenceable(40) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r13, %rsi
	callq _ZNKSt10filesystem7__cxx114path6stringEv
	# SetupCalls(1908:3): move argument ptr nonnull dereferenceable(8) align 8 @_ZSt4cout
	leaq _ZSt4cout(%rip), %rdi
	# SetupCalls(1908:3): move argument ptr nonnull dereferenceable(32) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %r15, %rsi
	callq _ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKNSt7__cxx1112basic_stringIS4_S5_T1_EE@PLT
	# SetupCalls(1908:3): move ptr result from %rax
	movq %rax, %rbx
	# SetupCalls(1909:3): move argument ptr nonnull dereferenceable(8) align 8 ^16
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(1909:3): move argument i8 signext 10
	movq $10, %rsi
	movsbq %sil, %rsi
	callq _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@PLT
	# SetupCalls(1909:3): move ptr result from %rax
	movq %rax, %rax
	# SetupCalls(1910:3): move argument ptr nonnull dereferenceable(32) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %r15, %rdi
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
	# SetupCalls(1911:3): move argument ptr nonnull dereferenceable(40) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	callq _ZNSt10filesystem7__cxx114pathD2Ev
	# LowerStore(1912:3).3: mov $imm, (^2)
	movl $0, (%r12)
	.___Z3pwdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M284:
	# LowerLoad(1916:3).2: (^2) into i32 ^19
	movl (%r12), %eax
	movq -112(%rbp), %r15
	movq -104(%rbp), %r14
	movq -120(%rbp), %r13
	movq -96(%rbp), %r12
	movq -128(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE5emptyEv
.p2align 4, 0x90
_ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE5emptyEv:
	.___ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE5emptyEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(72 + 0, 16)
	subq $80, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -56(%rbp)
	movq %r12, -48(%rbp)
	movq %r13, -32(%rbp)
	movq %r14, -40(%rbp)
	# LowerAlloca(2461:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerAlloca(2462:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator.24"*, var = ^3
	leaq -16(%rbp), %r13
	# LowerAlloca(2463:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator.24"*, var = ^4
	leaq -24(%rbp), %r14
	# LowerStore(2464:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(2465:3).2: (^2) into ptr ^5
	movq (%rax), %r12
	# SetupCalls(2466:3): move argument ptr nonnull dereferenceable(24) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	callq _ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE5beginEv
	# SetupCalls(2466:3): move ptr result from %rax
	movq %rax, %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator.24"
	# LowerGetelementptr(2467:3): struct-type: ptr ^3 -> ^7, indices=0,0
	movq %r13, %rax
	# LowerGetelementptr(2467:3): type of ^7 is ptr*
	# LowerStore(2468:3).9: mov ptr ^6, (^7)
	movq %rbx, (%rax)
	# SetupCalls(2469:3): move argument ptr nonnull dereferenceable(24) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	callq _ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE3endEv
	# SetupCalls(2469:3): move ptr result from %rax
	movq %rax, %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator.24"
	# LowerGetelementptr(2470:3): struct-type: ptr ^4 -> ^9, indices=0,0
	movq %r14, %rax
	# LowerGetelementptr(2470:3): type of ^9 is ptr*
	# LowerStore(2471:3).9: mov ptr ^8, (^9)
	movq %rbx, (%rax)
	# SetupCalls(2472:3): move argument ptr nonnull dereferenceable(8) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	# SetupCalls(2472:3): move argument ptr nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %r14, %rsi
	callq _ZN9__gnu_cxxeqIPKSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESF_
	# SetupCalls(2472:3): move i1 result from %rax
	movb %al, %bl
	movb %bl, %al
	movq -40(%rbp), %r14
	movq -32(%rbp), %r13
	movq -48(%rbp), %r12
	movq -56(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt12_Vector_baseI6LsItemSaIS0_EEC2Ev
.p2align 4, 0x90
_ZNSt12_Vector_baseI6LsItemSaIS0_EEC2Ev:
	.___ZNSt12_Vector_baseI6LsItemSaIS0_EEC2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(3012:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(3013:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(3014:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"struct.std::_Vector_base.6"
	# LowerGetelementptr(3015:3): struct-type: ptr ^3 -> ^4, indices=0,0
	# LowerGetelementptr(3015:3): type of ^4 is %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl"*
	# SetupCalls(3016:3): move argument ptr nonnull dereferenceable(24) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt12_Vector_baseI6LsItemSaIS0_EE12_Vector_implC2Ev
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE7releaseEv
.p2align 4, 0x90
_ZNSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE7releaseEv:
	.___ZNSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE7releaseEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(56 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -40(%rbp)
	movq %r12, -24(%rbp)
	movq %r13, -32(%rbp)
	movq %r15, -48(%rbp)
	# LowerAlloca(6054:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerAlloca(6055:3): size = 8, type = ptr*, var = ^3
	leaq -16(%rbp), %r12
	# LowerStore(6056:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(6057:3).2: (^2) into ptr ^4
	movq (%rax), %r13
	# SetupCalls(6058:3): move argument ptr nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	callq _ZNSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE6_M_ptrEv
	# SetupCalls(6058:3): move ptr result from %rax
	movq %rax, %rbx
	# LowerLoad(6059:3).2: (^5) into ptr ^6
	# Fixing source-to-dest movq (%rbx), (%r12)
	movq (%rbx), %r15
	movq %r15, (%r12)
	# LowerStore(6060:3).9: mov ptr ^6, (^3)
	# SetupCalls(6061:3): move argument ptr nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	callq _ZNSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE6_M_ptrEv
	# SetupCalls(6061:3): move ptr result from %rax
	movq %rax, %rbx
	# LowerStore(6062:3).3: mov $imm, (^7)
	movq $0, (%rbx)
	# LowerLoad(6063:3).2: (^3) into ptr ^8
	movq (%r12), %rax
	movq -48(%rbp), %r15
	movq -32(%rbp), %r13
	movq -24(%rbp), %r12
	movq -40(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10filesystem7__cxx1118directory_iteratorC2Ev
.p2align 4, 0x90
_ZNSt10filesystem7__cxx1118directory_iteratorC2Ev:
	.___ZNSt10filesystem7__cxx1118directory_iteratorC2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(3386:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(3387:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(3388:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::directory_iterator"
	# LowerGetelementptr(3389:3): struct-type: ptr ^3 -> ^4, indices=0,0
	# LowerGetelementptr(3389:3): type of ^4 is %"class.std::__shared_ptr"*
	# SetupCalls(3390:3): move argument ptr nonnull dereferenceable(16) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt12__shared_ptrINSt10filesystem7__cxx114_DirELN9__gnu_cxx12_Lock_policyE2EEC1Ev@PLT
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10_Head_baseILm0EPNSt10filesystem7__cxx114path5_List5_ImplELb0EE7_M_headERKS6_
.p2align 4, 0x90
_ZNSt10_Head_baseILm0EPNSt10filesystem7__cxx114path5_List5_ImplELb0EE7_M_headERKS6_:
	.___ZNSt10_Head_baseILm0EPNSt10filesystem7__cxx114path5_List5_ImplELb0EE7_M_headERKS6___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(3691:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(3692:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(3693:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"struct.std::_Head_base.4"
	# LowerGetelementptr(3694:3): struct-type: ptr ^3 -> ^4, indices=0,0
	# LowerGetelementptr(3694:3): type of ^4 is ptr*
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10filesystem12is_directoryENS_11file_statusE
.p2align 4, 0x90
_ZNSt10filesystem12is_directoryENS_11file_statusE:
	.___ZNSt10filesystem12is_directoryENS_11file_statusE__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(3978:3): size = 8, type = %"class.std::filesystem::file_status"*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(3979:3).9: mov i64 %rdi, (^2)
	movq %rdi, (%rax)
	# SetupCalls(3980:3): move argument ptr nonnull dereferenceable(8) align 4 ^2
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNKSt10filesystem11file_status4typeEv
	# SetupCalls(3980:3): move i8 result from %rax
	movb %al, %bl
	# LowerIcmp(3981:3): i8 ^3 vs. intlike 2
	cmpb $2, %bl
	sete %al
	andq $1, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE10_M_deleterEv
.p2align 4, 0x90
_ZNSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE10_M_deleterEv:
	.___ZNSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE10_M_deleterEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(3933:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(3934:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(3935:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::__uniq_ptr_impl"
	# LowerGetelementptr(3936:3): struct-type: ptr ^3 -> ^4, indices=0,0
	# LowerGetelementptr(3936:3): type of ^4 is %"class.std::tuple"*
	# SetupCalls(3937:3): move argument ptr nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZSt3getILm1EJPNSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSB_
	# SetupCalls(3937:3): move ptr result from %rax
	movq %rax, %rbx
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10filesystem7__cxx114pathaSISt17basic_string_viewIcSt11char_traitsIcEEEERNSt9enable_ifIX13__is_path_srcIT_EES1_E4typeERKS8_
.p2align 4, 0x90
_ZNSt10filesystem7__cxx114pathaSISt17basic_string_viewIcSt11char_traitsIcEEEERNSt9enable_ifIX13__is_path_srcIT_EES1_E4typeERKS8_:
	.___ZNSt10filesystem7__cxx114pathaSISt17basic_string_viewIcSt11char_traitsIcEEEERNSt9enable_ifIX13__is_path_srcIT_EES1_E4typeERKS8___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(80 + 0, 16)
	subq $80, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -72(%rbp)
	movq %r12, -64(%rbp)
	# LowerAlloca(1411:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %rax
	# LowerAlloca(1412:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %rcx
	# LowerAlloca(1413:3): size = 40, type = %"class.std::filesystem::__cxx11::path"*, var = ^5
	leaq -56(%rbp), %r12
	# LowerStore(1414:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rax)
	# LowerStore(1415:3).9: mov ptr %rsi, (^4)
	movq %rsi, (%rcx)
	# LowerLoad(1416:3).2: (^3) into ptr ^6
	movq (%rax), %rbx
	# LowerLoad(1417:3).2: (^4) into ptr ^7
	movq (%rcx), %rax
	# SetupCalls(1418:3): move argument ptr nonnull dereferenceable(40) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(1418:3): move argument ptr nonnull dereferenceable(16) align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(1418:3): move argument i8 zeroext 2
	movq $2, %rdx
	andq $255, %rdx
	callq _ZNSt10filesystem7__cxx114pathC2ISt17basic_string_viewIcSt11char_traitsIcEES1_EERKT_NS1_6formatE
	# SetupCalls(1419:3): move argument ptr nonnull dereferenceable(40) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(1419:3): move argument ptr nonnull dereferenceable(40) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r12, %rsi
	callq _ZNSt10filesystem7__cxx114pathaSEOS1_
	# SetupCalls(1419:3): move ptr result from %rax
	movq %rax, %rbx
	# SetupCalls(1420:3): move argument ptr nonnull dereferenceable(40) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	callq _ZNSt10filesystem7__cxx114pathD2Ev
	movq %rbx, %rax
	movq -64(%rbp), %r12
	movq -72(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt11char_traitsIcE7compareEPKcS2_m
.p2align 4, 0x90
_ZNSt11char_traitsIcE7compareEPKcS2_m:
	.___ZNSt11char_traitsIcE7compareEPKcS2_m__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(64 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -48(%rbp)
	movq %r12, -40(%rbp)
	# LowerAlloca(2858:3): size = 4, type = i32*, var = ^4
	leaq -4(%rbp), %r12
	# LowerAlloca(2859:3): size = 8, type = ptr*, var = ^5
	leaq -16(%rbp), %r8
	# LowerAlloca(2860:3): size = 8, type = ptr*, var = ^6
	leaq -24(%rbp), %rbx
	# LowerAlloca(2861:3): size = 8, type = i64*, var = ^7
	leaq -32(%rbp), %rcx
	# LowerStore(2862:3).9: mov ptr %rdi, (^5)
	movq %rdi, (%r8)
	# LowerStore(2863:3).9: mov ptr %rsi, (^6)
	movq %rsi, (%rbx)
	# LowerStore(2864:3).9: mov i64 %rdx, (^7)
	movq %rdx, (%rcx)
	# LowerLoad(2865:3).2: (^7) into i64 ^8
	movq (%rcx), %rax
	# LowerIcmp(2866:3): i64 ^8 vs. intlike 0
	cmpq $0, %rax
	sete %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt11char_traitsIcE7compareEPKcS2_m__M21
	jmp .___ZNSt11char_traitsIcE7compareEPKcS2_m__M24
	.___ZNSt11char_traitsIcE7compareEPKcS2_m__M21:
	# LowerStore(2870:3).3: mov $imm, (^4)
	movl $0, (%r12)
	jmp .___ZNSt11char_traitsIcE7compareEPKcS2_m__M60
	.___ZNSt11char_traitsIcE7compareEPKcS2_m__M24:
	# LowerLoad(2874:3).2: (^5) into ptr ^12
	movq (%r8), %rax
	# LowerLoad(2875:3).2: (^6) into ptr ^13
	movq (%rbx), %rdx
	# LowerLoad(2876:3).2: (^7) into i64 ^14
	movq (%rcx), %rbx
	# SetupCalls(2877:3): move argument ptr ^12
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(2877:3): move argument ptr ^13
	# Fixed movzx with identical source and destination widths
	movq %rdx, %rsi
	# SetupCalls(2877:3): move argument i64 ^14
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdx
	callq memcmp@PLT
	# SetupCalls(2877:3): move i32 result from %rax
	movl %eax, %ebx
	# LowerStore(2878:3).9: mov i32 ^15, (^4)
	movl %ebx, (%r12)
	.___ZNSt11char_traitsIcE7compareEPKcS2_m__M60:
	# LowerLoad(2882:3).2: (^4) into i32 ^17
	movl (%r12), %eax
	movq -40(%rbp), %r12
	movq -48(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt16initializer_listISt17basic_string_viewIcSt11char_traitsIcEEE3endEv
.p2align 4, 0x90
_ZNKSt16initializer_listISt17basic_string_viewIcSt11char_traitsIcEEE3endEv:
	.___ZNKSt16initializer_listISt17basic_string_viewIcSt11char_traitsIcEEE3endEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	movq %r12, -24(%rbp)
	# LowerAlloca(4814:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(4815:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(4816:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# SetupCalls(4817:3): move argument ptr nonnull dereferenceable(16) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNKSt16initializer_listISt17basic_string_viewIcSt11char_traitsIcEEE5beginEv
	# SetupCalls(4817:3): move ptr result from %rax
	movq %rax, %r12
	# SetupCalls(4818:3): move argument ptr nonnull dereferenceable(16) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNKSt16initializer_listISt17basic_string_viewIcSt11char_traitsIcEEE4sizeEv
	# SetupCalls(4818:3): move i64 result from %rax
	movq %rax, %rbx
	# tt = Pointer, type = %"class.std::basic_string_view"
	# LowerGetelementptr(4819:3): pointer-type -> ^6
	movq %rbx, %rax
	shlq $4, %rax
	addq %r12, %rax
	movq -24(%rbp), %r12
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _Z5splitSt17basic_string_viewIcSt11char_traitsIcEES2_b
.p2align 4, 0x90
_Z5splitSt17basic_string_viewIcSt11char_traitsIcEES2_b:
	.___Z5splitSt17basic_string_viewIcSt11char_traitsIcEES2_b__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(728 + 0, 16)
	subq $736, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -344(%rbp)
	movq %r12, -336(%rbp)
	movq %r13, -384(%rbp)
	movq %r14, -392(%rbp)
	movq %r15, -320(%rbp)
	# LowerAlloca(797:3): size = 8, type = ptr*, var = ^7
	# Fixing source-to-dest leaq -8(%rbp), -304(%rbp)
	leaq -8(%rbp), %r15
	movq %r15, -304(%rbp)
	# LowerAlloca(798:3): size = 8, type = ptr*, var = ^8
	# Fixing source-to-dest leaq -16(%rbp), -280(%rbp)
	leaq -16(%rbp), %r15
	movq %r15, -280(%rbp)
	# LowerAlloca(799:3): size = 8, type = ptr*, var = ^9
	leaq -24(%rbp), %r12
	# LowerAlloca(800:3): size = 8, type = ptr*, var = ^10
	leaq -32(%rbp), %rbx
	# LowerAlloca(801:3): size = 16, type = %"class.std::basic_string_view"*, var = ^11
	# Fixing source-to-dest leaq -48(%rbp), -208(%rbp)
	leaq -48(%rbp), %r15
	movq %r15, -208(%rbp)
	# LowerAlloca(802:3): size = 16, type = %"class.std::basic_string_view"*, var = ^12
	# Fixing source-to-dest leaq -64(%rbp), -216(%rbp)
	leaq -64(%rbp), %r15
	movq %r15, -216(%rbp)
	# LowerAlloca(803:3): size = 1, type = i8*, var = ^13
	# Fixing source-to-dest leaq -65(%rbp), -224(%rbp)
	leaq -65(%rbp), %r15
	movq %r15, -224(%rbp)
	# LowerAlloca(804:3): size = 8, type = i64*, var = ^14
	# Fixing source-to-dest leaq -80(%rbp), -232(%rbp)
	leaq -80(%rbp), %r15
	movq %r15, -232(%rbp)
	# LowerAlloca(805:3): size = 16, type = %"class.std::basic_string_view"*, var = ^15
	leaq -96(%rbp), %r13
	# LowerAlloca(806:3): size = 16, type = %"class.std::initializer_list"*, var = ^16
	leaq -112(%rbp), %r14
	# LowerAlloca(807:3): size = 16, type = [1 x %"class.std::basic_string_view"]*, var = ^17
	leaq -128(%rbp), %r15
	# LowerAlloca(808:3): size = 1, type = %"class.std::allocator"*, var = ^18
	# Fixing source-to-dest leaq -129(%rbp), -296(%rbp)
	pushq %r15
	leaq -129(%rbp), %r15
	movq %r15, -296(%rbp)
	popq %r15
	# LowerAlloca(809:3): size = 1, type = i1*, var = ^19
	# Fixing source-to-dest leaq -130(%rbp), -240(%rbp)
	pushq %r15
	leaq -130(%rbp), %r15
	movq %r15, -240(%rbp)
	popq %r15
	# LowerAlloca(810:3): size = 8, type = i64*, var = ^20
	# Fixing source-to-dest leaq -144(%rbp), -248(%rbp)
	pushq %r15
	leaq -144(%rbp), %r15
	movq %r15, -248(%rbp)
	popq %r15
	# LowerAlloca(811:3): size = 8, type = i64*, var = ^21
	# Fixing source-to-dest leaq -152(%rbp), -256(%rbp)
	pushq %r15
	leaq -152(%rbp), %r15
	movq %r15, -256(%rbp)
	popq %r15
	# LowerAlloca(812:3): size = 16, type = %"class.std::basic_string_view"*, var = ^22
	# Fixing source-to-dest leaq -168(%rbp), -288(%rbp)
	pushq %r15
	leaq -168(%rbp), %r15
	movq %r15, -288(%rbp)
	popq %r15
	# LowerAlloca(813:3): size = 16, type = %"class.std::basic_string_view"*, var = ^23
	# Fixing source-to-dest leaq -184(%rbp), -264(%rbp)
	pushq %r15
	leaq -184(%rbp), %r15
	movq %r15, -264(%rbp)
	popq %r15
	# LowerAlloca(814:3): size = 16, type = %"class.std::basic_string_view"*, var = ^24
	# Fixing source-to-dest leaq -200(%rbp), -272(%rbp)
	pushq %r15
	leaq -200(%rbp), %r15
	movq %r15, -272(%rbp)
	popq %r15
	# LowerStore(815:3).9: mov ptr %rdi, (^10)
	movq %rdi, (%rbx)
	# tt = Pointer, type = {i64, ptr}
	# LowerGetelementptr(816:3): struct-type: ptr ^11 -> ^25, indices=0,0
	movq -208(%rbp), %rax
	# LowerGetelementptr(816:3): type of ^25 is i64*
	# LowerStore(817:3).9: mov i64 %rsi, (^25)
	movq %rsi, (%rax)
	# tt = Pointer, type = {i64, ptr}
	# LowerGetelementptr(818:3): struct-type: ptr ^11 -> ^26, indices=0,1
	movq -208(%rbp), %rax
	addq $8, %rax
	# LowerGetelementptr(818:3): type of ^26 is ptr*
	# LowerStore(819:3).9: mov ptr %rdx, (^26)
	movq %rdx, (%rax)
	# tt = Pointer, type = {i64, ptr}
	# LowerGetelementptr(820:3): struct-type: ptr ^12 -> ^27, indices=0,0
	movq -216(%rbp), %rax
	# LowerGetelementptr(820:3): type of ^27 is i64*
	# LowerStore(821:3).9: mov i64 %rcx, (^27)
	movq %rcx, (%rax)
	# tt = Pointer, type = {i64, ptr}
	# LowerGetelementptr(822:3): struct-type: ptr ^12 -> ^28, indices=0,1
	movq -216(%rbp), %rax
	addq $8, %rax
	# LowerGetelementptr(822:3): type of ^28 is ptr*
	# LowerStore(823:3).9: mov ptr %r8, (^28)
	movq %r8, (%rax)
	# LowerBasicConversion(824:3): i1 %r9b -> i8 ^29
	movq -224(%rbp), %rax
	movb %r9b, (%rax)
	# LowerStore(825:3).9: mov i8 ^29, (^13)
	# Clobber %rdi
	movq %rdi, -312(%rbp)
	# SetupCalls(826:3): move argument ptr nonnull dereferenceable(16) align 8 ^11
	# Fixed movzx with identical source and destination widths
	movq -208(%rbp), %rdi
	callq _ZNKSt17basic_string_viewIcSt11char_traitsIcEE5emptyEv
	# SetupCalls(826:3): move i1 result from %rax
	movb %al, %bl
	# Unclobber %rdi, live inside %rdi:0
	movq -312(%rbp), %rdi
	cmpb $0, %bl
	jne .___Z5splitSt17basic_string_viewIcSt11char_traitsIcEES2_b__M93
	jmp .___Z5splitSt17basic_string_viewIcSt11char_traitsIcEES2_b__M140
	.___Z5splitSt17basic_string_viewIcSt11char_traitsIcEES2_b__M93:
	# Clobber %rdi
	movq %rdi, -312(%rbp)
	# SetupCalls(830:3): move argument ptr align 8 %rdi
	# Semiunclobber live %rdi into %rdi
	movq -312(%rbp), %rdi
	# SetupCalls(830:3): move argument i32 0
	movq $0, %rsi
	# SetupCalls(830:3): move argument i64 24
	movq $24, %rdx
	callq memset@PLT
	# Unclobber %rdi, live inside %rdi:0
	movq -312(%rbp), %rdi
	# SetupCalls(831:3): move argument ptr nonnull dereferenceable(24) align 8 %rdi
	# Semiunclobber non-live %rdi into %rdi
	movq %rdi, %rdi
	callq _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEC2Ev
	jmp .___Z5splitSt17basic_string_viewIcSt11char_traitsIcEES2_b__M699
	.___Z5splitSt17basic_string_viewIcSt11char_traitsIcEES2_b__M140:
	# Clobber %rdi
	movq %rdi, -312(%rbp)
	# SetupCalls(835:3): move argument ptr align 8 ^15
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	# SetupCalls(835:3): move argument ptr align 8 ^12
	# Fixed movzx with identical source and destination widths
	movq -216(%rbp), %rsi
	# SetupCalls(835:3): move argument i64 16
	movq $16, %rdx
	callq memcpy@PLT
	# Unclobber %rdi, live inside %rdi:0
	movq -312(%rbp), %rdi
	# tt = Pointer, type = {i64, ptr}
	# LowerGetelementptr(836:3): struct-type: ptr ^15 -> ^33, indices=0,0
	movq %r13, %rax
	# LowerGetelementptr(836:3): type of ^33 is i64*
	# LowerLoad(837:3).2: (^33) into i64 ^34
	movq (%rax), %rbx
	# tt = Pointer, type = {i64, ptr}
	# LowerGetelementptr(838:3): struct-type: ptr ^15 -> ^35, indices=0,1
	movq %r13, %rax
	addq $8, %rax
	# LowerGetelementptr(838:3): type of ^35 is ptr*
	# LowerLoad(839:3).2: (^35) into ptr ^36
	movq (%rax), %rcx
	# Clobber %rdi
	movq %rdi, -312(%rbp)
	# SetupCalls(840:3): move argument ptr nonnull dereferenceable(16) align 8 ^11
	# Fixed movzx with identical source and destination widths
	movq -208(%rbp), %rdi
	# SetupCalls(840:3): move argument i64 ^34
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(840:3): move argument ptr ^36
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdx
	# SetupCalls(840:3): move argument i64 0
	movq $0, %rcx
	callq _ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findES2_m
	# SetupCalls(840:3): move i64 result from %rax
	movq %rax, %rbx
	# Unclobber %rdi, live inside %rdi:0
	movq -312(%rbp), %rdi
	# LowerStore(841:3).9: mov i64 ^37, (^14)
	movq -232(%rbp), %rax
	movq %rbx, (%rax)
	# LowerLoad(842:3).2: (^14) into i64 ^38
	movq -232(%rbp), %rbx
	movq (%rbx), %rax
	# LowerIcmp(843:3): i64 ^38 vs. intlike -1
	cmpq $-1, %rax
	sete %al
	andq $1, %rax
	cmpb $0, %al
	jne .___Z5splitSt17basic_string_viewIcSt11char_traitsIcEES2_b__M216
	jmp .___Z5splitSt17basic_string_viewIcSt11char_traitsIcEES2_b__M336
	.___Z5splitSt17basic_string_viewIcSt11char_traitsIcEES2_b__M216:
	# tt = Pointer, type = [1 x %"class.std::basic_string_view"]
	# LowerGetelementptr(847:3): struct-type: ptr ^17 -> ^41, indices=0,0
	movq %r15, %rax
	# LowerGetelementptr(847:3): type of ^41 is %"class.std::basic_string_view"*
	# Clobber %rdi
	movq %rdi, -312(%rbp)
	# SetupCalls(848:3): move argument ptr align 8 ^41
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(848:3): move argument ptr align 8 ^11
	# Fixed movzx with identical source and destination widths
	movq -208(%rbp), %rsi
	# SetupCalls(848:3): move argument i64 16
	movq $16, %rdx
	callq memcpy@PLT
	# Unclobber %rdi, live inside %rdi:0
	movq -312(%rbp), %rdi
	# tt = Pointer, type = %"class.std::initializer_list"
	# LowerGetelementptr(849:3): struct-type: ptr ^16 -> ^42, indices=0,0
	movq %r14, %rax
	# LowerGetelementptr(849:3): type of ^42 is ptr*
	# tt = Pointer, type = [1 x %"class.std::basic_string_view"]
	# LowerGetelementptr(850:3): struct-type: ptr ^17 -> ^43, indices=0,0
	movq %r15, (%rax)
	# LowerGetelementptr(850:3): type of ^43 is %"class.std::basic_string_view"*
	# LowerStore(851:3).9: mov [1 x %"class.std::basic_string_view"]* ^43, (^42)
	# tt = Pointer, type = %"class.std::initializer_list"
	# LowerGetelementptr(852:3): struct-type: ptr ^16 -> ^44, indices=0,1
	movq %r14, %rax
	addq $8, %rax
	# LowerGetelementptr(852:3): type of ^44 is i64*
	# LowerStore(853:3).3: mov $imm, (^44)
	movq $1, (%rax)
	# LowerStore(854:3).9: mov %"class.std::allocator"* ^18, (^9)
	# Fixing source-to-dest movq -296(%rbp), (%r12)
	movq -296(%rbp), %r15
	movq %r15, (%r12)
	# LowerLoad(855:3).2: (^9) into ptr ^45
	movq -304(%rbp), %rax
	# Fixing source-to-dest movq (%r12), (%rax)
	movq (%r12), %r15
	movq %r15, (%rax)
	# LowerStore(856:3).9: mov ptr ^45, (^7)
	# LowerLoad(857:3).2: (^7) into ptr ^46
	movq -304(%rbp), %rbx
	movq (%rbx), %rax
	# tt = Pointer, type = {ptr, i64}
	# LowerGetelementptr(858:3): struct-type: ptr ^16 -> ^47, indices=0,0
	movq %r14, %rax
	# LowerGetelementptr(858:3): type of ^47 is ptr*
	# LowerLoad(859:3).2: (^47) into ptr ^48
	movq (%rax), %rcx
	# tt = Pointer, type = {ptr, i64}
	# LowerGetelementptr(860:3): struct-type: ptr ^16 -> ^49, indices=0,1
	movq %r14, %rax
	addq $8, %rax
	# LowerGetelementptr(860:3): type of ^49 is i64*
	# LowerLoad(861:3).2: (^49) into i64 ^50
	movq (%rax), %rbx
	# SetupCalls(862:3): move argument ptr nonnull dereferenceable(24) align 8 %rdi
	# Semiunclobber non-live %rdi into %rdi
	movq %rdi, %rdi
	# SetupCalls(862:3): move argument ptr ^48
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(862:3): move argument i64 ^50
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdx
	# SetupCalls(862:3): move argument ptr nonnull dereferenceable(1) align 1 ^18
	# Fixed movzx with identical source and destination widths
	movq -296(%rbp), %rcx
	callq _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEC2ESt16initializer_listIS3_ERKS4_
	# LowerStore(863:3).9: mov %"class.std::allocator"* ^18, (^8)
	movq -280(%rbp), %rax
	# Fixing source-to-dest movq -296(%rbp), (%rax)
	movq -296(%rbp), %r15
	movq %r15, (%rax)
	# LowerLoad(864:3).2: (^8) into ptr ^51
	movq -280(%rbp), %rbx
	movq (%rbx), %rax
	# SetupCalls(865:3): move argument ptr nonnull dereferenceable(1) align 1 ^51
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt15__new_allocatorISt17basic_string_viewIcSt11char_traitsIcEEED2Ev
	jmp .___Z5splitSt17basic_string_viewIcSt11char_traitsIcEES2_b__M699
	.___Z5splitSt17basic_string_viewIcSt11char_traitsIcEES2_b__M336:
	# LowerStore(869:3).3: mov $imm, (^19)
	movq -240(%rbp), %rax
	movb $0, (%rax)
	# Clobber %rdi
	movq %rdi, -312(%rbp)
	# SetupCalls(870:3): move argument ptr nonnull dereferenceable(24) align 8 %rdi
	# Semiunclobber live %rdi into %rdi
	movq -312(%rbp), %rdi
	callq _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEC2Ev
	# Unclobber %rdi, live inside %rdi:0
	movq -312(%rbp), %rdi
	# Clobber %rdi
	movq %rdi, -312(%rbp)
	# SetupCalls(871:3): move argument ptr nonnull dereferenceable(16) align 8 ^12
	# Fixed movzx with identical source and destination widths
	movq -216(%rbp), %rdi
	callq _ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv
	# SetupCalls(871:3): move i64 result from %rax
	movq %rax, %rbx
	# Unclobber %rdi, live inside %rdi:0
	movq -312(%rbp), %rdi
	# LowerStore(872:3).9: mov i64 ^53, (^20)
	movq -248(%rbp), %rax
	movq %rbx, (%rax)
	# LowerStore(873:3).3: mov $imm, (^21)
	movq -256(%rbp), %rax
	movq $0, (%rax)
	# LowerLoad(874:3).2: (^14) into i64 ^54
	movq -232(%rbp), %rax
	movq (%rax), %rbx
	# Clobber %rdi
	movq %rdi, -312(%rbp)
	# SetupCalls(875:3): move argument ptr nonnull dereferenceable(16) align 8 ^11
	# Fixed movzx with identical source and destination widths
	movq -208(%rbp), %rdi
	# SetupCalls(875:3): move argument i64 0
	movq $0, %rsi
	# SetupCalls(875:3): move argument i64 ^54
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdx
	callq _ZNKSt17basic_string_viewIcSt11char_traitsIcEE6substrEmm
	# SetupCalls(875:3): move 128-bit result from %rax and %rdx
	# Multireg move: <%hax %hdx> -> <%hbx %hr12>
	movq %rax, %rbx
	movq %rdx, %r12
	# Unclobber %rdi, live inside %rdi:0
	movq -312(%rbp), %rdi
	# tt = Pointer, type = {i64, ptr}
	# LowerGetelementptr(876:3): struct-type: ptr ^22 -> ^56, indices=0,0
	movq -288(%rbp), %rax
	# LowerGetelementptr(876:3): type of ^56 is i64*
	# LowerExtractvalue(878:3)
	# PaddedStructs({i64, ptr} -> i64): move from pack ^55 ({i64, ptr}) to ^99 (opaque), index = 0
	movq %rbx, %rdx
	movq %rdx, %rcx
	# LowerStore(878:3).9: mov i64 ^57, (^56)
	movq %rcx, (%rax)
	# tt = Pointer, type = {i64, ptr}
	# LowerGetelementptr(879:3): struct-type: ptr ^22 -> ^58, indices=0,1
	movq -288(%rbp), %rax
	addq $8, %rax
	# LowerGetelementptr(879:3): type of ^58 is ptr*
	# LowerExtractvalue(881:3)
	# PaddedStructs({i64, ptr} -> ptr): move from pack ^55 ({i64, ptr}) to ^100 (opaque), index = 1
	movq %r12, %rcx
	movq %rcx, %rbx
	# LowerStore(881:3).9: mov ptr ^59, (^58)
	movq %rbx, (%rax)
	# Clobber %rdi
	movq %rdi, -312(%rbp)
	# SetupCalls(882:3): move argument ptr nonnull dereferenceable(24) align 8 %rdi
	# Semiunclobber live %rdi into %rdi
	movq -312(%rbp), %rdi
	# SetupCalls(882:3): move argument ptr nonnull dereferenceable(16) align 8 ^22
	# Fixed movzx with identical source and destination widths
	movq -288(%rbp), %rsi
	callq _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE9push_backEOS3_
	# Unclobber %rdi, live inside %rdi:0
	movq -312(%rbp), %rdi
	.___Z5splitSt17basic_string_viewIcSt11char_traitsIcEES2_b__M460:
	# LowerLoad(886:3).2: (^14) into i64 ^61
	movq -232(%rbp), %rax
	movq (%rax), %rbx
	# LowerIcmp(887:3): i64 ^61 vs. intlike -1
	cmpq $-1, %rbx
	setne %al
	andq $1, %rax
	cmpb $0, %al
	jne .___Z5splitSt17basic_string_viewIcSt11char_traitsIcEES2_b__M467
	jmp .___Z5splitSt17basic_string_viewIcSt11char_traitsIcEES2_b__M671
	.___Z5splitSt17basic_string_viewIcSt11char_traitsIcEES2_b__M467:
	# LowerLoad(891:3).2: (^14) into i64 ^64
	movq -232(%rbp), %rax
	movq -256(%rbp), %rbx
	# Fixing source-to-dest movq (%rax), (%rbx)
	movq (%rax), %r15
	movq %r15, (%rbx)
	# LowerStore(892:3).9: mov i64 ^64, (^21)
	# Clobber %rdi
	movq %rdi, -312(%rbp)
	# SetupCalls(893:3): move argument ptr align 8 ^23
	# Fixed movzx with identical source and destination widths
	movq -264(%rbp), %rdi
	# SetupCalls(893:3): move argument ptr align 8 ^12
	# Fixed movzx with identical source and destination widths
	movq -216(%rbp), %rsi
	# SetupCalls(893:3): move argument i64 16
	movq $16, %rdx
	callq memcpy@PLT
	# Unclobber %rdi, live inside %rdi:0
	movq -312(%rbp), %rdi
	# LowerLoad(894:3).2: (^21) into i64 ^65
	movq -256(%rbp), %rax
	movq (%rax), %rcx
	# LowerLoad(895:3).2: (^20) into i64 ^66
	movq -248(%rbp), %rax
	movq (%rax), %rbx
	# LowerMath(896:3): ^65, ^66 into i64 ^67
	movq %rcx, %rax
	addq %rbx, %rax
	# tt = Pointer, type = {i64, ptr}
	# LowerGetelementptr(897:3): struct-type: ptr ^23 -> ^68, indices=0,0
	movq -264(%rbp), %rbx
	# LowerGetelementptr(897:3): type of ^68 is i64*
	# LowerLoad(898:3).2: (^68) into i64 ^69
	movq (%rbx), %rcx
	# tt = Pointer, type = {i64, ptr}
	# LowerGetelementptr(899:3): struct-type: ptr ^23 -> ^70, indices=0,1
	movq -264(%rbp), %rbx
	addq $8, %rbx
	# LowerGetelementptr(899:3): type of ^70 is ptr*
	# LowerLoad(900:3).2: (^70) into ptr ^71
	movq (%rbx), %r8
	# Clobber %rdi
	movq %rdi, -312(%rbp)
	# SetupCalls(901:3): move argument ptr nonnull dereferenceable(16) align 8 ^11
	# Fixed movzx with identical source and destination widths
	movq -208(%rbp), %rdi
	# SetupCalls(901:3): move argument i64 ^69
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(901:3): move argument ptr ^71
	# Fixed movzx with identical source and destination widths
	movq %r8, %rdx
	# SetupCalls(901:3): move argument i64 ^67
	# Fixed movzx with identical source and destination widths
	movq %rax, %rcx
	callq _ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findES2_m
	# SetupCalls(901:3): move i64 result from %rax
	movq %rax, %rbx
	# Unclobber %rdi, live inside %rdi:0
	movq -312(%rbp), %rdi
	# LowerStore(902:3).9: mov i64 ^72, (^14)
	movq -232(%rbp), %rax
	movq %rbx, (%rax)
	# LowerLoad(903:3).2: (^21) into i64 ^73
	movq -256(%rbp), %rbx
	movq (%rbx), %rax
	# LowerLoad(904:3).2: (^20) into i64 ^74
	movq -248(%rbp), %rcx
	movq (%rcx), %rbx
	# LowerMath(905:3): ^73, ^74 into i64 ^75
	movq %rax, %rcx
	addq %rbx, %rcx
	# LowerLoad(906:3).2: (^14) into i64 ^76
	movq -232(%rbp), %rax
	movq (%rax), %rbx
	# LowerLoad(907:3).2: (^21) into i64 ^77
	movq -256(%rbp), %rdx
	movq (%rdx), %rax
	# LowerMath(908:3): ^76, ^77 into i64 ^78
	movq %rbx, %rdx
	subq %rax, %rdx
	# LowerLoad(909:3).2: (^20) into i64 ^79
	movq -248(%rbp), %rbx
	movq (%rbx), %rax
	# LowerMath(910:3): ^78, ^79 into i64 ^80
	movq %rdx, %rbx
	subq %rax, %rbx
	# Clobber %rdi
	movq %rdi, -312(%rbp)
	# SetupCalls(911:3): move argument ptr nonnull dereferenceable(16) align 8 ^11
	# Fixed movzx with identical source and destination widths
	movq -208(%rbp), %rdi
	# SetupCalls(911:3): move argument i64 ^75
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(911:3): move argument i64 ^80
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdx
	callq _ZNKSt17basic_string_viewIcSt11char_traitsIcEE6substrEmm
	# SetupCalls(911:3): move 128-bit result from %rax and %rdx
	# Multireg move: <%hax %hdx> -> <%hr12 %hr13>
	movq %rax, %r12
	movq %rdx, %r13
	# Unclobber %rdi, live inside %rdi:0
	movq -312(%rbp), %rdi
	# tt = Pointer, type = {i64, ptr}
	# LowerGetelementptr(912:3): struct-type: ptr ^24 -> ^82, indices=0,0
	movq -272(%rbp), %rbx
	# LowerGetelementptr(912:3): type of ^82 is i64*
	# LowerExtractvalue(914:3)
	# PaddedStructs({i64, ptr} -> i64): move from pack ^81 ({i64, ptr}) to ^101 (opaque), index = 0
	movq %r12, %rcx
	movq %rcx, %rax
	# LowerStore(914:3).9: mov i64 ^83, (^82)
	movq %rax, (%rbx)
	# tt = Pointer, type = {i64, ptr}
	# LowerGetelementptr(915:3): struct-type: ptr ^24 -> ^84, indices=0,1
	movq -272(%rbp), %rax
	addq $8, %rax
	# LowerGetelementptr(915:3): type of ^84 is ptr*
	# LowerExtractvalue(917:3)
	# PaddedStructs({i64, ptr} -> ptr): move from pack ^81 ({i64, ptr}) to ^102 (opaque), index = 1
	movq %r13, %rcx
	movq %rcx, %rbx
	# LowerStore(917:3).9: mov ptr ^85, (^84)
	movq %rbx, (%rax)
	# Clobber %rdi
	movq %rdi, -312(%rbp)
	# SetupCalls(918:3): move argument ptr nonnull dereferenceable(16) align 8 ^24
	# Fixed movzx with identical source and destination widths
	movq -272(%rbp), %rdi
	callq _ZNKSt17basic_string_viewIcSt11char_traitsIcEE5emptyEv
	# SetupCalls(918:3): move i1 result from %rax
	movb %al, %bl
	# Unclobber %rdi, live inside %rdi:0
	movq -312(%rbp), %rdi
	cmpb $0, %bl
	jne .___Z5splitSt17basic_string_viewIcSt11char_traitsIcEES2_b__M639
	jmp .___Z5splitSt17basic_string_viewIcSt11char_traitsIcEES2_b__M646
	.___Z5splitSt17basic_string_viewIcSt11char_traitsIcEES2_b__M639:
	# LowerLoad(922:3).2: (^13) into i8 ^88
	movq -224(%rbp), %rbx
	movb (%rbx), %al
	# LowerTrunc(923:3): 8 to 1, move
	# LowerTrunc(923:3): 8 to 1, apply mask
	andq $1, %rax
	cmpb $0, %al
	jne .___Z5splitSt17basic_string_viewIcSt11char_traitsIcEES2_b__M670
	.___Z5splitSt17basic_string_viewIcSt11char_traitsIcEES2_b__M646:
	# Clobber %rdi
	movq %rdi, -312(%rbp)
	# SetupCalls(927:3): move argument ptr nonnull dereferenceable(24) align 8 %rdi
	# Semiunclobber live %rdi into %rdi
	movq -312(%rbp), %rdi
	# SetupCalls(927:3): move argument ptr nonnull dereferenceable(16) align 8 ^24
	# Fixed movzx with identical source and destination widths
	movq -272(%rbp), %rsi
	callq _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE9push_backERKS3_
	# Unclobber %rdi, live inside %rdi:0
	movq -312(%rbp), %rdi
	.___Z5splitSt17basic_string_viewIcSt11char_traitsIcEES2_b__M670:
	jmp .___Z5splitSt17basic_string_viewIcSt11char_traitsIcEES2_b__M460
	.___Z5splitSt17basic_string_viewIcSt11char_traitsIcEES2_b__M671:
	# LowerStore(934:3).3: mov $imm, (^19)
	movq -240(%rbp), %rax
	movb $1, (%rax)
	# LowerLoad(935:3).2: (^19) into i1 ^93
	movq -240(%rbp), %rbx
	movb (%rbx), %al
	cmpb $0, %al
	jne .___Z5splitSt17basic_string_viewIcSt11char_traitsIcEES2_b__M698
	.___Z5splitSt17basic_string_viewIcSt11char_traitsIcEES2_b__M676:
	# SetupCalls(939:3): move argument ptr nonnull dereferenceable(24) align 8 %rdi
	# Semiunclobber non-live %rdi into %rdi
	movq %rdi, %rdi
	callq _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EED2Ev
	.___Z5splitSt17basic_string_viewIcSt11char_traitsIcEES2_b__M698:
	.___Z5splitSt17basic_string_viewIcSt11char_traitsIcEES2_b__M699:
	movq -320(%rbp), %r15
	movq -392(%rbp), %r14
	movq -384(%rbp), %r13
	movq -336(%rbp), %r12
	movq -344(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEEclERKSI_
.p2align 4, 0x90
_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEEclERKSI_:
	.___ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEEclERKSI___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(9245:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %rbx
	# LowerAlloca(9246:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %rcx
	# LowerStore(9247:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rbx)
	# LowerStore(9248:3).9: mov ptr %rsi, (^4)
	movq %rsi, (%rcx)
	# LowerLoad(9249:3).2: (^3) into ptr ^5
	movq (%rbx), %rax
	# LowerLoad(9250:3).2: (^4) into ptr ^6
	movq (%rcx), %rax
	# tt = Pointer, type = %"struct.std::pair"
	# LowerGetelementptr(9251:3): struct-type: ptr ^6 -> ^7, indices=0,0
	# LowerGetelementptr(9251:3): type of ^7 is %"class.std::__cxx11::basic_string"*
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE19_M_range_initializeIPKS3_EEvT_S9_St20forward_iterator_tag
.p2align 4, 0x90
_ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE19_M_range_initializeIPKS3_EEvT_S9_St20forward_iterator_tag:
	.___ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE19_M_range_initializeIPKS3_EEvT_S9_St20forward_iterator_tag__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(240 + 0, 16)
	subq $240, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -96(%rbp)
	movq %r12, -112(%rbp)
	movq %r13, -120(%rbp)
	movq %r14, -104(%rbp)
	movq %r15, -128(%rbp)
	# LowerAlloca(4744:3): size = 8, type = ptr*, var = ^4
	leaq -8(%rbp), %r9
	# LowerAlloca(4745:3): size = 8, type = ptr*, var = ^5
	leaq -16(%rbp), %r8
	# LowerAlloca(4746:3): size = 8, type = ptr*, var = ^6
	leaq -24(%rbp), %rbx
	# LowerAlloca(4747:3): size = 8, type = ptr*, var = ^7
	leaq -32(%rbp), %rcx
	# LowerAlloca(4748:3): size = 8, type = ptr*, var = ^8
	leaq -40(%rbp), %rax
	# LowerAlloca(4749:3): size = 1, type = %"struct.std::forward_iterator_tag"*, var = ^9
	leaq -41(%rbp), %r10
	# LowerAlloca(4750:3): size = 8, type = ptr*, var = ^10
	leaq -56(%rbp), %r10
	# LowerAlloca(4751:3): size = 8, type = ptr*, var = ^11
	leaq -64(%rbp), %r14
	# LowerAlloca(4752:3): size = 8, type = ptr*, var = ^12
	leaq -72(%rbp), %r12
	# LowerAlloca(4753:3): size = 8, type = i64*, var = ^13
	leaq -80(%rbp), %r13
	# LowerStore(4754:3).9: mov ptr %rdi, (^10)
	movq %rdi, (%r10)
	# LowerStore(4755:3).9: mov ptr %rsi, (^11)
	movq %rsi, (%r14)
	# LowerStore(4756:3).9: mov ptr %rdx, (^12)
	movq %rdx, (%r12)
	# LowerLoad(4757:3).2: (^10) into ptr ^14
	# Fixing source-to-dest movq (%r10), -88(%rbp)
	movq (%r10), %r15
	movq %r15, -88(%rbp)
	# LowerLoad(4758:3).2: (^11) into ptr ^15
	movq (%r14), %rdx
	# LowerLoad(4759:3).2: (^12) into ptr ^16
	movq (%r12), %rsi
	# LowerStore(4760:3).9: mov ptr ^15, (^7)
	movq %rdx, (%rcx)
	# LowerStore(4761:3).9: mov ptr ^16, (^8)
	movq %rsi, (%rax)
	# LowerLoad(4762:3).2: (^7) into ptr ^17
	movq (%rcx), %rdx
	# LowerLoad(4763:3).2: (^8) into ptr ^18
	movq (%rax), %rsi
	# LowerStore(4764:3).9: mov ptr* ^7, (^4)
	movq %rcx, (%r9)
	# LowerStore(4765:3).9: mov ptr ^17, (^5)
	movq %rdx, (%r8)
	# LowerStore(4766:3).9: mov ptr ^18, (^6)
	movq %rsi, (%rbx)
	# LowerLoad(4767:3).2: (^6) into ptr ^19
	movq (%rbx), %rax
	# LowerLoad(4768:3).2: (^5) into ptr ^20
	movq (%r8), %rcx
	# LowerBasicConversion(4769:3): ptr ^19 -> i64 ^21
	movq %rax, %rbx
	# LowerBasicConversion(4770:3): ptr ^20 -> i64 ^22
	movq %rcx, %rax
	# LowerMath(4771:3): ^21, ^22 into i64 ^23
	movq %rbx, %rcx
	subq %rax, %rcx
	# LowerSdiv(4772:3): ^23, 16 into i64 ^24
	movq %rcx, %rbx
	movq $0, %rdx
	movq %rbx, %rax
	movq $16, %rbx
	idivq %rbx
	movq %rax, (%r13)
	# LowerStore(4773:3).9: mov i64 ^24, (^13)
	# LowerLoad(4774:3).2: (^13) into i64 ^25
	movq (%r13), %r15
	# SetupCalls(4775:3): move argument ptr nonnull dereferenceable(24) align 8 ^14
	# Fixed movzx with identical source and destination widths
	movq -88(%rbp), %rdi
	callq _ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE19_M_get_Tp_allocatorEv
	# SetupCalls(4775:3): move ptr result from %rax
	movq %rax, %rbx
	# SetupCalls(4776:3): move argument i64 ^25
	# Fixed movzx with identical source and destination widths
	movq %r15, %rdi
	# SetupCalls(4776:3): move argument ptr nonnull dereferenceable(1) align 1 ^26
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE17_S_check_init_lenEmRKS4_
	# SetupCalls(4776:3): move i64 result from %rax
	movq %rax, %rbx
	# SetupCalls(4777:3): move argument ptr nonnull dereferenceable(24) align 8 ^14
	# Fixed movzx with identical source and destination widths
	movq -88(%rbp), %rdi
	# SetupCalls(4777:3): move argument i64 ^27
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE11_M_allocateEm
	# SetupCalls(4777:3): move ptr result from %rax
	movq %rax, %rbx
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(4778:3): struct-type: ptr ^14 -> ^29, indices=0,0
	movq -88(%rbp), %rax
	# LowerGetelementptr(4778:3): type of ^29 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(4779:3): struct-type: ptr ^29 -> ^30, indices=0,0
	# LowerGetelementptr(4779:3): type of ^30 is ptr*
	# LowerStore(4780:3).9: mov ptr ^28, (^30)
	movq %rbx, (%rax)
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(4781:3): struct-type: ptr ^14 -> ^31, indices=0,0
	movq -88(%rbp), %rax
	# LowerGetelementptr(4781:3): type of ^31 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(4782:3): struct-type: ptr ^31 -> ^32, indices=0,0
	movq %rax, %rbx
	# LowerGetelementptr(4782:3): type of ^32 is ptr*
	# LowerLoad(4783:3).2: (^32) into ptr ^33
	movq (%rbx), %rax
	# LowerLoad(4784:3).2: (^13) into i64 ^34
	movq (%r13), %rbx
	# tt = Pointer, type = %"class.std::basic_string_view"
	# LowerGetelementptr(4785:3): pointer-type -> ^35
	shlq $4, %rbx
	addq %rax, %rbx
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(4786:3): struct-type: ptr ^14 -> ^36, indices=0,0
	movq -88(%rbp), %rax
	# LowerGetelementptr(4786:3): type of ^36 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(4787:3): struct-type: ptr ^36 -> ^37, indices=0,2
	addq $16, %rax
	# LowerGetelementptr(4787:3): type of ^37 is ptr*
	# LowerStore(4788:3).9: mov %"class.std::basic_string_view"* ^35, (^37)
	movq %rbx, (%rax)
	# LowerLoad(4789:3).2: (^11) into ptr ^38
	movq (%r14), %rbx
	# LowerLoad(4790:3).2: (^12) into ptr ^39
	movq (%r12), %r13
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(4791:3): struct-type: ptr ^14 -> ^40, indices=0,0
	movq -88(%rbp), %rax
	# LowerGetelementptr(4791:3): type of ^40 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(4792:3): struct-type: ptr ^40 -> ^41, indices=0,0
	# LowerGetelementptr(4792:3): type of ^41 is ptr*
	# LowerLoad(4793:3).2: (^41) into ptr ^42
	movq (%rax), %r12
	# SetupCalls(4794:3): move argument ptr nonnull dereferenceable(24) align 8 ^14
	# Fixed movzx with identical source and destination widths
	movq -88(%rbp), %rdi
	callq _ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE19_M_get_Tp_allocatorEv
	# SetupCalls(4794:3): move ptr result from %rax
	movq %rax, %r14
	# SetupCalls(4795:3): move argument ptr ^38
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(4795:3): move argument ptr ^39
	# Fixed movzx with identical source and destination widths
	movq %r13, %rsi
	# SetupCalls(4795:3): move argument ptr ^42
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdx
	# SetupCalls(4795:3): move argument ptr nonnull dereferenceable(1) align 1 ^43
	# Fixed movzx with identical source and destination widths
	movq %r14, %rcx
	callq _ZSt22__uninitialized_copy_aIPKSt17basic_string_viewIcSt11char_traitsIcEEPS3_S3_ET0_T_S8_S7_RSaIT1_E
	# SetupCalls(4795:3): move ptr result from %rax
	movq %rax, %rbx
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(4796:3): struct-type: ptr ^14 -> ^45, indices=0,0
	movq -88(%rbp), %rcx
	# LowerGetelementptr(4796:3): type of ^45 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(4797:3): struct-type: ptr ^45 -> ^46, indices=0,1
	movq %rcx, %rax
	addq $8, %rax
	# LowerGetelementptr(4797:3): type of ^46 is ptr*
	# LowerStore(4798:3).9: mov ptr ^44, (^46)
	movq %rbx, (%rax)
	movq -128(%rbp), %r15
	movq -104(%rbp), %r14
	movq -120(%rbp), %r13
	movq -112(%rbp), %r12
	movq -96(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt6vectorI6LsItemSaIS0_EE8max_sizeEv
.p2align 4, 0x90
_ZNKSt6vectorI6LsItemSaIS0_EE8max_sizeEv:
	.___ZNKSt6vectorI6LsItemSaIS0_EE8max_sizeEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(6769:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(6770:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(6771:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# SetupCalls(6772:3): move argument ptr nonnull dereferenceable(24) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNKSt12_Vector_baseI6LsItemSaIS0_EE19_M_get_Tp_allocatorEv
	# SetupCalls(6772:3): move ptr result from %rax
	movq %rax, %rbx
	# SetupCalls(6773:3): move argument ptr nonnull dereferenceable(1) align 1 ^4
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt6vectorI6LsItemSaIS0_EE11_S_max_sizeERKS1_
	# SetupCalls(6773:3): move i64 result from %rax
	movq %rax, %rbx
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _Z4quitRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE
.p2align 4, 0x90
_Z4quitRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE:
	.___Z4quitRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(8 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	# LowerAlloca(2064:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(2065:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# SetupCalls(2066:3): move argument i32 0
	movq $0, %rdi
	callq exit@PLT

.section .text
.global _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EED2Ev
.p2align 4, 0x90
_ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EED2Ev:
	.___ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EED2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(128 + 0, 16)
	subq $128, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -80(%rbp)
	movq %r12, -112(%rbp)
	movq %r13, -64(%rbp)
	movq %r14, -72(%rbp)
	movq %r15, -56(%rbp)
	# LowerAlloca(1139:3): size = 8, type = ptr*, var = ^2
	# Fixing source-to-dest leaq -8(%rbp), -48(%rbp)
	leaq -8(%rbp), %r15
	movq %r15, -48(%rbp)
	# LowerAlloca(1140:3): size = 8, type = ptr*, var = ^3
	leaq -16(%rbp), %r13
	# LowerAlloca(1141:3): size = 8, type = ptr*, var = ^4
	leaq -24(%rbp), %r14
	# LowerAlloca(1142:3): size = 8, type = ptr*, var = ^5
	leaq -32(%rbp), %rbx
	# LowerStore(1143:3).9: mov ptr %rdi, (^5)
	movq %rdi, (%rbx)
	# LowerLoad(1144:3).2: (^5) into ptr ^6
	# Fixing source-to-dest movq (%rbx), -40(%rbp)
	movq (%rbx), %r15
	movq %r15, -40(%rbp)
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(1145:3): struct-type: ptr ^6 -> ^7, indices=0,0
	movq -40(%rbp), %rax
	# LowerGetelementptr(1145:3): type of ^7 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(1146:3): struct-type: ptr ^7 -> ^8, indices=0,0
	# LowerGetelementptr(1146:3): type of ^8 is ptr*
	# LowerLoad(1147:3).2: (^8) into ptr ^9
	movq (%rax), %r15
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(1148:3): struct-type: ptr ^6 -> ^10, indices=0,0
	movq -40(%rbp), %rax
	# LowerGetelementptr(1148:3): type of ^10 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(1149:3): struct-type: ptr ^10 -> ^11, indices=0,1
	addq $8, %rax
	# LowerGetelementptr(1149:3): type of ^11 is ptr*
	# LowerLoad(1150:3).2: (^11) into ptr ^12
	movq (%rax), %rbx
	# SetupCalls(1151:3): move argument ptr nonnull dereferenceable(24) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq -40(%rbp), %rdi
	callq _ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE19_M_get_Tp_allocatorEv
	# SetupCalls(1151:3): move ptr result from %rax
	movq %rax, %r12
	# LowerStore(1152:3).9: mov ptr ^9, (^2)
	movq -48(%rbp), %rax
	movq %r15, (%rax)
	# LowerStore(1153:3).9: mov ptr ^12, (^3)
	movq %rbx, (%r13)
	# LowerStore(1154:3).9: mov ptr ^13, (^4)
	movq %r12, (%r14)
	# LowerLoad(1155:3).2: (^2) into ptr ^14
	movq -48(%rbp), %rbx
	movq (%rbx), %rax
	# LowerLoad(1156:3).2: (^3) into ptr ^15
	movq (%r13), %rbx
	# SetupCalls(1157:3): move argument ptr ^14
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(1157:3): move argument ptr ^15
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZSt8_DestroyIPSt17basic_string_viewIcSt11char_traitsIcEEEvT_S5_
	# SetupCalls(1158:3): move argument ptr nonnull dereferenceable(24) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq -40(%rbp), %rdi
	callq _ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EED2Ev
	movq -56(%rbp), %r15
	movq -72(%rbp), %r14
	movq -64(%rbp), %r13
	movq -112(%rbp), %r12
	movq -80(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt8functionIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEEC2IRS9_vEEOT_
.p2align 4, 0x90
_ZNSt8functionIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEEC2IRS9_vEEOT_:
	.___ZNSt8functionIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEEC2IRS9_vEEOT___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(48 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	movq %r12, -24(%rbp)
	movq %r13, -40(%rbp)
	# LowerAlloca(4022:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %rax
	# LowerAlloca(4023:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %r12
	# LowerStore(4024:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rax)
	# LowerStore(4025:3).9: mov ptr %rsi, (^4)
	movq %rsi, (%r12)
	# LowerLoad(4026:3).2: (^3) into ptr ^5
	movq (%rax), %rbx
	# tt = Pointer, type = i8
	# LowerGetelementptr(4027:3): struct-type: ptr ^5 -> ^6, indices=0
	movq %rbx, %rax
	# LowerGetelementptr(4027:3): type of ^6 is i8*
	# SetupCalls(4028:3): move argument ptr align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(4028:3): move argument i32 0
	movq $0, %rsi
	# SetupCalls(4028:3): move argument i64 24
	movq $24, %rdx
	callq memset@PLT
	# SetupCalls(4029:3): move argument ptr nonnull dereferenceable(24) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt14_Function_baseC2Ev
	# tt = Pointer, type = %"class.std::function"
	# LowerGetelementptr(4030:3): struct-type: ptr ^5 -> ^7, indices=0,1
	movq %rbx, %rax
	addq $24, %rax
	# LowerGetelementptr(4030:3): type of ^7 is ptr*
	# LowerStore(4031:3).3: mov $imm, (^7)
	movq $0, (%rax)
	# LowerLoad(4032:3).2: (^4) into ptr ^8
	movq (%r12), %rax
	# SetupCalls(4033:3): move argument ptr ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE21_M_not_empty_functionISA_EEbPT_
	# SetupCalls(4033:3): move i1 result from %rax
	movb %al, %r13b
	cmpb $0, %r13b
	jne .___ZNSt8functionIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEEC2IRS9_vEEOT___M93
	jmp .___ZNSt8functionIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEEC2IRS9_vEEOT___M141
	.___ZNSt8functionIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEEC2IRS9_vEEOT___M93:
	# tt = Pointer, type = %"class.std::_Function_base"
	# LowerGetelementptr(4037:3): struct-type: ptr ^5 -> ^11, indices=0,0
	movq %rbx, %rcx
	# LowerGetelementptr(4037:3): type of ^11 is %"union.std::_Any_data"*
	# LowerLoad(4038:3).2: (^4) into ptr ^12
	movq (%r12), %rax
	# SetupCalls(4039:3): move argument ptr nonnull dereferenceable(16) align 8 ^11
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(4039:3): move argument ptr nonnull ^12
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE15_M_init_functorIRSA_EEvRSt9_Any_dataOT_
	# tt = Pointer, type = %"class.std::function"
	# LowerGetelementptr(4040:3): struct-type: ptr ^5 -> ^13, indices=0,1
	movq %rbx, %rax
	addq $24, %rax
	# LowerGetelementptr(4040:3): type of ^13 is ptr*
	# LowerStore(4041:3).6: load global
	leaq _ZNSt17_Function_handlerIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEPS9_E9_M_invokeERKSt9_Any_dataS8_(%rip), %rcx
	# LowerStore(4041:3).9: mov ptr ^16, (^13)
	movq %rcx, (%rax)
	# tt = Pointer, type = %"class.std::_Function_base"
	# LowerGetelementptr(4042:3): struct-type: ptr ^5 -> ^14, indices=0,1
	movq %rbx, %rax
	addq $16, %rax
	# LowerGetelementptr(4042:3): type of ^14 is ptr*
	# LowerStore(4043:3).6: load global
	leaq _ZNSt17_Function_handlerIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEPS9_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation(%rip), %rbx
	# LowerStore(4043:3).9: mov ptr ^17, (^14)
	movq %rbx, (%rax)
	.___ZNSt8functionIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEEC2IRS9_vEEOT___M141:
	movq -40(%rbp), %r13
	movq -24(%rbp), %r12
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10filesystem12status_knownENS_11file_statusE
.p2align 4, 0x90
_ZNSt10filesystem12status_knownENS_11file_statusE:
	.___ZNSt10filesystem12status_knownENS_11file_statusE__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(2993:3): size = 8, type = %"class.std::filesystem::file_status"*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(2994:3).9: mov i64 %rdi, (^2)
	movq %rdi, (%rax)
	# SetupCalls(2995:3): move argument ptr nonnull dereferenceable(8) align 4 ^2
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNKSt10filesystem11file_status4typeEv
	# SetupCalls(2995:3): move i8 result from %rax
	movb %al, %bl
	# LowerIcmp(2996:3): i8 ^3 vs. intlike 0
	cmpb $0, %bl
	setne %al
	andq $1, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt8_DestroyIPSt17basic_string_viewIcSt11char_traitsIcEEEvT_S5_
.p2align 4, 0x90
_ZSt8_DestroyIPSt17basic_string_viewIcSt11char_traitsIcEEEvT_S5_:
	.___ZSt8_DestroyIPSt17basic_string_viewIcSt11char_traitsIcEEEvT_S5___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(5132:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %rax
	# LowerAlloca(5133:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %rcx
	# LowerStore(5134:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rax)
	# LowerStore(5135:3).9: mov ptr %rsi, (^4)
	movq %rsi, (%rcx)
	# LowerLoad(5136:3).2: (^3) into ptr ^5
	movq (%rax), %rbx
	# LowerLoad(5137:3).2: (^4) into ptr ^6
	movq (%rcx), %rax
	# SetupCalls(5138:3): move argument ptr ^5
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(5138:3): move argument ptr ^6
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNSt12_Destroy_auxILb1EE9__destroyIPSt17basic_string_viewIcSt11char_traitsIcEEEEvT_S7_
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISA_EEEEEC2IRA6_KcRSF_Lb1EEEOT_OT0_
.p2align 4, 0x90
_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISA_EEEEEC2IRA6_KcRSF_Lb1EEEOT_OT0_:
	.___ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISA_EEEEEC2IRA6_KcRSF_Lb1EEEOT_OT0___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(112 + 0, 16)
	subq $112, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -72(%rbp)
	movq %r12, -64(%rbp)
	movq %r13, -80(%rbp)
	movq %r14, -88(%rbp)
	movq %r15, -96(%rbp)
	# LowerAlloca(2351:3): size = 8, type = ptr*, var = ^4
	leaq -8(%rbp), %r8
	# LowerAlloca(2352:3): size = 8, type = ptr*, var = ^5
	leaq -16(%rbp), %r12
	# LowerAlloca(2353:3): size = 8, type = ptr*, var = ^6
	leaq -24(%rbp), %rbx
	# LowerAlloca(2354:3): size = 8, type = ptr*, var = ^7
	leaq -32(%rbp), %rcx
	# LowerAlloca(2355:3): size = 8, type = ptr*, var = ^8
	leaq -40(%rbp), %rax
	# LowerAlloca(2356:3): size = 8, type = ptr*, var = ^9
	leaq -48(%rbp), %r13
	# LowerAlloca(2357:3): size = 1, type = %"class.std::allocator.0"*, var = ^10
	leaq -49(%rbp), %r14
	# LowerStore(2358:3).9: mov ptr %rdi, (^7)
	movq %rdi, (%rcx)
	# LowerStore(2359:3).9: mov ptr %rsi, (^8)
	movq %rsi, (%rax)
	# LowerStore(2360:3).9: mov ptr %rdx, (^9)
	movq %rdx, (%r13)
	# LowerLoad(2361:3).2: (^7) into ptr ^11
	movq (%rcx), %r15
	# tt = Pointer, type = %"struct.std::pair"
	# LowerGetelementptr(2362:3): struct-type: ptr ^11 -> ^12, indices=0,0
	movq %r15, %rcx
	# LowerGetelementptr(2362:3): type of ^12 is %"class.std::__cxx11::basic_string"*
	# LowerLoad(2363:3).2: (^8) into ptr ^13
	movq (%rax), %rdx
	# tt = Pointer, type = [6 x i8]
	# LowerGetelementptr(2364:3): struct-type: ptr ^13 -> ^14, indices=0,0
	# LowerGetelementptr(2364:3): type of ^14 is i8*
	# LowerStore(2365:3).9: mov %"class.std::allocator.0"* ^10, (^6)
	movq %r14, (%rbx)
	# LowerLoad(2366:3).2: (^6) into ptr ^15
	# Fixing source-to-dest movq (%rbx), (%r8)
	pushq %r15
	movq (%rbx), %r15
	movq %r15, (%r8)
	popq %r15
	# LowerStore(2367:3).9: mov ptr ^15, (^4)
	# LowerLoad(2368:3).2: (^4) into ptr ^16
	movq (%r8), %rax
	# SetupCalls(2369:3): move argument ptr nonnull dereferenceable(32) align 8 ^12
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(2369:3): move argument ptr ^14
	# Fixed movzx with identical source and destination widths
	movq %rdx, %rsi
	# SetupCalls(2369:3): move argument ptr nonnull dereferenceable(1) align 1 ^10
	# Fixed movzx with identical source and destination widths
	movq %r14, %rdx
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_
	# LowerStore(2370:3).9: mov %"class.std::allocator.0"* ^10, (^5)
	movq %r14, (%r12)
	# LowerLoad(2371:3).2: (^5) into ptr ^17
	movq (%r12), %rax
	# SetupCalls(2372:3): move argument ptr nonnull dereferenceable(1) align 1 ^17
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt15__new_allocatorIcED2Ev
	# tt = Pointer, type = %"struct.std::pair"
	# LowerGetelementptr(2373:3): struct-type: ptr ^11 -> ^18, indices=0,1
	movq %r15, %rbx
	addq $32, %rbx
	# LowerGetelementptr(2373:3): type of ^18 is %"class.std::function"*
	# LowerLoad(2374:3).2: (^9) into ptr ^19
	movq (%r13), %rax
	# SetupCalls(2375:3): move argument ptr nonnull dereferenceable(32) align 8 ^18
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(2375:3): move argument ptr nonnull ^19
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNSt8functionIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEEC2IRS9_vEEOT_
	movq -96(%rbp), %r15
	movq -88(%rbp), %r14
	movq -80(%rbp), %r13
	movq -64(%rbp), %r12
	movq -72(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE4sizeEv
.p2align 4, 0x90
_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE4sizeEv:
	.___ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE4sizeEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(9361:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(9362:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(9363:3).2: (^2) into ptr ^3
	movq (%rax), %rcx
	# tt = Pointer, type = %"class.std::_Rb_tree"
	# LowerGetelementptr(9364:3): struct-type: ptr ^3 -> ^4, indices=0,0
	# LowerGetelementptr(9364:3): type of ^4 is %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Rb_tree_impl"*
	# tt = Pointer, type = i8
	# LowerGetelementptr(9365:3): struct-type: ptr ^4 -> ^5, indices=8
	movq %rcx, %rbx
	addq $8, %rbx
	# LowerGetelementptr(9365:3): type of ^5 is i8*
	# tt = Pointer, type = %"struct.std::_Rb_tree_header"
	# LowerGetelementptr(9366:3): struct-type: ptr ^5 -> ^6, indices=0,1
	movq %rbx, %rax
	addq $32, %rax
	# LowerGetelementptr(9366:3): type of ^6 is i64*
	# LowerLoad(9367:3).2: (^6) into i64 ^7
	movq (%rax), %rbx
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm
.p2align 4, 0x90
_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm:
	.___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(376 + 0, 16)
	subq $384, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -120(%rbp)
	movq %r12, -160(%rbp)
	movq %r13, -168(%rbp)
	movq %r14, -152(%rbp)
	movq %r15, -112(%rbp)
	# LowerAlloca(2693:3): size = 8, type = i64*, var = ^5
	# Fixing source-to-dest leaq -8(%rbp), -80(%rbp)
	leaq -8(%rbp), %r15
	movq %r15, -80(%rbp)
	# LowerAlloca(2694:3): size = 8, type = ptr*, var = ^6
	leaq -16(%rbp), %rbx
	# LowerAlloca(2695:3): size = 8, type = ptr*, var = ^7
	# Fixing source-to-dest leaq -24(%rbp), -88(%rbp)
	leaq -24(%rbp), %r15
	movq %r15, -88(%rbp)
	# LowerAlloca(2696:3): size = 8, type = i64*, var = ^8
	leaq -32(%rbp), %rax
	# LowerAlloca(2697:3): size = 8, type = i64*, var = ^9
	# Fixing source-to-dest leaq -40(%rbp), -96(%rbp)
	leaq -40(%rbp), %r15
	movq %r15, -96(%rbp)
	# LowerAlloca(2698:3): size = 1, type = i8*, var = ^10
	# Fixing source-to-dest leaq -41(%rbp), -104(%rbp)
	leaq -41(%rbp), %r15
	movq %r15, -104(%rbp)
	# LowerAlloca(2699:3): size = 8, type = ptr*, var = ^11
	leaq -56(%rbp), %r14
	# LowerAlloca(2700:3): size = 8, type = ptr*, var = ^12
	leaq -64(%rbp), %r12
	# LowerAlloca(2701:3): size = 8, type = i64*, var = ^13
	leaq -72(%rbp), %r13
	# LowerStore(2702:3).9: mov ptr %rdi, (^6)
	movq %rdi, (%rbx)
	# LowerStore(2703:3).9: mov ptr %rsi, (^7)
	movq -88(%rbp), %rdi
	movq %rsi, (%rdi)
	# LowerStore(2704:3).9: mov i64 %rdx, (^8)
	movq %rdx, (%rax)
	# LowerStore(2705:3).9: mov i64 %rcx, (^9)
	movq -96(%rbp), %rdx
	movq %rcx, (%rdx)
	# LowerLoad(2706:3).2: (^6) into ptr ^14
	movq (%rbx), %r15
	# LowerLoad(2707:3).2: (^9) into i64 ^15
	movq -96(%rbp), %rcx
	movq (%rcx), %rbx
	# LowerIcmp(2708:3): i64 ^15 vs. intlike 0
	cmpq $0, %rbx
	sete %bl
	andq $1, %rbx
	cmpb $0, %bl
	jne .___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm__M35
	jmp .___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm__M59
	.___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm__M35:
	# LowerLoad(2712:3).2: (^8) into i64 ^18
	movq (%rax), %rcx
	# tt = Pointer, type = %"class.std::basic_string_view"
	# LowerGetelementptr(2713:3): struct-type: ptr ^14 -> ^19, indices=0,0
	movq %r15, %rbx
	# LowerGetelementptr(2713:3): type of ^19 is i64*
	# LowerLoad(2714:3).2: (^19) into i64 ^20
	movq (%rbx), %rdx
	# LowerIcmp(2715:3): i64 ^18 vs. operand i64 ^20
	cmpq %rdx, %rcx
	setbe %bl
	andq $1, %rbx
	cmpb $0, %bl
	jne .___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm__M48
	jmp .___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm__M53
	.___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm__M48:
	# LowerLoad(2719:3).2: (^8) into i64 ^23
	movq (%rax), %r9
	# MovePhi: ^23 -> ^26
	jmp .___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm__M56
	.___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm__M53:
	# MovePhi: intlike -> ^26
	movq $-1, %r9
	.___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm__M56:
	# LowerStore(2727:3).9: mov i64 ^26, (^5)
	movq -80(%rbp), %rax
	movq %r9, (%rax)
	jmp .___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm__M275
	.___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm__M59:
	# LowerLoad(2731:3).2: (^8) into i64 ^28
	movq (%rax), %rcx
	# tt = Pointer, type = %"class.std::basic_string_view"
	# LowerGetelementptr(2732:3): struct-type: ptr ^14 -> ^29, indices=0,0
	movq %r15, %rdx
	# LowerGetelementptr(2732:3): type of ^29 is i64*
	# LowerLoad(2733:3).2: (^29) into i64 ^30
	movq (%rdx), %rbx
	# LowerIcmp(2734:3): i64 ^28 vs. operand i64 ^30
	cmpq %rbx, %rcx
	setae %bl
	andq $1, %rbx
	cmpb $0, %bl
	jne .___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm__M72
	jmp .___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm__M75
	.___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm__M72:
	# LowerStore(2738:3).3: mov $imm, (^5)
	movq -80(%rbp), %rax
	movq $-1, (%rax)
	jmp .___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm__M275
	.___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm__M75:
	# LowerLoad(2742:3).2: (^7) into ptr ^34
	movq -88(%rbp), %rbx
	movq (%rbx), %rcx
	# tt = Pointer, type = i8
	# LowerGetelementptr(2743:3): struct-type: ptr ^34 -> ^35, indices=0
	# LowerGetelementptr(2743:3): type of ^35 is i8*
	# LowerLoad(2744:3).2: (^35) into i8 ^36
	movq -104(%rbp), %rbx
	# Fixing source-to-dest movb (%rcx), (%rbx)
	pushq %r15
	movb (%rcx), %r15b
	movb %r15b, (%rbx)
	popq %r15
	# LowerStore(2745:3).9: mov i8 ^36, (^10)
	# tt = Pointer, type = %"class.std::basic_string_view"
	# LowerGetelementptr(2746:3): struct-type: ptr ^14 -> ^37, indices=0,1
	movq %r15, %rbx
	addq $8, %rbx
	# LowerGetelementptr(2746:3): type of ^37 is ptr*
	# LowerLoad(2747:3).2: (^37) into ptr ^38
	movq (%rbx), %rcx
	# LowerLoad(2748:3).2: (^8) into i64 ^39
	movq (%rax), %rbx
	# tt = Pointer, type = i8
	# LowerGetelementptr(2749:3): pointer-type -> ^40
	addq %rcx, %rbx
	# LowerStore(2750:3).9: mov i8* ^40, (^11)
	movq %rbx, (%r14)
	# tt = Pointer, type = %"class.std::basic_string_view"
	# LowerGetelementptr(2751:3): struct-type: ptr ^14 -> ^41, indices=0,1
	movq %r15, %rbx
	addq $8, %rbx
	# LowerGetelementptr(2751:3): type of ^41 is ptr*
	# LowerLoad(2752:3).2: (^41) into ptr ^42
	movq (%rbx), %rcx
	# tt = Pointer, type = %"class.std::basic_string_view"
	# LowerGetelementptr(2753:3): struct-type: ptr ^14 -> ^43, indices=0,0
	movq %r15, %rbx
	# LowerGetelementptr(2753:3): type of ^43 is i64*
	# LowerLoad(2754:3).2: (^43) into i64 ^44
	movq (%rbx), %rdx
	# tt = Pointer, type = i8
	# LowerGetelementptr(2755:3): pointer-type -> ^45
	addq %rcx, %rdx
	# LowerStore(2756:3).9: mov i8* ^45, (^12)
	movq %rdx, (%r12)
	# tt = Pointer, type = %"class.std::basic_string_view"
	# LowerGetelementptr(2757:3): struct-type: ptr ^14 -> ^46, indices=0,0
	movq %r15, %rbx
	# LowerGetelementptr(2757:3): type of ^46 is i64*
	# LowerLoad(2758:3).2: (^46) into i64 ^47
	movq (%rbx), %rcx
	# LowerLoad(2759:3).2: (^8) into i64 ^48
	movq (%rax), %rbx
	# LowerMath(2760:3): ^47, ^48 into i64 ^49
	movq %rcx, %rax
	subq %rbx, %rax
	# LowerStore(2761:3).9: mov i64 ^49, (^13)
	movq %rax, (%r13)
	.___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm__M134:
	# LowerLoad(2765:3).2: (^13) into i64 ^51
	movq (%r13), %rbx
	# LowerLoad(2766:3).2: (^9) into i64 ^52
	movq -96(%rbp), %rax
	movq (%rax), %rcx
	# LowerIcmp(2767:3): i64 ^51 vs. operand i64 ^52
	cmpq %rcx, %rbx
	setae %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm__M143
	jmp .___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm__M272
	.___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm__M143:
	# LowerLoad(2771:3).2: (^11) into ptr ^55
	movq (%r14), %rax
	# LowerLoad(2772:3).2: (^13) into i64 ^56
	movq (%r13), %rbx
	# LowerLoad(2773:3).2: (^9) into i64 ^57
	movq -96(%rbp), %rdx
	movq (%rdx), %rcx
	# LowerMath(2774:3): ^56, ^57 into i64 ^58
	movq %rbx, %rdx
	subq %rcx, %rdx
	# LowerMath(2775:3): ^58, 1 into i64 ^59
	movq %rdx, %rbx
	addq $1, %rbx
	# SetupCalls(2776:3): move argument ptr ^55
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(2776:3): move argument i64 ^59
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(2776:3): move argument ptr nonnull dereferenceable(1) align 1 ^10
	# Fixed movzx with identical source and destination widths
	movq -104(%rbp), %rdx
	callq _ZNSt11char_traitsIcE4findEPKcmRS1_
	# SetupCalls(2776:3): move ptr result from %rax
	movq %rax, %rbx
	# LowerStore(2777:3).9: mov ptr ^60, (^11)
	movq %rbx, (%r14)
	# LowerLoad(2778:3).2: (^11) into ptr ^61
	movq (%r14), %rax
	# LowerIcmp(2779:3): ptr ^61 vs. intlike 0
	cmpq $0, %rax
	setne %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm__M194
	.___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm__M191:
	# LowerStore(2783:3).3: mov $imm, (^5)
	movq -80(%rbp), %rax
	movq $-1, (%rax)
	jmp .___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm__M275
	.___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm__M194:
	# LowerLoad(2787:3).2: (^11) into ptr ^65
	movq (%r14), %rcx
	# LowerLoad(2788:3).2: (^7) into ptr ^66
	movq -88(%rbp), %rax
	movq (%rax), %rbx
	# LowerLoad(2789:3).2: (^9) into i64 ^67
	movq -96(%rbp), %rdx
	movq (%rdx), %rax
	# SetupCalls(2790:3): move argument ptr ^65
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(2790:3): move argument ptr ^66
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(2790:3): move argument i64 ^67
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdx
	callq _ZNSt11char_traitsIcE7compareEPKcS2_m
	# SetupCalls(2790:3): move i32 result from %rax
	movl %eax, %ebx
	# LowerIcmp(2791:3): i32 ^68 vs. intlike 0
	cmpl $0, %ebx
	sete %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm__M232
	jmp .___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm__M251
	.___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm__M232:
	# LowerLoad(2795:3).2: (^11) into ptr ^71
	movq (%r14), %rax
	# tt = Pointer, type = %"class.std::basic_string_view"
	# LowerGetelementptr(2796:3): struct-type: ptr ^14 -> ^72, indices=0,1
	movq %r15, %rbx
	addq $8, %rbx
	# LowerGetelementptr(2796:3): type of ^72 is ptr*
	# LowerLoad(2797:3).2: (^72) into ptr ^73
	movq (%rbx), %rcx
	# LowerBasicConversion(2798:3): ptr ^71 -> i64 ^74
	movq %rax, %rbx
	# LowerBasicConversion(2799:3): ptr ^73 -> i64 ^75
	movq %rcx, %rax
	# LowerMath(2800:3): ^74, ^75 into i64 ^76
	movq %rbx, %rcx
	subq %rax, %rcx
	# LowerStore(2801:3).9: mov i64 ^76, (^5)
	movq -80(%rbp), %rax
	movq %rcx, (%rax)
	jmp .___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm__M275
	.___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm__M251:
	# LowerLoad(2805:3).2: (^12) into ptr ^78
	movq (%r12), %rax
	# LowerLoad(2806:3).2: (^11) into ptr ^79
	movq (%r14), %rbx
	# tt = Pointer, type = i8
	# LowerGetelementptr(2807:3): struct-type: ptr ^79 -> ^80, indices=1
	addq $1, %rbx
	# LowerGetelementptr(2807:3): type of ^80 is i8*
	# LowerStore(2808:3).9: mov i8* ^80, (^11)
	movq %rbx, (%r14)
	# LowerBasicConversion(2809:3): ptr ^78 -> i64 ^81
	movq %rax, %rdx
	# LowerBasicConversion(2810:3): i8* ^80 -> i64 ^82
	movq %rbx, %rcx
	# LowerMath(2811:3): ^81, ^82 into i64 ^83
	movq %rdx, %rax
	subq %rcx, %rax
	# LowerStore(2812:3).9: mov i64 ^83, (^13)
	movq %rax, (%r13)
	jmp .___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm__M134
	.___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm__M272:
	# LowerStore(2816:3).3: mov $imm, (^5)
	movq -80(%rbp), %rax
	movq $-1, (%rax)
	.___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm__M275:
	# LowerLoad(2820:3).2: (^5) into i64 ^86
	movq -80(%rbp), %rax
	movq (%rax), %rbx
	movq %rbx, %rax
	movq -112(%rbp), %r15
	movq -152(%rbp), %r14
	movq -168(%rbp), %r13
	movq -160(%rbp), %r12
	movq -120(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE5frontEv
.p2align 4, 0x90
_ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE5frontEv:
	.___ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE5frontEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(48 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	movq %r12, -24(%rbp)
	# LowerAlloca(2496:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerAlloca(2497:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator.19"*, var = ^3
	leaq -16(%rbp), %r12
	# LowerStore(2498:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(2499:3).2: (^2) into ptr ^4
	movq (%rax), %rbx
	# SetupCalls(2500:3): move argument ptr nonnull dereferenceable(24) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE5beginEv
	# SetupCalls(2500:3): move ptr result from %rax
	movq %rax, %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator.19"
	# LowerGetelementptr(2501:3): struct-type: ptr ^3 -> ^6, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(2501:3): type of ^6 is ptr*
	# LowerStore(2502:3).9: mov ptr ^5, (^6)
	movq %rbx, (%rax)
	# SetupCalls(2503:3): move argument ptr nonnull dereferenceable(8) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIPSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEEdeEv
	# SetupCalls(2503:3): move ptr result from %rax
	movq %rax, %rbx
	movq %rbx, %rax
	movq -24(%rbp), %r12
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global main
.p2align 4, 0x90
main:
	.__main__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(1352 + 0, 16)
	subq $1360, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -896(%rbp)
	movq %r12, -856(%rbp)
	movq %r13, -920(%rbp)
	movq %r14, -1040(%rbp)
	movq %r15, -864(%rbp)
	# LowerAlloca(2083:3): size = 8, type = ptr*, var = ^1
	leaq -8(%rbp), %r12
	# LowerAlloca(2084:3): size = 8, type = ptr*, var = ^2
	# Fixing source-to-dest leaq -16(%rbp), -704(%rbp)
	leaq -16(%rbp), %r15
	movq %r15, -704(%rbp)
	# LowerAlloca(2085:3): size = 8, type = ptr*, var = ^3
	# Fixing source-to-dest leaq -24(%rbp), -712(%rbp)
	leaq -24(%rbp), %r15
	movq %r15, -712(%rbp)
	# LowerAlloca(2086:3): size = 8, type = ptr*, var = ^4
	# Fixing source-to-dest leaq -32(%rbp), -720(%rbp)
	leaq -32(%rbp), %r15
	movq %r15, -720(%rbp)
	# LowerAlloca(2087:3): size = 8, type = ptr*, var = ^5
	# Fixing source-to-dest leaq -40(%rbp), -832(%rbp)
	leaq -40(%rbp), %r15
	movq %r15, -832(%rbp)
	# LowerAlloca(2088:3): size = 8, type = ptr*, var = ^6
	leaq -48(%rbp), %rbx
	# LowerAlloca(2089:3): size = 4, type = i32*, var = ^7
	# Fixing source-to-dest leaq -52(%rbp), -688(%rbp)
	leaq -52(%rbp), %r15
	movq %r15, -688(%rbp)
	# LowerAlloca(2090:3): size = 48, type = %"class.std::map"*, var = ^8
	# Fixing source-to-dest leaq -104(%rbp), -696(%rbp)
	leaq -104(%rbp), %r15
	movq %r15, -696(%rbp)
	# LowerAlloca(2091:3): size = 16, type = %"class.std::initializer_list.13"*, var = ^9
	leaq -120(%rbp), %r13
	# LowerAlloca(2092:3): size = 384, type = [6 x %"struct.std::pair"]*, var = ^10
	# Fixing source-to-dest leaq -504(%rbp), -824(%rbp)
	leaq -504(%rbp), %r15
	movq %r15, -824(%rbp)
	# LowerAlloca(2093:3): size = 1, type = %"struct.std::less"*, var = ^11
	# Fixing source-to-dest leaq -505(%rbp), -848(%rbp)
	leaq -505(%rbp), %r15
	movq %r15, -848(%rbp)
	# LowerAlloca(2094:3): size = 1, type = %"class.std::allocator.14"*, var = ^12
	# Fixing source-to-dest leaq -506(%rbp), -840(%rbp)
	leaq -506(%rbp), %r15
	movq %r15, -840(%rbp)
	# LowerAlloca(2095:3): size = 32, type = %"class.std::__cxx11::basic_string"*, var = ^13
	# Fixing source-to-dest leaq -544(%rbp), -728(%rbp)
	leaq -544(%rbp), %r15
	movq %r15, -728(%rbp)
	# LowerAlloca(2096:3): size = 24, type = %"class.std::vector"*, var = ^14
	# Fixing source-to-dest leaq -568(%rbp), -736(%rbp)
	leaq -568(%rbp), %r15
	movq %r15, -736(%rbp)
	# LowerAlloca(2097:3): size = 16, type = %"class.std::basic_string_view"*, var = ^15
	# Fixing source-to-dest leaq -584(%rbp), -744(%rbp)
	leaq -584(%rbp), %r15
	movq %r15, -744(%rbp)
	# LowerAlloca(2098:3): size = 16, type = %"class.std::basic_string_view"*, var = ^16
	# Fixing source-to-dest leaq -600(%rbp), -752(%rbp)
	leaq -600(%rbp), %r15
	movq %r15, -752(%rbp)
	# LowerAlloca(2099:3): size = 4, type = i32*, var = ^17
	# Fixing source-to-dest leaq -604(%rbp), -760(%rbp)
	leaq -604(%rbp), %r15
	movq %r15, -760(%rbp)
	# LowerAlloca(2100:3): size = 8, type = %"struct.std::_Rb_tree_iterator"*, var = ^18
	# Fixing source-to-dest leaq -616(%rbp), -768(%rbp)
	leaq -616(%rbp), %r15
	movq %r15, -768(%rbp)
	# LowerAlloca(2101:3): size = 32, type = %"class.std::__cxx11::basic_string"*, var = ^19
	# Fixing source-to-dest leaq -648(%rbp), -776(%rbp)
	leaq -648(%rbp), %r15
	movq %r15, -776(%rbp)
	# LowerAlloca(2102:3): size = 1, type = %"class.std::allocator.0"*, var = ^20
	# Fixing source-to-dest leaq -649(%rbp), -784(%rbp)
	leaq -649(%rbp), %r15
	movq %r15, -784(%rbp)
	# LowerAlloca(2103:3): size = 1, type = i8*, var = ^21
	# Fixing source-to-dest leaq -650(%rbp), -792(%rbp)
	leaq -650(%rbp), %r15
	movq %r15, -792(%rbp)
	# LowerAlloca(2104:3): size = 8, type = %"struct.std::_Rb_tree_iterator"*, var = ^22
	# Fixing source-to-dest leaq -664(%rbp), -800(%rbp)
	leaq -664(%rbp), %r15
	movq %r15, -800(%rbp)
	# LowerAlloca(2105:3): size = 16, type = %"class.std::basic_string_view"*, var = ^23
	# Fixing source-to-dest leaq -680(%rbp), -808(%rbp)
	leaq -680(%rbp), %r15
	movq %r15, -808(%rbp)
	# LowerStore(2106:3).3: mov $imm, (^7)
	movq -688(%rbp), %rax
	movl $0, (%rax)
	# tt = Pointer, type = [6 x %"struct.std::pair"]
	# LowerGetelementptr(2107:3): struct-type: ptr ^10 -> ^24, indices=0,0
	movq -824(%rbp), %r14
	# LowerGetelementptr(2107:3): type of ^24 is %"struct.std::pair"*
	# SetupCalls(2108:3): move argument ptr nonnull dereferenceable(64) align 8 ^24
	# Fixed movzx with identical source and destination widths
	movq %r14, %rdi
	# SetupCalls(2108:3): move argument ptr nonnull dereferenceable(3) align 1 @.str.11
	leaq .str.11(%rip), %rsi
	# SetupCalls(2108:3): move argument ptr nonnull @_Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE
	leaq _Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE(%rip), %rdx
	callq _ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISA_EEEEEC2IRA3_KcRSF_Lb1EEEOT_OT0_
	# tt = Pointer, type = %"struct.std::pair"
	# LowerGetelementptr(2109:3): struct-type: ptr ^24 -> ^25, indices=1
	movq %r14, %r15
	addq $64, %r15
	# LowerGetelementptr(2109:3): type of ^25 is %"struct.std::pair"*
	# SetupCalls(2110:3): move argument ptr nonnull dereferenceable(64) align 8 ^25
	# Fixed movzx with identical source and destination widths
	movq %r15, %rdi
	# SetupCalls(2110:3): move argument ptr nonnull dereferenceable(4) align 1 @.str.12
	leaq .str.12(%rip), %rsi
	# SetupCalls(2110:3): move argument ptr nonnull @_Z3pwdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE
	leaq _Z3pwdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE(%rip), %rdx
	callq _ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISA_EEEEEC2IRA4_KcRSF_Lb1EEEOT_OT0_
	# tt = Pointer, type = %"struct.std::pair"
	# LowerGetelementptr(2111:3): struct-type: ptr ^25 -> ^26, indices=1
	movq %r15, %r14
	addq $64, %r14
	# LowerGetelementptr(2111:3): type of ^26 is %"struct.std::pair"*
	# SetupCalls(2112:3): move argument ptr nonnull dereferenceable(64) align 8 ^26
	# Fixed movzx with identical source and destination widths
	movq %r14, %rdi
	# SetupCalls(2112:3): move argument ptr nonnull dereferenceable(3) align 1 @.str.13
	leaq .str.13(%rip), %rsi
	# SetupCalls(2112:3): move argument ptr nonnull @_Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE
	leaq _Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE(%rip), %rdx
	callq _ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISA_EEEEEC2IRA3_KcRSF_Lb1EEEOT_OT0_
	# tt = Pointer, type = %"struct.std::pair"
	# LowerGetelementptr(2113:3): struct-type: ptr ^26 -> ^27, indices=1
	movq %r14, %r15
	addq $64, %r15
	# LowerGetelementptr(2113:3): type of ^27 is %"struct.std::pair"*
	# SetupCalls(2114:3): move argument ptr nonnull dereferenceable(64) align 8 ^27
	# Fixed movzx with identical source and destination widths
	movq %r15, %rdi
	# SetupCalls(2114:3): move argument ptr nonnull dereferenceable(5) align 1 @.str.14
	leaq .str.14(%rip), %rsi
	# SetupCalls(2114:3): move argument ptr nonnull @_Z4quitRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE
	leaq _Z4quitRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE(%rip), %rdx
	callq _ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISA_EEEEEC2IRA5_KcRSF_Lb1EEEOT_OT0_
	# tt = Pointer, type = %"struct.std::pair"
	# LowerGetelementptr(2115:3): struct-type: ptr ^27 -> ^28, indices=1
	movq %r15, %r14
	addq $64, %r14
	# LowerGetelementptr(2115:3): type of ^28 is %"struct.std::pair"*
	# SetupCalls(2116:3): move argument ptr nonnull dereferenceable(64) align 8 ^28
	# Fixed movzx with identical source and destination widths
	movq %r14, %rdi
	# SetupCalls(2116:3): move argument ptr nonnull dereferenceable(5) align 1 @.str.15
	leaq .str.15(%rip), %rsi
	# SetupCalls(2116:3): move argument ptr nonnull @_Z4quitRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE
	leaq _Z4quitRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE(%rip), %rdx
	callq _ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISA_EEEEEC2IRA5_KcRSF_Lb1EEEOT_OT0_
	# tt = Pointer, type = %"struct.std::pair"
	# LowerGetelementptr(2117:3): struct-type: ptr ^28 -> ^29, indices=1
	movq %r14, %rax
	addq $64, %rax
	# LowerGetelementptr(2117:3): type of ^29 is %"struct.std::pair"*
	# SetupCalls(2118:3): move argument ptr nonnull dereferenceable(64) align 8 ^29
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(2118:3): move argument ptr nonnull dereferenceable(6) align 1 @.str.16
	leaq .str.16(%rip), %rsi
	# SetupCalls(2118:3): move argument ptr nonnull @_Z5clearRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE
	leaq _Z5clearRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE(%rip), %rdx
	callq _ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISA_EEEEEC2IRA6_KcRSF_Lb1EEEOT_OT0_
	# tt = Pointer, type = %"class.std::initializer_list.13"
	# LowerGetelementptr(2119:3): struct-type: ptr ^9 -> ^30, indices=0,0
	movq %r13, %rax
	# LowerGetelementptr(2119:3): type of ^30 is ptr*
	# tt = Pointer, type = [6 x %"struct.std::pair"]
	# LowerGetelementptr(2120:3): struct-type: ptr ^10 -> ^31, indices=0,0
	# Fixing source-to-dest movq -824(%rbp), (%rax)
	movq -824(%rbp), %r15
	movq %r15, (%rax)
	# LowerGetelementptr(2120:3): type of ^31 is %"struct.std::pair"*
	# LowerStore(2121:3).9: mov [6 x %"struct.std::pair"]* ^31, (^30)
	# tt = Pointer, type = %"class.std::initializer_list.13"
	# LowerGetelementptr(2122:3): struct-type: ptr ^9 -> ^32, indices=0,1
	movq %r13, %rax
	addq $8, %rax
	# LowerGetelementptr(2122:3): type of ^32 is i64*
	# LowerStore(2123:3).3: mov $imm, (^32)
	movq $6, (%rax)
	# LowerStore(2124:3).9: mov %"class.std::allocator.14"* ^12, (^6)
	# Fixing source-to-dest movq -840(%rbp), (%rbx)
	movq -840(%rbp), %r15
	movq %r15, (%rbx)
	# LowerLoad(2125:3).2: (^6) into ptr ^33
	# Fixing source-to-dest movq (%rbx), (%r12)
	movq (%rbx), %r15
	movq %r15, (%r12)
	# LowerStore(2126:3).9: mov ptr ^33, (^1)
	# LowerLoad(2127:3).2: (^1) into ptr ^34
	movq (%r12), %rax
	# tt = Pointer, type = {ptr, i64}
	# LowerGetelementptr(2128:3): struct-type: ptr ^9 -> ^35, indices=0,0
	movq %r13, %rax
	# LowerGetelementptr(2128:3): type of ^35 is ptr*
	# LowerLoad(2129:3).2: (^35) into ptr ^36
	movq (%rax), %rbx
	# tt = Pointer, type = {ptr, i64}
	# LowerGetelementptr(2130:3): struct-type: ptr ^9 -> ^37, indices=0,1
	movq %r13, %rax
	addq $8, %rax
	# LowerGetelementptr(2130:3): type of ^37 is i64*
	# LowerLoad(2131:3).2: (^37) into i64 ^38
	movq (%rax), %rcx
	# SetupCalls(2132:3): move argument ptr nonnull dereferenceable(48) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq -696(%rbp), %rdi
	# SetupCalls(2132:3): move argument ptr ^36
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(2132:3): move argument i64 ^38
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdx
	# SetupCalls(2132:3): move argument ptr nonnull dereferenceable(1) align 1 ^11
	# Fixed movzx with identical source and destination widths
	movq -848(%rbp), %rcx
	# SetupCalls(2132:3): move argument ptr nonnull dereferenceable(1) align 1 ^12
	# Fixed movzx with identical source and destination widths
	movq -840(%rbp), %r8
	callq _ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaIS9_EEEESt4lessIS5_ESaISt4pairIKS5_SF_EEEC2ESt16initializer_listISK_ERKSH_RKSL_
	# LowerStore(2133:3).9: mov %"class.std::allocator.14"* ^12, (^5)
	movq -832(%rbp), %rax
	# Fixing source-to-dest movq -840(%rbp), (%rax)
	movq -840(%rbp), %r15
	movq %r15, (%rax)
	# LowerLoad(2134:3).2: (^5) into ptr ^39
	movq -832(%rbp), %rbx
	movq (%rbx), %rax
	# SetupCalls(2135:3): move argument ptr nonnull dereferenceable(1) align 1 ^39
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt15__new_allocatorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEED2Ev
	# tt = Pointer, type = [6 x %"struct.std::pair"]
	# LowerGetelementptr(2136:3): struct-type: ptr ^10 -> ^40, indices=0,0
	movq -824(%rbp), %rbx
	# LowerGetelementptr(2136:3): type of ^40 is %"struct.std::pair"*
	# tt = Pointer, type = %"struct.std::pair"
	# LowerGetelementptr(2137:3): struct-type: ptr ^40 -> ^41, indices=6
	movq %rbx, %rax
	addq $384, %rax
	# LowerGetelementptr(2137:3): type of ^41 is %"struct.std::pair"*
	# MovePhi: ^41 -> ^43
	movq %rax, -816(%rbp)
	.__main__M333:
	# tt = Pointer, type = %"struct.std::pair"
	# LowerGetelementptr(2142:3): struct-type: ptr ^43 -> ^44, indices=-1
	movq -816(%rbp), %r12
	addq $-64, %r12
	# LowerGetelementptr(2142:3): type of ^44 is %"struct.std::pair"*
	# SetupCalls(2143:3): move argument ptr nonnull dereferenceable(64) align 8 ^44
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	callq _ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISA_EEEEED2Ev
	# LowerIcmp(2144:3): ptr ^44 vs. operand [6 x %"struct.std::pair"]* ^40
	cmpq %rbx, %r12
	sete %al
	andq $1, %rax
	cmpb $0, %al
	jne .__main__M367
	.__main__M364:
	# MovePhi: ^44 -> ^43 (in new block 114 whose parent is 42)
	movq %r12, -816(%rbp)
	jmp .__main__M333
	.__main__M367:
	# SetupCalls(2148:3): move argument ptr nonnull dereferenceable(32) align 8 ^13
	# Fixed movzx with identical source and destination widths
	movq -728(%rbp), %rdi
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev@PLT
	# SetupCalls(2149:3): move argument ptr nonnull dereferenceable(8) align 8 @_ZSt4cout
	leaq _ZSt4cout(%rip), %rdi
	# SetupCalls(2149:3): move argument ptr @.str.17
	leaq .str.17(%rip), %rsi
	callq _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
	# SetupCalls(2149:3): move ptr result from %rax
	movq %rax, %rax
	.__main__M414:
	# SetupCalls(2153:3): move argument ptr nonnull dereferenceable(16) align 8 @_ZSt3cin
	leaq _ZSt3cin(%rip), %rdi
	# SetupCalls(2153:3): move argument ptr nonnull dereferenceable(32) align 8 ^13
	# Fixed movzx with identical source and destination widths
	movq -728(%rbp), %rsi
	callq _ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EE@PLT
	# SetupCalls(2153:3): move ptr result from %rax
	movq %rax, %rbx
	# LowerLoad(2154:3).2: (^49) into ptr ^50
	movq (%rbx), %rax
	# tt = Pointer, type = i8
	# LowerGetelementptr(2155:3): struct-type: ptr ^50 -> ^51, indices=-24
	addq $-24, %rax
	# LowerGetelementptr(2155:3): type of ^51 is i8*
	# LowerLoad(2156:3).2: (^51) into i64 ^52
	movq (%rax), %rcx
	# tt = Pointer, type = i8
	# LowerGetelementptr(2157:3): pointer-type -> ^53
	addq %rbx, %rcx
	# SetupCalls(2158:3): move argument ptr nonnull dereferenceable(264) align 8 ^53
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	callq _ZNKSt9basic_iosIcSt11char_traitsIcEEcvbEv@PLT
	# SetupCalls(2158:3): move i1 result from %rax
	movb %al, %bl
	cmpb $0, %bl
	jne .__main__M476
	jmp .__main__M1118
	.__main__M476:
	# SetupCalls(2162:3): move argument ptr nonnull dereferenceable(32) align 8 ^13
	# Fixed movzx with identical source and destination widths
	movq -728(%rbp), %rdi
	callq _ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEcvSt17basic_string_viewIcS2_EEv@PLT
	# SetupCalls(2162:3): move 128-bit result from %rax and %rdx
	# Multireg move: <%hax %hdx> -> <%hbx %hr12>
	movq %rax, %rbx
	movq %rdx, %r12
	# tt = Pointer, type = {i64, ptr}
	# LowerGetelementptr(2163:3): struct-type: ptr ^15 -> ^57, indices=0,0
	movq -744(%rbp), %rax
	# LowerGetelementptr(2163:3): type of ^57 is i64*
	# LowerExtractvalue(2165:3)
	# PaddedStructs({i64, ptr} -> i64): move from pack ^56 ({i64, ptr}) to ^112 (opaque), index = 0
	movq %rbx, %rdx
	movq %rdx, %rcx
	# LowerStore(2165:3).9: mov i64 ^58, (^57)
	movq %rcx, (%rax)
	# tt = Pointer, type = {i64, ptr}
	# LowerGetelementptr(2166:3): struct-type: ptr ^15 -> ^59, indices=0,1
	movq -744(%rbp), %rax
	addq $8, %rax
	# LowerGetelementptr(2166:3): type of ^59 is ptr*
	# LowerExtractvalue(2168:3)
	# PaddedStructs({i64, ptr} -> ptr): move from pack ^56 ({i64, ptr}) to ^113 (opaque), index = 1
	movq %r12, %rcx
	movq %rcx, %rbx
	# LowerStore(2168:3).9: mov ptr ^60, (^59)
	movq %rbx, (%rax)
	# SetupCalls(2169:3): move argument ptr nonnull dereferenceable(16) align 8 ^16
	# Fixed movzx with identical source and destination widths
	movq -752(%rbp), %rdi
	# SetupCalls(2169:3): move argument ptr @.str.18
	leaq .str.18(%rip), %rsi
	callq _ZNSt17basic_string_viewIcSt11char_traitsIcEEC2EPKc
	# tt = Pointer, type = {i64, ptr}
	# LowerGetelementptr(2170:3): struct-type: ptr ^15 -> ^61, indices=0,0
	movq -744(%rbp), %rax
	# LowerGetelementptr(2170:3): type of ^61 is i64*
	# LowerLoad(2171:3).2: (^61) into i64 ^62
	movq (%rax), %rcx
	# tt = Pointer, type = {i64, ptr}
	# LowerGetelementptr(2172:3): struct-type: ptr ^15 -> ^63, indices=0,1
	movq -744(%rbp), %rbx
	addq $8, %rbx
	# LowerGetelementptr(2172:3): type of ^63 is ptr*
	# LowerLoad(2173:3).2: (^63) into ptr ^64
	movq (%rbx), %rax
	# tt = Pointer, type = {i64, ptr}
	# LowerGetelementptr(2174:3): struct-type: ptr ^16 -> ^65, indices=0,0
	movq -752(%rbp), %rbx
	# LowerGetelementptr(2174:3): type of ^65 is i64*
	# LowerLoad(2175:3).2: (^65) into i64 ^66
	movq (%rbx), %r8
	# tt = Pointer, type = {i64, ptr}
	# LowerGetelementptr(2176:3): struct-type: ptr ^16 -> ^67, indices=0,1
	movq -752(%rbp), %rbx
	addq $8, %rbx
	# LowerGetelementptr(2176:3): type of ^67 is ptr*
	# LowerLoad(2177:3).2: (^67) into ptr ^68
	movq (%rbx), %r9
	# SetupCalls(2178:3): move argument ptr sret align 8 ^14
	# Fixed movzx with identical source and destination widths
	movq -736(%rbp), %rdi
	# SetupCalls(2178:3): move argument i64 ^62
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(2178:3): move argument ptr ^64
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdx
	# SetupCalls(2178:3): move argument i64 ^66
	# Fixed movzx with identical source and destination widths
	movq %r8, %rcx
	# SetupCalls(2178:3): move argument ptr ^68
	# Fixed movzx with identical source and destination widths
	movq %r9, %r8
	# SetupCalls(2178:3): move argument i1 zeroext true
	movq $1, %r9
	andq $1, %r9
	callq _Z5splitSt17basic_string_viewIcSt11char_traitsIcEES2_b
	# SetupCalls(2179:3): move argument ptr nonnull dereferenceable(24) align 8 ^14
	# Fixed movzx with identical source and destination widths
	movq -736(%rbp), %rdi
	callq _ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE5emptyEv
	# SetupCalls(2179:3): move i1 result from %rax
	movb %al, %bl
	cmpb $0, %bl
	jne .__main__M626
	jmp .__main__M629
	.__main__M626:
	# LowerStore(2183:3).3: mov $imm, (^17)
	movq -760(%rbp), %rax
	movl $2, (%rax)
	jmp .__main__M1087
	.__main__M629:
	# SetupCalls(2187:3): move argument ptr nonnull dereferenceable(24) align 8 ^14
	# Fixed movzx with identical source and destination widths
	movq -736(%rbp), %rdi
	callq _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE5frontEv
	# SetupCalls(2187:3): move ptr result from %rax
	movq %rax, %rbx
	# LowerStore(2188:3).9: mov %"class.std::allocator.0"* ^20, (^4)
	movq -720(%rbp), %rax
	# Fixing source-to-dest movq -784(%rbp), (%rax)
	movq -784(%rbp), %r15
	movq %r15, (%rax)
	# LowerLoad(2189:3).2: (^4) into ptr ^73
	movq -704(%rbp), %rax
	movq -720(%rbp), %rcx
	# Fixing source-to-dest movq (%rcx), (%rax)
	movq (%rcx), %r15
	movq %r15, (%rax)
	# LowerStore(2190:3).9: mov ptr ^73, (^2)
	# LowerLoad(2191:3).2: (^2) into ptr ^74
	movq -704(%rbp), %rax
	movq (%rax), %rcx
	# SetupCalls(2192:3): move argument ptr nonnull dereferenceable(32) align 8 ^19
	# Fixed movzx with identical source and destination widths
	movq -776(%rbp), %rdi
	# SetupCalls(2192:3): move argument ptr nonnull dereferenceable(16) align 8 ^72
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(2192:3): move argument ptr nonnull dereferenceable(1) align 1 ^20
	# Fixed movzx with identical source and destination widths
	movq -784(%rbp), %rdx
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ISt17basic_string_viewIcS2_EvEERKT_RKS3_
	# SetupCalls(2193:3): move argument ptr nonnull dereferenceable(48) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq -696(%rbp), %rdi
	# SetupCalls(2193:3): move argument ptr nonnull dereferenceable(32) align 8 ^19
	# Fixed movzx with identical source and destination widths
	movq -776(%rbp), %rsi
	callq _ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaIS9_EEEESt4lessIS5_ESaISt4pairIKS5_SF_EEE4findERSJ_
	# SetupCalls(2193:3): move ptr result from %rax
	movq %rax, %rbx
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(2194:3): struct-type: ptr ^18 -> ^76, indices=0,0
	movq -768(%rbp), %rax
	# LowerGetelementptr(2194:3): type of ^76 is ptr*
	# LowerStore(2195:3).9: mov ptr ^75, (^76)
	movq %rbx, (%rax)
	# SetupCalls(2196:3): move argument ptr nonnull dereferenceable(32) align 8 ^19
	# Fixed movzx with identical source and destination widths
	movq -776(%rbp), %rdi
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
	# LowerStore(2197:3).9: mov %"class.std::allocator.0"* ^20, (^3)
	movq -712(%rbp), %rax
	# Fixing source-to-dest movq -784(%rbp), (%rax)
	movq -784(%rbp), %r15
	movq %r15, (%rax)
	# LowerLoad(2198:3).2: (^3) into ptr ^77
	movq -712(%rbp), %rax
	movq (%rax), %rbx
	# SetupCalls(2199:3): move argument ptr nonnull dereferenceable(1) align 1 ^77
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt15__new_allocatorIcED2Ev
	# LowerStore(2200:3).3: mov $imm, (^21)
	movq -792(%rbp), %rax
	movb $0, (%rax)
	# SetupCalls(2201:3): move argument ptr nonnull dereferenceable(48) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq -696(%rbp), %rdi
	callq _ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaIS9_EEEESt4lessIS5_ESaISt4pairIKS5_SF_EEE3endEv
	# SetupCalls(2201:3): move ptr result from %rax
	movq %rax, %rbx
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(2202:3): struct-type: ptr ^22 -> ^79, indices=0,0
	movq -800(%rbp), %rax
	# LowerGetelementptr(2202:3): type of ^79 is ptr*
	# LowerStore(2203:3).9: mov ptr ^78, (^79)
	movq %rbx, (%rax)
	# SetupCalls(2204:3): move argument ptr nonnull dereferenceable(8) align 8 ^18
	# Fixed movzx with identical source and destination widths
	movq -768(%rbp), %rdi
	# SetupCalls(2204:3): move argument ptr nonnull dereferenceable(8) align 8 ^22
	# Fixed movzx with identical source and destination widths
	movq -800(%rbp), %rsi
	callq _ZStneRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEESL_
	# SetupCalls(2204:3): move i1 result from %rax
	movb %al, %bl
	cmpb $0, %bl
	jne .__main__M819
	jmp .__main__M881
	.__main__M819:
	# SetupCalls(2208:3): move argument ptr nonnull dereferenceable(8) align 8 ^18
	# Fixed movzx with identical source and destination widths
	movq -768(%rbp), %rdi
	callq _ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEEptEv
	# SetupCalls(2208:3): move ptr result from %rax
	movq %rax, %rbx
	# tt = Pointer, type = %"struct.std::pair"
	# LowerGetelementptr(2209:3): struct-type: ptr ^82 -> ^83, indices=0,1
	movq %rbx, %rax
	addq $32, %rax
	# LowerGetelementptr(2209:3): type of ^83 is %"class.std::function"*
	# SetupCalls(2210:3): move argument ptr nonnull dereferenceable(32) align 8 ^83
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(2210:3): move argument ptr nonnull dereferenceable(24) align 8 ^14
	# Fixed movzx with identical source and destination widths
	movq -736(%rbp), %rsi
	callq _ZNKSt8functionIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEEclES8_
	# SetupCalls(2210:3): move i32 result from %rax
	movl %eax, %ebx
	# LowerIcmp(2211:3): i32 ^84 vs. intlike 0
	cmpl $0, %ebx
	sete %al
	andq $1, %rax
	# LowerBasicConversion(2212:3): i32 ^85 -> i8 ^86
	movq -792(%rbp), %rbx
	movb %al, (%rbx)
	# LowerStore(2213:3).9: mov i8 ^86, (^21)
	jmp .__main__M995
	.__main__M881:
	# SetupCalls(2217:3): move argument ptr nonnull dereferenceable(24) align 8 ^14
	# Fixed movzx with identical source and destination widths
	movq -736(%rbp), %rdi
	callq _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE5frontEv
	# SetupCalls(2217:3): move ptr result from %rax
	movq %rax, %rbx
	# SetupCalls(2218:3): move argument ptr align 8 ^23
	# Fixed movzx with identical source and destination widths
	movq -808(%rbp), %rdi
	# SetupCalls(2218:3): move argument ptr align 8 ^88
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(2218:3): move argument i64 16
	movq $16, %rdx
	callq memcpy@PLT
	# tt = Pointer, type = {i64, ptr}
	# LowerGetelementptr(2219:3): struct-type: ptr ^23 -> ^89, indices=0,0
	movq -808(%rbp), %rax
	# LowerGetelementptr(2219:3): type of ^89 is i64*
	# LowerLoad(2220:3).2: (^89) into i64 ^90
	movq (%rax), %rbx
	# tt = Pointer, type = {i64, ptr}
	# LowerGetelementptr(2221:3): struct-type: ptr ^23 -> ^91, indices=0,1
	movq -808(%rbp), %rcx
	addq $8, %rcx
	# LowerGetelementptr(2221:3): type of ^91 is ptr*
	# LowerLoad(2222:3).2: (^91) into ptr ^92
	movq (%rcx), %rax
	# SetupCalls(2223:3): move argument ptr nonnull dereferenceable(8) align 8 @_ZSt4cerr
	leaq _ZSt4cerr(%rip), %rdi
	# SetupCalls(2223:3): move argument i64 ^90
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(2223:3): move argument ptr ^92
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdx
	callq _ZStlsIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_St17basic_string_viewIS3_S4_E
	# SetupCalls(2223:3): move ptr result from %rax
	movq %rax, %rbx
	# SetupCalls(2224:3): move argument ptr nonnull dereferenceable(8) align 8 ^93
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(2224:3): move argument ptr @.str.19
	leaq .str.19(%rip), %rsi
	callq _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
	# SetupCalls(2224:3): move ptr result from %rax
	movq %rax, %rax
	.__main__M995:
	# SetupCalls(2228:3): move argument ptr nonnull dereferenceable(8) align 8 @_ZSt4cout
	leaq _ZSt4cout(%rip), %rdi
	# SetupCalls(2228:3): move argument ptr @.str.20
	leaq .str.20(%rip), %rsi
	callq _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
	# SetupCalls(2228:3): move ptr result from %rax
	movq %rax, %rbx
	# LowerLoad(2229:3).2: (^21) into i8 ^97
	movq -792(%rbp), %rcx
	movb (%rcx), %al
	# LowerTrunc(2230:3): 8 to 1, move
	# LowerTrunc(2230:3): 8 to 1, apply mask
	andq $1, %rax
	# LowerBasicConversion(2231:3): i1 ^98 -> i64 ^99
	movq %rax, %rcx
	# Truncate value to 8 bits
	andl $255, %ecx
	cmpb $0, %al
	movb $50, %al
	jne .__main__RC0
	movb $49, %al
	.__main__RC0:
	# SetupCalls(2233:3): move argument ptr nonnull dereferenceable(8) align 8 ^96
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(2233:3): move argument i8 signext ^100
	movzbq %al, %rsi
	movsbq %sil, %rsi
	callq _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@PLT
	# SetupCalls(2233:3): move ptr result from %rax
	movq %rax, %rbx
	# SetupCalls(2234:3): move argument ptr nonnull dereferenceable(8) align 8 ^101
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(2234:3): move argument ptr @.str.21
	leaq .str.21(%rip), %rsi
	callq _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
	# SetupCalls(2234:3): move ptr result from %rax
	movq %rax, %rax
	# LowerStore(2235:3).3: mov $imm, (^17)
	movq -760(%rbp), %rax
	movl $0, (%rax)
	.__main__M1087:
	# SetupCalls(2239:3): move argument ptr nonnull dereferenceable(24) align 8 ^14
	# Fixed movzx with identical source and destination widths
	movq -736(%rbp), %rdi
	callq _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EED2Ev
	# LowerLoad(2240:3).2: (^17) into i32 ^104
	movq -760(%rbp), %rax
	movl (%rax), %ebx
	# LowerSwitch(2241:3): begin conditions
	cmpl $0, %ebx
	je .__main__M1117
	cmpl $2, %ebx
	je .__main__M414
	# LowerSwitch(2241:3): default
	jmp .__main__M1163
	.__main__M1117:
	jmp .__main__M414
	.__main__M1118:
	# SetupCalls(2250:3): move argument ptr nonnull dereferenceable(32) align 8 ^13
	# Fixed movzx with identical source and destination widths
	movq -728(%rbp), %rdi
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
	# SetupCalls(2251:3): move argument ptr nonnull dereferenceable(48) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq -696(%rbp), %rdi
	callq _ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaIS9_EEEESt4lessIS5_ESaISt4pairIKS5_SF_EEED2Ev
	# LowerLoad(2252:3).2: (^7) into i32 ^107
	movq -688(%rbp), %rax
	movl (%rax), %ebx
	movl %ebx, %eax
	movq -864(%rbp), %r15
	movq -1040(%rbp), %r14
	movq -920(%rbp), %r13
	movq -856(%rbp), %r12
	movq -896(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq
	.__main__M1163:

.section .text
.global _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7_
.p2align 4, 0x90
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7_:
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(672 + 0, 16)
	subq $672, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -184(%rbp)
	movq %r12, -208(%rbp)
	movq %r13, -240(%rbp)
	movq %r14, -256(%rbp)
	movq %r15, -176(%rbp)
	# LowerAlloca(9042:3): size = 16, type = %"struct.std::pair.21"*, var = ^4
	# Fixing source-to-dest leaq -16(%rbp), -112(%rbp)
	leaq -16(%rbp), %r15
	movq %r15, -112(%rbp)
	# LowerAlloca(9043:3): size = 8, type = %"struct.std::_Rb_tree_const_iterator"*, var = ^5
	leaq -24(%rbp), %rcx
	# LowerAlloca(9044:3): size = 8, type = ptr*, var = ^6
	leaq -32(%rbp), %rbx
	# LowerAlloca(9045:3): size = 8, type = ptr*, var = ^7
	# Fixing source-to-dest leaq -40(%rbp), -128(%rbp)
	leaq -40(%rbp), %r15
	movq %r15, -128(%rbp)
	# LowerAlloca(9046:3): size = 8, type = %"struct.std::_Rb_tree_iterator"*, var = ^8
	# Fixing source-to-dest leaq -48(%rbp), -136(%rbp)
	leaq -48(%rbp), %r15
	movq %r15, -136(%rbp)
	# LowerAlloca(9047:3): size = 8, type = ptr*, var = ^9
	leaq -56(%rbp), %r12
	# LowerAlloca(9048:3): size = 8, type = %"struct.std::_Rb_tree_iterator"*, var = ^10
	# Fixing source-to-dest leaq -64(%rbp), -168(%rbp)
	leaq -64(%rbp), %r15
	movq %r15, -168(%rbp)
	# LowerAlloca(9049:3): size = 8, type = ptr*, var = ^11
	# Fixing source-to-dest leaq -72(%rbp), -160(%rbp)
	leaq -72(%rbp), %r15
	movq %r15, -160(%rbp)
	# LowerAlloca(9050:3): size = 8, type = %"struct.std::_Rb_tree_iterator"*, var = ^12
	# Fixing source-to-dest leaq -80(%rbp), -152(%rbp)
	leaq -80(%rbp), %r15
	movq %r15, -152(%rbp)
	# LowerAlloca(9051:3): size = 8, type = ptr*, var = ^13
	leaq -88(%rbp), %r13
	# LowerAlloca(9052:3): size = 8, type = ptr*, var = ^14
	# Fixing source-to-dest leaq -96(%rbp), -144(%rbp)
	leaq -96(%rbp), %r15
	movq %r15, -144(%rbp)
	# LowerAlloca(9053:3): size = 8, type = ptr*, var = ^15
	leaq -104(%rbp), %r14
	# tt = Pointer, type = %"struct.std::_Rb_tree_const_iterator"
	# LowerGetelementptr(9054:3): struct-type: ptr ^5 -> ^16, indices=0,0
	movq %rcx, %rax
	# LowerGetelementptr(9054:3): type of ^16 is ptr*
	# LowerStore(9055:3).9: mov ptr %rsi, (^16)
	movq %rsi, (%rax)
	# LowerStore(9056:3).9: mov ptr %rdi, (^6)
	movq %rdi, (%rbx)
	# LowerStore(9057:3).9: mov ptr %rdx, (^7)
	movq -128(%rbp), %rax
	movq %rdx, (%rax)
	# LowerLoad(9058:3).2: (^6) into ptr ^17
	# Fixing source-to-dest movq (%rbx), -120(%rbp)
	movq (%rbx), %r15
	movq %r15, -120(%rbp)
	# SetupCalls(9059:3): move argument ptr nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	callq _ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEE13_M_const_castEv
	# SetupCalls(9059:3): move ptr result from %rax
	movq %rax, %rbx
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(9060:3): struct-type: ptr ^8 -> ^19, indices=0,0
	movq -136(%rbp), %rax
	# LowerGetelementptr(9060:3): type of ^19 is ptr*
	# LowerStore(9061:3).9: mov ptr ^18, (^19)
	movq %rbx, (%rax)
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(9062:3): struct-type: ptr ^8 -> ^20, indices=0,0
	movq -136(%rbp), %rax
	# LowerGetelementptr(9062:3): type of ^20 is ptr*
	# LowerLoad(9063:3).2: (^20) into ptr ^21
	movq (%rax), %rbx
	# SetupCalls(9064:3): move argument ptr nonnull dereferenceable(48) align 8 ^17
	# Fixed movzx with identical source and destination widths
	movq -120(%rbp), %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE6_M_endEv
	# SetupCalls(9064:3): move ptr result from %rax
	movq %rax, %r15
	# LowerIcmp(9065:3): ptr ^21 vs. operand ptr ^22
	cmpq %r15, %rbx
	sete %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M100
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M314
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M100:
	# SetupCalls(9069:3): move argument ptr nonnull dereferenceable(48) align 8 ^17
	# Fixed movzx with identical source and destination widths
	movq -120(%rbp), %rdi
	callq _ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE4sizeEv
	# SetupCalls(9069:3): move i64 result from %rax
	movq %rax, %rbx
	# LowerIcmp(9070:3): i64 ^25 vs. intlike 0
	cmpq $0, %rbx
	seta %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M128
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M265
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M128:
	# tt = Pointer, type = %"class.std::_Rb_tree"
	# LowerGetelementptr(9074:3): struct-type: ptr ^17 -> ^28, indices=0,0
	movq -120(%rbp), %r13
	# LowerGetelementptr(9074:3): type of ^28 is %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Rb_tree_impl"*
	# tt = Pointer, type = %"struct.std::_Rb_tree_key_compare"
	# LowerGetelementptr(9075:3): struct-type: ptr ^28 -> ^29, indices=0,0
	# LowerGetelementptr(9075:3): type of ^29 is %"struct.std::less"*
	# SetupCalls(9076:3): move argument ptr nonnull dereferenceable(48) align 8 ^17
	# Fixed movzx with identical source and destination widths
	movq -120(%rbp), %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE12_M_rightmostEv
	# SetupCalls(9076:3): move ptr result from %rax
	movq %rax, %rbx
	# LowerLoad(9077:3).2: (^30) into ptr ^31
	movq (%rbx), %rax
	# SetupCalls(9078:3): move argument ptr ^31
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE6_S_keyEPKSt18_Rb_tree_node_base
	# SetupCalls(9078:3): move ptr result from %rax
	movq %rax, %rbx
	# LowerLoad(9079:3).2: (^7) into ptr ^33
	movq -128(%rbp), %rax
	movq (%rax), %rcx
	# SetupCalls(9080:3): move argument ptr nonnull dereferenceable(1) align 1 ^29
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	# SetupCalls(9080:3): move argument ptr nonnull dereferenceable(32) align 8 ^32
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(9080:3): move argument ptr nonnull dereferenceable(32) align 8 ^33
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdx
	callq _ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_
	# SetupCalls(9080:3): move i1 result from %rax
	movb %al, %bl
	cmpb $0, %bl
	jne .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M214
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M265
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M214:
	# LowerStore(9084:3).3: mov $imm, (^9)
	movq $0, (%r12)
	# SetupCalls(9085:3): move argument ptr nonnull dereferenceable(48) align 8 ^17
	# Fixed movzx with identical source and destination widths
	movq -120(%rbp), %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE12_M_rightmostEv
	# SetupCalls(9085:3): move ptr result from %rax
	movq %rax, %rbx
	# SetupCalls(9086:3): move argument ptr nonnull dereferenceable(16) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -112(%rbp), %rdi
	# SetupCalls(9086:3): move argument ptr nonnull dereferenceable(8) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq %r12, %rsi
	# SetupCalls(9086:3): move argument ptr nonnull dereferenceable(8) align 8 ^36
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdx
	callq _ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IS1_S1_Lb1EEERKS1_S5_
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M1203
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M265:
	# LowerLoad(9090:3).2: (^7) into ptr ^38
	movq -128(%rbp), %rax
	movq (%rax), %rbx
	# SetupCalls(9091:3): move argument ptr nonnull dereferenceable(48) align 8 ^17
	# Fixed movzx with identical source and destination widths
	movq -120(%rbp), %rdi
	# SetupCalls(9091:3): move argument ptr nonnull dereferenceable(32) align 8 ^38
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE24_M_get_insert_unique_posERS7_
	# SetupCalls(9091:3): move 128-bit result from %rax and %rdx
	# Multireg move: <%hax %hdx> -> <%hbx %hr12>
	movq %rax, %rbx
	movq %rdx, %r12
	# tt = Pointer, type = {ptr, ptr}
	# LowerGetelementptr(9092:3): struct-type: ptr ^4 -> ^40, indices=0,0
	movq -112(%rbp), %rax
	# LowerGetelementptr(9092:3): type of ^40 is ptr*
	# LowerExtractvalue(9094:3)
	# PaddedStructs({ptr, ptr} -> ptr): move from pack ^39 ({ptr, ptr}) to ^134 (opaque), index = 0
	movq %rbx, %rdx
	movq %rdx, %rcx
	# LowerStore(9094:3).9: mov ptr ^41, (^40)
	movq %rcx, (%rax)
	# tt = Pointer, type = {ptr, ptr}
	# LowerGetelementptr(9095:3): struct-type: ptr ^4 -> ^42, indices=0,1
	movq -112(%rbp), %rax
	addq $8, %rax
	# LowerGetelementptr(9095:3): type of ^42 is ptr*
	# LowerExtractvalue(9097:3)
	# PaddedStructs({ptr, ptr} -> ptr): move from pack ^39 ({ptr, ptr}) to ^135 (opaque), index = 1
	movq %r12, %rcx
	movq %rcx, %rbx
	# LowerStore(9097:3).9: mov ptr ^43, (^42)
	movq %rbx, (%rax)
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M1203
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M314:
	# tt = Pointer, type = %"class.std::_Rb_tree"
	# LowerGetelementptr(9101:3): struct-type: ptr ^17 -> ^45, indices=0,0
	movq -120(%rbp), %rbx
	# LowerGetelementptr(9101:3): type of ^45 is %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Rb_tree_impl"*
	# tt = Pointer, type = %"struct.std::_Rb_tree_key_compare"
	# LowerGetelementptr(9102:3): struct-type: ptr ^45 -> ^46, indices=0,0
	# LowerGetelementptr(9102:3): type of ^46 is %"struct.std::less"*
	# LowerLoad(9103:3).2: (^7) into ptr ^47
	movq -128(%rbp), %rax
	movq (%rax), %r15
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(9104:3): struct-type: ptr ^8 -> ^48, indices=0,0
	movq -136(%rbp), %rcx
	# LowerGetelementptr(9104:3): type of ^48 is ptr*
	# LowerLoad(9105:3).2: (^48) into ptr ^49
	movq (%rcx), %rax
	# SetupCalls(9106:3): move argument ptr ^49
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE6_S_keyEPKSt18_Rb_tree_node_base
	# SetupCalls(9106:3): move ptr result from %rax
	movq %rax, %r12
	# SetupCalls(9107:3): move argument ptr nonnull dereferenceable(1) align 1 ^46
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(9107:3): move argument ptr nonnull dereferenceable(32) align 8 ^47
	# Fixed movzx with identical source and destination widths
	movq %r15, %rsi
	# SetupCalls(9107:3): move argument ptr nonnull dereferenceable(32) align 8 ^50
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdx
	callq _ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_
	# SetupCalls(9107:3): move i1 result from %rax
	movb %al, %bl
	cmpb $0, %bl
	jne .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M381
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M753
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M381:
	# SetupCalls(9111:3): move argument ptr align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq -168(%rbp), %rdi
	# SetupCalls(9111:3): move argument ptr align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq -136(%rbp), %rsi
	# SetupCalls(9111:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(9112:3): struct-type: ptr ^8 -> ^53, indices=0,0
	movq -136(%rbp), %rax
	# LowerGetelementptr(9112:3): type of ^53 is ptr*
	# LowerLoad(9113:3).2: (^53) into ptr ^54
	movq (%rax), %rbx
	# SetupCalls(9114:3): move argument ptr nonnull dereferenceable(48) align 8 ^17
	# Fixed movzx with identical source and destination widths
	movq -120(%rbp), %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE11_M_leftmostEv
	# SetupCalls(9114:3): move ptr result from %rax
	movq %rax, %r12
	# LowerLoad(9115:3).2: (^55) into ptr ^56
	movq (%r12), %rax
	# LowerIcmp(9116:3): ptr ^54 vs. operand ptr ^56
	cmpq %rax, %rbx
	sete %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M442
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M514
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M442:
	# SetupCalls(9120:3): move argument ptr nonnull dereferenceable(48) align 8 ^17
	# Fixed movzx with identical source and destination widths
	movq -120(%rbp), %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE11_M_leftmostEv
	# SetupCalls(9120:3): move ptr result from %rax
	movq %rax, %rbx
	# SetupCalls(9121:3): move argument ptr nonnull dereferenceable(48) align 8 ^17
	# Fixed movzx with identical source and destination widths
	movq -120(%rbp), %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE11_M_leftmostEv
	# SetupCalls(9121:3): move ptr result from %rax
	movq %rax, %r12
	# SetupCalls(9122:3): move argument ptr nonnull dereferenceable(16) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -112(%rbp), %rdi
	# SetupCalls(9122:3): move argument ptr nonnull dereferenceable(8) align 8 ^59
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(9122:3): move argument ptr nonnull dereferenceable(8) align 8 ^60
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdx
	callq _ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_S4_Lb1EEEOT_OT0_
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M1203
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M514:
	# tt = Pointer, type = %"class.std::_Rb_tree"
	# LowerGetelementptr(9126:3): struct-type: ptr ^17 -> ^62, indices=0,0
	movq -120(%rbp), %r12
	# LowerGetelementptr(9126:3): type of ^62 is %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Rb_tree_impl"*
	# tt = Pointer, type = %"struct.std::_Rb_tree_key_compare"
	# LowerGetelementptr(9127:3): struct-type: ptr ^62 -> ^63, indices=0,0
	# LowerGetelementptr(9127:3): type of ^63 is %"struct.std::less"*
	# SetupCalls(9128:3): move argument ptr nonnull dereferenceable(8) align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq -168(%rbp), %rdi
	callq _ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEEmmEv
	# SetupCalls(9128:3): move ptr result from %rax
	movq %rax, %rbx
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(9129:3): struct-type: ptr ^64 -> ^65, indices=0,0
	movq %rbx, %rcx
	# LowerGetelementptr(9129:3): type of ^65 is ptr*
	# LowerLoad(9130:3).2: (^65) into ptr ^66
	movq (%rcx), %rax
	# SetupCalls(9131:3): move argument ptr ^66
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE6_S_keyEPKSt18_Rb_tree_node_base
	# SetupCalls(9131:3): move ptr result from %rax
	movq %rax, %rbx
	# LowerLoad(9132:3).2: (^7) into ptr ^68
	movq -128(%rbp), %rax
	movq (%rax), %rcx
	# SetupCalls(9133:3): move argument ptr nonnull dereferenceable(1) align 1 ^63
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(9133:3): move argument ptr nonnull dereferenceable(32) align 8 ^67
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(9133:3): move argument ptr nonnull dereferenceable(32) align 8 ^68
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdx
	callq _ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_
	# SetupCalls(9133:3): move i1 result from %rax
	movb %al, %bl
	cmpb $0, %bl
	jne .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M604
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M704
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M604:
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(9137:3): struct-type: ptr ^10 -> ^71, indices=0,0
	movq -168(%rbp), %rax
	# LowerGetelementptr(9137:3): type of ^71 is ptr*
	# LowerLoad(9138:3).2: (^71) into ptr ^72
	movq (%rax), %rbx
	# SetupCalls(9139:3): move argument ptr ^72
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE8_S_rightEPSt18_Rb_tree_node_base
	# SetupCalls(9139:3): move ptr result from %rax
	movq %rax, %rbx
	# LowerIcmp(9140:3): ptr ^73 vs. intlike 0
	cmpq $0, %rbx
	sete %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M638
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M670
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M638:
	# LowerStore(9144:3).3: mov $imm, (^11)
	movq -160(%rbp), %rax
	movq $0, (%rax)
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(9145:3): struct-type: ptr ^10 -> ^76, indices=0,0
	movq -168(%rbp), %rax
	# LowerGetelementptr(9145:3): type of ^76 is ptr*
	# SetupCalls(9146:3): move argument ptr nonnull dereferenceable(16) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -112(%rbp), %rdi
	# SetupCalls(9146:3): move argument ptr nonnull dereferenceable(8) align 8 ^11
	# Fixed movzx with identical source and destination widths
	movq -160(%rbp), %rsi
	# SetupCalls(9146:3): move argument ptr nonnull dereferenceable(8) align 8 ^76
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdx
	callq _ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IS1_S1_Lb1EEERKS1_S5_
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M1203
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M670:
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(9150:3): struct-type: ptr ^8 -> ^78, indices=0,0
	movq -136(%rbp), %rax
	# LowerGetelementptr(9150:3): type of ^78 is ptr*
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(9151:3): struct-type: ptr ^8 -> ^79, indices=0,0
	movq -136(%rbp), %rbx
	# LowerGetelementptr(9151:3): type of ^79 is ptr*
	# SetupCalls(9152:3): move argument ptr nonnull dereferenceable(16) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -112(%rbp), %rdi
	# SetupCalls(9152:3): move argument ptr nonnull dereferenceable(8) align 8 ^78
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(9152:3): move argument ptr nonnull dereferenceable(8) align 8 ^79
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdx
	callq _ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_S4_Lb1EEEOT_OT0_
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M1203
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M704:
	# LowerLoad(9156:3).2: (^7) into ptr ^81
	movq -128(%rbp), %rax
	movq (%rax), %rbx
	# SetupCalls(9157:3): move argument ptr nonnull dereferenceable(48) align 8 ^17
	# Fixed movzx with identical source and destination widths
	movq -120(%rbp), %rdi
	# SetupCalls(9157:3): move argument ptr nonnull dereferenceable(32) align 8 ^81
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE24_M_get_insert_unique_posERS7_
	# SetupCalls(9157:3): move 128-bit result from %rax and %rdx
	# Multireg move: <%hax %hdx> -> <%hbx %hr12>
	movq %rax, %rbx
	movq %rdx, %r12
	# tt = Pointer, type = {ptr, ptr}
	# LowerGetelementptr(9158:3): struct-type: ptr ^4 -> ^83, indices=0,0
	movq -112(%rbp), %rax
	# LowerGetelementptr(9158:3): type of ^83 is ptr*
	# LowerExtractvalue(9160:3)
	# PaddedStructs({ptr, ptr} -> ptr): move from pack ^82 ({ptr, ptr}) to ^136 (opaque), index = 0
	movq %rbx, %rdx
	movq %rdx, %rcx
	# LowerStore(9160:3).9: mov ptr ^84, (^83)
	movq %rcx, (%rax)
	# tt = Pointer, type = {ptr, ptr}
	# LowerGetelementptr(9161:3): struct-type: ptr ^4 -> ^85, indices=0,1
	movq -112(%rbp), %rax
	addq $8, %rax
	# LowerGetelementptr(9161:3): type of ^85 is ptr*
	# LowerExtractvalue(9163:3)
	# PaddedStructs({ptr, ptr} -> ptr): move from pack ^82 ({ptr, ptr}) to ^137 (opaque), index = 1
	movq %r12, %rcx
	movq %rcx, %rbx
	# LowerStore(9163:3).9: mov ptr ^86, (^85)
	movq %rbx, (%rax)
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M1203
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M753:
	# tt = Pointer, type = %"class.std::_Rb_tree"
	# LowerGetelementptr(9167:3): struct-type: ptr ^17 -> ^88, indices=0,0
	movq -120(%rbp), %rbx
	# LowerGetelementptr(9167:3): type of ^88 is %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Rb_tree_impl"*
	# tt = Pointer, type = %"struct.std::_Rb_tree_key_compare"
	# LowerGetelementptr(9168:3): struct-type: ptr ^88 -> ^89, indices=0,0
	# LowerGetelementptr(9168:3): type of ^89 is %"struct.std::less"*
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(9169:3): struct-type: ptr ^8 -> ^90, indices=0,0
	movq -136(%rbp), %rax
	# LowerGetelementptr(9169:3): type of ^90 is ptr*
	# LowerLoad(9170:3).2: (^90) into ptr ^91
	movq (%rax), %rcx
	# SetupCalls(9171:3): move argument ptr ^91
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE6_S_keyEPKSt18_Rb_tree_node_base
	# SetupCalls(9171:3): move ptr result from %rax
	movq %rax, %r12
	# LowerLoad(9172:3).2: (^7) into ptr ^93
	movq -128(%rbp), %rcx
	movq (%rcx), %rax
	# SetupCalls(9173:3): move argument ptr nonnull dereferenceable(1) align 1 ^89
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(9173:3): move argument ptr nonnull dereferenceable(32) align 8 ^92
	# Fixed movzx with identical source and destination widths
	movq %r12, %rsi
	# SetupCalls(9173:3): move argument ptr nonnull dereferenceable(32) align 8 ^93
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdx
	callq _ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_
	# SetupCalls(9173:3): move i1 result from %rax
	movb %al, %bl
	cmpb $0, %bl
	jne .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M820
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M1171
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M820:
	# SetupCalls(9177:3): move argument ptr align 8 ^12
	# Fixed movzx with identical source and destination widths
	movq -152(%rbp), %rdi
	# SetupCalls(9177:3): move argument ptr align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq -136(%rbp), %rsi
	# SetupCalls(9177:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(9178:3): struct-type: ptr ^8 -> ^96, indices=0,0
	movq -136(%rbp), %rax
	# LowerGetelementptr(9178:3): type of ^96 is ptr*
	# LowerLoad(9179:3).2: (^96) into ptr ^97
	movq (%rax), %rbx
	# SetupCalls(9180:3): move argument ptr nonnull dereferenceable(48) align 8 ^17
	# Fixed movzx with identical source and destination widths
	movq -120(%rbp), %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE12_M_rightmostEv
	# SetupCalls(9180:3): move ptr result from %rax
	movq %rax, %r12
	# LowerLoad(9181:3).2: (^98) into ptr ^99
	movq (%r12), %rax
	# LowerIcmp(9182:3): ptr ^97 vs. operand ptr ^99
	cmpq %rax, %rbx
	sete %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M881
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M932
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M881:
	# LowerStore(9186:3).3: mov $imm, (^13)
	movq $0, (%r13)
	# SetupCalls(9187:3): move argument ptr nonnull dereferenceable(48) align 8 ^17
	# Fixed movzx with identical source and destination widths
	movq -120(%rbp), %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE12_M_rightmostEv
	# SetupCalls(9187:3): move ptr result from %rax
	movq %rax, %rbx
	# SetupCalls(9188:3): move argument ptr nonnull dereferenceable(16) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -112(%rbp), %rdi
	# SetupCalls(9188:3): move argument ptr nonnull dereferenceable(8) align 8 ^13
	# Fixed movzx with identical source and destination widths
	movq %r13, %rsi
	# SetupCalls(9188:3): move argument ptr nonnull dereferenceable(8) align 8 ^102
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdx
	callq _ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IS1_S1_Lb1EEERKS1_S5_
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M1203
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M932:
	# tt = Pointer, type = %"class.std::_Rb_tree"
	# LowerGetelementptr(9192:3): struct-type: ptr ^17 -> ^104, indices=0,0
	movq -120(%rbp), %rbx
	# LowerGetelementptr(9192:3): type of ^104 is %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Rb_tree_impl"*
	# tt = Pointer, type = %"struct.std::_Rb_tree_key_compare"
	# LowerGetelementptr(9193:3): struct-type: ptr ^104 -> ^105, indices=0,0
	# LowerGetelementptr(9193:3): type of ^105 is %"struct.std::less"*
	# LowerLoad(9194:3).2: (^7) into ptr ^106
	movq -128(%rbp), %rax
	movq (%rax), %r12
	# SetupCalls(9195:3): move argument ptr nonnull dereferenceable(8) align 8 ^12
	# Fixed movzx with identical source and destination widths
	movq -152(%rbp), %rdi
	callq _ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEEppEv
	# SetupCalls(9195:3): move ptr result from %rax
	movq %rax, %r13
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(9196:3): struct-type: ptr ^107 -> ^108, indices=0,0
	movq %r13, %rax
	# LowerGetelementptr(9196:3): type of ^108 is ptr*
	# LowerLoad(9197:3).2: (^108) into ptr ^109
	movq (%rax), %rcx
	# SetupCalls(9198:3): move argument ptr ^109
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE6_S_keyEPKSt18_Rb_tree_node_base
	# SetupCalls(9198:3): move ptr result from %rax
	movq %rax, %r13
	# SetupCalls(9199:3): move argument ptr nonnull dereferenceable(1) align 1 ^105
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(9199:3): move argument ptr nonnull dereferenceable(32) align 8 ^106
	# Fixed movzx with identical source and destination widths
	movq %r12, %rsi
	# SetupCalls(9199:3): move argument ptr nonnull dereferenceable(32) align 8 ^110
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdx
	callq _ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_
	# SetupCalls(9199:3): move i1 result from %rax
	movb %al, %bl
	cmpb $0, %bl
	jne .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M1022
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M1122
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M1022:
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(9203:3): struct-type: ptr ^8 -> ^113, indices=0,0
	movq -136(%rbp), %rax
	# LowerGetelementptr(9203:3): type of ^113 is ptr*
	# LowerLoad(9204:3).2: (^113) into ptr ^114
	movq (%rax), %rbx
	# SetupCalls(9205:3): move argument ptr ^114
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE8_S_rightEPSt18_Rb_tree_node_base
	# SetupCalls(9205:3): move ptr result from %rax
	movq %rax, %rbx
	# LowerIcmp(9206:3): ptr ^115 vs. intlike 0
	cmpq $0, %rbx
	sete %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M1056
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M1088
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M1056:
	# LowerStore(9210:3).3: mov $imm, (^14)
	movq -144(%rbp), %rax
	movq $0, (%rax)
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(9211:3): struct-type: ptr ^8 -> ^118, indices=0,0
	movq -136(%rbp), %rax
	# LowerGetelementptr(9211:3): type of ^118 is ptr*
	# SetupCalls(9212:3): move argument ptr nonnull dereferenceable(16) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -112(%rbp), %rdi
	# SetupCalls(9212:3): move argument ptr nonnull dereferenceable(8) align 8 ^14
	# Fixed movzx with identical source and destination widths
	movq -144(%rbp), %rsi
	# SetupCalls(9212:3): move argument ptr nonnull dereferenceable(8) align 8 ^118
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdx
	callq _ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IS1_S1_Lb1EEERKS1_S5_
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M1203
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M1088:
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(9216:3): struct-type: ptr ^12 -> ^120, indices=0,0
	movq -152(%rbp), %rax
	# LowerGetelementptr(9216:3): type of ^120 is ptr*
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(9217:3): struct-type: ptr ^12 -> ^121, indices=0,0
	movq -152(%rbp), %rbx
	# LowerGetelementptr(9217:3): type of ^121 is ptr*
	# SetupCalls(9218:3): move argument ptr nonnull dereferenceable(16) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -112(%rbp), %rdi
	# SetupCalls(9218:3): move argument ptr nonnull dereferenceable(8) align 8 ^120
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(9218:3): move argument ptr nonnull dereferenceable(8) align 8 ^121
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdx
	callq _ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_S4_Lb1EEEOT_OT0_
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M1203
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M1122:
	# LowerLoad(9222:3).2: (^7) into ptr ^123
	movq -128(%rbp), %rax
	movq (%rax), %rbx
	# SetupCalls(9223:3): move argument ptr nonnull dereferenceable(48) align 8 ^17
	# Fixed movzx with identical source and destination widths
	movq -120(%rbp), %rdi
	# SetupCalls(9223:3): move argument ptr nonnull dereferenceable(32) align 8 ^123
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE24_M_get_insert_unique_posERS7_
	# SetupCalls(9223:3): move 128-bit result from %rax and %rdx
	# Multireg move: <%hax %hdx> -> <%hbx %hr12>
	movq %rax, %rbx
	movq %rdx, %r12
	# tt = Pointer, type = {ptr, ptr}
	# LowerGetelementptr(9224:3): struct-type: ptr ^4 -> ^125, indices=0,0
	movq -112(%rbp), %rcx
	# LowerGetelementptr(9224:3): type of ^125 is ptr*
	# LowerExtractvalue(9226:3)
	# PaddedStructs({ptr, ptr} -> ptr): move from pack ^124 ({ptr, ptr}) to ^138 (opaque), index = 0
	movq %rbx, %rdx
	movq %rdx, %rax
	# LowerStore(9226:3).9: mov ptr ^126, (^125)
	movq %rax, (%rcx)
	# tt = Pointer, type = {ptr, ptr}
	# LowerGetelementptr(9227:3): struct-type: ptr ^4 -> ^127, indices=0,1
	movq -112(%rbp), %rax
	addq $8, %rax
	# LowerGetelementptr(9227:3): type of ^127 is ptr*
	# LowerExtractvalue(9229:3)
	# PaddedStructs({ptr, ptr} -> ptr): move from pack ^124 ({ptr, ptr}) to ^139 (opaque), index = 1
	movq %r12, %rcx
	movq %rcx, %rbx
	# LowerStore(9229:3).9: mov ptr ^128, (^127)
	movq %rbx, (%rax)
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M1203
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M1171:
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(9233:3): struct-type: ptr ^8 -> ^130, indices=0,0
	movq -136(%rbp), %rax
	# LowerGetelementptr(9233:3): type of ^130 is ptr*
	# LowerStore(9234:3).3: mov $imm, (^15)
	movq $0, (%r14)
	# SetupCalls(9235:3): move argument ptr nonnull dereferenceable(16) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -112(%rbp), %rdi
	# SetupCalls(9235:3): move argument ptr nonnull dereferenceable(8) align 8 ^130
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(9235:3): move argument ptr nonnull dereferenceable(8) align 8 ^15
	# Fixed movzx with identical source and destination widths
	movq %r14, %rdx
	callq _ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IS1_S1_Lb1EEERKS1_S5_
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M1203:
	# LowerLoad(9239:3).2: (^4) into {ptr, ptr} ^132
	movq -112(%rbp), %rax
	# FinishMultireg: mov (%reg), <%pack...>
	movq (%rax), %rbx
	movq 8(%rax), %rcx
	# LowerRet: two-register return
	movq %rbx, %rax
	movq %rcx, %rdx
	movq -176(%rbp), %r15
	movq -256(%rbp), %r14
	movq -240(%rbp), %r13
	movq -208(%rbp), %r12
	movq -184(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _Z5clearRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE
.p2align 4, 0x90
_Z5clearRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE:
	.___Z5clearRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(8 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	# LowerAlloca(2075:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(2076:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# SetupCalls(2077:3): move argument ptr nonnull dereferenceable(8) align 8 @_ZSt4cout
	leaq _ZSt4cout(%rip), %rdi
	# SetupCalls(2077:3): move argument ptr @.str.10
	leaq .str.10(%rip), %rsi
	callq _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
	# SetupCalls(2077:3): move ptr result from %rax
	movq %rax, %rax
	movq $0, %rax
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE8max_sizeEv
.p2align 4, 0x90
_ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE8max_sizeEv:
	.___ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE8max_sizeEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(5528:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(5529:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(5530:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# SetupCalls(5531:3): move argument ptr nonnull dereferenceable(24) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNKSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE19_M_get_Tp_allocatorEv
	# SetupCalls(5531:3): move ptr result from %rax
	movq %rax, %rbx
	# SetupCalls(5532:3): move argument ptr nonnull dereferenceable(1) align 1 ^4
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE11_S_max_sizeERKS4_
	# SetupCalls(5532:3): move i64 result from %rax
	movq %rax, %rbx
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EclINS_17__normal_iteratorIP6LsItemS2_ISF_SaISF_EEEESJ_EEbT_T0_
.p2align 4, 0x90
_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EclINS_17__normal_iteratorIP6LsItemS2_ISF_SaISF_EEEESJ_EEbT_T0_:
	.___ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EclINS_17__normal_iteratorIP6LsItemS2_ISF_SaISF_EEEESJ_EEbT_T0___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(72 + 0, 16)
	subq $80, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -40(%rbp)
	movq %r12, -32(%rbp)
	movq %r13, -48(%rbp)
	movq %r14, -56(%rbp)
	# LowerAlloca(7551:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^4
	leaq -8(%rbp), %rcx
	# LowerAlloca(7552:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^5
	leaq -16(%rbp), %r12
	# LowerAlloca(7553:3): size = 8, type = ptr*, var = ^6
	leaq -24(%rbp), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7554:3): struct-type: ptr ^4 -> ^7, indices=0,0
	movq %rcx, %rax
	# LowerGetelementptr(7554:3): type of ^7 is ptr*
	# LowerStore(7555:3).9: mov ptr %rsi, (^7)
	movq %rsi, (%rax)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7556:3): struct-type: ptr ^5 -> ^8, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(7556:3): type of ^8 is ptr*
	# LowerStore(7557:3).9: mov ptr %rdx, (^8)
	movq %rdx, (%rax)
	# LowerStore(7558:3).9: mov ptr %rdi, (^6)
	movq %rdi, (%rbx)
	# LowerLoad(7559:3).2: (^6) into ptr ^9
	movq (%rbx), %r13
	# tt = Pointer, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"
	# LowerGetelementptr(7560:3): struct-type: ptr ^9 -> ^10, indices=0,0
	# LowerGetelementptr(7560:3): type of ^10 is %class.anon*
	# SetupCalls(7561:3): move argument ptr nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEdeEv
	# SetupCalls(7561:3): move ptr result from %rax
	movq %rax, %r14
	# SetupCalls(7562:3): move argument ptr nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEdeEv
	# SetupCalls(7562:3): move ptr result from %rax
	movq %rax, %rbx
	# SetupCalls(7563:3): move argument ptr nonnull dereferenceable(1) align 1 ^10
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	# SetupCalls(7563:3): move argument ptr nonnull dereferenceable(33) align 8 ^11
	# Fixed movzx with identical source and destination widths
	movq %r14, %rsi
	# SetupCalls(7563:3): move argument ptr nonnull dereferenceable(33) align 8 ^12
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdx
	callq _ZZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEENK3$_0clERK6LsItemSB_
	# SetupCalls(7563:3): move i1 result from %rax
	movb %al, %bl
	movb %bl, %al
	movq -56(%rbp), %r14
	movq -48(%rbp), %r13
	movq -32(%rbp), %r12
	movq -40(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt10filesystem7__cxx1115directory_entry4pathEv
.p2align 4, 0x90
_ZNKSt10filesystem7__cxx1115directory_entry4pathEv:
	.___ZNKSt10filesystem7__cxx1115directory_entry4pathEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(1637:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(1638:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(1639:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::directory_entry"
	# LowerGetelementptr(1640:3): struct-type: ptr ^3 -> ^4, indices=0,0
	# LowerGetelementptr(1640:3): type of ^4 is %"class.std::filesystem::__cxx11::path"*
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10filesystem7__cxx118__detail17__effective_rangeIcSt11char_traitsIcEEESt17basic_string_viewIT_S3_IS6_EERKS5_IS6_T0_E
.p2align 4, 0x90
_ZNSt10filesystem7__cxx118__detail17__effective_rangeIcSt11char_traitsIcEEESt17basic_string_viewIT_S3_IS6_EERKS5_IS6_T0_E:
	.___ZNSt10filesystem7__cxx118__detail17__effective_rangeIcSt11char_traitsIcEEESt17basic_string_viewIT_S3_IS6_EERKS5_IS6_T0_E__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	# LowerAlloca(6121:3): size = 16, type = %"class.std::basic_string_view"*, var = ^2
	leaq -16(%rbp), %rbx
	# LowerAlloca(6122:3): size = 8, type = ptr*, var = ^3
	leaq -24(%rbp), %rax
	# LowerStore(6123:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rax)
	# LowerLoad(6124:3).2: (^3) into ptr ^4
	movq (%rax), %rcx
	# SetupCalls(6125:3): move argument ptr align 8 ^2
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(6125:3): move argument ptr align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(6125:3): move argument i64 16
	movq $16, %rdx
	callq memcpy@PLT
	# LowerLoad(6126:3).2: (^2) into {i64, ptr} ^5
	# FinishMultireg: mov (%reg), <%pack...>
	movq (%rbx), %rax
	movq 8(%rbx), %rcx
	# LowerRet: two-register return
	movq %rax, %rax
	movq %rcx, %rdx
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE19_M_release_last_useEv
.p2align 4, 0x90
_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE19_M_release_last_useEv:
	.___ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE19_M_release_last_useEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(304 + 0, 16)
	subq $304, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -168(%rbp)
	movq %r12, -128(%rbp)
	movq %r13, -136(%rbp)
	movq %r14, -192(%rbp)
	movq %r15, -144(%rbp)
	# LowerAlloca(3312:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %r12
	# LowerAlloca(3313:3): size = 4, type = i32*, var = ^3
	leaq -12(%rbp), %r13
	# LowerAlloca(3314:3): size = 4, type = i32*, var = ^4
	# Fixing source-to-dest leaq -16(%rbp), -112(%rbp)
	leaq -16(%rbp), %r15
	movq %r15, -112(%rbp)
	# LowerAlloca(3315:3): size = 4, type = i32*, var = ^5
	# Fixing source-to-dest leaq -20(%rbp), -96(%rbp)
	leaq -20(%rbp), %r15
	movq %r15, -96(%rbp)
	# LowerAlloca(3316:3): size = 8, type = ptr*, var = ^6
	# Fixing source-to-dest leaq -32(%rbp), -120(%rbp)
	leaq -32(%rbp), %r15
	movq %r15, -120(%rbp)
	# LowerAlloca(3317:3): size = 4, type = i32*, var = ^7
	leaq -36(%rbp), %rbx
	# LowerAlloca(3318:3): size = 4, type = i32*, var = ^8
	# Fixing source-to-dest leaq -40(%rbp), -104(%rbp)
	leaq -40(%rbp), %r15
	movq %r15, -104(%rbp)
	# LowerAlloca(3319:3): size = 4, type = i32*, var = ^9
	# Fixing source-to-dest leaq -44(%rbp), -88(%rbp)
	leaq -44(%rbp), %r15
	movq %r15, -88(%rbp)
	# LowerAlloca(3320:3): size = 8, type = ptr*, var = ^10
	leaq -56(%rbp), %r14
	# LowerAlloca(3321:3): size = 4, type = i32*, var = ^11
	leaq -60(%rbp), %r15
	# LowerAlloca(3322:3): size = 8, type = ptr*, var = ^12
	leaq -72(%rbp), %rax
	# LowerStore(3323:3).9: mov ptr %rdi, (^12)
	movq %rdi, (%rax)
	# LowerLoad(3324:3).2: (^12) into ptr ^13
	# Fixing source-to-dest movq (%rax), -80(%rbp)
	pushq %r15
	movq (%rax), %r15
	movq %r15, -80(%rbp)
	popq %r15
	# LowerLoad(3325:3).2: (^13) into ptr ^14
	movq -80(%rbp), %rax
	movq (%rax), %rcx
	# tt = Pointer, type = ptr
	# LowerGetelementptr(3326:3): struct-type: ptr ^14 -> ^15, indices=2
	addq $16, %rcx
	# LowerGetelementptr(3326:3): type of ^15 is ptr*
	# LowerLoad(3327:3).2: (^15) into ptr ^16
	movq (%rcx), %rax
	# SetupCalls(3328:3): move argument ptr nonnull dereferenceable(16) align 8 ^13
	# Fixed movzx with identical source and destination widths
	movq -80(%rbp), %rdi
	# SetupCalls(3328:3): jump to function operand ^16
	callq *%rax
	# tt = Pointer, type = %"class.std::_Sp_counted_base"
	# LowerGetelementptr(3329:3): struct-type: ptr ^13 -> ^17, indices=0,2
	movq -80(%rbp), %rax
	addq $12, %rax
	# LowerGetelementptr(3329:3): type of ^17 is i32*
	# LowerStore(3330:3).9: mov %"class.std::_Sp_counted_base"* ^17, (^10)
	movq %rax, (%r14)
	# LowerStore(3331:3).3: mov $imm, (^11)
	movl $-1, (%r15)
	# LowerLoad(3332:3).4: __libc_single_threaded into ^18
	movb __libc_single_threaded(%rip), %al
	# LowerIcmp(3333:3): i8 ^18 vs. intlike 0
	cmpb $0, %al
	setne %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE19_M_release_last_useEv__M74
	jmp .___ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE19_M_release_last_useEv__M104
	.___ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE19_M_release_last_useEv__M74:
	# LowerLoad(3337:3).2: (^10) into ptr ^21
	movq (%r14), %rax
	# LowerLoad(3338:3).2: (^11) into i32 ^22
	movl (%r15), %ecx
	# LowerStore(3339:3).9: mov ptr ^21, (^6)
	movq -120(%rbp), %rdx
	movq %rax, (%rdx)
	# LowerStore(3340:3).9: mov i32 ^22, (^7)
	movl %ecx, (%rbx)
	# LowerLoad(3341:3).2: (^6) into ptr ^23
	movq -120(%rbp), %rcx
	movq (%rcx), %rax
	# LowerLoad(3342:3).2: (^23) into i32 ^24
	movq -104(%rbp), %rcx
	# Fixing source-to-dest movl (%rax), (%rcx)
	movl (%rax), %r15d
	movl %r15d, (%rcx)
	# LowerStore(3343:3).9: mov i32 ^24, (^8)
	# LowerLoad(3344:3).2: (^7) into i32 ^25
	movl (%rbx), %ecx
	# LowerLoad(3345:3).2: (^6) into ptr ^26
	movq -120(%rbp), %rbx
	movq (%rbx), %rax
	# LowerLoad(3346:3).2: (^26) into i32 ^27
	movl (%rax), %ebx
	# LowerMath(3347:3): ^27, ^25 into i32 ^28
	addl %ecx, %ebx
	# LowerStore(3348:3).9: mov i32 ^28, (^26)
	movl %ebx, (%rax)
	# LowerLoad(3349:3).2: (^8) into i32 ^29
	movq -88(%rbp), %rax
	movq -104(%rbp), %rbx
	# Fixing source-to-dest movl (%rbx), (%rax)
	movl (%rbx), %r15d
	movl %r15d, (%rax)
	# LowerStore(3350:3).9: mov i32 ^29, (^9)
	jmp .___ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE19_M_release_last_useEv__M129
	.___ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE19_M_release_last_useEv__M104:
	# LowerLoad(3354:3).2: (^10) into ptr ^31
	movq (%r14), %rax
	# LowerLoad(3355:3).2: (^11) into i32 ^32
	movl (%r15), %ebx
	# LowerStore(3356:3).9: mov ptr ^31, (^2)
	movq %rax, (%r12)
	# LowerStore(3357:3).9: mov i32 ^32, (^3)
	movl %ebx, (%r13)
	# LowerLoad(3358:3).2: (^2) into ptr ^33
	movq (%r12), %rbx
	# LowerLoad(3359:3).2: (^3) into i32 ^34
	movq -112(%rbp), %rax
	# Fixing source-to-dest movl (%r13), (%rax)
	movl (%r13), %r15d
	movl %r15d, (%rax)
	# LowerStore(3360:3).9: mov i32 ^34, (^4)
	# LowerLoad(3361:3).2: (^4) into i32 ^35
	movq -112(%rbp), %rax
	movl (%rax), %ecx
	lock addl %ecx, (%rbx)
	# LowerStore(3363:3).9: mov i32 ^36, (^5)
	movq -96(%rbp), %rax
	movl %ecx, (%rax)
	# LowerLoad(3364:3).2: (^5) into i32 ^37
	movq -88(%rbp), %rbx
	movq -96(%rbp), %rax
	# Fixing source-to-dest movl (%rax), (%rbx)
	movl (%rax), %r15d
	movl %r15d, (%rbx)
	# LowerStore(3365:3).9: mov i32 ^37, (^9)
	.___ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE19_M_release_last_useEv__M129:
	# LowerLoad(3369:3).2: (^9) into i32 ^39
	movq -88(%rbp), %rbx
	movl (%rbx), %eax
	# LowerIcmp(3370:3): i32 ^39 vs. intlike 1
	cmpl $1, %eax
	sete %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE19_M_release_last_useEv__M136
	jmp .___ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE19_M_release_last_useEv__M168
	.___ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE19_M_release_last_useEv__M136:
	# LowerLoad(3374:3).2: (^13) into ptr ^42
	movq -80(%rbp), %rax
	movq (%rax), %rbx
	# tt = Pointer, type = ptr
	# LowerGetelementptr(3375:3): struct-type: ptr ^42 -> ^43, indices=3
	addq $24, %rbx
	# LowerGetelementptr(3375:3): type of ^43 is ptr*
	# LowerLoad(3376:3).2: (^43) into ptr ^44
	movq (%rbx), %rax
	# SetupCalls(3377:3): move argument ptr nonnull dereferenceable(16) align 8 ^13
	# Fixed movzx with identical source and destination widths
	movq -80(%rbp), %rdi
	# SetupCalls(3377:3): jump to function operand ^44
	callq *%rax
	.___ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE19_M_release_last_useEv__M168:
	movq -144(%rbp), %r15
	movq -192(%rbp), %r14
	movq -136(%rbp), %r13
	movq -128(%rbp), %r12
	movq -168(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEE4baseEv
.p2align 4, 0x90
_ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEE4baseEv:
	.___ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEE4baseEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(6760:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(6761:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(6762:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(6763:3): struct-type: ptr ^3 -> ^4, indices=0,0
	# LowerGetelementptr(6763:3): type of ^4 is ptr*
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt11_Tuple_implILm1EJNSt10filesystem7__cxx114path5_List13_Impl_deleterEEE7_M_headERS5_
.p2align 4, 0x90
_ZNSt11_Tuple_implILm1EJNSt10filesystem7__cxx114path5_List13_Impl_deleterEEE7_M_headERS5_:
	.___ZNSt11_Tuple_implILm1EJNSt10filesystem7__cxx114path5_List13_Impl_deleterEEE7_M_headERS5___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(3961:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(3962:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(3963:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# SetupCalls(3964:3): move argument ptr nonnull dereferenceable(1) align 1 ^3
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt10_Head_baseILm1ENSt10filesystem7__cxx114path5_List13_Impl_deleterELb1EE7_M_headERS5_
	# SetupCalls(3964:3): move ptr result from %rax
	movq %rax, %rbx
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt19__relocate_object_aISt17basic_string_viewIcSt11char_traitsIcEES3_SaIS3_EEvPT_PT0_RT1_
.p2align 4, 0x90
_ZSt19__relocate_object_aISt17basic_string_viewIcSt11char_traitsIcEES3_SaIS3_EEvPT_PT0_RT1_:
	.___ZSt19__relocate_object_aISt17basic_string_viewIcSt11char_traitsIcEES3_SaIS3_EEvPT_PT0_RT1___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(200 + 0, 16)
	subq $208, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -144(%rbp)
	movq %r12, -152(%rbp)
	movq %r13, -160(%rbp)
	movq %r14, -168(%rbp)
	movq %r15, -128(%rbp)
	# LowerAlloca(5661:3): size = 8, type = ptr*, var = ^4
	# Fixing source-to-dest leaq -8(%rbp), -120(%rbp)
	leaq -8(%rbp), %r15
	movq %r15, -120(%rbp)
	# LowerAlloca(5662:3): size = 8, type = ptr*, var = ^5
	# Fixing source-to-dest leaq -16(%rbp), -112(%rbp)
	leaq -16(%rbp), %r15
	movq %r15, -112(%rbp)
	# LowerAlloca(5663:3): size = 8, type = ptr*, var = ^6
	leaq -24(%rbp), %rbx
	# LowerAlloca(5664:3): size = 8, type = ptr*, var = ^7
	leaq -32(%rbp), %r12
	# LowerAlloca(5665:3): size = 8, type = ptr*, var = ^8
	leaq -40(%rbp), %rax
	# LowerAlloca(5666:3): size = 8, type = ptr*, var = ^9
	leaq -48(%rbp), %r9
	# LowerAlloca(5667:3): size = 8, type = ptr*, var = ^10
	leaq -56(%rbp), %r10
	# LowerAlloca(5668:3): size = 8, type = ptr*, var = ^11
	leaq -64(%rbp), %r11
	# LowerAlloca(5669:3): size = 8, type = ptr*, var = ^12
	leaq -72(%rbp), %rcx
	# LowerAlloca(5670:3): size = 8, type = ptr*, var = ^13
	leaq -80(%rbp), %r8
	# LowerAlloca(5671:3): size = 8, type = ptr*, var = ^14
	leaq -88(%rbp), %r13
	# LowerAlloca(5672:3): size = 8, type = ptr*, var = ^15
	leaq -96(%rbp), %r14
	# LowerAlloca(5673:3): size = 8, type = ptr*, var = ^16
	leaq -104(%rbp), %r15
	# LowerStore(5674:3).9: mov ptr %rdi, (^14)
	movq %rdi, (%r13)
	# LowerStore(5675:3).9: mov ptr %rsi, (^15)
	movq %rsi, (%r14)
	# LowerStore(5676:3).9: mov ptr %rdx, (^16)
	movq %rdx, (%r15)
	# LowerLoad(5677:3).2: (^16) into ptr ^17
	movq (%r15), %rsi
	# LowerLoad(5678:3).2: (^14) into ptr ^18
	movq (%r13), %rdi
	# LowerLoad(5679:3).2: (^15) into ptr ^19
	movq (%r14), %rdx
	# LowerStore(5680:3).9: mov ptr ^17, (^11)
	movq %rsi, (%r11)
	# LowerStore(5681:3).9: mov ptr ^18, (^12)
	movq %rdi, (%rcx)
	# LowerStore(5682:3).9: mov ptr ^19, (^13)
	movq %rdx, (%r8)
	# LowerLoad(5683:3).2: (^11) into ptr ^20
	movq (%r11), %rsi
	# LowerLoad(5684:3).2: (^12) into ptr ^21
	movq (%rcx), %rdx
	# LowerLoad(5685:3).2: (^13) into ptr ^22
	movq (%r8), %rcx
	# LowerStore(5686:3).9: mov ptr ^20, (^8)
	movq %rsi, (%rax)
	# LowerStore(5687:3).9: mov ptr ^21, (^9)
	movq %rdx, (%r9)
	# LowerStore(5688:3).9: mov ptr ^22, (^10)
	movq %rcx, (%r10)
	# LowerLoad(5689:3).2: (^8) into ptr ^23
	movq (%rax), %rcx
	# LowerLoad(5690:3).2: (^9) into ptr ^24
	movq (%r9), %rax
	# LowerLoad(5691:3).2: (^10) into ptr ^25
	movq (%r10), %rcx
	# SetupCalls(5692:3): move argument ptr align 8 ^24
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(5692:3): move argument ptr align 8 ^25
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(5692:3): move argument i64 16
	movq $16, %rdx
	callq memcpy@PLT
	# LowerLoad(5693:3).2: (^16) into ptr ^26
	movq (%r15), %rax
	# LowerLoad(5694:3).2: (^15) into ptr ^27
	movq (%r14), %rcx
	# LowerStore(5695:3).9: mov ptr ^26, (^6)
	movq %rax, (%rbx)
	# LowerStore(5696:3).9: mov ptr ^27, (^7)
	movq %rcx, (%r12)
	# LowerLoad(5697:3).2: (^6) into ptr ^28
	movq (%rbx), %rax
	# LowerLoad(5698:3).2: (^7) into ptr ^29
	movq (%r12), %rbx
	# LowerStore(5699:3).9: mov ptr ^28, (^4)
	movq -120(%rbp), %rcx
	movq %rax, (%rcx)
	# LowerStore(5700:3).9: mov ptr ^29, (^5)
	movq -112(%rbp), %rax
	movq %rbx, (%rax)
	# LowerLoad(5701:3).2: (^4) into ptr ^30
	movq -120(%rbp), %rbx
	movq (%rbx), %rax
	# LowerLoad(5702:3).2: (^5) into ptr ^31
	movq -112(%rbp), %rbx
	movq (%rbx), %rax
	movq -128(%rbp), %r15
	movq -168(%rbp), %r14
	movq -160(%rbp), %r13
	movq -152(%rbp), %r12
	movq -144(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISA_EEEEED2Ev
.p2align 4, 0x90
_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISA_EEEEED2Ev:
	.___ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISA_EEEEED2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(2422:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(2423:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(2424:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"struct.std::pair"
	# LowerGetelementptr(2425:3): struct-type: ptr ^3 -> ^4, indices=0,1
	movq %rbx, %rax
	addq $32, %rax
	# LowerGetelementptr(2425:3): type of ^4 is %"class.std::function"*
	# SetupCalls(2426:3): move argument ptr nonnull dereferenceable(32) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt8functionIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEED2Ev
	# tt = Pointer, type = %"struct.std::pair"
	# LowerGetelementptr(2427:3): struct-type: ptr ^3 -> ^5, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(2427:3): type of ^5 is %"class.std::__cxx11::basic_string"*
	# SetupCalls(2428:3): move argument ptr nonnull dereferenceable(32) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag
.p2align 4, 0x90
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag:
	.___ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(192 + 0, 16)
	subq $192, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -112(%rbp)
	movq %r12, -120(%rbp)
	movq %r13, -128(%rbp)
	movq %r14, -136(%rbp)
	movq %r15, -144(%rbp)
	# LowerAlloca(4068:3): size = 8, type = ptr*, var = ^4
	leaq -8(%rbp), %r9
	# LowerAlloca(4069:3): size = 8, type = ptr*, var = ^5
	leaq -16(%rbp), %r8
	# LowerAlloca(4070:3): size = 8, type = ptr*, var = ^6
	leaq -24(%rbp), %rbx
	# LowerAlloca(4071:3): size = 8, type = ptr*, var = ^7
	leaq -32(%rbp), %rcx
	# LowerAlloca(4072:3): size = 8, type = ptr*, var = ^8
	leaq -40(%rbp), %rax
	# LowerAlloca(4073:3): size = 8, type = ptr*, var = ^9
	leaq -48(%rbp), %r10
	# LowerAlloca(4074:3): size = 1, type = %"struct.std::forward_iterator_tag"*, var = ^10
	leaq -49(%rbp), %r11
	# LowerAlloca(4075:3): size = 8, type = ptr*, var = ^11
	leaq -64(%rbp), %r11
	# LowerAlloca(4076:3): size = 8, type = ptr*, var = ^12
	leaq -72(%rbp), %r12
	# LowerAlloca(4077:3): size = 8, type = ptr*, var = ^13
	leaq -80(%rbp), %r13
	# LowerAlloca(4078:3): size = 8, type = i64*, var = ^14
	leaq -88(%rbp), %r14
	# LowerAlloca(4079:3): size = 8, type = %struct._Guard*, var = ^15
	# Fixing source-to-dest leaq -96(%rbp), -104(%rbp)
	leaq -96(%rbp), %r15
	movq %r15, -104(%rbp)
	# LowerStore(4080:3).9: mov ptr %rdi, (^11)
	movq %rdi, (%r11)
	# LowerStore(4081:3).9: mov ptr %rsi, (^12)
	movq %rsi, (%r12)
	# LowerStore(4082:3).9: mov ptr %rdx, (^13)
	movq %rdx, (%r13)
	# LowerLoad(4083:3).2: (^11) into ptr ^16
	movq (%r11), %r15
	# LowerLoad(4084:3).2: (^12) into ptr ^17
	movq (%r12), %rdx
	# LowerLoad(4085:3).2: (^13) into ptr ^18
	movq (%r13), %rsi
	# LowerStore(4086:3).9: mov ptr ^17, (^8)
	movq %rdx, (%rax)
	# LowerStore(4087:3).9: mov ptr ^18, (^9)
	movq %rsi, (%r10)
	# LowerLoad(4088:3).2: (^8) into ptr ^19
	movq (%rax), %rdx
	# LowerLoad(4089:3).2: (^9) into ptr ^20
	movq (%r10), %rsi
	# LowerStore(4090:3).9: mov ptr* ^8, (^4)
	movq %rax, (%r9)
	# LowerStore(4091:3).9: mov ptr ^19, (^5)
	movq %rdx, (%r8)
	# LowerStore(4092:3).9: mov ptr ^20, (^6)
	movq %rsi, (%rbx)
	# LowerLoad(4093:3).2: (^6) into ptr ^21
	movq (%rbx), %rax
	# LowerLoad(4094:3).2: (^5) into ptr ^22
	movq (%r8), %rbx
	# LowerBasicConversion(4095:3): ptr ^21 -> i64 ^23
	movq %rax, %rdx
	# LowerBasicConversion(4096:3): ptr ^22 -> i64 ^24
	movq %rbx, %rax
	# LowerMath(4097:3): ^23, ^24 into i64 ^25
	movq %rdx, %rbx
	subq %rax, %rbx
	# LowerStore(4098:3).9: mov i64 ^25, (^14)
	movq %rbx, (%r14)
	# LowerLoad(4099:3).2: (^14) into i64 ^26
	movq (%r14), %rax
	# LowerIcmp(4100:3): i64 ^26 vs. intlike 15
	cmpq $15, %rax
	seta %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag__M71
	jmp .___ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag__M147
	.___ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag__M71:
	# SetupCalls(4104:3): move argument ptr nonnull dereferenceable(32) align 8 ^16
	# Fixed movzx with identical source and destination widths
	movq %r15, %rdi
	# SetupCalls(4104:3): move argument ptr nonnull dereferenceable(8) align 8 ^14
	# Fixed movzx with identical source and destination widths
	movq %r14, %rsi
	# SetupCalls(4104:3): move argument i64 0
	movq $0, %rdx
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT
	# SetupCalls(4104:3): move ptr result from %rax
	movq %rax, %rbx
	# SetupCalls(4105:3): move argument ptr nonnull dereferenceable(32) align 8 ^16
	# Fixed movzx with identical source and destination widths
	movq %r15, %rdi
	# SetupCalls(4105:3): move argument ptr ^29
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc@PLT
	# LowerLoad(4106:3).2: (^14) into i64 ^30
	movq (%r14), %rax
	# SetupCalls(4107:3): move argument ptr nonnull dereferenceable(32) align 8 ^16
	# Fixed movzx with identical source and destination widths
	movq %r15, %rdi
	# SetupCalls(4107:3): move argument i64 ^30
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEm@PLT
	jmp .___ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag__M175
	.___ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag__M147:
	# LowerStore(4111:3).9: mov ptr ^16, (^7)
	movq %r15, (%rcx)
	# LowerLoad(4112:3).2: (^7) into ptr ^32
	movq (%rcx), %rax
	# SetupCalls(4113:3): move argument ptr nonnull dereferenceable(32) align 8 ^32
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv@PLT
	# SetupCalls(4113:3): move ptr result from %rax
	movq %rax, %rax
	.___ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag__M175:
	# SetupCalls(4117:3): move argument ptr nonnull dereferenceable(8) align 8 ^15
	# Fixed movzx with identical source and destination widths
	movq -104(%rbp), %rdi
	# SetupCalls(4117:3): move argument ptr ^16
	# Fixed movzx with identical source and destination widths
	movq %r15, %rsi
	callq _ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardC2EPS4_
	# SetupCalls(4118:3): move argument ptr nonnull dereferenceable(32) align 8 ^16
	# Fixed movzx with identical source and destination widths
	movq %r15, %rdi
	callq _ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv@PLT
	# SetupCalls(4118:3): move ptr result from %rax
	movq %rax, %rbx
	# LowerLoad(4119:3).2: (^12) into ptr ^36
	movq (%r12), %rax
	# LowerLoad(4120:3).2: (^13) into ptr ^37
	movq (%r13), %rcx
	# SetupCalls(4121:3): move argument ptr ^35
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(4121:3): move argument ptr ^36
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(4121:3): move argument ptr ^37
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdx
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_@PLT
	# tt = Pointer, type = %struct._Guard
	# LowerGetelementptr(4122:3): struct-type: ptr ^15 -> ^38, indices=0,0
	movq -104(%rbp), %rax
	# LowerGetelementptr(4122:3): type of ^38 is ptr*
	# LowerStore(4123:3).3: mov $imm, (^38)
	movq $0, (%rax)
	# LowerLoad(4124:3).2: (^14) into i64 ^39
	movq (%r14), %rax
	# SetupCalls(4125:3): move argument ptr nonnull dereferenceable(32) align 8 ^16
	# Fixed movzx with identical source and destination widths
	movq %r15, %rdi
	# SetupCalls(4125:3): move argument i64 ^39
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm@PLT
	# SetupCalls(4126:3): move argument ptr nonnull dereferenceable(8) align 8 ^15
	# Fixed movzx with identical source and destination widths
	movq -104(%rbp), %rdi
	callq _ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD2Ev
	movq -144(%rbp), %r15
	movq -136(%rbp), %r14
	movq -128(%rbp), %r13
	movq -120(%rbp), %r12
	movq -112(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEEaSEOS6_
.p2align 4, 0x90
_ZNSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEEaSEOS6_:
	.___ZNSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEEaSEOS6___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(40 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -40(%rbp)
	movq %r12, -32(%rbp)
	movq %r13, -24(%rbp)
	# LowerAlloca(6010:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %rax
	# LowerAlloca(6011:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %r13
	# LowerStore(6012:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rax)
	# LowerStore(6013:3).9: mov ptr %rsi, (^4)
	movq %rsi, (%r13)
	# LowerLoad(6014:3).2: (^3) into ptr ^5
	movq (%rax), %r12
	# LowerLoad(6015:3).2: (^4) into ptr ^6
	movq (%r13), %rax
	# SetupCalls(6016:3): move argument ptr nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE7releaseEv
	# SetupCalls(6016:3): move ptr result from %rax
	movq %rax, %rbx
	# SetupCalls(6017:3): move argument ptr nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(6017:3): move argument ptr ^7
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZNSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE5resetEPS4_
	# LowerLoad(6018:3).2: (^4) into ptr ^8
	movq (%r13), %rax
	# SetupCalls(6019:3): move argument ptr nonnull dereferenceable(8) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE10_M_deleterEv
	# SetupCalls(6019:3): move ptr result from %rax
	movq %rax, %rax
	# SetupCalls(6020:3): move argument ptr nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	callq _ZNSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE10_M_deleterEv
	# SetupCalls(6020:3): move ptr result from %rax
	movq %rax, %rax
	movq %r12, %rax
	movq -24(%rbp), %r13
	movq -32(%rbp), %r12
	movq -40(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt12_Vector_baseI6LsItemSaIS0_EE11_M_allocateEm
.p2align 4, 0x90
_ZNSt12_Vector_baseI6LsItemSaIS0_EE11_M_allocateEm:
	.___ZNSt12_Vector_baseI6LsItemSaIS0_EE11_M_allocateEm__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(64 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -40(%rbp)
	movq %r12, -64(%rbp)
	# LowerAlloca(6711:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %rdx
	# LowerAlloca(6712:3): size = 8, type = i64*, var = ^4
	leaq -16(%rbp), %r8
	# LowerAlloca(6713:3): size = 8, type = ptr*, var = ^5
	leaq -24(%rbp), %rax
	# LowerAlloca(6714:3): size = 8, type = i64*, var = ^6
	leaq -32(%rbp), %rbx
	# LowerStore(6715:3).9: mov ptr %rdi, (^5)
	movq %rdi, (%rax)
	# LowerStore(6716:3).9: mov i64 %rsi, (^6)
	movq %rsi, (%rbx)
	# LowerLoad(6717:3).2: (^5) into ptr ^7
	movq (%rax), %rcx
	# LowerLoad(6718:3).2: (^6) into i64 ^8
	movq (%rbx), %rax
	# LowerIcmp(6719:3): i64 ^8 vs. intlike 0
	cmpq $0, %rax
	setne %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt12_Vector_baseI6LsItemSaIS0_EE11_M_allocateEm__M21
	jmp .___ZNSt12_Vector_baseI6LsItemSaIS0_EE11_M_allocateEm__M65
	.___ZNSt12_Vector_baseI6LsItemSaIS0_EE11_M_allocateEm__M21:
	# tt = Pointer, type = %"struct.std::_Vector_base.6"
	# LowerGetelementptr(6723:3): struct-type: ptr ^7 -> ^11, indices=0,0
	movq %rcx, %rsi
	# LowerGetelementptr(6723:3): type of ^11 is %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl"*
	# LowerLoad(6724:3).2: (^6) into i64 ^12
	movq (%rbx), %rax
	# LowerStore(6725:3).9: mov %"struct.std::_Vector_base.6"* ^11, (^3)
	movq %rsi, (%rdx)
	# LowerStore(6726:3).9: mov i64 ^12, (^4)
	movq %rax, (%r8)
	# LowerLoad(6727:3).2: (^3) into ptr ^13
	movq (%rdx), %rax
	# LowerLoad(6728:3).2: (^4) into i64 ^14
	movq (%r8), %rbx
	# SetupCalls(6729:3): move argument ptr nonnull dereferenceable(1) align 1 ^13
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(6729:3): move argument i64 ^14
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(6729:3): move argument ptr null
	movq $0, %rdx
	callq _ZNSt15__new_allocatorI6LsItemE8allocateEmPKv
	# SetupCalls(6729:3): move ptr result from %rax
	movq %rax, %rbx
	# MovePhi: ^15 -> ^18
	movq %rbx, %r12
	jmp .___ZNSt12_Vector_baseI6LsItemSaIS0_EE11_M_allocateEm__M68
	.___ZNSt12_Vector_baseI6LsItemSaIS0_EE11_M_allocateEm__M65:
	# MovePhi: intlike -> ^18
	movq $0, %r12
	.___ZNSt12_Vector_baseI6LsItemSaIS0_EE11_M_allocateEm__M68:
	movq %r12, %rax
	movq -64(%rbp), %r12
	movq -40(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD2Ev
.p2align 4, 0x90
_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD2Ev:
	.___ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(4161:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(4162:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(4163:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %struct._Guard
	# LowerGetelementptr(4164:3): struct-type: ptr ^3 -> ^4, indices=0,0
	movq %rbx, %rcx
	# LowerGetelementptr(4164:3): type of ^4 is ptr*
	# LowerLoad(4165:3).2: (^4) into ptr ^5
	movq (%rcx), %rax
	# LowerIcmp(4166:3): ptr ^5 vs. intlike 0
	cmpq $0, %rax
	setne %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD2Ev__M17
	jmp .___ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD2Ev__M45
	.___ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD2Ev__M17:
	# tt = Pointer, type = %struct._Guard
	# LowerGetelementptr(4170:3): struct-type: ptr ^3 -> ^8, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(4170:3): type of ^8 is ptr*
	# LowerLoad(4171:3).2: (^8) into ptr ^9
	movq (%rax), %rbx
	# SetupCalls(4172:3): move argument ptr nonnull dereferenceable(32) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv@PLT
	.___ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD2Ev__M45:
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt17_Function_handlerIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEPS9_E9_M_invokeERKSt9_Any_dataS8_
.p2align 4, 0x90
_ZNSt17_Function_handlerIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEPS9_E9_M_invokeERKSt9_Any_dataS8_:
	.___ZNSt17_Function_handlerIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEPS9_E9_M_invokeERKSt9_Any_dataS8___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(48 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	movq %r12, -32(%rbp)
	# LowerAlloca(4217:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %rbx
	# LowerAlloca(4218:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %r12
	# LowerStore(4219:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rbx)
	# LowerStore(4220:3).9: mov ptr %rsi, (^4)
	movq %rsi, (%r12)
	# LowerLoad(4221:3).2: (^3) into ptr ^5
	movq (%rbx), %rax
	# SetupCalls(4222:3): move argument ptr nonnull dereferenceable(16) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE14_M_get_pointerERKSt9_Any_data
	# SetupCalls(4222:3): move ptr result from %rax
	movq %rax, %rbx
	# LowerLoad(4223:3).2: (^4) into ptr ^7
	movq (%r12), %rax
	# SetupCalls(4224:3): move argument ptr nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(4224:3): move argument ptr nonnull dereferenceable(24) align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZSt10__invoke_rIiRPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEJS8_EENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EESD_E4typeEOSE_DpOSF_
	# SetupCalls(4224:3): move i32 result from %rax
	movl %eax, %ebx
	movl %ebx, %eax
	movq -32(%rbp), %r12
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt14_Function_baseC2Ev
.p2align 4, 0x90
_ZNSt14_Function_baseC2Ev:
	.___ZNSt14_Function_baseC2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(4183:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(4184:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(4185:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::_Function_base"
	# LowerGetelementptr(4186:3): struct-type: ptr ^3 -> ^4, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(4186:3): type of ^4 is %"union.std::_Any_data"*
	# LowerStore(4187:3).3: mov $imm, (^4)
	movq $0, (%rax)
	# tt = Pointer, type = %"class.std::_Function_base"
	# LowerGetelementptr(4188:3): struct-type: ptr ^3 -> ^5, indices=0,1
	movq %rbx, %rax
	addq $16, %rax
	# LowerGetelementptr(4188:3): type of ^5 is ptr*
	# LowerStore(4189:3).3: mov $imm, (^5)
	movq $0, (%rax)
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_
.p2align 4, 0x90
_ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_:
	.___ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(632 + 0, 16)
	subq $640, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -288(%rbp)
	movq %r12, -272(%rbp)
	movq %r13, -320(%rbp)
	movq %r14, -328(%rbp)
	movq %r15, -232(%rbp)
	# LowerAlloca(5739:3): size = 8, type = ptr*, var = ^4
	# Fixing source-to-dest leaq -8(%rbp), -208(%rbp)
	leaq -8(%rbp), %r15
	movq %r15, -208(%rbp)
	# LowerAlloca(5740:3): size = 8, type = ptr*, var = ^5
	# Fixing source-to-dest leaq -16(%rbp), -200(%rbp)
	leaq -16(%rbp), %r15
	movq %r15, -200(%rbp)
	# LowerAlloca(5741:3): size = 8, type = ptr*, var = ^6
	# Fixing source-to-dest leaq -24(%rbp), -192(%rbp)
	leaq -24(%rbp), %r15
	movq %r15, -192(%rbp)
	# LowerAlloca(5742:3): size = 8, type = ptr*, var = ^7
	# Fixing source-to-dest leaq -32(%rbp), -224(%rbp)
	leaq -32(%rbp), %r15
	movq %r15, -224(%rbp)
	# LowerAlloca(5743:3): size = 8, type = ptr*, var = ^8
	# Fixing source-to-dest leaq -40(%rbp), -216(%rbp)
	leaq -40(%rbp), %r15
	movq %r15, -216(%rbp)
	# LowerAlloca(5744:3): size = 8, type = ptr*, var = ^9
	leaq -48(%rbp), %r12
	# LowerAlloca(5745:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator.19"*, var = ^10
	# Fixing source-to-dest leaq -56(%rbp), -184(%rbp)
	leaq -56(%rbp), %r15
	movq %r15, -184(%rbp)
	# LowerAlloca(5746:3): size = 8, type = ptr*, var = ^11
	leaq -64(%rbp), %rcx
	# LowerAlloca(5747:3): size = 8, type = ptr*, var = ^12
	leaq -72(%rbp), %rbx
	# LowerAlloca(5748:3): size = 8, type = i64*, var = ^13
	# Fixing source-to-dest leaq -80(%rbp), -136(%rbp)
	leaq -80(%rbp), %r15
	movq %r15, -136(%rbp)
	# LowerAlloca(5749:3): size = 8, type = ptr*, var = ^14
	# Fixing source-to-dest leaq -88(%rbp), -168(%rbp)
	leaq -88(%rbp), %r15
	movq %r15, -168(%rbp)
	# LowerAlloca(5750:3): size = 8, type = ptr*, var = ^15
	# Fixing source-to-dest leaq -96(%rbp), -176(%rbp)
	leaq -96(%rbp), %r15
	movq %r15, -176(%rbp)
	# LowerAlloca(5751:3): size = 8, type = i64*, var = ^16
	leaq -104(%rbp), %r13
	# LowerAlloca(5752:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator.19"*, var = ^17
	leaq -112(%rbp), %r14
	# LowerAlloca(5753:3): size = 8, type = ptr*, var = ^18
	# Fixing source-to-dest leaq -120(%rbp), -144(%rbp)
	leaq -120(%rbp), %r15
	movq %r15, -144(%rbp)
	# LowerAlloca(5754:3): size = 8, type = ptr*, var = ^19
	# Fixing source-to-dest leaq -128(%rbp), -160(%rbp)
	leaq -128(%rbp), %r15
	movq %r15, -160(%rbp)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator.19"
	# LowerGetelementptr(5755:3): struct-type: ptr ^10 -> ^20, indices=0,0
	movq -184(%rbp), %rax
	# LowerGetelementptr(5755:3): type of ^20 is ptr*
	# LowerStore(5756:3).9: mov ptr %rsi, (^20)
	movq %rsi, (%rax)
	# LowerStore(5757:3).9: mov ptr %rdi, (^11)
	movq %rdi, (%rcx)
	# LowerStore(5758:3).9: mov ptr %rdx, (^12)
	movq %rdx, (%rbx)
	# LowerLoad(5759:3).2: (^11) into ptr ^21
	# Fixing source-to-dest movq (%rcx), -152(%rbp)
	movq (%rcx), %r15
	movq %r15, -152(%rbp)
	# SetupCalls(5760:3): move argument ptr nonnull dereferenceable(24) align 8 ^21
	# Fixed movzx with identical source and destination widths
	movq -152(%rbp), %rdi
	# SetupCalls(5760:3): move argument i64 1
	movq $1, %rsi
	# SetupCalls(5760:3): move argument ptr @.str.27
	leaq .str.27(%rip), %rdx
	callq _ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12_M_check_lenEmPKc
	# SetupCalls(5760:3): move i64 result from %rax
	movq %rax, %r15
	# LowerStore(5761:3).9: mov i64 ^22, (^13)
	movq -136(%rbp), %rax
	movq %r15, (%rax)
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(5762:3): struct-type: ptr ^21 -> ^23, indices=0,0
	movq -152(%rbp), %rax
	# LowerGetelementptr(5762:3): type of ^23 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(5763:3): struct-type: ptr ^23 -> ^24, indices=0,0
	# LowerGetelementptr(5763:3): type of ^24 is ptr*
	# LowerLoad(5764:3).2: (^24) into ptr ^25
	movq -168(%rbp), %rcx
	# Fixing source-to-dest movq (%rax), (%rcx)
	movq (%rax), %r15
	movq %r15, (%rcx)
	# LowerStore(5765:3).9: mov ptr ^25, (^14)
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(5766:3): struct-type: ptr ^21 -> ^26, indices=0,0
	movq -152(%rbp), %rax
	# LowerGetelementptr(5766:3): type of ^26 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(5767:3): struct-type: ptr ^26 -> ^27, indices=0,1
	addq $8, %rax
	# LowerGetelementptr(5767:3): type of ^27 is ptr*
	# LowerLoad(5768:3).2: (^27) into ptr ^28
	movq -176(%rbp), %rcx
	# Fixing source-to-dest movq (%rax), (%rcx)
	movq (%rax), %r15
	movq %r15, (%rcx)
	# LowerStore(5769:3).9: mov ptr ^28, (^15)
	# SetupCalls(5770:3): move argument ptr nonnull dereferenceable(24) align 8 ^21
	# Fixed movzx with identical source and destination widths
	movq -152(%rbp), %rdi
	callq _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE5beginEv
	# SetupCalls(5770:3): move ptr result from %rax
	movq %rax, %r15
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator.19"
	# LowerGetelementptr(5771:3): struct-type: ptr ^17 -> ^30, indices=0,0
	movq %r14, %rax
	# LowerGetelementptr(5771:3): type of ^30 is ptr*
	# LowerStore(5772:3).9: mov ptr ^29, (^30)
	movq %r15, (%rax)
	# SetupCalls(5773:3): move argument ptr nonnull dereferenceable(8) align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq -184(%rbp), %rdi
	# SetupCalls(5773:3): move argument ptr nonnull dereferenceable(8) align 8 ^17
	# Fixed movzx with identical source and destination widths
	movq %r14, %rsi
	callq _ZN9__gnu_cxxmiIPSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_
	# SetupCalls(5773:3): move i64 result from %rax
	movq %rax, %r14
	# LowerStore(5774:3).9: mov i64 ^31, (^16)
	movq %r14, (%r13)
	# LowerLoad(5775:3).2: (^13) into i64 ^32
	movq -136(%rbp), %rcx
	movq (%rcx), %rax
	# SetupCalls(5776:3): move argument ptr nonnull dereferenceable(24) align 8 ^21
	# Fixed movzx with identical source and destination widths
	movq -152(%rbp), %rdi
	# SetupCalls(5776:3): move argument i64 ^32
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE11_M_allocateEm
	# SetupCalls(5776:3): move ptr result from %rax
	movq %rax, %r14
	# LowerStore(5777:3).9: mov ptr ^33, (^18)
	movq -144(%rbp), %rax
	movq %r14, (%rax)
	# LowerLoad(5778:3).2: (^18) into ptr ^34
	movq -144(%rbp), %rcx
	movq -160(%rbp), %rax
	# Fixing source-to-dest movq (%rcx), (%rax)
	movq (%rcx), %r15
	movq %r15, (%rax)
	# LowerStore(5779:3).9: mov ptr ^34, (^19)
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(5780:3): struct-type: ptr ^21 -> ^35, indices=0,0
	movq -152(%rbp), %rax
	# LowerGetelementptr(5780:3): type of ^35 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# LowerLoad(5781:3).2: (^18) into ptr ^36
	movq -144(%rbp), %rdx
	movq (%rdx), %rcx
	# LowerLoad(5782:3).2: (^16) into i64 ^37
	movq (%r13), %rdx
	# tt = Pointer, type = %"class.std::basic_string_view"
	# LowerGetelementptr(5783:3): pointer-type -> ^38
	shlq $4, %rdx
	addq %rcx, %rdx
	# LowerLoad(5784:3).2: (^12) into ptr ^39
	movq (%rbx), %rcx
	# LowerStore(5785:3).9: mov %"struct.std::_Vector_base"* ^35, (^7)
	movq -224(%rbp), %rbx
	movq %rax, (%rbx)
	# LowerStore(5786:3).9: mov %"class.std::basic_string_view"* ^38, (^8)
	movq -216(%rbp), %rax
	movq %rdx, (%rax)
	# LowerStore(5787:3).9: mov ptr ^39, (^9)
	movq %rcx, (%r12)
	# LowerLoad(5788:3).2: (^7) into ptr ^40
	movq -224(%rbp), %rbx
	movq (%rbx), %rax
	# LowerLoad(5789:3).2: (^8) into ptr ^41
	movq -216(%rbp), %rcx
	movq (%rcx), %rbx
	# LowerLoad(5790:3).2: (^9) into ptr ^42
	movq (%r12), %rcx
	# LowerStore(5791:3).9: mov ptr ^40, (^4)
	movq -208(%rbp), %rdx
	movq %rax, (%rdx)
	# LowerStore(5792:3).9: mov ptr ^41, (^5)
	movq -200(%rbp), %rax
	movq %rbx, (%rax)
	# LowerStore(5793:3).9: mov ptr ^42, (^6)
	movq -192(%rbp), %rax
	movq %rcx, (%rax)
	# LowerLoad(5794:3).2: (^4) into ptr ^43
	movq -208(%rbp), %rbx
	movq (%rbx), %rax
	# LowerLoad(5795:3).2: (^5) into ptr ^44
	movq -200(%rbp), %rbx
	movq (%rbx), %rax
	# LowerLoad(5796:3).2: (^6) into ptr ^45
	movq -192(%rbp), %rcx
	movq (%rcx), %rbx
	# SetupCalls(5797:3): move argument ptr align 8 ^44
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(5797:3): move argument ptr align 8 ^45
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(5797:3): move argument i64 16
	movq $16, %rdx
	callq memcpy@PLT
	# LowerStore(5798:3).3: mov $imm, (^19)
	movq -160(%rbp), %rax
	movq $0, (%rax)
	# LowerLoad(5799:3).2: (^14) into ptr ^46
	movq -168(%rbp), %rax
	movq (%rax), %rbx
	# SetupCalls(5800:3): move argument ptr nonnull dereferenceable(8) align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq -184(%rbp), %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIPSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEE4baseEv
	# SetupCalls(5800:3): move ptr result from %rax
	movq %rax, %r12
	# LowerLoad(5801:3).2: (^47) into ptr ^48
	movq (%r12), %r14
	# LowerLoad(5802:3).2: (^18) into ptr ^49
	movq -144(%rbp), %rax
	movq (%rax), %r12
	# SetupCalls(5803:3): move argument ptr nonnull dereferenceable(24) align 8 ^21
	# Fixed movzx with identical source and destination widths
	movq -152(%rbp), %rdi
	callq _ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE19_M_get_Tp_allocatorEv
	# SetupCalls(5803:3): move ptr result from %rax
	movq %rax, %r13
	# SetupCalls(5804:3): move argument ptr ^46
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(5804:3): move argument ptr ^48
	# Fixed movzx with identical source and destination widths
	movq %r14, %rsi
	# SetupCalls(5804:3): move argument ptr ^49
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdx
	# SetupCalls(5804:3): move argument ptr nonnull dereferenceable(1) align 1 ^50
	# Fixed movzx with identical source and destination widths
	movq %r13, %rcx
	callq _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE11_S_relocateEPS3_S6_S6_RS4_
	# SetupCalls(5804:3): move ptr result from %rax
	movq %rax, %rbx
	# LowerStore(5805:3).9: mov ptr ^51, (^19)
	movq -160(%rbp), %rax
	movq %rbx, (%rax)
	# LowerLoad(5806:3).2: (^19) into ptr ^52
	movq -160(%rbp), %rax
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::basic_string_view"
	# LowerGetelementptr(5807:3): struct-type: ptr ^52 -> ^53, indices=1
	addq $16, %rbx
	# LowerGetelementptr(5807:3): type of ^53 is %"class.std::basic_string_view"*
	# LowerStore(5808:3).9: mov %"class.std::basic_string_view"* ^53, (^19)
	movq -160(%rbp), %rax
	movq %rbx, (%rax)
	# SetupCalls(5809:3): move argument ptr nonnull dereferenceable(8) align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq -184(%rbp), %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIPSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEE4baseEv
	# SetupCalls(5809:3): move ptr result from %rax
	movq %rax, %rbx
	# LowerLoad(5810:3).2: (^54) into ptr ^55
	movq (%rbx), %r12
	# LowerLoad(5811:3).2: (^15) into ptr ^56
	movq -176(%rbp), %rax
	movq (%rax), %rbx
	# LowerLoad(5812:3).2: (^19) into ptr ^57
	movq -160(%rbp), %rax
	movq (%rax), %r13
	# SetupCalls(5813:3): move argument ptr nonnull dereferenceable(24) align 8 ^21
	# Fixed movzx with identical source and destination widths
	movq -152(%rbp), %rdi
	callq _ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE19_M_get_Tp_allocatorEv
	# SetupCalls(5813:3): move ptr result from %rax
	movq %rax, %r14
	# SetupCalls(5814:3): move argument ptr ^55
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(5814:3): move argument ptr ^56
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(5814:3): move argument ptr ^57
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdx
	# SetupCalls(5814:3): move argument ptr nonnull dereferenceable(1) align 1 ^58
	# Fixed movzx with identical source and destination widths
	movq %r14, %rcx
	callq _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE11_S_relocateEPS3_S6_S6_RS4_
	# SetupCalls(5814:3): move ptr result from %rax
	movq %rax, %rbx
	# LowerStore(5815:3).9: mov ptr ^59, (^19)
	movq -160(%rbp), %rax
	movq %rbx, (%rax)
	# LowerLoad(5816:3).2: (^14) into ptr ^60
	movq -168(%rbp), %rax
	movq (%rax), %rcx
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(5817:3): struct-type: ptr ^21 -> ^61, indices=0,0
	movq -152(%rbp), %rax
	# LowerGetelementptr(5817:3): type of ^61 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(5818:3): struct-type: ptr ^61 -> ^62, indices=0,2
	addq $16, %rax
	# LowerGetelementptr(5818:3): type of ^62 is ptr*
	# LowerLoad(5819:3).2: (^62) into ptr ^63
	movq (%rax), %rbx
	# LowerLoad(5820:3).2: (^14) into ptr ^64
	movq -168(%rbp), %rdx
	movq (%rdx), %rax
	# LowerBasicConversion(5821:3): ptr ^63 -> i64 ^65
	movq %rbx, %rdx
	# LowerBasicConversion(5822:3): ptr ^64 -> i64 ^66
	movq %rax, %rbx
	# LowerMath(5823:3): ^65, ^66 into i64 ^67
	movq %rdx, %rax
	subq %rbx, %rax
	# LowerSdiv(5824:3): ^67, 16 into i64 ^68
	movq %rax, %rbx
	movq $0, %rdx
	movq %rbx, %rax
	movq $16, %rbx
	idivq %rbx
	movq %rax, %rbx
	# SetupCalls(5825:3): move argument ptr nonnull dereferenceable(24) align 8 ^21
	# Fixed movzx with identical source and destination widths
	movq -152(%rbp), %rdi
	# SetupCalls(5825:3): move argument ptr ^60
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(5825:3): move argument i64 ^68
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdx
	callq _ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE13_M_deallocateEPS3_m
	# LowerLoad(5826:3).2: (^18) into ptr ^69
	movq -144(%rbp), %rbx
	movq (%rbx), %rax
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(5827:3): struct-type: ptr ^21 -> ^70, indices=0,0
	movq -152(%rbp), %rbx
	# LowerGetelementptr(5827:3): type of ^70 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(5828:3): struct-type: ptr ^70 -> ^71, indices=0,0
	# LowerGetelementptr(5828:3): type of ^71 is ptr*
	# LowerStore(5829:3).9: mov ptr ^69, (^71)
	movq %rax, (%rbx)
	# LowerLoad(5830:3).2: (^19) into ptr ^72
	movq -160(%rbp), %rax
	movq (%rax), %rbx
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(5831:3): struct-type: ptr ^21 -> ^73, indices=0,0
	movq -152(%rbp), %rax
	# LowerGetelementptr(5831:3): type of ^73 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(5832:3): struct-type: ptr ^73 -> ^74, indices=0,1
	movq %rax, %rcx
	addq $8, %rcx
	# LowerGetelementptr(5832:3): type of ^74 is ptr*
	# LowerStore(5833:3).9: mov ptr ^72, (^74)
	movq %rbx, (%rcx)
	# LowerLoad(5834:3).2: (^18) into ptr ^75
	movq -144(%rbp), %rax
	movq (%rax), %rbx
	# LowerLoad(5835:3).2: (^13) into i64 ^76
	movq -136(%rbp), %rcx
	movq (%rcx), %rax
	# tt = Pointer, type = %"class.std::basic_string_view"
	# LowerGetelementptr(5836:3): pointer-type -> ^77
	shlq $4, %rax
	addq %rbx, %rax
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(5837:3): struct-type: ptr ^21 -> ^78, indices=0,0
	movq -152(%rbp), %rbx
	# LowerGetelementptr(5837:3): type of ^78 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(5838:3): struct-type: ptr ^78 -> ^79, indices=0,2
	addq $16, %rbx
	# LowerGetelementptr(5838:3): type of ^79 is ptr*
	# LowerStore(5839:3).9: mov %"class.std::basic_string_view"* ^77, (^79)
	movq %rax, (%rbx)
	movq -232(%rbp), %r15
	movq -328(%rbp), %r14
	movq -320(%rbp), %r13
	movq -272(%rbp), %r12
	movq -288(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE21_M_not_empty_functionISA_EEbPT_
.p2align 4, 0x90
_ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE21_M_not_empty_functionISA_EEbPT_:
	.___ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE21_M_not_empty_functionISA_EEbPT___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(4195:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(4196:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(4197:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# LowerIcmp(4198:3): ptr ^3 vs. intlike 0
	cmpq $0, %rbx
	setne %al
	andq $1, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEC2ERKS2_
.p2align 4, 0x90
_ZN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEC2ERKS2_:
	.___ZN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEC2ERKS2___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(40 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	movq %r15, -40(%rbp)
	# LowerAlloca(7026:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %rbx
	# LowerAlloca(7027:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %rcx
	# LowerStore(7028:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rbx)
	# LowerStore(7029:3).9: mov ptr %rsi, (^4)
	movq %rsi, (%rcx)
	# LowerLoad(7030:3).2: (^3) into ptr ^5
	movq (%rbx), %rax
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7031:3): struct-type: ptr ^5 -> ^6, indices=0,0
	# LowerGetelementptr(7031:3): type of ^6 is ptr*
	# LowerLoad(7032:3).2: (^4) into ptr ^7
	movq (%rcx), %rbx
	# LowerLoad(7033:3).2: (^7) into ptr ^8
	# Fixing source-to-dest movq (%rbx), (%rax)
	movq (%rbx), %r15
	movq %r15, (%rax)
	# LowerStore(7034:3).9: mov ptr ^8, (^6)
	movq -40(%rbp), %r15
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE15_M_init_functorIRSA_EEvRSt9_Any_dataOT_
.p2align 4, 0x90
_ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE15_M_init_functorIRSA_EEvRSt9_Any_dataOT_:
	.___ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE15_M_init_functorIRSA_EEvRSt9_Any_dataOT___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(40 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	# LowerAlloca(4204:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %rbx
	# LowerAlloca(4205:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %rcx
	# LowerAlloca(4206:3): size = 1, type = %"struct.std::integral_constant"*, var = ^5
	leaq -17(%rbp), %rax
	# LowerStore(4207:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rbx)
	# LowerStore(4208:3).9: mov ptr %rsi, (^4)
	movq %rsi, (%rcx)
	# LowerLoad(4209:3).2: (^3) into ptr ^6
	movq (%rbx), %rax
	# LowerLoad(4210:3).2: (^4) into ptr ^7
	movq (%rcx), %rbx
	# SetupCalls(4211:3): move argument ptr nonnull dereferenceable(16) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(4211:3): move argument ptr nonnull ^7
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE9_M_createIRSA_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt17_Function_handlerIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEPS9_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation
.p2align 4, 0x90
_ZNSt17_Function_handlerIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEPS9_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation:
	.___ZNSt17_Function_handlerIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEPS9_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(72 + 0, 16)
	subq $80, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -40(%rbp)
	movq %r12, -32(%rbp)
	# LowerAlloca(4230:3): size = 8, type = ptr*, var = ^4
	leaq -8(%rbp), %r12
	# LowerAlloca(4231:3): size = 8, type = ptr*, var = ^5
	leaq -16(%rbp), %rcx
	# LowerAlloca(4232:3): size = 4, type = i32*, var = ^6
	leaq -20(%rbp), %rax
	# LowerStore(4233:3).9: mov ptr %rdi, (^4)
	movq %rdi, (%r12)
	# LowerStore(4234:3).9: mov ptr %rsi, (^5)
	movq %rsi, (%rcx)
	# LowerStore(4235:3).9: mov i32 %edx, (^6)
	movl %edx, (%rax)
	# LowerLoad(4236:3).2: (^6) into i32 ^7
	movl (%rax), %ebx
	# LowerSwitch(4237:3): begin conditions
	cmpl $0, %ebx
	je .___ZNSt17_Function_handlerIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEPS9_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation__M21
	cmpl $1, %ebx
	je .___ZNSt17_Function_handlerIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEPS9_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation__M51
	# LowerSwitch(4237:3): default
	jmp .___ZNSt17_Function_handlerIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEPS9_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation__M104
	.___ZNSt17_Function_handlerIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEPS9_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation__M21:
	# LowerLoad(4243:3).2: (^4) into ptr ^9
	movq (%r12), %rax
	# SetupCalls(4244:3): move argument ptr nonnull dereferenceable(16) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v
	# SetupCalls(4244:3): move ptr result from %rax
	movq %rax, %rbx
	# LowerStore(4245:3).6: load global
	leaq _ZTIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEE(%rip), %rax
	# LowerStore(4245:3).9: mov ptr ^22, (^10)
	movq %rax, (%rbx)
	jmp .___ZNSt17_Function_handlerIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEPS9_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation__M138
	.___ZNSt17_Function_handlerIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEPS9_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation__M51:
	# LowerLoad(4249:3).2: (^5) into ptr ^12
	movq (%rcx), %rax
	# SetupCalls(4250:3): move argument ptr nonnull dereferenceable(16) align 8 ^12
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE14_M_get_pointerERKSt9_Any_data
	# SetupCalls(4250:3): move ptr result from %rax
	movq %rax, %rbx
	# LowerLoad(4251:3).2: (^4) into ptr ^14
	movq (%r12), %rax
	# SetupCalls(4252:3): move argument ptr nonnull dereferenceable(16) align 8 ^14
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt9_Any_data9_M_accessIPPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEEERT_v
	# SetupCalls(4252:3): move ptr result from %rax
	movq %rax, %r12
	# LowerStore(4253:3).9: mov ptr ^13, (^15)
	movq %rbx, (%r12)
	jmp .___ZNSt17_Function_handlerIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEPS9_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation__M138
	.___ZNSt17_Function_handlerIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEPS9_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation__M104:
	# LowerLoad(4257:3).2: (^4) into ptr ^17
	movq (%r12), %rdx
	# LowerLoad(4258:3).2: (^5) into ptr ^18
	movq (%rcx), %r8
	# LowerLoad(4259:3).2: (^6) into i32 ^19
	movl (%rax), %ebx
	# SetupCalls(4260:3): move argument ptr nonnull dereferenceable(16) align 8 ^17
	# Fixed movzx with identical source and destination widths
	movq %rdx, %rdi
	# SetupCalls(4260:3): move argument ptr nonnull dereferenceable(16) align 8 ^18
	# Fixed movzx with identical source and destination widths
	movq %r8, %rsi
	# SetupCalls(4260:3): move argument i32 ^19
	# Fixed movzx with 32-bit source operand
	movl %ebx, %edx
	callq _ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE10_M_managerERSt9_Any_dataRKSD_St18_Manager_operation
	# SetupCalls(4260:3): move i1 result from %rax
	movb %al, %al
	.___ZNSt17_Function_handlerIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEPS9_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation__M138:
	movq $0, %rax
	movq -32(%rbp), %r12
	movq -40(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_RT0_
.p2align 4, 0x90
_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_RT0_:
	.___ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_RT0___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(264 + 0, 16)
	subq $272, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -192(%rbp)
	movq %r12, -176(%rbp)
	movq %r13, -184(%rbp)
	movq %r14, -168(%rbp)
	movq %r15, -200(%rbp)
	# LowerAlloca(7569:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^5
	leaq -8(%rbp), %r14
	# LowerAlloca(7570:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^6
	leaq -16(%rbp), %r12
	# LowerAlloca(7571:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^7
	leaq -24(%rbp), %r13
	# LowerAlloca(7572:3): size = 8, type = ptr*, var = ^8
	leaq -32(%rbp), %rbx
	# LowerAlloca(7573:3): size = 40, type = %struct.LsItem*, var = ^9
	# Fixing source-to-dest leaq -72(%rbp), -136(%rbp)
	leaq -72(%rbp), %r15
	movq %r15, -136(%rbp)
	# LowerAlloca(7574:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^10
	# Fixing source-to-dest leaq -80(%rbp), -152(%rbp)
	leaq -80(%rbp), %r15
	movq %r15, -152(%rbp)
	# LowerAlloca(7575:3): size = 40, type = %struct.LsItem*, var = ^11
	# Fixing source-to-dest leaq -120(%rbp), -144(%rbp)
	leaq -120(%rbp), %r15
	movq %r15, -144(%rbp)
	# LowerAlloca(7576:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, var = ^12
	# Fixing source-to-dest leaq -121(%rbp), -160(%rbp)
	leaq -121(%rbp), %r15
	movq %r15, -160(%rbp)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7577:3): struct-type: ptr ^5 -> ^13, indices=0,0
	movq %r14, %rax
	# LowerGetelementptr(7577:3): type of ^13 is ptr*
	# LowerStore(7578:3).9: mov ptr %rdi, (^13)
	movq %rdi, (%rax)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7579:3): struct-type: ptr ^6 -> ^14, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(7579:3): type of ^14 is ptr*
	# LowerStore(7580:3).9: mov ptr %rsi, (^14)
	movq %rsi, (%rax)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7581:3): struct-type: ptr ^7 -> ^15, indices=0,0
	movq %r13, %rax
	# LowerGetelementptr(7581:3): type of ^15 is ptr*
	# LowerStore(7582:3).9: mov ptr %rdx, (^15)
	movq %rdx, (%rax)
	# LowerStore(7583:3).9: mov ptr %rcx, (^8)
	movq %rcx, (%rbx)
	# SetupCalls(7584:3): move argument ptr nonnull dereferenceable(8) align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEdeEv
	# SetupCalls(7584:3): move ptr result from %rax
	movq %rax, %r15
	# SetupCalls(7585:3): move argument ptr nonnull dereferenceable(33) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq -136(%rbp), %rdi
	# SetupCalls(7585:3): move argument ptr nonnull dereferenceable(33) align 8 ^16
	# Fixed movzx with identical source and destination widths
	movq %r15, %rsi
	callq _ZN6LsItemC2EOS_
	# SetupCalls(7586:3): move argument ptr nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r14, %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEdeEv
	# SetupCalls(7586:3): move ptr result from %rax
	movq %rax, %r15
	# SetupCalls(7587:3): move argument ptr nonnull dereferenceable(8) align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEdeEv
	# SetupCalls(7587:3): move ptr result from %rax
	movq %rax, %r13
	# SetupCalls(7588:3): move argument ptr nonnull dereferenceable(33) align 8 ^18
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	# SetupCalls(7588:3): move argument ptr nonnull dereferenceable(33) align 8 ^17
	# Fixed movzx with identical source and destination widths
	movq %r15, %rsi
	callq _ZN6LsItemaSEOS_
	# SetupCalls(7588:3): move ptr result from %rax
	movq %rax, %rax
	# SetupCalls(7589:3): move argument ptr align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq -152(%rbp), %rdi
	# SetupCalls(7589:3): move argument ptr align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r14, %rsi
	# SetupCalls(7589:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# SetupCalls(7590:3): move argument ptr nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(7590:3): move argument ptr nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r14, %rsi
	callq _ZN9__gnu_cxxmiIP6LsItemSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_
	# SetupCalls(7590:3): move i64 result from %rax
	movq %rax, %r12
	# SetupCalls(7591:3): move argument ptr nonnull dereferenceable(33) align 8 ^11
	# Fixed movzx with identical source and destination widths
	movq -144(%rbp), %rdi
	# SetupCalls(7591:3): move argument ptr nonnull dereferenceable(33) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq -136(%rbp), %rsi
	callq _ZN6LsItemC2EOS_
	# LowerLoad(7592:3).2: (^8) into ptr ^21
	movq (%rbx), %rax
	# SetupCalls(7593:3): move argument ptr align 1 ^12
	# Fixed movzx with identical source and destination widths
	movq -160(%rbp), %rdi
	# SetupCalls(7593:3): move argument ptr align 1 ^21
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(7593:3): move argument i64 1
	movq $1, %rdx
	callq memcpy@PLT
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7594:3): struct-type: ptr ^10 -> ^22, indices=0,0
	movq -152(%rbp), %rax
	# LowerGetelementptr(7594:3): type of ^22 is ptr*
	# LowerLoad(7595:3).2: (^22) into ptr ^23
	movq (%rax), %rbx
	# SetupCalls(7596:3): move argument ptr ^23
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(7596:3): move argument i64 0
	movq $0, %rsi
	# SetupCalls(7596:3): move argument i64 ^20
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdx
	# SetupCalls(7596:3): move argument ptr ^11
	# Fixed movzx with identical source and destination widths
	movq -144(%rbp), %rcx
	callq _ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_T2_
	# SetupCalls(7597:3): move argument ptr nonnull dereferenceable(33) align 8 ^11
	# Fixed movzx with identical source and destination widths
	movq -144(%rbp), %rdi
	callq _ZN6LsItemD2Ev
	# SetupCalls(7598:3): move argument ptr nonnull dereferenceable(33) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq -136(%rbp), %rdi
	callq _ZN6LsItemD2Ev
	movq -200(%rbp), %r15
	movq -168(%rbp), %r14
	movq -184(%rbp), %r13
	movq -176(%rbp), %r12
	movq -192(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt9_Any_data9_M_accessEv
.p2align 4, 0x90
_ZNSt9_Any_data9_M_accessEv:
	.___ZNSt9_Any_data9_M_accessEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(4283:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(4284:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(4285:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# tt = Pointer, type = [16 x i8]
	# LowerGetelementptr(4286:3): struct-type: ptr ^3 -> ^4, indices=0,0
	# LowerGetelementptr(4286:3): type of ^4 is i8*
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt6quotedIcSt11char_traitsIcESaIcEEDaRKNSt7__cxx1112basic_stringIT_T0_T1_EES5_S5_
.p2align 4, 0x90
_ZSt6quotedIcSt11char_traitsIcESaIcEEDaRKNSt7__cxx1112basic_stringIT_T0_T1_EES5_S5_:
	.___ZSt6quotedIcSt11char_traitsIcESaIcEEDaRKNSt7__cxx1112basic_stringIT_T0_T1_EES5_S5___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(64 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -48(%rbp)
	movq %r12, -40(%rbp)
	# LowerAlloca(6219:3): size = 16, type = %"struct.std::__detail::_Quoted_string"*, var = ^4
	leaq -16(%rbp), %r12
	# LowerAlloca(6220:3): size = 8, type = ptr*, var = ^5
	leaq -24(%rbp), %r8
	# LowerAlloca(6221:3): size = 1, type = i8*, var = ^6
	leaq -25(%rbp), %rbx
	# LowerAlloca(6222:3): size = 1, type = i8*, var = ^7
	leaq -26(%rbp), %rcx
	# LowerStore(6223:3).9: mov ptr %rdi, (^5)
	movq %rdi, (%r8)
	# LowerStore(6224:3).9: mov i8 %sil, (^6)
	movb %sil, (%rbx)
	# LowerStore(6225:3).9: mov i8 %dl, (^7)
	movb %dl, (%rcx)
	# LowerLoad(6226:3).2: (^5) into ptr ^8
	movq (%r8), %rax
	# LowerLoad(6227:3).2: (^6) into i8 ^9
	movb (%rbx), %r8b
	# LowerLoad(6228:3).2: (^7) into i8 ^10
	movb (%rcx), %bl
	# SetupCalls(6229:3): move argument ptr nonnull dereferenceable(10) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(6229:3): move argument ptr nonnull dereferenceable(32) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(6229:3): move argument i8 signext ^9
	movzbq %r8b, %rdx
	movsbq %dl, %rdx
	# SetupCalls(6229:3): move argument i8 signext ^10
	movzbq %bl, %rcx
	movsbq %cl, %rcx
	callq _ZNSt8__detail14_Quoted_stringIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEC2ES8_cc
	# LowerLoad(6230:3).2: (^4) into {ptr, i64} ^11
	# FinishMultireg: mov (%reg), <%pack...>
	movq (%r12), %rax
	movq 8(%r12), %rbx
	# LowerRet: two-register return
	movq %rax, %rax
	movq %rbx, %rdx
	movq -40(%rbp), %r12
	movq -48(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE3endEv
.p2align 4, 0x90
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE3endEv:
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE3endEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(48 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	movq %r12, -24(%rbp)
	# LowerAlloca(9012:3): size = 8, type = %"struct.std::_Rb_tree_iterator"*, var = ^2
	leaq -8(%rbp), %r12
	# LowerAlloca(9013:3): size = 8, type = ptr*, var = ^3
	leaq -16(%rbp), %rax
	# LowerStore(9014:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rax)
	# LowerLoad(9015:3).2: (^3) into ptr ^4
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::_Rb_tree"
	# LowerGetelementptr(9016:3): struct-type: ptr ^4 -> ^5, indices=0,0
	# LowerGetelementptr(9016:3): type of ^5 is %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Rb_tree_impl"*
	# tt = Pointer, type = i8
	# LowerGetelementptr(9017:3): struct-type: ptr ^5 -> ^6, indices=8
	movq %rbx, %rax
	addq $8, %rax
	# LowerGetelementptr(9017:3): type of ^6 is i8*
	# tt = Pointer, type = %"struct.std::_Rb_tree_header"
	# LowerGetelementptr(9018:3): struct-type: ptr ^6 -> ^7, indices=0,0
	movq %rax, %rbx
	# LowerGetelementptr(9018:3): type of ^7 is %"struct.std::_Rb_tree_node_base"*
	# SetupCalls(9019:3): move argument ptr nonnull dereferenceable(8) align 8 ^2
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(9019:3): move argument ptr ^7
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEEC2EPSt18_Rb_tree_node_base
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(9020:3): struct-type: ptr ^2 -> ^8, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(9020:3): type of ^8 is ptr*
	# LowerLoad(9021:3).2: (^8) into ptr ^9
	movq (%rax), %rbx
	movq %rbx, %rax
	movq -24(%rbp), %r12
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt10__invoke_rIiRPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEJS8_EENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EESD_E4typeEOSE_DpOSF_
.p2align 4, 0x90
_ZSt10__invoke_rIiRPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEJS8_EENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EESD_E4typeEOSE_DpOSF_:
	.___ZSt10__invoke_rIiRPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEJS8_EENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EESD_E4typeEOSE_DpOSF___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(48 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	# LowerAlloca(4292:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %rbx
	# LowerAlloca(4293:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %rcx
	# LowerAlloca(4294:3): size = 1, type = %"struct.std::__invoke_other"*, var = ^5
	leaq -17(%rbp), %rax
	# LowerStore(4295:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rbx)
	# LowerStore(4296:3).9: mov ptr %rsi, (^4)
	movq %rsi, (%rcx)
	# LowerLoad(4297:3).2: (^3) into ptr ^6
	movq (%rbx), %rax
	# LowerLoad(4298:3).2: (^4) into ptr ^7
	movq (%rcx), %rbx
	# SetupCalls(4299:3): move argument ptr nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(4299:3): move argument ptr nonnull dereferenceable(24) align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZSt13__invoke_implIiRPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEJS8_EET_St14__invoke_otherOT0_DpOT1_
	# SetupCalls(4299:3): move i32 result from %rax
	movl %eax, %ebx
	movl %ebx, %eax
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12_M_check_lenEmPKc
.p2align 4, 0x90
_ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12_M_check_lenEmPKc:
	.___ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12_M_check_lenEmPKc__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(200 + 0, 16)
	subq $208, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -96(%rbp)
	movq %r12, -80(%rbp)
	movq %r13, -72(%rbp)
	movq %r14, -112(%rbp)
	movq %r15, -88(%rbp)
	# LowerAlloca(5413:3): size = 8, type = ptr*, var = ^4
	leaq -8(%rbp), %rcx
	# LowerAlloca(5414:3): size = 8, type = i64*, var = ^5
	leaq -16(%rbp), %r13
	# LowerAlloca(5415:3): size = 8, type = ptr*, var = ^6
	leaq -24(%rbp), %r12
	# LowerAlloca(5416:3): size = 8, type = i64*, var = ^7
	# Fixing source-to-dest leaq -32(%rbp), -56(%rbp)
	leaq -32(%rbp), %r15
	movq %r15, -56(%rbp)
	# LowerAlloca(5417:3): size = 8, type = i64*, var = ^8
	leaq -40(%rbp), %rbx
	# LowerStore(5418:3).9: mov ptr %rdi, (^4)
	movq %rdi, (%rcx)
	# LowerStore(5419:3).9: mov i64 %rsi, (^5)
	movq %rsi, (%r13)
	# LowerStore(5420:3).9: mov ptr %rdx, (^6)
	movq %rdx, (%r12)
	# LowerLoad(5421:3).2: (^4) into ptr ^9
	# Fixing source-to-dest movq (%rcx), -64(%rbp)
	movq (%rcx), %r15
	movq %r15, -64(%rbp)
	# SetupCalls(5422:3): move argument ptr nonnull dereferenceable(24) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq -64(%rbp), %rdi
	callq _ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE8max_sizeEv
	# SetupCalls(5422:3): move i64 result from %rax
	movq %rax, %r14
	# SetupCalls(5423:3): move argument ptr nonnull dereferenceable(24) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq -64(%rbp), %rdi
	callq _ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE4sizeEv
	# SetupCalls(5423:3): move i64 result from %rax
	movq %rax, %r15
	# LowerMath(5424:3): ^10, ^11 into i64 ^12
	movq %r14, %rax
	subq %r15, %rax
	# LowerLoad(5425:3).2: (^5) into i64 ^13
	movq (%r13), %rcx
	# LowerIcmp(5426:3): i64 ^12 vs. operand i64 ^13
	cmpq %rcx, %rax
	setb %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12_M_check_lenEmPKc__M74
	jmp .___ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12_M_check_lenEmPKc__M98
	.___ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12_M_check_lenEmPKc__M74:
	# LowerLoad(5430:3).2: (^6) into ptr ^16
	movq (%r12), %rax
	# SetupCalls(5431:3): move argument ptr ^16
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZSt20__throw_length_errorPKc@PLT
	.___ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12_M_check_lenEmPKc__M98:
	# SetupCalls(5435:3): move argument ptr nonnull dereferenceable(24) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq -64(%rbp), %rdi
	callq _ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE4sizeEv
	# SetupCalls(5435:3): move i64 result from %rax
	movq %rax, %r14
	# SetupCalls(5436:3): move argument ptr nonnull dereferenceable(24) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq -64(%rbp), %rdi
	callq _ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE4sizeEv
	# SetupCalls(5436:3): move i64 result from %rax
	movq %rax, %r12
	# LowerStore(5437:3).9: mov i64 ^19, (^8)
	movq %r12, (%rbx)
	# SetupCalls(5438:3): move argument ptr nonnull dereferenceable(8) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(5438:3): move argument ptr nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r13, %rsi
	callq _ZSt3maxImERKT_S2_S2_
	# SetupCalls(5438:3): move ptr result from %rax
	movq %rax, %rbx
	# LowerLoad(5439:3).2: (^20) into i64 ^21
	movq (%rbx), %rax
	# LowerMath(5440:3): ^18, ^21 into i64 ^22
	movq %r14, %rbx
	addq %rax, %rbx
	# LowerStore(5441:3).9: mov i64 ^22, (^7)
	movq -56(%rbp), %rax
	movq %rbx, (%rax)
	# LowerLoad(5442:3).2: (^7) into i64 ^23
	movq -56(%rbp), %rax
	movq (%rax), %rbx
	# SetupCalls(5443:3): move argument ptr nonnull dereferenceable(24) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq -64(%rbp), %rdi
	callq _ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE4sizeEv
	# SetupCalls(5443:3): move i64 result from %rax
	movq %rax, %r12
	# LowerIcmp(5444:3): i64 ^23 vs. operand i64 ^24
	cmpq %r12, %rbx
	setb %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12_M_check_lenEmPKc__M238
	.___ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12_M_check_lenEmPKc__M208:
	# LowerLoad(5448:3).2: (^7) into i64 ^27
	movq -56(%rbp), %rax
	movq (%rax), %rbx
	# SetupCalls(5449:3): move argument ptr nonnull dereferenceable(24) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq -64(%rbp), %rdi
	callq _ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE8max_sizeEv
	# SetupCalls(5449:3): move i64 result from %rax
	movq %rax, %r12
	# LowerIcmp(5450:3): i64 ^27 vs. operand i64 ^28
	cmpq %r12, %rbx
	seta %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12_M_check_lenEmPKc__M238
	jmp .___ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12_M_check_lenEmPKc__M264
	.___ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12_M_check_lenEmPKc__M238:
	# SetupCalls(5454:3): move argument ptr nonnull dereferenceable(24) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq -64(%rbp), %rdi
	callq _ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE8max_sizeEv
	# SetupCalls(5454:3): move i64 result from %rax
	movq %rax, %rbx
	# MovePhi: ^31 -> ^35
	movq %rbx, -48(%rbp)
	jmp .___ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12_M_check_lenEmPKc__M269
	.___ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12_M_check_lenEmPKc__M264:
	# LowerLoad(5458:3).2: (^7) into i64 ^33
	movq -56(%rbp), %rax
	# Fixing source-to-dest movq (%rax), -48(%rbp)
	movq (%rax), %r15
	movq %r15, -48(%rbp)
	# MovePhi: ^33 -> ^35
	.___ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12_M_check_lenEmPKc__M269:
	movq -48(%rbp), %rax
	movq -88(%rbp), %r15
	movq -112(%rbp), %r14
	movq -72(%rbp), %r13
	movq -80(%rbp), %r12
	movq -96(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt16initializer_listISt17basic_string_viewIcSt11char_traitsIcEEE4sizeEv
.p2align 4, 0x90
_ZNKSt16initializer_listISt17basic_string_viewIcSt11char_traitsIcEEE4sizeEv:
	.___ZNKSt16initializer_listISt17basic_string_viewIcSt11char_traitsIcEEE4sizeEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(5098:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(5099:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(5100:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::initializer_list"
	# LowerGetelementptr(5101:3): struct-type: ptr ^3 -> ^4, indices=0,1
	addq $8, %rbx
	# LowerGetelementptr(5101:3): type of ^4 is i64*
	# LowerLoad(5102:3).2: (^4) into i64 ^5
	movq (%rbx), %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt12__niter_baseIPSt17basic_string_viewIcSt11char_traitsIcEEET_S5_
.p2align 4, 0x90
_ZSt12__niter_baseIPSt17basic_string_viewIcSt11char_traitsIcEEET_S5_:
	.___ZSt12__niter_baseIPSt17basic_string_viewIcSt11char_traitsIcEEET_S5___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(5653:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(5654:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(5655:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt6vectorI6LsItemSaIS0_EE12_M_check_lenEmPKc
.p2align 4, 0x90
_ZNKSt6vectorI6LsItemSaIS0_EE12_M_check_lenEmPKc:
	.___ZNKSt6vectorI6LsItemSaIS0_EE12_M_check_lenEmPKc__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(200 + 0, 16)
	subq $208, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -96(%rbp)
	movq %r12, -80(%rbp)
	movq %r13, -72(%rbp)
	movq %r14, -112(%rbp)
	movq %r15, -88(%rbp)
	# LowerAlloca(6637:3): size = 8, type = ptr*, var = ^4
	leaq -8(%rbp), %rcx
	# LowerAlloca(6638:3): size = 8, type = i64*, var = ^5
	leaq -16(%rbp), %r13
	# LowerAlloca(6639:3): size = 8, type = ptr*, var = ^6
	leaq -24(%rbp), %r12
	# LowerAlloca(6640:3): size = 8, type = i64*, var = ^7
	# Fixing source-to-dest leaq -32(%rbp), -56(%rbp)
	leaq -32(%rbp), %r15
	movq %r15, -56(%rbp)
	# LowerAlloca(6641:3): size = 8, type = i64*, var = ^8
	leaq -40(%rbp), %rbx
	# LowerStore(6642:3).9: mov ptr %rdi, (^4)
	movq %rdi, (%rcx)
	# LowerStore(6643:3).9: mov i64 %rsi, (^5)
	movq %rsi, (%r13)
	# LowerStore(6644:3).9: mov ptr %rdx, (^6)
	movq %rdx, (%r12)
	# LowerLoad(6645:3).2: (^4) into ptr ^9
	# Fixing source-to-dest movq (%rcx), -64(%rbp)
	movq (%rcx), %r15
	movq %r15, -64(%rbp)
	# SetupCalls(6646:3): move argument ptr nonnull dereferenceable(24) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq -64(%rbp), %rdi
	callq _ZNKSt6vectorI6LsItemSaIS0_EE8max_sizeEv
	# SetupCalls(6646:3): move i64 result from %rax
	movq %rax, %r14
	# SetupCalls(6647:3): move argument ptr nonnull dereferenceable(24) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq -64(%rbp), %rdi
	callq _ZNKSt6vectorI6LsItemSaIS0_EE4sizeEv
	# SetupCalls(6647:3): move i64 result from %rax
	movq %rax, %r15
	# LowerMath(6648:3): ^10, ^11 into i64 ^12
	movq %r14, %rax
	subq %r15, %rax
	# LowerLoad(6649:3).2: (^5) into i64 ^13
	movq (%r13), %rcx
	# LowerIcmp(6650:3): i64 ^12 vs. operand i64 ^13
	cmpq %rcx, %rax
	setb %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNKSt6vectorI6LsItemSaIS0_EE12_M_check_lenEmPKc__M74
	jmp .___ZNKSt6vectorI6LsItemSaIS0_EE12_M_check_lenEmPKc__M98
	.___ZNKSt6vectorI6LsItemSaIS0_EE12_M_check_lenEmPKc__M74:
	# LowerLoad(6654:3).2: (^6) into ptr ^16
	movq (%r12), %rax
	# SetupCalls(6655:3): move argument ptr ^16
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZSt20__throw_length_errorPKc@PLT
	.___ZNKSt6vectorI6LsItemSaIS0_EE12_M_check_lenEmPKc__M98:
	# SetupCalls(6659:3): move argument ptr nonnull dereferenceable(24) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq -64(%rbp), %rdi
	callq _ZNKSt6vectorI6LsItemSaIS0_EE4sizeEv
	# SetupCalls(6659:3): move i64 result from %rax
	movq %rax, %r14
	# SetupCalls(6660:3): move argument ptr nonnull dereferenceable(24) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq -64(%rbp), %rdi
	callq _ZNKSt6vectorI6LsItemSaIS0_EE4sizeEv
	# SetupCalls(6660:3): move i64 result from %rax
	movq %rax, %r12
	# LowerStore(6661:3).9: mov i64 ^19, (^8)
	movq %r12, (%rbx)
	# SetupCalls(6662:3): move argument ptr nonnull dereferenceable(8) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(6662:3): move argument ptr nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r13, %rsi
	callq _ZSt3maxImERKT_S2_S2_
	# SetupCalls(6662:3): move ptr result from %rax
	movq %rax, %rbx
	# LowerLoad(6663:3).2: (^20) into i64 ^21
	movq (%rbx), %rax
	# LowerMath(6664:3): ^18, ^21 into i64 ^22
	movq %r14, %rbx
	addq %rax, %rbx
	# LowerStore(6665:3).9: mov i64 ^22, (^7)
	movq -56(%rbp), %rax
	movq %rbx, (%rax)
	# LowerLoad(6666:3).2: (^7) into i64 ^23
	movq -56(%rbp), %rax
	movq (%rax), %rbx
	# SetupCalls(6667:3): move argument ptr nonnull dereferenceable(24) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq -64(%rbp), %rdi
	callq _ZNKSt6vectorI6LsItemSaIS0_EE4sizeEv
	# SetupCalls(6667:3): move i64 result from %rax
	movq %rax, %r12
	# LowerIcmp(6668:3): i64 ^23 vs. operand i64 ^24
	cmpq %r12, %rbx
	setb %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNKSt6vectorI6LsItemSaIS0_EE12_M_check_lenEmPKc__M238
	.___ZNKSt6vectorI6LsItemSaIS0_EE12_M_check_lenEmPKc__M208:
	# LowerLoad(6672:3).2: (^7) into i64 ^27
	movq -56(%rbp), %rax
	movq (%rax), %rbx
	# SetupCalls(6673:3): move argument ptr nonnull dereferenceable(24) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq -64(%rbp), %rdi
	callq _ZNKSt6vectorI6LsItemSaIS0_EE8max_sizeEv
	# SetupCalls(6673:3): move i64 result from %rax
	movq %rax, %r12
	# LowerIcmp(6674:3): i64 ^27 vs. operand i64 ^28
	cmpq %r12, %rbx
	seta %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNKSt6vectorI6LsItemSaIS0_EE12_M_check_lenEmPKc__M238
	jmp .___ZNKSt6vectorI6LsItemSaIS0_EE12_M_check_lenEmPKc__M264
	.___ZNKSt6vectorI6LsItemSaIS0_EE12_M_check_lenEmPKc__M238:
	# SetupCalls(6678:3): move argument ptr nonnull dereferenceable(24) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq -64(%rbp), %rdi
	callq _ZNKSt6vectorI6LsItemSaIS0_EE8max_sizeEv
	# SetupCalls(6678:3): move i64 result from %rax
	movq %rax, %rbx
	# MovePhi: ^31 -> ^35
	movq %rbx, -48(%rbp)
	jmp .___ZNKSt6vectorI6LsItemSaIS0_EE12_M_check_lenEmPKc__M269
	.___ZNKSt6vectorI6LsItemSaIS0_EE12_M_check_lenEmPKc__M264:
	# LowerLoad(6682:3).2: (^7) into i64 ^33
	movq -56(%rbp), %rax
	# Fixing source-to-dest movq (%rax), -48(%rbp)
	movq (%rax), %r15
	movq %r15, -48(%rbp)
	# MovePhi: ^33 -> ^35
	.___ZNKSt6vectorI6LsItemSaIS0_EE12_M_check_lenEmPKc__M269:
	movq -48(%rbp), %rax
	movq -88(%rbp), %r15
	movq -112(%rbp), %r14
	movq -72(%rbp), %r13
	movq -80(%rbp), %r12
	movq -96(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE14_M_get_pointerERKSt9_Any_data
.p2align 4, 0x90
_ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE14_M_get_pointerERKSt9_Any_data:
	.___ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE14_M_get_pointerERKSt9_Any_data__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(40 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	movq %r12, -24(%rbp)
	# LowerAlloca(4305:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerAlloca(4306:3): size = 8, type = ptr*, var = ^3
	leaq -16(%rbp), %r12
	# LowerStore(4307:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(4308:3).2: (^2) into ptr ^4
	movq (%rax), %rbx
	# SetupCalls(4309:3): move argument ptr nonnull dereferenceable(16) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNKSt9_Any_data9_M_accessIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEEERKT_v
	# SetupCalls(4309:3): move ptr result from %rax
	movq %rax, %rbx
	# LowerStore(4310:3).9: mov ptr ^5, (^3)
	movq %rbx, (%r12)
	# LowerLoad(4311:3).2: (^3) into ptr ^6
	movq (%r12), %rax
	movq -24(%rbp), %r12
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt13__invoke_implIiRPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEJS8_EET_St14__invoke_otherOT0_DpOT1_
.p2align 4, 0x90
_ZSt13__invoke_implIiRPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEJS8_EET_St14__invoke_otherOT0_DpOT1_:
	.___ZSt13__invoke_implIiRPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEJS8_EET_St14__invoke_otherOT0_DpOT1___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(48 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	# LowerAlloca(4317:3): size = 1, type = %"struct.std::__invoke_other"*, var = ^3
	leaq -1(%rbp), %rax
	# LowerAlloca(4318:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %rbx
	# LowerAlloca(4319:3): size = 8, type = ptr*, var = ^5
	leaq -24(%rbp), %rcx
	# LowerStore(4320:3).9: mov ptr %rdi, (^4)
	movq %rdi, (%rbx)
	# LowerStore(4321:3).9: mov ptr %rsi, (^5)
	movq %rsi, (%rcx)
	# LowerLoad(4322:3).2: (^4) into ptr ^6
	movq (%rbx), %rax
	# LowerLoad(4323:3).2: (^6) into ptr ^7
	movq (%rax), %rbx
	# LowerLoad(4324:3).2: (^5) into ptr ^8
	movq (%rcx), %rax
	# SetupCalls(4325:3): move argument ptr nonnull dereferenceable(24) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(4325:3): jump to function operand ^7
	callq *%rbx
	# SetupCalls(4325:3): move i32 result from %rax
	movl %eax, %ebx
	movl %ebx, %eax
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt9_Any_data9_M_accessIPPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEEERT_v
.p2align 4, 0x90
_ZNSt9_Any_data9_M_accessIPPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEEERT_v:
	.___ZNSt9_Any_data9_M_accessIPPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEEERT_v__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(4358:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(4359:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(4360:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# SetupCalls(4361:3): move argument ptr nonnull dereferenceable(16) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt9_Any_data9_M_accessEv
	# SetupCalls(4361:3): move ptr result from %rax
	movq %rax, %rbx
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE15_M_init_functorIRKSB_EEvRSt9_Any_dataOT_
.p2align 4, 0x90
_ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE15_M_init_functorIRKSB_EEvRSt9_Any_dataOT_:
	.___ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE15_M_init_functorIRKSB_EEvRSt9_Any_dataOT___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(40 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	# LowerAlloca(4414:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %rbx
	# LowerAlloca(4415:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %rcx
	# LowerAlloca(4416:3): size = 1, type = %"struct.std::integral_constant"*, var = ^5
	leaq -17(%rbp), %rax
	# LowerStore(4417:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rbx)
	# LowerStore(4418:3).9: mov ptr %rsi, (^4)
	movq %rsi, (%rcx)
	# LowerLoad(4419:3).2: (^3) into ptr ^6
	movq (%rbx), %rax
	# LowerLoad(4420:3).2: (^4) into ptr ^7
	movq (%rcx), %rbx
	# SetupCalls(4421:3): move argument ptr nonnull dereferenceable(16) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(4421:3): move argument ptr nonnull dereferenceable(8) align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE9_M_createIRKSB_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt15__new_allocatorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEED2Ev
.p2align 4, 0x90
_ZNSt15__new_allocatorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEED2Ev:
	.___ZNSt15__new_allocatorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEED2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(8765:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(8766:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(8767:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE
.p2align 4, 0x90
_ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE:
	.___ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(4427:3): size = 1, type = %"struct.std::integral_constant"*, var = ^2
	leaq -1(%rbp), %rax
	# LowerAlloca(4428:3): size = 8, type = ptr*, var = ^3
	leaq -16(%rbp), %rax
	# LowerStore(4429:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rax)
	# LowerLoad(4430:3).2: (^3) into ptr ^4
	movq (%rax), %rbx
	# SetupCalls(4431:3): move argument ptr nonnull dereferenceable(16) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt9_Any_data9_M_accessIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEEERT_v
	# SetupCalls(4431:3): move ptr result from %rax
	movq %rax, %rax
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10filesystem7__cxx114pathC2Ev
.p2align 4, 0x90
_ZNSt10filesystem7__cxx114pathC2Ev:
	.___ZNSt10filesystem7__cxx114pathC2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(1351:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(1352:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(1353:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path"
	# LowerGetelementptr(1354:3): struct-type: ptr ^3 -> ^4, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(1354:3): type of ^4 is %"class.std::__cxx11::basic_string"*
	# SetupCalls(1355:3): move argument ptr nonnull dereferenceable(32) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev@PLT
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path"
	# LowerGetelementptr(1356:3): struct-type: ptr ^3 -> ^5, indices=0,1
	movq %rbx, %rax
	addq $32, %rax
	# LowerGetelementptr(1356:3): type of ^5 is %"struct.std::filesystem::__cxx11::path::_List"*
	# SetupCalls(1357:3): move argument ptr nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt10filesystem7__cxx114path5_ListC1Ev@PLT
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt22__uninitialized_copy_aIPKSt17basic_string_viewIcSt11char_traitsIcEEPS3_S3_ET0_T_S8_S7_RSaIT1_E
.p2align 4, 0x90
_ZSt22__uninitialized_copy_aIPKSt17basic_string_viewIcSt11char_traitsIcEEPS3_S3_ET0_T_S8_S7_RSaIT1_E:
	.___ZSt22__uninitialized_copy_aIPKSt17basic_string_viewIcSt11char_traitsIcEEPS3_S3_ET0_T_S8_S7_RSaIT1_E__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(56 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -40(%rbp)
	# LowerAlloca(4925:3): size = 8, type = ptr*, var = ^5
	leaq -8(%rbp), %r9
	# LowerAlloca(4926:3): size = 8, type = ptr*, var = ^6
	leaq -16(%rbp), %rbx
	# LowerAlloca(4927:3): size = 8, type = ptr*, var = ^7
	leaq -24(%rbp), %r8
	# LowerAlloca(4928:3): size = 8, type = ptr*, var = ^8
	leaq -32(%rbp), %rax
	# LowerStore(4929:3).9: mov ptr %rdi, (^5)
	movq %rdi, (%r9)
	# LowerStore(4930:3).9: mov ptr %rsi, (^6)
	movq %rsi, (%rbx)
	# LowerStore(4931:3).9: mov ptr %rdx, (^7)
	movq %rdx, (%r8)
	# LowerStore(4932:3).9: mov ptr %rcx, (^8)
	movq %rcx, (%rax)
	# LowerLoad(4933:3).2: (^5) into ptr ^9
	movq (%r9), %rax
	# LowerLoad(4934:3).2: (^6) into ptr ^10
	movq (%rbx), %rcx
	# LowerLoad(4935:3).2: (^7) into ptr ^11
	movq (%r8), %rbx
	# SetupCalls(4936:3): move argument ptr ^9
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(4936:3): move argument ptr ^10
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(4936:3): move argument ptr ^11
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdx
	callq _ZSt18uninitialized_copyIPKSt17basic_string_viewIcSt11char_traitsIcEEPS3_ET0_T_S8_S7_
	# SetupCalls(4936:3): move ptr result from %rax
	movq %rax, %rbx
	movq %rbx, %rax
	movq -40(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZN9__gnu_cxxeqIPKSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESF_
.p2align 4, 0x90
_ZN9__gnu_cxxeqIPKSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESF_:
	.___ZN9__gnu_cxxeqIPKSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESF___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(56 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	movq %r12, -48(%rbp)
	movq %r13, -32(%rbp)
	# LowerAlloca(9904:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %rbx
	# LowerAlloca(9905:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %r13
	# LowerStore(9906:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rbx)
	# LowerStore(9907:3).9: mov ptr %rsi, (^4)
	movq %rsi, (%r13)
	# LowerLoad(9908:3).2: (^3) into ptr ^5
	movq (%rbx), %rax
	# SetupCalls(9909:3): move argument ptr nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIPKSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEE4baseEv
	# SetupCalls(9909:3): move ptr result from %rax
	movq %rax, %rbx
	# LowerLoad(9910:3).2: (^6) into ptr ^7
	movq (%rbx), %r12
	# LowerLoad(9911:3).2: (^4) into ptr ^8
	movq (%r13), %rax
	# SetupCalls(9912:3): move argument ptr nonnull dereferenceable(8) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIPKSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEE4baseEv
	# SetupCalls(9912:3): move ptr result from %rax
	movq %rax, %rbx
	# LowerLoad(9913:3).2: (^9) into ptr ^10
	movq (%rbx), %rax
	# LowerIcmp(9914:3): ptr ^7 vs. operand ptr ^10
	cmpq %rax, %r12
	sete %al
	andq $1, %rax
	movq -32(%rbp), %r13
	movq -48(%rbp), %r12
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt9_Any_data9_M_accessIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEEERT_v
.p2align 4, 0x90
_ZNSt9_Any_data9_M_accessIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEEERT_v:
	.___ZNSt9_Any_data9_M_accessIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEEERT_v__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(4452:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(4453:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(4454:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# SetupCalls(4455:3): move argument ptr nonnull dereferenceable(16) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt9_Any_data9_M_accessEv
	# SetupCalls(4455:3): move ptr result from %rax
	movq %rax, %rbx
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt14_Function_baseD2Ev
.p2align 4, 0x90
_ZNSt14_Function_baseD2Ev:
	.___ZNSt14_Function_baseD2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(4470:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(4471:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(4472:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::_Function_base"
	# LowerGetelementptr(4473:3): struct-type: ptr ^3 -> ^4, indices=0,1
	movq %rbx, %rcx
	addq $16, %rcx
	# LowerGetelementptr(4473:3): type of ^4 is ptr*
	# LowerLoad(4474:3).2: (^4) into ptr ^5
	movq (%rcx), %rax
	# LowerIcmp(4475:3): ptr ^5 vs. intlike 0
	cmpq $0, %rax
	setne %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt14_Function_baseD2Ev__M18
	jmp .___ZNSt14_Function_baseD2Ev__M62
	.___ZNSt14_Function_baseD2Ev__M18:
	# tt = Pointer, type = %"class.std::_Function_base"
	# LowerGetelementptr(4479:3): struct-type: ptr ^3 -> ^8, indices=0,1
	movq %rbx, %rax
	addq $16, %rax
	# LowerGetelementptr(4479:3): type of ^8 is ptr*
	# LowerLoad(4480:3).2: (^8) into ptr ^9
	movq (%rax), %rcx
	# tt = Pointer, type = %"class.std::_Function_base"
	# LowerGetelementptr(4481:3): struct-type: ptr ^3 -> ^10, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(4481:3): type of ^10 is %"union.std::_Any_data"*
	# tt = Pointer, type = %"class.std::_Function_base"
	# LowerGetelementptr(4482:3): struct-type: ptr ^3 -> ^11, indices=0,0
	movq %rbx, %rdx
	# LowerGetelementptr(4482:3): type of ^11 is %"union.std::_Any_data"*
	# SetupCalls(4483:3): move argument ptr nonnull dereferenceable(16) align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(4483:3): move argument ptr nonnull dereferenceable(16) align 8 ^11
	# Fixed movzx with identical source and destination widths
	movq %rdx, %rsi
	# SetupCalls(4483:3): move argument i32 3
	movq $3, %rdx
	# SetupCalls(4483:3): jump to function operand ^9
	callq *%rcx
	# SetupCalls(4483:3): move i1 result from %rax
	movb %al, %al
	.___ZNSt14_Function_baseD2Ev__M62:
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEEE8allocateEmPKv
.p2align 4, 0x90
_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEEE8allocateEmPKv:
	.___ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEEE8allocateEmPKv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(56 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -40(%rbp)
	# LowerAlloca(9777:3): size = 8, type = ptr*, var = ^4
	leaq -8(%rbp), %r8
	# LowerAlloca(9778:3): size = 8, type = ptr*, var = ^5
	leaq -16(%rbp), %rcx
	# LowerAlloca(9779:3): size = 8, type = i64*, var = ^6
	leaq -24(%rbp), %rbx
	# LowerAlloca(9780:3): size = 8, type = ptr*, var = ^7
	leaq -32(%rbp), %rax
	# LowerStore(9781:3).9: mov ptr %rdi, (^5)
	movq %rdi, (%rcx)
	# LowerStore(9782:3).9: mov i64 %rsi, (^6)
	movq %rsi, (%rbx)
	# LowerStore(9783:3).9: mov ptr %rdx, (^7)
	movq %rdx, (%rax)
	# LowerLoad(9784:3).2: (^5) into ptr ^8
	movq (%rcx), %rax
	# LowerLoad(9785:3).2: (^6) into i64 ^9
	movq (%rbx), %rcx
	# LowerStore(9786:3).9: mov ptr ^8, (^4)
	movq %rax, (%r8)
	# LowerLoad(9787:3).2: (^4) into ptr ^10
	movq (%r8), %rax
	# LowerIcmp(9788:3): i64 ^9 vs. intlike 96076792050570581
	movabsq $96076792050570581, %rax
	cmpq %rax, %rcx
	seta %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEEE8allocateEmPKv__M28
	jmp .___ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEEE8allocateEmPKv__M76
	.___ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEEE8allocateEmPKv__M28:
	# LowerLoad(9792:3).2: (^6) into i64 ^13
	movq (%rbx), %rax
	# LowerIcmp(9793:3): i64 ^13 vs. intlike 192153584101141162
	movabsq $192153584101141162, %rcx
	cmpq %rcx, %rax
	seta %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEEE8allocateEmPKv__M36
	jmp .___ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEEE8allocateEmPKv__M56
	.___ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEEE8allocateEmPKv__M36:
	callq _ZSt28__throw_bad_array_new_lengthv@PLT
	.___ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEEE8allocateEmPKv__M56:
	callq _ZSt17__throw_bad_allocv@PLT
	.___ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEEE8allocateEmPKv__M76:
	# LowerLoad(9805:3).2: (^6) into i64 ^18
	movq (%rbx), %rcx
	# LowerMath(9806:3): ^18, 96 into i64 ^19
	# LowerMult(9806:3): delegating to Function::multiply
	movq %rcx, %rax
	movq $96, %rbx
	imulq %rbx
	movq %rax, %rcx
	# SetupCalls(9807:3): move argument i64 ^19
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	callq _Znwm@PLT
	# SetupCalls(9807:3): move ptr result from %rax
	movq %rax, %rbx
	movq %rbx, %rax
	movq -40(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12emplace_backIJS3_EEERS3_DpOT_
.p2align 4, 0x90
_ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12emplace_backIJS3_EEERS3_DpOT_:
	.___ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12emplace_backIJS3_EEERS3_DpOT___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(152 + 0, 16)
	subq $160, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -80(%rbp)
	movq %r12, -104(%rbp)
	movq %r13, -88(%rbp)
	movq %r14, -96(%rbp)
	# LowerAlloca(5212:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %r8
	# LowerAlloca(5213:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %r9
	# LowerAlloca(5214:3): size = 8, type = ptr*, var = ^5
	leaq -24(%rbp), %rdx
	# LowerAlloca(5215:3): size = 8, type = ptr*, var = ^6
	leaq -32(%rbp), %rbx
	# LowerAlloca(5216:3): size = 8, type = ptr*, var = ^7
	leaq -40(%rbp), %rcx
	# LowerAlloca(5217:3): size = 8, type = ptr*, var = ^8
	leaq -48(%rbp), %rax
	# LowerAlloca(5218:3): size = 8, type = ptr*, var = ^9
	leaq -56(%rbp), %r10
	# LowerAlloca(5219:3): size = 8, type = ptr*, var = ^10
	leaq -64(%rbp), %r13
	# LowerAlloca(5220:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator.19"*, var = ^11
	leaq -72(%rbp), %r14
	# LowerStore(5221:3).9: mov ptr %rdi, (^9)
	movq %rdi, (%r10)
	# LowerStore(5222:3).9: mov ptr %rsi, (^10)
	movq %rsi, (%r13)
	# LowerLoad(5223:3).2: (^9) into ptr ^12
	movq (%r10), %r12
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(5224:3): struct-type: ptr ^12 -> ^13, indices=0,0
	movq %r12, %rsi
	# LowerGetelementptr(5224:3): type of ^13 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(5225:3): struct-type: ptr ^13 -> ^14, indices=0,1
	addq $8, %rsi
	# LowerGetelementptr(5225:3): type of ^14 is ptr*
	# LowerLoad(5226:3).2: (^14) into ptr ^15
	movq (%rsi), %rdi
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(5227:3): struct-type: ptr ^12 -> ^16, indices=0,0
	movq %r12, %rsi
	# LowerGetelementptr(5227:3): type of ^16 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(5228:3): struct-type: ptr ^16 -> ^17, indices=0,2
	movq %rsi, %r10
	addq $16, %r10
	# LowerGetelementptr(5228:3): type of ^17 is ptr*
	# LowerLoad(5229:3).2: (^17) into ptr ^18
	movq (%r10), %rsi
	# LowerIcmp(5230:3): ptr ^15 vs. operand ptr ^18
	cmpq %rsi, %rdi
	setne %sil
	andq $1, %rsi
	cmpb $0, %sil
	jne .___ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12emplace_backIJS3_EEERS3_DpOT___M52
	jmp .___ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12emplace_backIJS3_EEERS3_DpOT___M138
	.___ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12emplace_backIJS3_EEERS3_DpOT___M52:
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(5234:3): struct-type: ptr ^12 -> ^21, indices=0,0
	movq %r12, %rsi
	# LowerGetelementptr(5234:3): type of ^21 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(5235:3): struct-type: ptr ^12 -> ^22, indices=0,0
	movq %r12, %rdi
	# LowerGetelementptr(5235:3): type of ^22 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(5236:3): struct-type: ptr ^22 -> ^23, indices=0,1
	addq $8, %rdi
	# LowerGetelementptr(5236:3): type of ^23 is ptr*
	# LowerLoad(5237:3).2: (^23) into ptr ^24
	movq (%rdi), %r10
	# LowerLoad(5238:3).2: (^10) into ptr ^25
	movq (%r13), %rdi
	# LowerStore(5239:3).9: mov %"struct.std::_Vector_base"* ^21, (^6)
	movq %rsi, (%rbx)
	# LowerStore(5240:3).9: mov ptr ^24, (^7)
	movq %r10, (%rcx)
	# LowerStore(5241:3).9: mov ptr ^25, (^8)
	movq %rdi, (%rax)
	# LowerLoad(5242:3).2: (^6) into ptr ^26
	movq (%rbx), %rsi
	# LowerLoad(5243:3).2: (^7) into ptr ^27
	movq (%rcx), %rbx
	# LowerLoad(5244:3).2: (^8) into ptr ^28
	movq (%rax), %rcx
	# LowerStore(5245:3).9: mov ptr ^26, (^3)
	movq %rsi, (%r8)
	# LowerStore(5246:3).9: mov ptr ^27, (^4)
	movq %rbx, (%r9)
	# LowerStore(5247:3).9: mov ptr ^28, (^5)
	movq %rcx, (%rdx)
	# LowerLoad(5248:3).2: (^3) into ptr ^29
	movq (%r8), %rax
	# LowerLoad(5249:3).2: (^4) into ptr ^30
	movq (%r9), %rax
	# LowerLoad(5250:3).2: (^5) into ptr ^31
	movq (%rdx), %rbx
	# SetupCalls(5251:3): move argument ptr align 8 ^30
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(5251:3): move argument ptr align 8 ^31
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(5251:3): move argument i64 16
	movq $16, %rdx
	callq memcpy@PLT
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(5252:3): struct-type: ptr ^12 -> ^32, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(5252:3): type of ^32 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(5253:3): struct-type: ptr ^32 -> ^33, indices=0,1
	addq $8, %rax
	# LowerGetelementptr(5253:3): type of ^33 is ptr*
	# LowerLoad(5254:3).2: (^33) into ptr ^34
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::basic_string_view"
	# LowerGetelementptr(5255:3): struct-type: ptr ^34 -> ^35, indices=1
	movq %rbx, %rcx
	addq $16, %rcx
	# LowerGetelementptr(5255:3): type of ^35 is %"class.std::basic_string_view"*
	# LowerStore(5256:3).9: mov %"class.std::basic_string_view"* ^35, (^33)
	movq %rcx, (%rax)
	jmp .___ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12emplace_backIJS3_EEERS3_DpOT___M201
	.___ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12emplace_backIJS3_EEERS3_DpOT___M138:
	# SetupCalls(5260:3): move argument ptr nonnull dereferenceable(24) align 8 ^12
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	callq _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE3endEv
	# SetupCalls(5260:3): move ptr result from %rax
	movq %rax, %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator.19"
	# LowerGetelementptr(5261:3): struct-type: ptr ^11 -> ^38, indices=0,0
	movq %r14, %rax
	# LowerGetelementptr(5261:3): type of ^38 is ptr*
	# LowerStore(5262:3).9: mov ptr ^37, (^38)
	movq %rbx, (%rax)
	# LowerLoad(5263:3).2: (^10) into ptr ^39
	movq (%r13), %rax
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator.19"
	# LowerGetelementptr(5264:3): struct-type: ptr ^11 -> ^40, indices=0,0
	movq %r14, %rbx
	# LowerGetelementptr(5264:3): type of ^40 is ptr*
	# LowerLoad(5265:3).2: (^40) into ptr ^41
	movq (%rbx), %rcx
	# SetupCalls(5266:3): move argument ptr nonnull dereferenceable(24) align 8 ^12
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(5266:3): move argument ptr ^41
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(5266:3): move argument ptr nonnull dereferenceable(16) align 8 ^39
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdx
	callq _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE17_M_realloc_insertIJS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_
	.___ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12emplace_backIJS3_EEERS3_DpOT___M201:
	# SetupCalls(5270:3): move argument ptr nonnull dereferenceable(24) align 8 ^12
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	callq _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE4backEv
	# SetupCalls(5270:3): move ptr result from %rax
	movq %rax, %rbx
	movq %rbx, %rax
	movq -96(%rbp), %r14
	movq -88(%rbp), %r13
	movq -104(%rbp), %r12
	movq -80(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt10filesystem7__cxx114path8iteratordeEv
.p2align 4, 0x90
_ZNKSt10filesystem7__cxx114path8iteratordeEv:
	.___ZNKSt10filesystem7__cxx114path8iteratordeEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(56 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -40(%rbp)
	movq %r12, -24(%rbp)
	movq %r13, -32(%rbp)
	movq %r15, -48(%rbp)
	# LowerAlloca(3589:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %r12
	# LowerAlloca(3590:3): size = 8, type = ptr*, var = ^3
	leaq -16(%rbp), %rax
	# LowerStore(3591:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rax)
	# LowerLoad(3592:3).2: (^3) into ptr ^4
	movq (%rax), %r13
	# SetupCalls(3599:3): move argument ptr nonnull dereferenceable(17) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	callq _ZNKSt10filesystem7__cxx114path8iterator11_M_is_multiEv
	# SetupCalls(3599:3): move i1 result from %rax
	movb %al, %bl
	cmpb $0, %bl
	jne .___ZNKSt10filesystem7__cxx114path8iteratordeEv__M34
	jmp .___ZNKSt10filesystem7__cxx114path8iteratordeEv__M46
	.___ZNKSt10filesystem7__cxx114path8iteratordeEv__M34:
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path::iterator"
	# LowerGetelementptr(3609:3): struct-type: ptr ^4 -> ^11, indices=0,1
	movq %r13, %rax
	addq $8, %rax
	# LowerGetelementptr(3609:3): type of ^11 is ptr*
	# LowerLoad(3610:3).2: (^11) into ptr ^12
	# Fixing source-to-dest movq (%rax), (%r12)
	movq (%rax), %r15
	movq %r15, (%r12)
	# LowerStore(3611:3).9: mov ptr ^12, (^2)
	jmp .___ZNKSt10filesystem7__cxx114path8iteratordeEv__M55
	.___ZNKSt10filesystem7__cxx114path8iteratordeEv__M46:
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path::iterator"
	# LowerGetelementptr(3615:3): struct-type: ptr ^4 -> ^14, indices=0,0
	movq %r13, %rax
	# LowerGetelementptr(3615:3): type of ^14 is ptr*
	# LowerLoad(3616:3).2: (^14) into ptr ^15
	# Fixing source-to-dest movq (%rax), (%r12)
	movq (%rax), %r15
	movq %r15, (%r12)
	# LowerStore(3617:3).9: mov ptr ^15, (^2)
	.___ZNKSt10filesystem7__cxx114path8iteratordeEv__M55:
	# LowerLoad(3621:3).2: (^2) into ptr ^17
	movq (%r12), %rax
	movq -48(%rbp), %r15
	movq -32(%rbp), %r13
	movq -24(%rbp), %r12
	movq -40(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE5resetEPS4_
.p2align 4, 0x90
_ZNSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE5resetEPS4_:
	.___ZNSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE5resetEPS4___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(88 + 0, 16)
	subq $96, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -48(%rbp)
	movq %r12, -56(%rbp)
	movq %r13, -40(%rbp)
	movq %r14, -32(%rbp)
	movq %r15, -64(%rbp)
	# LowerAlloca(6026:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %rax
	# LowerAlloca(6027:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %r14
	# LowerAlloca(6028:3): size = 8, type = ptr*, var = ^5
	leaq -24(%rbp), %r13
	# LowerStore(6029:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rax)
	# LowerStore(6030:3).9: mov ptr %rsi, (^4)
	movq %rsi, (%r14)
	# LowerLoad(6031:3).2: (^3) into ptr ^6
	movq (%rax), %rbx
	# SetupCalls(6032:3): move argument ptr nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE6_M_ptrEv
	# SetupCalls(6032:3): move ptr result from %rax
	movq %rax, %r12
	# LowerLoad(6033:3).2: (^7) into ptr ^8
	# Fixing source-to-dest movq (%r12), (%r13)
	movq (%r12), %r15
	movq %r15, (%r13)
	# LowerStore(6034:3).9: mov ptr ^8, (^5)
	# LowerLoad(6035:3).2: (^4) into ptr ^9
	movq (%r14), %r12
	# SetupCalls(6036:3): move argument ptr nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE6_M_ptrEv
	# SetupCalls(6036:3): move ptr result from %rax
	movq %rax, %r14
	# LowerStore(6037:3).9: mov ptr ^9, (^10)
	movq %r12, (%r14)
	# LowerLoad(6038:3).2: (^5) into ptr ^11
	movq (%r13), %rax
	# LowerIcmp(6039:3): ptr ^11 vs. intlike 0
	cmpq $0, %rax
	setne %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE5resetEPS4___M73
	jmp .___ZNSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE5resetEPS4___M122
	.___ZNSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE5resetEPS4___M73:
	# SetupCalls(6043:3): move argument ptr nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE10_M_deleterEv
	# SetupCalls(6043:3): move ptr result from %rax
	movq %rax, %rbx
	# LowerLoad(6044:3).2: (^5) into ptr ^15
	movq (%r13), %rax
	# SetupCalls(6045:3): move argument ptr nonnull dereferenceable(1) align 1 ^14
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(6045:3): move argument ptr ^15
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNKSt10filesystem7__cxx114path5_List13_Impl_deleterclEPNS2_5_ImplE@PLT
	.___ZNSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE5resetEPS4___M122:
	movq -64(%rbp), %r15
	movq -32(%rbp), %r14
	movq -40(%rbp), %r13
	movq -56(%rbp), %r12
	movq -48(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE8_M_eraseEPSt13_Rb_tree_nodeISI_E
.p2align 4, 0x90
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE8_M_eraseEPSt13_Rb_tree_nodeISI_E:
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE8_M_eraseEPSt13_Rb_tree_nodeISI_E__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(72 + 0, 16)
	subq $80, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -48(%rbp)
	movq %r12, -56(%rbp)
	movq %r13, -40(%rbp)
	movq %r14, -32(%rbp)
	movq %r15, -72(%rbp)
	# LowerAlloca(4504:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %rax
	# LowerAlloca(4505:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %r14
	# LowerAlloca(4506:3): size = 8, type = ptr*, var = ^5
	leaq -24(%rbp), %r13
	# LowerStore(4507:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rax)
	# LowerStore(4508:3).9: mov ptr %rsi, (^4)
	movq %rsi, (%r14)
	# LowerLoad(4509:3).2: (^3) into ptr ^6
	movq (%rax), %rbx
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE8_M_eraseEPSt13_Rb_tree_nodeISI_E__M13:
	# LowerLoad(4513:3).2: (^4) into ptr ^8
	movq (%r14), %rax
	# LowerIcmp(4514:3): ptr ^8 vs. intlike 0
	cmpq $0, %rax
	setne %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE8_M_eraseEPSt13_Rb_tree_nodeISI_E__M20
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE8_M_eraseEPSt13_Rb_tree_nodeISI_E__M125
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE8_M_eraseEPSt13_Rb_tree_nodeISI_E__M20:
	# LowerLoad(4518:3).2: (^4) into ptr ^11
	movq (%r14), %rax
	# SetupCalls(4519:3): move argument ptr ^11
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE8_S_rightEPSt18_Rb_tree_node_base
	# SetupCalls(4519:3): move ptr result from %rax
	movq %rax, %r12
	# SetupCalls(4520:3): move argument ptr nonnull dereferenceable(48) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(4520:3): move argument ptr ^12
	# Fixed movzx with identical source and destination widths
	movq %r12, %rsi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE8_M_eraseEPSt13_Rb_tree_nodeISI_E
	# LowerLoad(4521:3).2: (^4) into ptr ^13
	movq (%r14), %rax
	# SetupCalls(4522:3): move argument ptr ^13
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE7_S_leftEPSt18_Rb_tree_node_base
	# SetupCalls(4522:3): move ptr result from %rax
	movq %rax, %r12
	# LowerStore(4523:3).9: mov ptr ^14, (^5)
	movq %r12, (%r13)
	# LowerLoad(4524:3).2: (^4) into ptr ^15
	movq (%r14), %rax
	# SetupCalls(4525:3): move argument ptr nonnull dereferenceable(48) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(4525:3): move argument ptr ^15
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISI_E
	# LowerLoad(4526:3).2: (^5) into ptr ^16
	# Fixing source-to-dest movq (%r13), (%r14)
	movq (%r13), %r15
	movq %r15, (%r14)
	# LowerStore(4527:3).9: mov ptr ^16, (^4)
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE8_M_eraseEPSt13_Rb_tree_nodeISI_E__M13
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE8_M_eraseEPSt13_Rb_tree_nodeISI_E__M125:
	movq -72(%rbp), %r15
	movq -32(%rbp), %r14
	movq -40(%rbp), %r13
	movq -56(%rbp), %r12
	movq -48(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_T0_
.p2align 4, 0x90
_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_T0_:
	.___ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_T0___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(288 + 0, 16)
	subq $288, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -192(%rbp)
	movq %r12, -232(%rbp)
	movq %r13, -200(%rbp)
	movq %r14, -240(%rbp)
	movq %r15, -160(%rbp)
	# LowerAlloca(7344:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^4
	# Fixing source-to-dest leaq -8(%rbp), -104(%rbp)
	leaq -8(%rbp), %r15
	movq %r15, -104(%rbp)
	# LowerAlloca(7345:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^5
	# Fixing source-to-dest leaq -16(%rbp), -112(%rbp)
	leaq -16(%rbp), %r15
	movq %r15, -112(%rbp)
	# LowerAlloca(7346:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^6
	# Fixing source-to-dest leaq -24(%rbp), -120(%rbp)
	leaq -24(%rbp), %r15
	movq %r15, -120(%rbp)
	# LowerAlloca(7347:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, var = ^7
	# Fixing source-to-dest leaq -25(%rbp), -128(%rbp)
	leaq -25(%rbp), %r15
	movq %r15, -128(%rbp)
	# LowerAlloca(7348:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^8
	leaq -40(%rbp), %rbx
	# LowerAlloca(7349:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^9
	leaq -48(%rbp), %r13
	# LowerAlloca(7350:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^10
	# Fixing source-to-dest leaq -56(%rbp), -136(%rbp)
	leaq -56(%rbp), %r15
	movq %r15, -136(%rbp)
	# LowerAlloca(7351:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^11
	# Fixing source-to-dest leaq -64(%rbp), -144(%rbp)
	leaq -64(%rbp), %r15
	movq %r15, -144(%rbp)
	# LowerAlloca(7352:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^12
	# Fixing source-to-dest leaq -72(%rbp), -152(%rbp)
	leaq -72(%rbp), %r15
	movq %r15, -152(%rbp)
	# LowerAlloca(7353:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^13
	leaq -80(%rbp), %r12
	# LowerAlloca(7354:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^14
	leaq -88(%rbp), %r14
	# LowerAlloca(7355:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^15
	leaq -96(%rbp), %r15
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7356:3): struct-type: ptr ^4 -> ^16, indices=0,0
	movq -104(%rbp), %rax
	# LowerGetelementptr(7356:3): type of ^16 is ptr*
	# LowerStore(7357:3).9: mov ptr %rdi, (^16)
	movq %rdi, (%rax)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7358:3): struct-type: ptr ^5 -> ^17, indices=0,0
	movq -112(%rbp), %rax
	# LowerGetelementptr(7358:3): type of ^17 is ptr*
	# LowerStore(7359:3).9: mov ptr %rsi, (^17)
	movq %rsi, (%rax)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7360:3): struct-type: ptr ^6 -> ^18, indices=0,0
	movq -120(%rbp), %rax
	# LowerGetelementptr(7360:3): type of ^18 is ptr*
	# LowerStore(7361:3).9: mov ptr %rdx, (^18)
	movq %rdx, (%rax)
	# SetupCalls(7362:3): move argument ptr align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(7362:3): move argument ptr align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -104(%rbp), %rsi
	# SetupCalls(7362:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# SetupCalls(7363:3): move argument ptr align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	# SetupCalls(7363:3): move argument ptr align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq -112(%rbp), %rsi
	# SetupCalls(7363:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7364:3): struct-type: ptr ^8 -> ^19, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(7364:3): type of ^19 is ptr*
	# LowerLoad(7365:3).2: (^19) into ptr ^20
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7366:3): struct-type: ptr ^9 -> ^21, indices=0,0
	movq %r13, %rax
	# LowerGetelementptr(7366:3): type of ^21 is ptr*
	# LowerLoad(7367:3).2: (^21) into ptr ^22
	movq (%rax), %rcx
	# SetupCalls(7368:3): move argument ptr ^20
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(7368:3): move argument ptr ^22
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(7368:3): move argument ptr nonnull dereferenceable(1) align 1 ^7
	# Fixed movzx with identical source and destination widths
	movq -128(%rbp), %rdx
	callq _ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_RT0_
	# SetupCalls(7369:3): move argument ptr align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq -136(%rbp), %rdi
	# SetupCalls(7369:3): move argument ptr align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq -112(%rbp), %rsi
	# SetupCalls(7369:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	.___ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_T0___M156:
	# SetupCalls(7373:3): move argument ptr nonnull dereferenceable(8) align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq -136(%rbp), %rdi
	# SetupCalls(7373:3): move argument ptr nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq -120(%rbp), %rsi
	callq _ZN9__gnu_cxxltIP6LsItemSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_
	# SetupCalls(7373:3): move i1 result from %rax
	movb %al, %bl
	cmpb $0, %bl
	jne .___ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_T0___M182
	jmp .___ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_T0___M418
	.___ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_T0___M182:
	# SetupCalls(7377:3): move argument ptr align 8 ^11
	# Fixed movzx with identical source and destination widths
	movq -144(%rbp), %rdi
	# SetupCalls(7377:3): move argument ptr align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq -136(%rbp), %rsi
	# SetupCalls(7377:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# SetupCalls(7378:3): move argument ptr align 8 ^12
	# Fixed movzx with identical source and destination widths
	movq -152(%rbp), %rdi
	# SetupCalls(7378:3): move argument ptr align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -104(%rbp), %rsi
	# SetupCalls(7378:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7379:3): struct-type: ptr ^11 -> ^26, indices=0,0
	movq -144(%rbp), %rax
	# LowerGetelementptr(7379:3): type of ^26 is ptr*
	# LowerLoad(7380:3).2: (^26) into ptr ^27
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7381:3): struct-type: ptr ^12 -> ^28, indices=0,0
	movq -152(%rbp), %rax
	# LowerGetelementptr(7381:3): type of ^28 is ptr*
	# LowerLoad(7382:3).2: (^28) into ptr ^29
	movq (%rax), %rcx
	# SetupCalls(7383:3): move argument ptr nonnull dereferenceable(1) align 1 ^7
	# Fixed movzx with identical source and destination widths
	movq -128(%rbp), %rdi
	# SetupCalls(7383:3): move argument ptr ^27
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(7383:3): move argument ptr ^29
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdx
	callq _ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EclINS_17__normal_iteratorIP6LsItemS2_ISF_SaISF_EEEESJ_EEbT_T0_
	# SetupCalls(7383:3): move i1 result from %rax
	movb %al, %bl
	cmpb $0, %bl
	jne .___ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_T0___M272
	jmp .___ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_T0___M393
	.___ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_T0___M272:
	# SetupCalls(7387:3): move argument ptr align 8 ^13
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(7387:3): move argument ptr align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -104(%rbp), %rsi
	# SetupCalls(7387:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# SetupCalls(7388:3): move argument ptr align 8 ^14
	# Fixed movzx with identical source and destination widths
	movq %r14, %rdi
	# SetupCalls(7388:3): move argument ptr align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq -112(%rbp), %rsi
	# SetupCalls(7388:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# SetupCalls(7389:3): move argument ptr align 8 ^15
	# Fixed movzx with identical source and destination widths
	movq %r15, %rdi
	# SetupCalls(7389:3): move argument ptr align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq -136(%rbp), %rsi
	# SetupCalls(7389:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7390:3): struct-type: ptr ^13 -> ^32, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(7390:3): type of ^32 is ptr*
	# LowerLoad(7391:3).2: (^32) into ptr ^33
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7392:3): struct-type: ptr ^14 -> ^34, indices=0,0
	movq %r14, %rax
	# LowerGetelementptr(7392:3): type of ^34 is ptr*
	# LowerLoad(7393:3).2: (^34) into ptr ^35
	movq (%rax), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7394:3): struct-type: ptr ^15 -> ^36, indices=0,0
	movq %r15, %rax
	# LowerGetelementptr(7394:3): type of ^36 is ptr*
	# LowerLoad(7395:3).2: (^36) into ptr ^37
	movq (%rax), %r8
	# SetupCalls(7396:3): move argument ptr ^33
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(7396:3): move argument ptr ^35
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(7396:3): move argument ptr ^37
	# Fixed movzx with identical source and destination widths
	movq %r8, %rdx
	# SetupCalls(7396:3): move argument ptr nonnull dereferenceable(1) align 1 ^7
	# Fixed movzx with identical source and destination widths
	movq -128(%rbp), %rcx
	callq _ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_RT0_
	.___ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_T0___M393:
	# SetupCalls(7403:3): move argument ptr nonnull dereferenceable(8) align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq -136(%rbp), %rdi
	callq _ZN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEppEv
	# SetupCalls(7403:3): move ptr result from %rax
	movq %rax, %rax
	jmp .___ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_T0___M156
	.___ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_T0___M418:
	movq -160(%rbp), %r15
	movq -240(%rbp), %r14
	movq -200(%rbp), %r13
	movq -232(%rbp), %r12
	movq -192(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt11char_traitsIcE6lengthEPKc
.p2align 4, 0x90
_ZNSt11char_traitsIcE6lengthEPKc:
	.___ZNSt11char_traitsIcE6lengthEPKc__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(4059:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(4060:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(4061:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# SetupCalls(4062:3): move argument ptr ^3
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq strlen@PLT
	# SetupCalls(4062:3): move i64 result from %rax
	movq %rax, %rbx
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE8_M_beginEv
.p2align 4, 0x90
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE8_M_beginEv:
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE8_M_beginEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(4536:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(4537:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(4538:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# SetupCalls(4539:3): move argument ptr nonnull dereferenceable(48) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE9_M_mbeginEv
	# SetupCalls(4539:3): move ptr result from %rax
	movq %rax, %rbx
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt11char_traitsIcE4findEPKcmRS1_
.p2align 4, 0x90
_ZNSt11char_traitsIcE4findEPKcmRS1_:
	.___ZNSt11char_traitsIcE4findEPKcmRS1___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(56 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -48(%rbp)
	movq %r12, -40(%rbp)
	# LowerAlloca(2826:3): size = 8, type = ptr*, var = ^4
	leaq -8(%rbp), %r12
	# LowerAlloca(2827:3): size = 8, type = ptr*, var = ^5
	leaq -16(%rbp), %r8
	# LowerAlloca(2828:3): size = 8, type = i64*, var = ^6
	leaq -24(%rbp), %rbx
	# LowerAlloca(2829:3): size = 8, type = ptr*, var = ^7
	leaq -32(%rbp), %rcx
	# LowerStore(2830:3).9: mov ptr %rdi, (^5)
	movq %rdi, (%r8)
	# LowerStore(2831:3).9: mov i64 %rsi, (^6)
	movq %rsi, (%rbx)
	# LowerStore(2832:3).9: mov ptr %rdx, (^7)
	movq %rdx, (%rcx)
	# LowerLoad(2833:3).2: (^6) into i64 ^8
	movq (%rbx), %rax
	# LowerIcmp(2834:3): i64 ^8 vs. intlike 0
	cmpq $0, %rax
	sete %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt11char_traitsIcE4findEPKcmRS1___M21
	jmp .___ZNSt11char_traitsIcE4findEPKcmRS1___M24
	.___ZNSt11char_traitsIcE4findEPKcmRS1___M21:
	# LowerStore(2838:3).3: mov $imm, (^4)
	movq $0, (%r12)
	jmp .___ZNSt11char_traitsIcE4findEPKcmRS1___M63
	.___ZNSt11char_traitsIcE4findEPKcmRS1___M24:
	# LowerLoad(2842:3).2: (^5) into ptr ^12
	movq (%r8), %rax
	# LowerLoad(2843:3).2: (^7) into ptr ^13
	movq (%rcx), %rdx
	# LowerLoad(2844:3).2: (^13) into i8 ^14
	movb (%rdx), %cl
	movsbl %cl, %edx
	# LowerLoad(2846:3).2: (^6) into i64 ^16
	movq (%rbx), %rcx
	# SetupCalls(2847:3): move argument ptr ^12
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(2847:3): move argument i32 ^15
	# Fixed movzx with 32-bit source operand
	movl %edx, %esi
	# SetupCalls(2847:3): move argument i64 ^16
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdx
	callq memchr@PLT
	# SetupCalls(2847:3): move ptr result from %rax
	movq %rax, %rbx
	# LowerStore(2848:3).9: mov ptr ^17, (^4)
	movq %rbx, (%r12)
	.___ZNSt11char_traitsIcE4findEPKcmRS1___M63:
	# LowerLoad(2852:3).2: (^4) into ptr ^19
	movq (%r12), %rax
	movq -40(%rbp), %r12
	movq -48(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE5beginEv
.p2align 4, 0x90
_ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE5beginEv:
	.___ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE5beginEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(40 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	movq %r12, -24(%rbp)
	# LowerAlloca(5487:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator.19"*, var = ^2
	leaq -8(%rbp), %r12
	# LowerAlloca(5488:3): size = 8, type = ptr*, var = ^3
	leaq -16(%rbp), %rax
	# LowerStore(5489:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rax)
	# LowerLoad(5490:3).2: (^3) into ptr ^4
	movq (%rax), %rbx
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(5491:3): struct-type: ptr ^4 -> ^5, indices=0,0
	# LowerGetelementptr(5491:3): type of ^5 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(5492:3): struct-type: ptr ^5 -> ^6, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(5492:3): type of ^6 is ptr*
	# SetupCalls(5493:3): move argument ptr nonnull dereferenceable(8) align 8 ^2
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(5493:3): move argument ptr nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZN9__gnu_cxx17__normal_iteratorIPSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEEC2ERKS5_
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator.19"
	# LowerGetelementptr(5494:3): struct-type: ptr ^2 -> ^7, indices=0,0
	movq %r12, %rbx
	# LowerGetelementptr(5494:3): type of ^7 is ptr*
	# LowerLoad(5495:3).2: (^7) into ptr ^8
	movq (%rbx), %rax
	movq -24(%rbp), %r12
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt6__sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0_
.p2align 4, 0x90
_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0_:
	.___ZSt6__sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(240 + 0, 16)
	subq $240, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -168(%rbp)
	movq %r12, -152(%rbp)
	movq %r13, -160(%rbp)
	movq %r14, -200(%rbp)
	movq %r15, -128(%rbp)
	# LowerAlloca(7040:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^3
	# Fixing source-to-dest leaq -8(%rbp), -120(%rbp)
	leaq -8(%rbp), %r15
	movq %r15, -120(%rbp)
	# LowerAlloca(7041:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^4
	# Fixing source-to-dest leaq -16(%rbp), -112(%rbp)
	leaq -16(%rbp), %r15
	movq %r15, -112(%rbp)
	# LowerAlloca(7042:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, var = ^5
	# Fixing source-to-dest leaq -17(%rbp), -96(%rbp)
	leaq -17(%rbp), %r15
	movq %r15, -96(%rbp)
	# LowerAlloca(7043:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^6
	leaq -32(%rbp), %r12
	# LowerAlloca(7044:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^7
	leaq -40(%rbp), %r13
	# LowerAlloca(7045:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, var = ^8
	leaq -41(%rbp), %rbx
	# LowerAlloca(7046:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^9
	# Fixing source-to-dest leaq -56(%rbp), -88(%rbp)
	leaq -56(%rbp), %r15
	movq %r15, -88(%rbp)
	# LowerAlloca(7047:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^10
	# Fixing source-to-dest leaq -64(%rbp), -80(%rbp)
	leaq -64(%rbp), %r15
	movq %r15, -80(%rbp)
	# LowerAlloca(7048:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, var = ^11
	# Fixing source-to-dest leaq -65(%rbp), -104(%rbp)
	leaq -65(%rbp), %r15
	movq %r15, -104(%rbp)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7049:3): struct-type: ptr ^3 -> ^12, indices=0,0
	movq -120(%rbp), %rax
	# LowerGetelementptr(7049:3): type of ^12 is ptr*
	# LowerStore(7050:3).9: mov ptr %rdi, (^12)
	movq %rdi, (%rax)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7051:3): struct-type: ptr ^4 -> ^13, indices=0,0
	movq -112(%rbp), %rax
	# LowerGetelementptr(7051:3): type of ^13 is ptr*
	# LowerStore(7052:3).9: mov ptr %rsi, (^13)
	movq %rsi, (%rax)
	# SetupCalls(7053:3): move argument ptr nonnull dereferenceable(8) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq -120(%rbp), %rdi
	# SetupCalls(7053:3): move argument ptr nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -112(%rbp), %rsi
	callq _ZN9__gnu_cxxneIP6LsItemSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_
	# SetupCalls(7053:3): move i1 result from %rax
	movb %al, %r14b
	cmpb $0, %r14b
	jne .___ZSt6__sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M56
	jmp .___ZSt6__sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M330
	.___ZSt6__sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M56:
	# SetupCalls(7057:3): move argument ptr align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(7057:3): move argument ptr align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq -120(%rbp), %rsi
	# SetupCalls(7057:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# SetupCalls(7058:3): move argument ptr align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	# SetupCalls(7058:3): move argument ptr align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -112(%rbp), %rsi
	# SetupCalls(7058:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# SetupCalls(7059:3): move argument ptr nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -112(%rbp), %rdi
	# SetupCalls(7059:3): move argument ptr nonnull dereferenceable(8) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq -120(%rbp), %rsi
	callq _ZN9__gnu_cxxmiIP6LsItemSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_
	# SetupCalls(7059:3): move i64 result from %rax
	movq %rax, %r14
	# SetupCalls(7060:3): move argument i64 ^16
	# Fixed movzx with identical source and destination widths
	movq %r14, %rdi
	callq _ZSt4__lgIlET_S0_
	# SetupCalls(7060:3): move i64 result from %rax
	movq %rax, %r14
	# LowerMath(7061:3): ^17, 2 into i64 ^18
	movq %r14, %r15
	shlq $1, %r15
	# SetupCalls(7062:3): move argument ptr align 1 ^8
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(7062:3): move argument ptr align 1 ^5
	# Fixed movzx with identical source and destination widths
	movq -96(%rbp), %rsi
	# SetupCalls(7062:3): move argument i64 1
	movq $1, %rdx
	callq memcpy@PLT
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7063:3): struct-type: ptr ^6 -> ^19, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(7063:3): type of ^19 is ptr*
	# LowerLoad(7064:3).2: (^19) into ptr ^20
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7065:3): struct-type: ptr ^7 -> ^21, indices=0,0
	movq %r13, %rax
	# LowerGetelementptr(7065:3): type of ^21 is ptr*
	# LowerLoad(7066:3).2: (^21) into ptr ^22
	movq (%rax), %rcx
	# SetupCalls(7067:3): move argument ptr ^20
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(7067:3): move argument ptr ^22
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(7067:3): move argument i64 ^18
	# Fixed movzx with identical source and destination widths
	movq %r15, %rdx
	callq _ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElNS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0_T1_
	# SetupCalls(7068:3): move argument ptr align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq -88(%rbp), %rdi
	# SetupCalls(7068:3): move argument ptr align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq -120(%rbp), %rsi
	# SetupCalls(7068:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# SetupCalls(7069:3): move argument ptr align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq -80(%rbp), %rdi
	# SetupCalls(7069:3): move argument ptr align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -112(%rbp), %rsi
	# SetupCalls(7069:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# SetupCalls(7070:3): move argument ptr align 1 ^11
	# Fixed movzx with identical source and destination widths
	movq -104(%rbp), %rdi
	# SetupCalls(7070:3): move argument ptr align 1 ^5
	# Fixed movzx with identical source and destination widths
	movq -96(%rbp), %rsi
	# SetupCalls(7070:3): move argument i64 1
	movq $1, %rdx
	callq memcpy@PLT
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7071:3): struct-type: ptr ^9 -> ^23, indices=0,0
	movq -88(%rbp), %rax
	# LowerGetelementptr(7071:3): type of ^23 is ptr*
	# LowerLoad(7072:3).2: (^23) into ptr ^24
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7073:3): struct-type: ptr ^10 -> ^25, indices=0,0
	movq -80(%rbp), %rcx
	# LowerGetelementptr(7073:3): type of ^25 is ptr*
	# LowerLoad(7074:3).2: (^25) into ptr ^26
	movq (%rcx), %rax
	# SetupCalls(7075:3): move argument ptr ^24
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(7075:3): move argument ptr ^26
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0_
	.___ZSt6__sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M330:
	movq -128(%rbp), %r15
	movq -200(%rbp), %r14
	movq -160(%rbp), %r13
	movq -152(%rbp), %r12
	movq -168(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE8_S_rightEPSt18_Rb_tree_node_base
.p2align 4, 0x90
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE8_S_rightEPSt18_Rb_tree_node_base:
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE8_S_rightEPSt18_Rb_tree_node_base__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(4557:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(4558:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(4559:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"struct.std::_Rb_tree_node_base"
	# LowerGetelementptr(4560:3): struct-type: ptr ^3 -> ^4, indices=0,3
	addq $24, %rbx
	# LowerGetelementptr(4560:3): type of ^4 is ptr*
	# LowerLoad(4561:3).2: (^4) into ptr ^5
	movq (%rbx), %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISI_E
.p2align 4, 0x90
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISI_E:
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISI_E__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	movq %r12, -24(%rbp)
	# LowerAlloca(4577:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %rax
	# LowerAlloca(4578:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %r12
	# LowerStore(4579:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rax)
	# LowerStore(4580:3).9: mov ptr %rsi, (^4)
	movq %rsi, (%r12)
	# LowerLoad(4581:3).2: (^3) into ptr ^5
	movq (%rax), %rbx
	# LowerLoad(4582:3).2: (^4) into ptr ^6
	movq (%r12), %rax
	# SetupCalls(4583:3): move argument ptr nonnull dereferenceable(48) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(4583:3): move argument ptr ^6
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeISI_E
	# LowerLoad(4584:3).2: (^4) into ptr ^7
	movq (%r12), %rax
	# SetupCalls(4585:3): move argument ptr nonnull dereferenceable(48) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(4585:3): move argument ptr ^7
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE11_M_put_nodeEPSt13_Rb_tree_nodeISI_E
	movq -24(%rbp), %r12
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaIS9_EEEESt4lessIS5_ESaISt4pairIKS5_SF_EEE4findERSJ_
.p2align 4, 0x90
_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaIS9_EEEESt4lessIS5_ESaISt4pairIKS5_SF_EEE4findERSJ_:
	.___ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaIS9_EEEESt4lessIS5_ESaISt4pairIKS5_SF_EEE4findERSJ___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(56 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -40(%rbp)
	movq %r12, -32(%rbp)
	# LowerAlloca(2478:3): size = 8, type = %"struct.std::_Rb_tree_iterator"*, var = ^3
	leaq -8(%rbp), %r12
	# LowerAlloca(2479:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %rax
	# LowerAlloca(2480:3): size = 8, type = ptr*, var = ^5
	leaq -24(%rbp), %rcx
	# LowerStore(2481:3).9: mov ptr %rdi, (^4)
	movq %rdi, (%rax)
	# LowerStore(2482:3).9: mov ptr %rsi, (^5)
	movq %rsi, (%rcx)
	# LowerLoad(2483:3).2: (^4) into ptr ^6
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::map"
	# LowerGetelementptr(2484:3): struct-type: ptr ^6 -> ^7, indices=0,0
	# LowerGetelementptr(2484:3): type of ^7 is %"class.std::_Rb_tree"*
	# LowerLoad(2485:3).2: (^5) into ptr ^8
	movq (%rcx), %rax
	# SetupCalls(2486:3): move argument ptr nonnull dereferenceable(48) align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(2486:3): move argument ptr nonnull dereferenceable(32) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE4findERS7_
	# SetupCalls(2486:3): move ptr result from %rax
	movq %rax, %rbx
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(2487:3): struct-type: ptr ^3 -> ^10, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(2487:3): type of ^10 is ptr*
	# LowerStore(2488:3).9: mov ptr ^9, (^10)
	movq %rbx, (%rax)
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(2489:3): struct-type: ptr ^3 -> ^11, indices=0,0
	movq %r12, %rbx
	# LowerGetelementptr(2489:3): type of ^11 is ptr*
	# LowerLoad(2490:3).2: (^11) into ptr ^12
	movq (%rbx), %rax
	movq -32(%rbp), %r12
	movq -40(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE11_S_relocateEPS3_S6_S6_RS4_
.p2align 4, 0x90
_ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE11_S_relocateEPS3_S6_S6_RS4_:
	.___ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE11_S_relocateEPS3_S6_S6_RS4___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(56 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -40(%rbp)
	# LowerAlloca(5501:3): size = 8, type = ptr*, var = ^5
	leaq -8(%rbp), %r9
	# LowerAlloca(5502:3): size = 8, type = ptr*, var = ^6
	leaq -16(%rbp), %rbx
	# LowerAlloca(5503:3): size = 8, type = ptr*, var = ^7
	leaq -24(%rbp), %r8
	# LowerAlloca(5504:3): size = 8, type = ptr*, var = ^8
	leaq -32(%rbp), %rax
	# LowerStore(5505:3).9: mov ptr %rdi, (^5)
	movq %rdi, (%r9)
	# LowerStore(5506:3).9: mov ptr %rsi, (^6)
	movq %rsi, (%rbx)
	# LowerStore(5507:3).9: mov ptr %rdx, (^7)
	movq %rdx, (%r8)
	# LowerStore(5508:3).9: mov ptr %rcx, (^8)
	movq %rcx, (%rax)
	# LowerLoad(5509:3).2: (^5) into ptr ^9
	movq (%r9), %rcx
	# LowerLoad(5510:3).2: (^6) into ptr ^10
	movq (%rbx), %rdx
	# LowerLoad(5511:3).2: (^7) into ptr ^11
	movq (%r8), %r9
	# LowerLoad(5512:3).2: (^8) into ptr ^12
	movq (%rax), %rbx
	# SetupCalls(5513:3): move argument ptr ^9
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(5513:3): move argument ptr ^10
	# Fixed movzx with identical source and destination widths
	movq %rdx, %rsi
	# SetupCalls(5513:3): move argument ptr ^11
	# Fixed movzx with identical source and destination widths
	movq %r9, %rdx
	# SetupCalls(5513:3): move argument ptr nonnull dereferenceable(1) align 1 ^12
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rcx
	callq _ZSt12__relocate_aIPSt17basic_string_viewIcSt11char_traitsIcEES4_SaIS3_EET0_T_S7_S6_RT1_
	# SetupCalls(5513:3): move ptr result from %rax
	movq %rax, %rbx
	movq %rbx, %rax
	movq -40(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE7_S_leftEPSt18_Rb_tree_node_base
.p2align 4, 0x90
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE7_S_leftEPSt18_Rb_tree_node_base:
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE7_S_leftEPSt18_Rb_tree_node_base__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(4567:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(4568:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(4569:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"struct.std::_Rb_tree_node_base"
	# LowerGetelementptr(4570:3): struct-type: ptr ^3 -> ^4, indices=0,2
	addq $16, %rbx
	# LowerGetelementptr(4570:3): type of ^4 is ptr*
	# LowerLoad(4571:3).2: (^4) into ptr ^5
	movq (%rbx), %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE21_M_get_Node_allocatorEv
.p2align 4, 0x90
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE21_M_get_Node_allocatorEv:
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE21_M_get_Node_allocatorEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(4640:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(4641:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(4642:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::_Rb_tree"
	# LowerGetelementptr(4643:3): struct-type: ptr ^3 -> ^4, indices=0,0
	# LowerGetelementptr(4643:3): type of ^4 is %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Rb_tree_impl"*
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEE9_M_valptrEv
.p2align 4, 0x90
_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEE9_M_valptrEv:
	.___ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEE9_M_valptrEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(4649:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(4650:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(4651:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"struct.std::_Rb_tree_node"
	# LowerGetelementptr(4652:3): struct-type: ptr ^3 -> ^4, indices=0,1
	addq $32, %rbx
	# LowerGetelementptr(4652:3): type of ^4 is %"struct.__gnu_cxx::__aligned_membuf"*
	# SetupCalls(4653:3): move argument ptr nonnull dereferenceable(64) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEE6_M_ptrEv
	# SetupCalls(4653:3): move ptr result from %rax
	movq %rax, %rbx
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt3minImERKT_S2_S2_
.p2align 4, 0x90
_ZSt3minImERKT_S2_S2_:
	.___ZSt3minImERKT_S2_S2___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(48 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	movq %r15, -40(%rbp)
	# LowerAlloca(2919:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %rdx
	# LowerAlloca(2920:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %r8
	# LowerAlloca(2921:3): size = 8, type = ptr*, var = ^5
	leaq -24(%rbp), %rcx
	# LowerStore(2922:3).9: mov ptr %rdi, (^4)
	movq %rdi, (%r8)
	# LowerStore(2923:3).9: mov ptr %rsi, (^5)
	movq %rsi, (%rcx)
	# LowerLoad(2924:3).2: (^5) into ptr ^6
	movq (%rcx), %rax
	# LowerLoad(2925:3).2: (^6) into i64 ^7
	movq (%rax), %rbx
	# LowerLoad(2926:3).2: (^4) into ptr ^8
	movq (%r8), %rax
	# LowerLoad(2927:3).2: (^8) into i64 ^9
	movq (%rax), %rsi
	# LowerIcmp(2928:3): i64 ^7 vs. operand i64 ^9
	cmpq %rsi, %rbx
	setb %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZSt3minImERKT_S2_S2___M23
	jmp .___ZSt3minImERKT_S2_S2___M28
	.___ZSt3minImERKT_S2_S2___M23:
	# LowerLoad(2932:3).2: (^5) into ptr ^12
	# Fixing source-to-dest movq (%rcx), (%rdx)
	movq (%rcx), %r15
	movq %r15, (%rdx)
	# LowerStore(2933:3).9: mov ptr ^12, (^3)
	jmp .___ZSt3minImERKT_S2_S2___M33
	.___ZSt3minImERKT_S2_S2___M28:
	# LowerLoad(2937:3).2: (^4) into ptr ^14
	# Fixing source-to-dest movq (%r8), (%rdx)
	movq (%r8), %r15
	movq %r15, (%rdx)
	# LowerStore(2938:3).9: mov ptr ^14, (^3)
	.___ZSt3minImERKT_S2_S2___M33:
	# LowerLoad(2942:3).2: (^3) into ptr ^16
	movq (%rdx), %rax
	movq -40(%rbp), %r15
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEEE10deallocateEPSK_m
.p2align 4, 0x90
_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEEE10deallocateEPSK_m:
	.___ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEEE10deallocateEPSK_m__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	# LowerAlloca(4677:3): size = 8, type = ptr*, var = ^4
	leaq -8(%rbp), %rcx
	# LowerAlloca(4678:3): size = 8, type = ptr*, var = ^5
	leaq -16(%rbp), %rbx
	# LowerAlloca(4679:3): size = 8, type = i64*, var = ^6
	leaq -24(%rbp), %rax
	# LowerStore(4680:3).9: mov ptr %rdi, (^4)
	movq %rdi, (%rcx)
	# LowerStore(4681:3).9: mov ptr %rsi, (^5)
	movq %rsi, (%rbx)
	# LowerStore(4682:3).9: mov i64 %rdx, (^6)
	movq %rdx, (%rax)
	# LowerLoad(4683:3).2: (^4) into ptr ^7
	movq (%rcx), %rax
	# LowerLoad(4684:3).2: (^5) into ptr ^8
	movq (%rbx), %rax
	# SetupCalls(4685:3): move argument ptr ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZdlPv@PLT
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE9_M_mbeginEv
.p2align 4, 0x90
_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE9_M_mbeginEv:
	.___ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE9_M_mbeginEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(4694:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(4695:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(4696:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::_Rb_tree"
	# LowerGetelementptr(4697:3): struct-type: ptr ^3 -> ^4, indices=0,0
	# LowerGetelementptr(4697:3): type of ^4 is %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Rb_tree_impl"*
	# tt = Pointer, type = i8
	# LowerGetelementptr(4698:3): struct-type: ptr ^4 -> ^5, indices=8
	movq %rbx, %rax
	addq $8, %rax
	# LowerGetelementptr(4698:3): type of ^5 is i8*
	# tt = Pointer, type = %"struct.std::_Rb_tree_header"
	# LowerGetelementptr(4699:3): struct-type: ptr ^5 -> ^6, indices=0,0
	movq %rax, %rbx
	# LowerGetelementptr(4699:3): type of ^6 is %"struct.std::_Rb_tree_node_base"*
	# tt = Pointer, type = %"struct.std::_Rb_tree_node_base"
	# LowerGetelementptr(4700:3): struct-type: ptr ^6 -> ^7, indices=0,1
	addq $8, %rbx
	# LowerGetelementptr(4700:3): type of ^7 is ptr*
	# LowerLoad(4701:3).2: (^7) into ptr ^8
	movq (%rbx), %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEEED2Ev
.p2align 4, 0x90
_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEEED2Ev:
	.___ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEEED2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(4707:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(4708:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(4709:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv
.p2align 4, 0x90
_ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv:
	.___ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(6287:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(6288:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(6289:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator.20"
	# LowerGetelementptr(6290:3): struct-type: ptr ^3 -> ^4, indices=0,0
	# LowerGetelementptr(6290:3): type of ^4 is ptr*
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt12__relocate_aIPSt17basic_string_viewIcSt11char_traitsIcEES4_SaIS3_EET0_T_S7_S6_RT1_
.p2align 4, 0x90
_ZSt12__relocate_aIPSt17basic_string_viewIcSt11char_traitsIcEES4_SaIS3_EET0_T_S7_S6_RT1_:
	.___ZSt12__relocate_aIPSt17basic_string_viewIcSt11char_traitsIcEES4_SaIS3_EET0_T_S7_S6_RT1___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(88 + 0, 16)
	subq $96, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -56(%rbp)
	movq %r12, -40(%rbp)
	movq %r13, -48(%rbp)
	movq %r14, -64(%rbp)
	# LowerAlloca(5590:3): size = 8, type = ptr*, var = ^5
	leaq -8(%rbp), %rax
	# LowerAlloca(5591:3): size = 8, type = ptr*, var = ^6
	leaq -16(%rbp), %r12
	# LowerAlloca(5592:3): size = 8, type = ptr*, var = ^7
	leaq -24(%rbp), %r13
	# LowerAlloca(5593:3): size = 8, type = ptr*, var = ^8
	leaq -32(%rbp), %rbx
	# LowerStore(5594:3).9: mov ptr %rdi, (^5)
	movq %rdi, (%rax)
	# LowerStore(5595:3).9: mov ptr %rsi, (^6)
	movq %rsi, (%r12)
	# LowerStore(5596:3).9: mov ptr %rdx, (^7)
	movq %rdx, (%r13)
	# LowerStore(5597:3).9: mov ptr %rcx, (^8)
	movq %rcx, (%rbx)
	# LowerLoad(5598:3).2: (^5) into ptr ^9
	movq (%rax), %rcx
	# SetupCalls(5599:3): move argument ptr ^9
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	callq _ZSt12__niter_baseIPSt17basic_string_viewIcSt11char_traitsIcEEET_S5_
	# SetupCalls(5599:3): move ptr result from %rax
	movq %rax, %r14
	# LowerLoad(5600:3).2: (^6) into ptr ^11
	movq (%r12), %rax
	# SetupCalls(5601:3): move argument ptr ^11
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZSt12__niter_baseIPSt17basic_string_viewIcSt11char_traitsIcEEET_S5_
	# SetupCalls(5601:3): move ptr result from %rax
	movq %rax, %r12
	# LowerLoad(5602:3).2: (^7) into ptr ^13
	movq (%r13), %rax
	# SetupCalls(5603:3): move argument ptr ^13
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZSt12__niter_baseIPSt17basic_string_viewIcSt11char_traitsIcEEET_S5_
	# SetupCalls(5603:3): move ptr result from %rax
	movq %rax, %r13
	# LowerLoad(5604:3).2: (^8) into ptr ^15
	movq (%rbx), %rax
	# SetupCalls(5605:3): move argument ptr ^10
	# Fixed movzx with identical source and destination widths
	movq %r14, %rdi
	# SetupCalls(5605:3): move argument ptr ^12
	# Fixed movzx with identical source and destination widths
	movq %r12, %rsi
	# SetupCalls(5605:3): move argument ptr ^14
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdx
	# SetupCalls(5605:3): move argument ptr nonnull dereferenceable(1) align 1 ^15
	# Fixed movzx with identical source and destination widths
	movq %rax, %rcx
	callq _ZSt14__relocate_a_1IPSt17basic_string_viewIcSt11char_traitsIcEES4_SaIS3_EET0_T_S7_S6_RT1_
	# SetupCalls(5605:3): move ptr result from %rax
	movq %rax, %rbx
	movq %rbx, %rax
	movq -64(%rbp), %r14
	movq -48(%rbp), %r13
	movq -40(%rbp), %r12
	movq -56(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeISI_E
.p2align 4, 0x90
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeISI_E:
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeISI_E__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(144 + 0, 16)
	subq $144, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -96(%rbp)
	movq %r12, -120(%rbp)
	movq %r13, -88(%rbp)
	movq %r14, -80(%rbp)
	movq %r15, -72(%rbp)
	# LowerAlloca(4591:3): size = 8, type = ptr*, var = ^3
	# Fixing source-to-dest leaq -8(%rbp), -64(%rbp)
	leaq -8(%rbp), %r15
	movq %r15, -64(%rbp)
	# LowerAlloca(4592:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %r14
	# LowerAlloca(4593:3): size = 8, type = ptr*, var = ^5
	leaq -24(%rbp), %r13
	# LowerAlloca(4594:3): size = 8, type = ptr*, var = ^6
	leaq -32(%rbp), %rbx
	# LowerAlloca(4595:3): size = 8, type = ptr*, var = ^7
	leaq -40(%rbp), %rcx
	# LowerAlloca(4596:3): size = 8, type = ptr*, var = ^8
	# Fixing source-to-dest leaq -48(%rbp), -56(%rbp)
	leaq -48(%rbp), %r15
	movq %r15, -56(%rbp)
	# LowerStore(4597:3).9: mov ptr %rdi, (^7)
	movq %rdi, (%rcx)
	# LowerStore(4598:3).9: mov ptr %rsi, (^8)
	movq -56(%rbp), %rax
	movq %rsi, (%rax)
	# LowerLoad(4599:3).2: (^7) into ptr ^9
	movq (%rcx), %rax
	# SetupCalls(4600:3): move argument ptr nonnull dereferenceable(48) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE21_M_get_Node_allocatorEv
	# SetupCalls(4600:3): move ptr result from %rax
	movq %rax, %r15
	# LowerLoad(4601:3).2: (^8) into ptr ^11
	movq -56(%rbp), %rcx
	movq (%rcx), %rax
	# SetupCalls(4602:3): move argument ptr nonnull dereferenceable(96) align 8 ^11
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEE9_M_valptrEv
	# SetupCalls(4602:3): move ptr result from %rax
	movq %rax, %r12
	# LowerStore(4603:3).9: mov ptr ^10, (^5)
	movq %r15, (%r13)
	# LowerStore(4604:3).9: mov ptr ^12, (^6)
	movq %r12, (%rbx)
	# LowerLoad(4605:3).2: (^5) into ptr ^13
	movq (%r13), %rax
	# LowerLoad(4606:3).2: (^6) into ptr ^14
	movq (%rbx), %rcx
	# LowerStore(4607:3).9: mov ptr ^13, (^3)
	movq -64(%rbp), %rbx
	movq %rax, (%rbx)
	# LowerStore(4608:3).9: mov ptr ^14, (^4)
	movq %rcx, (%r14)
	# LowerLoad(4609:3).2: (^3) into ptr ^15
	movq -64(%rbp), %rax
	movq (%rax), %rbx
	# LowerLoad(4610:3).2: (^4) into ptr ^16
	movq (%r14), %rax
	# SetupCalls(4611:3): move argument ptr nonnull dereferenceable(64) align 8 ^16
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISA_EEEEED2Ev
	# LowerLoad(4612:3).2: (^8) into ptr ^17
	movq -56(%rbp), %rax
	movq (%rax), %rbx
	movq -72(%rbp), %r15
	movq -80(%rbp), %r14
	movq -88(%rbp), %r13
	movq -120(%rbp), %r12
	movq -96(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEC2ERKS4_
.p2align 4, 0x90
_ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEC2ERKS4_:
	.___ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEC2ERKS4___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(4731:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %rbx
	# LowerAlloca(4732:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %rcx
	# LowerStore(4733:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rbx)
	# LowerStore(4734:3).9: mov ptr %rsi, (^4)
	movq %rsi, (%rcx)
	# LowerLoad(4735:3).2: (^3) into ptr ^5
	movq (%rbx), %rax
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(4736:3): struct-type: ptr ^5 -> ^6, indices=0,0
	# LowerGetelementptr(4736:3): type of ^6 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# LowerLoad(4737:3).2: (^4) into ptr ^7
	movq (%rcx), %rbx
	# SetupCalls(4738:3): move argument ptr nonnull dereferenceable(24) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(4738:3): move argument ptr nonnull dereferenceable(1) align 1 ^7
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12_Vector_implC2ERKS4_
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt16initializer_listISt17basic_string_viewIcSt11char_traitsIcEEE5beginEv
.p2align 4, 0x90
_ZNKSt16initializer_listISt17basic_string_viewIcSt11char_traitsIcEEE5beginEv:
	.___ZNKSt16initializer_listISt17basic_string_viewIcSt11char_traitsIcEEE5beginEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(4804:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(4805:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(4806:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::initializer_list"
	# LowerGetelementptr(4807:3): struct-type: ptr ^3 -> ^4, indices=0,0
	# LowerGetelementptr(4807:3): type of ^4 is ptr*
	# LowerLoad(4808:3).2: (^4) into ptr ^5
	movq (%rbx), %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12_Vector_implC2ERKS4_
.p2align 4, 0x90
_ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12_Vector_implC2ERKS4_:
	.___ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12_Vector_implC2ERKS4___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(56 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -56(%rbp)
	# LowerAlloca(4825:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %r8
	# LowerAlloca(4826:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %r9
	# LowerAlloca(4827:3): size = 8, type = ptr*, var = ^5
	leaq -24(%rbp), %rdx
	# LowerAlloca(4828:3): size = 8, type = ptr*, var = ^6
	leaq -32(%rbp), %rbx
	# LowerAlloca(4829:3): size = 8, type = ptr*, var = ^7
	leaq -40(%rbp), %rcx
	# LowerAlloca(4830:3): size = 8, type = ptr*, var = ^8
	leaq -48(%rbp), %rax
	# LowerStore(4831:3).9: mov ptr %rdi, (^7)
	movq %rdi, (%rcx)
	# LowerStore(4832:3).9: mov ptr %rsi, (^8)
	movq %rsi, (%rax)
	# LowerLoad(4833:3).2: (^7) into ptr ^9
	movq (%rcx), %rsi
	# LowerLoad(4834:3).2: (^8) into ptr ^10
	movq (%rax), %rcx
	# LowerStore(4835:3).9: mov ptr ^9, (^5)
	movq %rsi, (%rdx)
	# LowerStore(4836:3).9: mov ptr ^10, (^6)
	movq %rcx, (%rbx)
	# LowerLoad(4837:3).2: (^5) into ptr ^11
	movq (%rdx), %rcx
	# LowerLoad(4838:3).2: (^6) into ptr ^12
	movq (%rbx), %rax
	# LowerStore(4839:3).9: mov ptr ^11, (^3)
	movq %rcx, (%r8)
	# LowerStore(4840:3).9: mov ptr ^12, (^4)
	movq %rax, (%r9)
	# LowerLoad(4841:3).2: (^3) into ptr ^13
	movq (%r8), %rax
	# SetupCalls(4842:3): move argument ptr nonnull dereferenceable(24) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq %rsi, %rdi
	callq _ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE17_Vector_impl_dataC2Ev
	movq -56(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE11_M_allocateEm
.p2align 4, 0x90
_ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE11_M_allocateEm:
	.___ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE11_M_allocateEm__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(64 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -40(%rbp)
	movq %r12, -64(%rbp)
	# LowerAlloca(4848:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %rdx
	# LowerAlloca(4849:3): size = 8, type = i64*, var = ^4
	leaq -16(%rbp), %r8
	# LowerAlloca(4850:3): size = 8, type = ptr*, var = ^5
	leaq -24(%rbp), %rax
	# LowerAlloca(4851:3): size = 8, type = i64*, var = ^6
	leaq -32(%rbp), %rbx
	# LowerStore(4852:3).9: mov ptr %rdi, (^5)
	movq %rdi, (%rax)
	# LowerStore(4853:3).9: mov i64 %rsi, (^6)
	movq %rsi, (%rbx)
	# LowerLoad(4854:3).2: (^5) into ptr ^7
	movq (%rax), %rcx
	# LowerLoad(4855:3).2: (^6) into i64 ^8
	movq (%rbx), %rax
	# LowerIcmp(4856:3): i64 ^8 vs. intlike 0
	cmpq $0, %rax
	setne %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE11_M_allocateEm__M21
	jmp .___ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE11_M_allocateEm__M65
	.___ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE11_M_allocateEm__M21:
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(4860:3): struct-type: ptr ^7 -> ^11, indices=0,0
	movq %rcx, %rsi
	# LowerGetelementptr(4860:3): type of ^11 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# LowerLoad(4861:3).2: (^6) into i64 ^12
	movq (%rbx), %rax
	# LowerStore(4862:3).9: mov %"struct.std::_Vector_base"* ^11, (^3)
	movq %rsi, (%rdx)
	# LowerStore(4863:3).9: mov i64 ^12, (^4)
	movq %rax, (%r8)
	# LowerLoad(4864:3).2: (^3) into ptr ^13
	movq (%rdx), %rax
	# LowerLoad(4865:3).2: (^4) into i64 ^14
	movq (%r8), %rbx
	# SetupCalls(4866:3): move argument ptr nonnull dereferenceable(1) align 1 ^13
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(4866:3): move argument i64 ^14
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(4866:3): move argument ptr null
	movq $0, %rdx
	callq _ZNSt15__new_allocatorISt17basic_string_viewIcSt11char_traitsIcEEE8allocateEmPKv
	# SetupCalls(4866:3): move ptr result from %rax
	movq %rax, %rbx
	# MovePhi: ^15 -> ^18
	movq %rbx, %r12
	jmp .___ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE11_M_allocateEm__M68
	.___ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE11_M_allocateEm__M65:
	# MovePhi: intlike -> ^18
	movq $0, %r12
	.___ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE11_M_allocateEm__M68:
	movq %r12, %rax
	movq -64(%rbp), %r12
	movq -40(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE17_S_check_init_lenEmRKS4_
.p2align 4, 0x90
_ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE17_S_check_init_lenEmRKS4_:
	.___ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE17_S_check_init_lenEmRKS4___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(112 + 0, 16)
	subq $112, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -80(%rbp)
	movq %r12, -72(%rbp)
	movq %r13, -88(%rbp)
	movq %r14, -96(%rbp)
	movq %r15, -104(%rbp)
	# LowerAlloca(4879:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %r8
	# LowerAlloca(4880:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %r9
	# LowerAlloca(4881:3): size = 8, type = ptr*, var = ^5
	leaq -24(%rbp), %rdx
	# LowerAlloca(4882:3): size = 8, type = ptr*, var = ^6
	leaq -32(%rbp), %rax
	# LowerAlloca(4883:3): size = 8, type = ptr*, var = ^7
	leaq -40(%rbp), %r12
	# LowerAlloca(4884:3): size = 8, type = i64*, var = ^8
	leaq -48(%rbp), %rbx
	# LowerAlloca(4885:3): size = 8, type = ptr*, var = ^9
	leaq -56(%rbp), %r10
	# LowerAlloca(4886:3): size = 1, type = %"class.std::allocator"*, var = ^10
	leaq -57(%rbp), %r13
	# LowerStore(4887:3).9: mov i64 %rdi, (^8)
	movq %rdi, (%rbx)
	# LowerStore(4888:3).9: mov ptr %rsi, (^9)
	movq %rsi, (%r10)
	# LowerLoad(4889:3).2: (^8) into i64 ^11
	movq (%rbx), %r14
	# LowerLoad(4890:3).2: (^9) into ptr ^12
	movq (%r10), %rcx
	# LowerStore(4891:3).9: mov %"class.std::allocator"* ^10, (^5)
	movq %r13, (%rdx)
	# LowerStore(4892:3).9: mov ptr ^12, (^6)
	movq %rcx, (%rax)
	# LowerLoad(4893:3).2: (^5) into ptr ^13
	movq (%rdx), %rcx
	# LowerLoad(4894:3).2: (^6) into ptr ^14
	movq (%rax), %rdx
	# LowerStore(4895:3).9: mov ptr ^13, (^3)
	movq %rcx, (%r8)
	# LowerStore(4896:3).9: mov ptr ^14, (^4)
	movq %rdx, (%r9)
	# LowerLoad(4897:3).2: (^3) into ptr ^15
	movq (%r8), %rax
	# SetupCalls(4898:3): move argument ptr nonnull dereferenceable(1) align 1 ^10
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	callq _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE11_S_max_sizeERKS4_
	# SetupCalls(4898:3): move i64 result from %rax
	movq %rax, %r15
	# LowerIcmp(4899:3): i64 ^11 vs. operand i64 ^16
	cmpq %r15, %r14
	seta %r14b
	andq $1, %r14
	# LowerStore(4900:3).9: mov %"class.std::allocator"* ^10, (^7)
	movq %r13, (%r12)
	# LowerLoad(4901:3).2: (^7) into ptr ^18
	movq (%r12), %rax
	# SetupCalls(4902:3): move argument ptr nonnull dereferenceable(1) align 1 ^18
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt15__new_allocatorISt17basic_string_viewIcSt11char_traitsIcEEED2Ev
	cmpb $0, %r14b
	jne .___ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE17_S_check_init_lenEmRKS4___M92
	jmp .___ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE17_S_check_init_lenEmRKS4___M114
	.___ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE17_S_check_init_lenEmRKS4___M92:
	# SetupCalls(4906:3): move argument ptr @.str.26
	leaq .str.26(%rip), %rdi
	callq _ZSt20__throw_length_errorPKc@PLT
	.___ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE17_S_check_init_lenEmRKS4___M114:
	# LowerLoad(4910:3).2: (^8) into i64 ^21
	movq (%rbx), %rax
	movq -104(%rbp), %r15
	movq -96(%rbp), %r14
	movq -88(%rbp), %r13
	movq -72(%rbp), %r12
	movq -80(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKSt17basic_string_viewIcSt11char_traitsIcEEPS5_EET0_T_SA_S9_
.p2align 4, 0x90
_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKSt17basic_string_viewIcSt11char_traitsIcEEPS5_EET0_T_SA_S9_:
	.___ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKSt17basic_string_viewIcSt11char_traitsIcEEPS5_EET0_T_SA_S9___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(40 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	# LowerAlloca(5032:3): size = 8, type = ptr*, var = ^4
	leaq -8(%rbp), %rax
	# LowerAlloca(5033:3): size = 8, type = ptr*, var = ^5
	leaq -16(%rbp), %r8
	# LowerAlloca(5034:3): size = 8, type = ptr*, var = ^6
	leaq -24(%rbp), %rbx
	# LowerStore(5035:3).9: mov ptr %rdi, (^4)
	movq %rdi, (%rax)
	# LowerStore(5036:3).9: mov ptr %rsi, (^5)
	movq %rsi, (%r8)
	# LowerStore(5037:3).9: mov ptr %rdx, (^6)
	movq %rdx, (%rbx)
	# LowerLoad(5038:3).2: (^4) into ptr ^7
	movq (%rax), %rcx
	# LowerLoad(5039:3).2: (^5) into ptr ^8
	movq (%r8), %rax
	# LowerLoad(5040:3).2: (^6) into ptr ^9
	movq (%rbx), %r8
	# SetupCalls(5041:3): move argument ptr ^7
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(5041:3): move argument ptr ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(5041:3): move argument ptr ^9
	# Fixed movzx with identical source and destination widths
	movq %r8, %rdx
	callq _ZSt16__do_uninit_copyIPKSt17basic_string_viewIcSt11char_traitsIcEEPS3_ET0_T_S8_S7_
	# SetupCalls(5041:3): move ptr result from %rax
	movq %rax, %rbx
	movq %rbx, %rax
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt16__do_uninit_copyIPKSt17basic_string_viewIcSt11char_traitsIcEEPS3_ET0_T_S8_S7_
.p2align 4, 0x90
_ZSt16__do_uninit_copyIPKSt17basic_string_viewIcSt11char_traitsIcEEPS3_ET0_T_S8_S7_:
	.___ZSt16__do_uninit_copyIPKSt17basic_string_viewIcSt11char_traitsIcEEPS3_ET0_T_S8_S7___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(64 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -56(%rbp)
	movq %r12, -48(%rbp)
	movq %r13, -40(%rbp)
	movq %r15, -64(%rbp)
	# LowerAlloca(5047:3): size = 8, type = ptr*, var = ^4
	leaq -8(%rbp), %r13
	# LowerAlloca(5048:3): size = 8, type = ptr*, var = ^5
	leaq -16(%rbp), %r12
	# LowerAlloca(5049:3): size = 8, type = ptr*, var = ^6
	leaq -24(%rbp), %rax
	# LowerAlloca(5050:3): size = 8, type = ptr*, var = ^7
	leaq -32(%rbp), %rbx
	# LowerStore(5051:3).9: mov ptr %rdi, (^4)
	movq %rdi, (%r13)
	# LowerStore(5052:3).9: mov ptr %rsi, (^5)
	movq %rsi, (%r12)
	# LowerStore(5053:3).9: mov ptr %rdx, (^6)
	movq %rdx, (%rax)
	# LowerLoad(5054:3).2: (^6) into ptr ^8
	# Fixing source-to-dest movq (%rax), (%rbx)
	movq (%rax), %r15
	movq %r15, (%rbx)
	# LowerStore(5055:3).9: mov ptr ^8, (^7)
	.___ZSt16__do_uninit_copyIPKSt17basic_string_viewIcSt11char_traitsIcEEPS3_ET0_T_S8_S7___M19:
	# LowerLoad(5059:3).2: (^4) into ptr ^10
	movq (%r13), %rax
	# LowerLoad(5060:3).2: (^5) into ptr ^11
	movq (%r12), %rcx
	# LowerIcmp(5061:3): ptr ^10 vs. operand ptr ^11
	cmpq %rcx, %rax
	setne %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZSt16__do_uninit_copyIPKSt17basic_string_viewIcSt11char_traitsIcEEPS3_ET0_T_S8_S7___M28
	jmp .___ZSt16__do_uninit_copyIPKSt17basic_string_viewIcSt11char_traitsIcEEPS3_ET0_T_S8_S7___M75
	.___ZSt16__do_uninit_copyIPKSt17basic_string_viewIcSt11char_traitsIcEEPS3_ET0_T_S8_S7___M28:
	# LowerLoad(5065:3).2: (^7) into ptr ^14
	movq (%rbx), %rax
	# LowerLoad(5066:3).2: (^4) into ptr ^15
	movq (%r13), %rcx
	# SetupCalls(5067:3): move argument ptr ^14
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(5067:3): move argument ptr nonnull dereferenceable(16) align 8 ^15
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	callq _ZSt10_ConstructISt17basic_string_viewIcSt11char_traitsIcEEJRKS3_EEvPT_DpOT0_
	# LowerLoad(5071:3).2: (^4) into ptr ^17
	movq (%r13), %rax
	# tt = Pointer, type = %"class.std::basic_string_view"
	# LowerGetelementptr(5072:3): struct-type: ptr ^17 -> ^18, indices=1
	addq $16, %rax
	# LowerGetelementptr(5072:3): type of ^18 is %"class.std::basic_string_view"*
	# LowerStore(5073:3).9: mov %"class.std::basic_string_view"* ^18, (^4)
	movq %rax, (%r13)
	# LowerLoad(5074:3).2: (^7) into ptr ^19
	movq (%rbx), %rax
	# tt = Pointer, type = %"class.std::basic_string_view"
	# LowerGetelementptr(5075:3): struct-type: ptr ^19 -> ^20, indices=1
	addq $16, %rax
	# LowerGetelementptr(5075:3): type of ^20 is %"class.std::basic_string_view"*
	# LowerStore(5076:3).9: mov %"class.std::basic_string_view"* ^20, (^7)
	movq %rax, (%rbx)
	jmp .___ZSt16__do_uninit_copyIPKSt17basic_string_viewIcSt11char_traitsIcEEPS3_ET0_T_S8_S7___M19
	.___ZSt16__do_uninit_copyIPKSt17basic_string_viewIcSt11char_traitsIcEEPS3_ET0_T_S8_S7___M75:
	# LowerLoad(5080:3).2: (^7) into ptr ^22
	movq (%rbx), %rax
	movq -64(%rbp), %r15
	movq -40(%rbp), %r13
	movq -48(%rbp), %r12
	movq -56(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt12_Vector_baseI6LsItemSaIS0_EE12_Vector_implD2Ev
.p2align 4, 0x90
_ZNSt12_Vector_baseI6LsItemSaIS0_EE12_Vector_implD2Ev:
	.___ZNSt12_Vector_baseI6LsItemSaIS0_EE12_Vector_implD2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(40 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	movq %r15, -32(%rbp)
	# LowerAlloca(6445:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerAlloca(6446:3): size = 8, type = ptr*, var = ^3
	leaq -16(%rbp), %rbx
	# LowerStore(6447:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rbx)
	# LowerLoad(6448:3).2: (^3) into ptr ^4
	# Fixing source-to-dest movq (%rbx), (%rax)
	movq (%rbx), %r15
	movq %r15, (%rax)
	# LowerStore(6449:3).9: mov ptr ^4, (^2)
	# LowerLoad(6450:3).2: (^2) into ptr ^5
	movq (%rax), %rbx
	# SetupCalls(6451:3): move argument ptr nonnull dereferenceable(1) align 1 ^5
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt15__new_allocatorI6LsItemED2Ev
	movq -32(%rbp), %r15
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt6vectorI6LsItemSaIS0_EE17_M_realloc_insertIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbEEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_
.p2align 4, 0x90
_ZNSt6vectorI6LsItemSaIS0_EE17_M_realloc_insertIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbEEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_:
	.___ZNSt6vectorI6LsItemSaIS0_EE17_M_realloc_insertIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbEEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(784 + 0, 16)
	subq $784, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -440(%rbp)
	movq %r12, -400(%rbp)
	movq %r13, -408(%rbp)
	movq %r14, -448(%rbp)
	movq %r15, -320(%rbp)
	# LowerAlloca(6479:3): size = 8, type = ptr*, var = ^5
	# Fixing source-to-dest leaq -8(%rbp), -280(%rbp)
	leaq -8(%rbp), %r15
	movq %r15, -280(%rbp)
	# LowerAlloca(6480:3): size = 8, type = ptr*, var = ^6
	# Fixing source-to-dest leaq -16(%rbp), -264(%rbp)
	leaq -16(%rbp), %r15
	movq %r15, -264(%rbp)
	# LowerAlloca(6481:3): size = 8, type = ptr*, var = ^7
	# Fixing source-to-dest leaq -24(%rbp), -272(%rbp)
	leaq -24(%rbp), %r15
	movq %r15, -272(%rbp)
	# LowerAlloca(6482:3): size = 8, type = ptr*, var = ^8
	# Fixing source-to-dest leaq -32(%rbp), -256(%rbp)
	leaq -32(%rbp), %r15
	movq %r15, -256(%rbp)
	# LowerAlloca(6483:3): size = 32, type = %"class.std::__cxx11::basic_string"*, var = ^9
	# Fixing source-to-dest leaq -64(%rbp), -248(%rbp)
	leaq -64(%rbp), %r15
	movq %r15, -248(%rbp)
	# LowerAlloca(6484:3): size = 8, type = ptr*, var = ^10
	# Fixing source-to-dest leaq -72(%rbp), -312(%rbp)
	leaq -72(%rbp), %r15
	movq %r15, -312(%rbp)
	# LowerAlloca(6485:3): size = 8, type = ptr*, var = ^11
	# Fixing source-to-dest leaq -80(%rbp), -304(%rbp)
	leaq -80(%rbp), %r15
	movq %r15, -304(%rbp)
	# LowerAlloca(6486:3): size = 8, type = ptr*, var = ^12
	# Fixing source-to-dest leaq -88(%rbp), -288(%rbp)
	leaq -88(%rbp), %r15
	movq %r15, -288(%rbp)
	# LowerAlloca(6487:3): size = 8, type = ptr*, var = ^13
	# Fixing source-to-dest leaq -96(%rbp), -296(%rbp)
	leaq -96(%rbp), %r15
	movq %r15, -296(%rbp)
	# LowerAlloca(6488:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^14
	# Fixing source-to-dest leaq -104(%rbp), -240(%rbp)
	leaq -104(%rbp), %r15
	movq %r15, -240(%rbp)
	# LowerAlloca(6489:3): size = 8, type = ptr*, var = ^15
	leaq -112(%rbp), %r8
	# LowerAlloca(6490:3): size = 8, type = ptr*, var = ^16
	leaq -120(%rbp), %r12
	# LowerAlloca(6491:3): size = 8, type = ptr*, var = ^17
	leaq -128(%rbp), %r13
	# LowerAlloca(6492:3): size = 8, type = i64*, var = ^18
	# Fixing source-to-dest leaq -136(%rbp), -192(%rbp)
	leaq -136(%rbp), %r15
	movq %r15, -192(%rbp)
	# LowerAlloca(6493:3): size = 8, type = ptr*, var = ^19
	# Fixing source-to-dest leaq -144(%rbp), -224(%rbp)
	leaq -144(%rbp), %r15
	movq %r15, -224(%rbp)
	# LowerAlloca(6494:3): size = 8, type = ptr*, var = ^20
	# Fixing source-to-dest leaq -152(%rbp), -232(%rbp)
	leaq -152(%rbp), %r15
	movq %r15, -232(%rbp)
	# LowerAlloca(6495:3): size = 8, type = i64*, var = ^21
	leaq -160(%rbp), %rbx
	# LowerAlloca(6496:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^22
	leaq -168(%rbp), %r14
	# LowerAlloca(6497:3): size = 8, type = ptr*, var = ^23
	# Fixing source-to-dest leaq -176(%rbp), -208(%rbp)
	leaq -176(%rbp), %r15
	movq %r15, -208(%rbp)
	# LowerAlloca(6498:3): size = 8, type = ptr*, var = ^24
	# Fixing source-to-dest leaq -184(%rbp), -216(%rbp)
	leaq -184(%rbp), %r15
	movq %r15, -216(%rbp)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(6499:3): struct-type: ptr ^14 -> ^25, indices=0,0
	movq -240(%rbp), %rax
	# LowerGetelementptr(6499:3): type of ^25 is ptr*
	# LowerStore(6500:3).9: mov ptr %rsi, (^25)
	movq %rsi, (%rax)
	# LowerStore(6501:3).9: mov ptr %rdi, (^15)
	movq %rdi, (%r8)
	# LowerStore(6502:3).9: mov ptr %rdx, (^16)
	movq %rdx, (%r12)
	# LowerStore(6503:3).9: mov ptr %rcx, (^17)
	movq %rcx, (%r13)
	# LowerLoad(6504:3).2: (^15) into ptr ^26
	# Fixing source-to-dest movq (%r8), -200(%rbp)
	movq (%r8), %r15
	movq %r15, -200(%rbp)
	# SetupCalls(6505:3): move argument ptr nonnull dereferenceable(24) align 8 ^26
	# Fixed movzx with identical source and destination widths
	movq -200(%rbp), %rdi
	# SetupCalls(6505:3): move argument i64 1
	movq $1, %rsi
	# SetupCalls(6505:3): move argument ptr @.str.27
	leaq .str.27(%rip), %rdx
	callq _ZNKSt6vectorI6LsItemSaIS0_EE12_M_check_lenEmPKc
	# SetupCalls(6505:3): move i64 result from %rax
	movq %rax, %r15
	# LowerStore(6506:3).9: mov i64 ^27, (^18)
	movq -192(%rbp), %rax
	movq %r15, (%rax)
	# tt = Pointer, type = %"struct.std::_Vector_base.6"
	# LowerGetelementptr(6507:3): struct-type: ptr ^26 -> ^28, indices=0,0
	movq -200(%rbp), %rax
	# LowerGetelementptr(6507:3): type of ^28 is %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl"*
	# tt = Pointer, type = %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"
	# LowerGetelementptr(6508:3): struct-type: ptr ^28 -> ^29, indices=0,0
	# LowerGetelementptr(6508:3): type of ^29 is ptr*
	# LowerLoad(6509:3).2: (^29) into ptr ^30
	movq -224(%rbp), %rcx
	# Fixing source-to-dest movq (%rax), (%rcx)
	movq (%rax), %r15
	movq %r15, (%rcx)
	# LowerStore(6510:3).9: mov ptr ^30, (^19)
	# tt = Pointer, type = %"struct.std::_Vector_base.6"
	# LowerGetelementptr(6511:3): struct-type: ptr ^26 -> ^31, indices=0,0
	movq -200(%rbp), %rax
	# LowerGetelementptr(6511:3): type of ^31 is %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl"*
	# tt = Pointer, type = %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"
	# LowerGetelementptr(6512:3): struct-type: ptr ^31 -> ^32, indices=0,1
	addq $8, %rax
	# LowerGetelementptr(6512:3): type of ^32 is ptr*
	# LowerLoad(6513:3).2: (^32) into ptr ^33
	movq -232(%rbp), %rcx
	# Fixing source-to-dest movq (%rax), (%rcx)
	movq (%rax), %r15
	movq %r15, (%rcx)
	# LowerStore(6514:3).9: mov ptr ^33, (^20)
	# SetupCalls(6515:3): move argument ptr nonnull dereferenceable(24) align 8 ^26
	# Fixed movzx with identical source and destination widths
	movq -200(%rbp), %rdi
	callq _ZNSt6vectorI6LsItemSaIS0_EE5beginEv
	# SetupCalls(6515:3): move ptr result from %rax
	movq %rax, %r15
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(6516:3): struct-type: ptr ^22 -> ^35, indices=0,0
	movq %r14, %rax
	# LowerGetelementptr(6516:3): type of ^35 is ptr*
	# LowerStore(6517:3).9: mov ptr ^34, (^35)
	movq %r15, (%rax)
	# SetupCalls(6518:3): move argument ptr nonnull dereferenceable(8) align 8 ^14
	# Fixed movzx with identical source and destination widths
	movq -240(%rbp), %rdi
	# SetupCalls(6518:3): move argument ptr nonnull dereferenceable(8) align 8 ^22
	# Fixed movzx with identical source and destination widths
	movq %r14, %rsi
	callq _ZN9__gnu_cxxmiIP6LsItemSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_
	# SetupCalls(6518:3): move i64 result from %rax
	movq %rax, %r14
	# LowerStore(6519:3).9: mov i64 ^36, (^21)
	movq %r14, (%rbx)
	# LowerLoad(6520:3).2: (^18) into i64 ^37
	movq -192(%rbp), %rax
	movq (%rax), %rcx
	# SetupCalls(6521:3): move argument ptr nonnull dereferenceable(24) align 8 ^26
	# Fixed movzx with identical source and destination widths
	movq -200(%rbp), %rdi
	# SetupCalls(6521:3): move argument i64 ^37
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	callq _ZNSt12_Vector_baseI6LsItemSaIS0_EE11_M_allocateEm
	# SetupCalls(6521:3): move ptr result from %rax
	movq %rax, %r14
	# LowerStore(6522:3).9: mov ptr ^38, (^23)
	movq -208(%rbp), %rax
	movq %r14, (%rax)
	# LowerLoad(6523:3).2: (^23) into ptr ^39
	movq -208(%rbp), %rax
	movq -216(%rbp), %rcx
	# Fixing source-to-dest movq (%rax), (%rcx)
	movq (%rax), %r15
	movq %r15, (%rcx)
	# LowerStore(6524:3).9: mov ptr ^39, (^24)
	# tt = Pointer, type = %"struct.std::_Vector_base.6"
	# LowerGetelementptr(6525:3): struct-type: ptr ^26 -> ^40, indices=0,0
	movq -200(%rbp), %rcx
	# LowerGetelementptr(6525:3): type of ^40 is %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl"*
	# LowerLoad(6526:3).2: (^23) into ptr ^41
	movq -208(%rbp), %rax
	movq (%rax), %rsi
	# LowerLoad(6527:3).2: (^21) into i64 ^42
	movq (%rbx), %rdx
	# tt = Pointer, type = %struct.LsItem
	# LowerGetelementptr(6528:3): pointer-type -> ^43
	movq %rdx, %rax
	movq $40, %rbx
	imulq %rbx
	movq %rax, %rdx
	addq %rsi, %rdx
	# LowerLoad(6529:3).2: (^16) into ptr ^44
	movq (%r12), %rax
	# LowerLoad(6530:3).2: (^17) into ptr ^45
	movq (%r13), %rbx
	# LowerStore(6531:3).9: mov %"struct.std::_Vector_base.6"* ^40, (^10)
	movq -312(%rbp), %rsi
	movq %rcx, (%rsi)
	# LowerStore(6532:3).9: mov %struct.LsItem* ^43, (^11)
	movq -304(%rbp), %rcx
	movq %rdx, (%rcx)
	# LowerStore(6533:3).9: mov ptr ^44, (^12)
	movq -288(%rbp), %rcx
	movq %rax, (%rcx)
	# LowerStore(6534:3).9: mov ptr ^45, (^13)
	movq -296(%rbp), %rax
	movq %rbx, (%rax)
	# LowerLoad(6535:3).2: (^10) into ptr ^46
	movq -312(%rbp), %rbx
	movq (%rbx), %rax
	# LowerLoad(6536:3).2: (^11) into ptr ^47
	movq -304(%rbp), %rbx
	movq (%rbx), %rcx
	# LowerLoad(6537:3).2: (^12) into ptr ^48
	movq -288(%rbp), %rbx
	movq (%rbx), %rdx
	# LowerLoad(6538:3).2: (^13) into ptr ^49
	movq -296(%rbp), %rsi
	movq (%rsi), %rbx
	# LowerStore(6539:3).9: mov ptr ^46, (^5)
	movq -280(%rbp), %rsi
	movq %rax, (%rsi)
	# LowerStore(6540:3).9: mov ptr ^47, (^6)
	movq -264(%rbp), %rax
	movq %rcx, (%rax)
	# LowerStore(6541:3).9: mov ptr ^48, (^7)
	movq -272(%rbp), %rax
	movq %rdx, (%rax)
	# LowerStore(6542:3).9: mov ptr ^49, (^8)
	movq -256(%rbp), %rax
	movq %rbx, (%rax)
	# LowerLoad(6543:3).2: (^5) into ptr ^50
	movq -280(%rbp), %rbx
	movq (%rbx), %rax
	# LowerLoad(6544:3).2: (^6) into ptr ^51
	movq -264(%rbp), %rax
	movq (%rax), %rbx
	# LowerLoad(6545:3).2: (^7) into ptr ^52
	movq -272(%rbp), %rcx
	movq (%rcx), %rax
	# SetupCalls(6546:3): move argument ptr nonnull dereferenceable(32) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq -248(%rbp), %rdi
	# SetupCalls(6546:3): move argument ptr nonnull dereferenceable(32) align 8 ^52
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_@PLT
	# LowerLoad(6547:3).2: (^8) into ptr ^53
	movq -256(%rbp), %rcx
	movq (%rcx), %rax
	# LowerLoad(6548:3).2: (^53) into i8 ^54
	movb (%rax), %cl
	# LowerTrunc(6549:3): 8 to 1, move
	# LowerTrunc(6549:3): 8 to 1, apply mask
	andq $1, %rcx
	# SetupCalls(6550:3): move argument ptr nonnull dereferenceable(33) align 8 ^51
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(6550:3): move argument ptr ^9
	# Fixed movzx with identical source and destination widths
	movq -248(%rbp), %rsi
	# SetupCalls(6550:3): move argument i1 zeroext ^55
	movzbq %cl, %rdx
	andq $1, %rdx
	callq _ZN6LsItemC2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
	# SetupCalls(6551:3): move argument ptr nonnull dereferenceable(32) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq -248(%rbp), %rdi
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
	# LowerStore(6552:3).3: mov $imm, (^24)
	movq -216(%rbp), %rax
	movq $0, (%rax)
	# LowerLoad(6553:3).2: (^19) into ptr ^56
	movq -224(%rbp), %rax
	movq (%rax), %rbx
	# SetupCalls(6554:3): move argument ptr nonnull dereferenceable(8) align 8 ^14
	# Fixed movzx with identical source and destination widths
	movq -240(%rbp), %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEE4baseEv
	# SetupCalls(6554:3): move ptr result from %rax
	movq %rax, %r12
	# LowerLoad(6555:3).2: (^57) into ptr ^58
	movq (%r12), %r13
	# LowerLoad(6556:3).2: (^23) into ptr ^59
	movq -208(%rbp), %rax
	movq (%rax), %r12
	# SetupCalls(6557:3): move argument ptr nonnull dereferenceable(24) align 8 ^26
	# Fixed movzx with identical source and destination widths
	movq -200(%rbp), %rdi
	callq _ZNSt12_Vector_baseI6LsItemSaIS0_EE19_M_get_Tp_allocatorEv
	# SetupCalls(6557:3): move ptr result from %rax
	movq %rax, %r14
	# SetupCalls(6558:3): move argument ptr ^56
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(6558:3): move argument ptr ^58
	# Fixed movzx with identical source and destination widths
	movq %r13, %rsi
	# SetupCalls(6558:3): move argument ptr ^59
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdx
	# SetupCalls(6558:3): move argument ptr nonnull dereferenceable(1) align 1 ^60
	# Fixed movzx with identical source and destination widths
	movq %r14, %rcx
	callq _ZNSt6vectorI6LsItemSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_
	# SetupCalls(6558:3): move ptr result from %rax
	movq %rax, %rbx
	# LowerStore(6559:3).9: mov ptr ^61, (^24)
	movq -216(%rbp), %rax
	movq %rbx, (%rax)
	# LowerLoad(6560:3).2: (^24) into ptr ^62
	movq -216(%rbp), %rbx
	movq (%rbx), %rax
	# tt = Pointer, type = %struct.LsItem
	# LowerGetelementptr(6561:3): struct-type: ptr ^62 -> ^63, indices=1
	addq $40, %rax
	# LowerGetelementptr(6561:3): type of ^63 is %struct.LsItem*
	# LowerStore(6562:3).9: mov %struct.LsItem* ^63, (^24)
	movq -216(%rbp), %rbx
	movq %rax, (%rbx)
	# SetupCalls(6563:3): move argument ptr nonnull dereferenceable(8) align 8 ^14
	# Fixed movzx with identical source and destination widths
	movq -240(%rbp), %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEE4baseEv
	# SetupCalls(6563:3): move ptr result from %rax
	movq %rax, %rbx
	# LowerLoad(6564:3).2: (^64) into ptr ^65
	movq (%rbx), %r13
	# LowerLoad(6565:3).2: (^20) into ptr ^66
	movq -232(%rbp), %rax
	movq (%rax), %r12
	# LowerLoad(6566:3).2: (^24) into ptr ^67
	movq -216(%rbp), %rax
	movq (%rax), %rbx
	# SetupCalls(6567:3): move argument ptr nonnull dereferenceable(24) align 8 ^26
	# Fixed movzx with identical source and destination widths
	movq -200(%rbp), %rdi
	callq _ZNSt12_Vector_baseI6LsItemSaIS0_EE19_M_get_Tp_allocatorEv
	# SetupCalls(6567:3): move ptr result from %rax
	movq %rax, %r14
	# SetupCalls(6568:3): move argument ptr ^65
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	# SetupCalls(6568:3): move argument ptr ^66
	# Fixed movzx with identical source and destination widths
	movq %r12, %rsi
	# SetupCalls(6568:3): move argument ptr ^67
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdx
	# SetupCalls(6568:3): move argument ptr nonnull dereferenceable(1) align 1 ^68
	# Fixed movzx with identical source and destination widths
	movq %r14, %rcx
	callq _ZNSt6vectorI6LsItemSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_
	# SetupCalls(6568:3): move ptr result from %rax
	movq %rax, %rbx
	# LowerStore(6569:3).9: mov ptr ^69, (^24)
	movq -216(%rbp), %rax
	movq %rbx, (%rax)
	# LowerLoad(6570:3).2: (^19) into ptr ^70
	movq -224(%rbp), %rax
	movq (%rax), %rcx
	# tt = Pointer, type = %"struct.std::_Vector_base.6"
	# LowerGetelementptr(6571:3): struct-type: ptr ^26 -> ^71, indices=0,0
	movq -200(%rbp), %rax
	# LowerGetelementptr(6571:3): type of ^71 is %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl"*
	# tt = Pointer, type = %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"
	# LowerGetelementptr(6572:3): struct-type: ptr ^71 -> ^72, indices=0,2
	addq $16, %rax
	# LowerGetelementptr(6572:3): type of ^72 is ptr*
	# LowerLoad(6573:3).2: (^72) into ptr ^73
	movq (%rax), %rbx
	# LowerLoad(6574:3).2: (^19) into ptr ^74
	movq -224(%rbp), %rdx
	movq (%rdx), %rax
	# LowerBasicConversion(6575:3): ptr ^73 -> i64 ^75
	movq %rbx, %rdx
	# LowerBasicConversion(6576:3): ptr ^74 -> i64 ^76
	movq %rax, %rbx
	# LowerMath(6577:3): ^75, ^76 into i64 ^77
	movq %rdx, %rax
	subq %rbx, %rax
	# LowerSdiv(6578:3): ^77, 40 into i64 ^78
	movq %rax, %rbx
	movq $0, %rdx
	movq %rbx, %rax
	movq $40, %rbx
	idivq %rbx
	movq %rax, %rbx
	# SetupCalls(6579:3): move argument ptr nonnull dereferenceable(24) align 8 ^26
	# Fixed movzx with identical source and destination widths
	movq -200(%rbp), %rdi
	# SetupCalls(6579:3): move argument ptr ^70
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(6579:3): move argument i64 ^78
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdx
	callq _ZNSt12_Vector_baseI6LsItemSaIS0_EE13_M_deallocateEPS0_m
	# LowerLoad(6580:3).2: (^23) into ptr ^79
	movq -208(%rbp), %rbx
	movq (%rbx), %rax
	# tt = Pointer, type = %"struct.std::_Vector_base.6"
	# LowerGetelementptr(6581:3): struct-type: ptr ^26 -> ^80, indices=0,0
	movq -200(%rbp), %rbx
	# LowerGetelementptr(6581:3): type of ^80 is %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl"*
	# tt = Pointer, type = %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"
	# LowerGetelementptr(6582:3): struct-type: ptr ^80 -> ^81, indices=0,0
	# LowerGetelementptr(6582:3): type of ^81 is ptr*
	# LowerStore(6583:3).9: mov ptr ^79, (^81)
	movq %rax, (%rbx)
	# LowerLoad(6584:3).2: (^24) into ptr ^82
	movq -216(%rbp), %rbx
	movq (%rbx), %rax
	# tt = Pointer, type = %"struct.std::_Vector_base.6"
	# LowerGetelementptr(6585:3): struct-type: ptr ^26 -> ^83, indices=0,0
	movq -200(%rbp), %rbx
	# LowerGetelementptr(6585:3): type of ^83 is %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl"*
	# tt = Pointer, type = %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"
	# LowerGetelementptr(6586:3): struct-type: ptr ^83 -> ^84, indices=0,1
	addq $8, %rbx
	# LowerGetelementptr(6586:3): type of ^84 is ptr*
	# LowerStore(6587:3).9: mov ptr ^82, (^84)
	movq %rax, (%rbx)
	# LowerLoad(6588:3).2: (^23) into ptr ^85
	movq -208(%rbp), %rax
	movq (%rax), %rbx
	# LowerLoad(6589:3).2: (^18) into i64 ^86
	movq -192(%rbp), %rax
	movq (%rax), %rcx
	# tt = Pointer, type = %struct.LsItem
	# LowerGetelementptr(6590:3): pointer-type -> ^87
	movq %rcx, %rax
	movq $40, %rcx
	imulq %rcx
	movq %rax, %rcx
	addq %rbx, %rcx
	# tt = Pointer, type = %"struct.std::_Vector_base.6"
	# LowerGetelementptr(6591:3): struct-type: ptr ^26 -> ^88, indices=0,0
	movq -200(%rbp), %rax
	# LowerGetelementptr(6591:3): type of ^88 is %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl"*
	# tt = Pointer, type = %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"
	# LowerGetelementptr(6592:3): struct-type: ptr ^88 -> ^89, indices=0,2
	movq %rax, %rbx
	addq $16, %rbx
	# LowerGetelementptr(6592:3): type of ^89 is ptr*
	# LowerStore(6593:3).9: mov %struct.LsItem* ^87, (^89)
	movq %rcx, (%rbx)
	movq -320(%rbp), %r15
	movq -448(%rbp), %r14
	movq -408(%rbp), %r13
	movq -400(%rbp), %r12
	movq -440(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EED2Ev
.p2align 4, 0x90
_ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EED2Ev:
	.___ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EED2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	movq %r12, -16(%rbp)
	# LowerAlloca(5108:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(5109:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(5110:3).2: (^2) into ptr ^3
	movq (%rax), %r12
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(5111:3): struct-type: ptr ^3 -> ^4, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(5111:3): type of ^4 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(5112:3): struct-type: ptr ^4 -> ^5, indices=0,0
	# LowerGetelementptr(5112:3): type of ^5 is ptr*
	# LowerLoad(5113:3).2: (^5) into ptr ^6
	movq (%rax), %rbx
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(5114:3): struct-type: ptr ^3 -> ^7, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(5114:3): type of ^7 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(5115:3): struct-type: ptr ^7 -> ^8, indices=0,2
	addq $16, %rax
	# LowerGetelementptr(5115:3): type of ^8 is ptr*
	# LowerLoad(5116:3).2: (^8) into ptr ^9
	movq (%rax), %rdx
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(5117:3): struct-type: ptr ^3 -> ^10, indices=0,0
	movq %r12, %rcx
	# LowerGetelementptr(5117:3): type of ^10 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(5118:3): struct-type: ptr ^10 -> ^11, indices=0,0
	# LowerGetelementptr(5118:3): type of ^11 is ptr*
	# LowerLoad(5119:3).2: (^11) into ptr ^12
	movq (%rcx), %rax
	# LowerBasicConversion(5120:3): ptr ^9 -> i64 ^13
	movq %rdx, %rcx
	# LowerBasicConversion(5121:3): ptr ^12 -> i64 ^14
	movq %rax, %rdx
	# LowerMath(5122:3): ^13, ^14 into i64 ^15
	movq %rcx, %rax
	subq %rdx, %rax
	# LowerSdiv(5123:3): ^15, 16 into i64 ^16
	movq %rax, %rcx
	movq $0, %rdx
	movq %rcx, %rax
	movq $16, %rcx
	idivq %rcx
	movq %rax, %rcx
	# SetupCalls(5124:3): move argument ptr nonnull dereferenceable(24) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(5124:3): move argument ptr ^6
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(5124:3): move argument i64 ^16
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdx
	callq _ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE13_M_deallocateEPS3_m
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(5125:3): struct-type: ptr ^3 -> ^17, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(5125:3): type of ^17 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# SetupCalls(5126:3): move argument ptr nonnull dereferenceable(24) align 8 ^17
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12_Vector_implD2Ev
	movq -16(%rbp), %r12
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEmiEl
.p2align 4, 0x90
_ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEmiEl:
	.___ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEmiEl__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(56 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -48(%rbp)
	movq %r12, -40(%rbp)
	# LowerAlloca(7005:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^3
	leaq -8(%rbp), %r12
	# LowerAlloca(7006:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %rdx
	# LowerAlloca(7007:3): size = 8, type = i64*, var = ^5
	leaq -24(%rbp), %rcx
	# LowerAlloca(7008:3): size = 8, type = ptr*, var = ^6
	leaq -32(%rbp), %rbx
	# LowerStore(7009:3).9: mov ptr %rdi, (^4)
	movq %rdi, (%rdx)
	# LowerStore(7010:3).9: mov i64 %rsi, (^5)
	movq %rsi, (%rcx)
	# LowerLoad(7011:3).2: (^4) into ptr ^7
	movq (%rdx), %rax
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7012:3): struct-type: ptr ^7 -> ^8, indices=0,0
	# LowerGetelementptr(7012:3): type of ^8 is ptr*
	# LowerLoad(7013:3).2: (^8) into ptr ^9
	movq (%rax), %rsi
	# LowerLoad(7014:3).2: (^5) into i64 ^10
	movq (%rcx), %rax
	# LowerMath(7015:3): 0, ^10 into i64 ^11
	movq $0, %rdx
	subq %rax, %rdx
	# tt = Pointer, type = %struct.LsItem
	# LowerGetelementptr(7016:3): pointer-type -> ^12
	movq %rdx, %rcx
	movq %rcx, %rax
	movq $40, %rcx
	imulq %rcx
	movq %rax, %rcx
	addq %rsi, %rcx
	# LowerStore(7017:3).9: mov %struct.LsItem* ^12, (^6)
	movq %rcx, (%rbx)
	# SetupCalls(7018:3): move argument ptr nonnull dereferenceable(8) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(7018:3): move argument ptr nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEC2ERKS2_
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7019:3): struct-type: ptr ^3 -> ^13, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(7019:3): type of ^13 is ptr*
	# LowerLoad(7020:3).2: (^13) into ptr ^14
	movq (%rax), %rbx
	movq %rbx, %rax
	movq -40(%rbp), %r12
	movq -48(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt8__detaillsIcSt11char_traitsIcERKNSt7__cxx1112basic_stringIcS2_SaIcEEEEERSt13basic_ostreamIT_T0_ESD_RKNS_14_Quoted_stringIT1_SA_EE
.p2align 4, 0x90
_ZNSt8__detaillsIcSt11char_traitsIcERKNSt7__cxx1112basic_stringIcS2_SaIcEEEEERSt13basic_ostreamIT_T0_ESD_RKNS_14_Quoted_stringIT1_SA_EE:
	.___ZNSt8__detaillsIcSt11char_traitsIcERKNSt7__cxx1112basic_stringIcS2_SaIcEEEEERSt13basic_ostreamIT_T0_ESD_RKNS_14_Quoted_stringIT1_SA_EE__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(632 + 0, 16)
	subq $640, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -536(%rbp)
	movq %r12, -520(%rbp)
	movq %r13, -528(%rbp)
	movq %r14, -568(%rbp)
	movq %r15, -496(%rbp)
	# LowerAlloca(6132:3): size = 8, type = ptr*, var = ^3
	# Fixing source-to-dest leaq -8(%rbp), -480(%rbp)
	leaq -8(%rbp), %r15
	movq %r15, -480(%rbp)
	# LowerAlloca(6133:3): size = 8, type = ptr*, var = ^4
	# Fixing source-to-dest leaq -16(%rbp), -488(%rbp)
	leaq -16(%rbp), %r15
	movq %r15, -488(%rbp)
	# LowerAlloca(6134:3): size = 376, type = %"class.std::__cxx11::basic_ostringstream"*, var = ^5
	# Fixing source-to-dest leaq -392(%rbp), -464(%rbp)
	leaq -392(%rbp), %r15
	movq %r15, -464(%rbp)
	# LowerAlloca(6135:3): size = 8, type = ptr*, var = ^6
	leaq -400(%rbp), %r12
	# LowerAlloca(6136:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator.20"*, var = ^7
	leaq -408(%rbp), %r13
	# LowerAlloca(6137:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator.20"*, var = ^8
	leaq -416(%rbp), %rbx
	# LowerAlloca(6138:3): size = 1, type = i8*, var = ^9
	leaq -417(%rbp), %r15
	# LowerAlloca(6139:3): size = 32, type = %"class.std::__cxx11::basic_string"*, var = ^10
	# Fixing source-to-dest leaq -456(%rbp), -472(%rbp)
	pushq %r15
	leaq -456(%rbp), %r15
	movq %r15, -472(%rbp)
	popq %r15
	# LowerStore(6140:3).9: mov ptr %rdi, (^3)
	movq -480(%rbp), %rax
	movq %rdi, (%rax)
	# LowerStore(6141:3).9: mov ptr %rsi, (^4)
	movq -488(%rbp), %rax
	movq %rsi, (%rax)
	# SetupCalls(6142:3): move argument ptr nonnull dereferenceable(112) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq -464(%rbp), %rdi
	callq _ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEC1Ev@PLT
	# LowerLoad(6143:3).2: (^4) into ptr ^11
	movq -488(%rbp), %rcx
	movq (%rcx), %rax
	# tt = Pointer, type = %"struct.std::__detail::_Quoted_string"
	# LowerGetelementptr(6144:3): struct-type: ptr ^11 -> ^12, indices=0,1
	addq $8, %rax
	# LowerGetelementptr(6144:3): type of ^12 is i8*
	# LowerLoad(6145:3).2: (^12) into i8 ^13
	movb (%rax), %cl
	# SetupCalls(6146:3): move argument ptr nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq -464(%rbp), %rdi
	# SetupCalls(6146:3): move argument i8 signext ^13
	movzbq %cl, %rsi
	movsbq %sil, %rsi
	callq _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@PLT
	# SetupCalls(6146:3): move ptr result from %rax
	movq %rax, %rax
	# LowerLoad(6147:3).2: (^4) into ptr ^15
	movq -488(%rbp), %rcx
	movq (%rcx), %rax
	# tt = Pointer, type = %"struct.std::__detail::_Quoted_string"
	# LowerGetelementptr(6148:3): struct-type: ptr ^15 -> ^16, indices=0,0
	# LowerGetelementptr(6148:3): type of ^16 is ptr*
	# LowerLoad(6149:3).2: (^16) into ptr ^17
	# Fixing source-to-dest movq (%rax), (%r12)
	pushq %r15
	movq (%rax), %r15
	movq %r15, (%r12)
	popq %r15
	# LowerStore(6150:3).9: mov ptr ^17, (^6)
	# LowerLoad(6151:3).2: (^6) into ptr ^18
	movq (%r12), %rax
	# SetupCalls(6152:3): move argument ptr nonnull dereferenceable(32) align 8 ^18
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv@PLT
	# SetupCalls(6152:3): move ptr result from %rax
	movq %rax, %r14
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator.20"
	# LowerGetelementptr(6153:3): struct-type: ptr ^7 -> ^20, indices=0,0
	movq %r13, %rax
	# LowerGetelementptr(6153:3): type of ^20 is ptr*
	# LowerStore(6154:3).9: mov ptr ^19, (^20)
	movq %r14, (%rax)
	# LowerLoad(6155:3).2: (^6) into ptr ^21
	movq (%r12), %rax
	# SetupCalls(6156:3): move argument ptr nonnull dereferenceable(32) align 8 ^21
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE3endEv@PLT
	# SetupCalls(6156:3): move ptr result from %rax
	movq %rax, %r12
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator.20"
	# LowerGetelementptr(6157:3): struct-type: ptr ^8 -> ^23, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(6157:3): type of ^23 is ptr*
	# LowerStore(6158:3).9: mov ptr ^22, (^23)
	movq %r12, (%rax)
	.___ZNSt8__detaillsIcSt11char_traitsIcERKNSt7__cxx1112basic_stringIcS2_SaIcEEEEERSt13basic_ostreamIT_T0_ESD_RKNS_14_Quoted_stringIT1_SA_EE__M150:
	# SetupCalls(6162:3): move argument ptr nonnull dereferenceable(8) align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	# SetupCalls(6162:3): move argument ptr nonnull dereferenceable(8) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZN9__gnu_cxxneIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKNS_17__normal_iteratorIT_T0_EESE_
	# SetupCalls(6162:3): move i1 result from %rax
	movb %al, %r12b
	cmpb $0, %r12b
	jne .___ZNSt8__detaillsIcSt11char_traitsIcERKNSt7__cxx1112basic_stringIcS2_SaIcEEEEERSt13basic_ostreamIT_T0_ESD_RKNS_14_Quoted_stringIT1_SA_EE__M176
	jmp .___ZNSt8__detaillsIcSt11char_traitsIcERKNSt7__cxx1112basic_stringIcS2_SaIcEEEEERSt13basic_ostreamIT_T0_ESD_RKNS_14_Quoted_stringIT1_SA_EE__M328
	.___ZNSt8__detaillsIcSt11char_traitsIcERKNSt7__cxx1112basic_stringIcS2_SaIcEEEEERSt13basic_ostreamIT_T0_ESD_RKNS_14_Quoted_stringIT1_SA_EE__M176:
	# SetupCalls(6166:3): move argument ptr nonnull dereferenceable(8) align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv
	# SetupCalls(6166:3): move ptr result from %rax
	movq %rax, %r12
	# LowerLoad(6167:3).2: (^27) into i8 ^28
	# Fixing source-to-dest movb (%r12), (%r15)
	movb (%r12), %r14b
	movb %r14b, (%r15)
	# LowerStore(6168:3).9: mov i8 ^28, (^9)
	# LowerLoad(6169:3).2: (^9) into i8 ^29
	movb (%r15), %cl
	movsbl %cl, %eax
	# LowerLoad(6171:3).2: (^4) into ptr ^31
	movq -488(%rbp), %rcx
	movq (%rcx), %rdx
	# tt = Pointer, type = %"struct.std::__detail::_Quoted_string"
	# LowerGetelementptr(6172:3): struct-type: ptr ^31 -> ^32, indices=0,1
	addq $8, %rdx
	# LowerGetelementptr(6172:3): type of ^32 is i8*
	# LowerLoad(6173:3).2: (^32) into i8 ^33
	movb (%rdx), %cl
	movsbl %cl, %edx
	# LowerIcmp(6175:3): i32 ^30 vs. operand i32 ^34
	cmpl %edx, %eax
	sete %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt8__detaillsIcSt11char_traitsIcERKNSt7__cxx1112basic_stringIcS2_SaIcEEEEERSt13basic_ostreamIT_T0_ESD_RKNS_14_Quoted_stringIT1_SA_EE__M239
	.___ZNSt8__detaillsIcSt11char_traitsIcERKNSt7__cxx1112basic_stringIcS2_SaIcEEEEERSt13basic_ostreamIT_T0_ESD_RKNS_14_Quoted_stringIT1_SA_EE__M221:
	# LowerLoad(6179:3).2: (^9) into i8 ^37
	movb (%r15), %al
	movsbl %al, %ecx
	# LowerLoad(6181:3).2: (^4) into ptr ^39
	movq -488(%rbp), %rdx
	movq (%rdx), %rax
	# tt = Pointer, type = %"struct.std::__detail::_Quoted_string"
	# LowerGetelementptr(6182:3): struct-type: ptr ^39 -> ^40, indices=0,2
	addq $9, %rax
	# LowerGetelementptr(6182:3): type of ^40 is i8*
	# LowerLoad(6183:3).2: (^40) into i8 ^41
	movb (%rax), %dl
	movsbl %dl, %eax
	# LowerIcmp(6185:3): i32 ^38 vs. operand i32 ^42
	cmpl %eax, %ecx
	sete %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt8__detaillsIcSt11char_traitsIcERKNSt7__cxx1112basic_stringIcS2_SaIcEEEEERSt13basic_ostreamIT_T0_ESD_RKNS_14_Quoted_stringIT1_SA_EE__M239
	jmp .___ZNSt8__detaillsIcSt11char_traitsIcERKNSt7__cxx1112basic_stringIcS2_SaIcEEEEERSt13basic_ostreamIT_T0_ESD_RKNS_14_Quoted_stringIT1_SA_EE__M275
	.___ZNSt8__detaillsIcSt11char_traitsIcERKNSt7__cxx1112basic_stringIcS2_SaIcEEEEERSt13basic_ostreamIT_T0_ESD_RKNS_14_Quoted_stringIT1_SA_EE__M239:
	# LowerLoad(6189:3).2: (^4) into ptr ^45
	movq -488(%rbp), %rcx
	movq (%rcx), %rax
	# tt = Pointer, type = %"struct.std::__detail::_Quoted_string"
	# LowerGetelementptr(6190:3): struct-type: ptr ^45 -> ^46, indices=0,2
	addq $9, %rax
	# LowerGetelementptr(6190:3): type of ^46 is i8*
	# LowerLoad(6191:3).2: (^46) into i8 ^47
	movb (%rax), %cl
	# SetupCalls(6192:3): move argument ptr nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq -464(%rbp), %rdi
	# SetupCalls(6192:3): move argument i8 signext ^47
	movzbq %cl, %rsi
	movsbq %sil, %rsi
	callq _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@PLT
	# SetupCalls(6192:3): move ptr result from %rax
	movq %rax, %rax
	.___ZNSt8__detaillsIcSt11char_traitsIcERKNSt7__cxx1112basic_stringIcS2_SaIcEEEEERSt13basic_ostreamIT_T0_ESD_RKNS_14_Quoted_stringIT1_SA_EE__M275:
	# LowerLoad(6196:3).2: (^9) into i8 ^50
	movb (%r15), %al
	# SetupCalls(6197:3): move argument ptr nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq -464(%rbp), %rdi
	# SetupCalls(6197:3): move argument i8 signext ^50
	movzbq %al, %rsi
	movsbq %sil, %rsi
	callq _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@PLT
	# SetupCalls(6197:3): move ptr result from %rax
	movq %rax, %rax
	# SetupCalls(6201:3): move argument ptr nonnull dereferenceable(8) align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	callq _ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv
	# SetupCalls(6201:3): move ptr result from %rax
	movq %rax, %rax
	jmp .___ZNSt8__detaillsIcSt11char_traitsIcERKNSt7__cxx1112basic_stringIcS2_SaIcEEEEERSt13basic_ostreamIT_T0_ESD_RKNS_14_Quoted_stringIT1_SA_EE__M150
	.___ZNSt8__detaillsIcSt11char_traitsIcERKNSt7__cxx1112basic_stringIcS2_SaIcEEEEERSt13basic_ostreamIT_T0_ESD_RKNS_14_Quoted_stringIT1_SA_EE__M328:
	# LowerLoad(6205:3).2: (^4) into ptr ^55
	movq -488(%rbp), %rbx
	movq (%rbx), %rax
	# tt = Pointer, type = %"struct.std::__detail::_Quoted_string"
	# LowerGetelementptr(6206:3): struct-type: ptr ^55 -> ^56, indices=0,1
	addq $8, %rax
	# LowerGetelementptr(6206:3): type of ^56 is i8*
	# LowerLoad(6207:3).2: (^56) into i8 ^57
	movb (%rax), %bl
	# SetupCalls(6208:3): move argument ptr nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq -464(%rbp), %rdi
	# SetupCalls(6208:3): move argument i8 signext ^57
	movzbq %bl, %rsi
	movsbq %sil, %rsi
	callq _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@PLT
	# SetupCalls(6208:3): move ptr result from %rax
	movq %rax, %rax
	# LowerLoad(6209:3).2: (^3) into ptr ^59
	movq -480(%rbp), %rax
	movq (%rax), %rbx
	# SetupCalls(6210:3): move argument ptr sret align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq -472(%rbp), %rdi
	# SetupCalls(6210:3): move argument ptr nonnull dereferenceable(112) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq -464(%rbp), %rsi
	callq _ZNKSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEE3strEv@PLT
	# SetupCalls(6211:3): move argument ptr nonnull dereferenceable(8) align 8 ^59
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(6211:3): move argument ptr nonnull dereferenceable(32) align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq -472(%rbp), %rsi
	callq _ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKNSt7__cxx1112basic_stringIS4_S5_T1_EE@PLT
	# SetupCalls(6211:3): move ptr result from %rax
	movq %rax, %rbx
	# SetupCalls(6212:3): move argument ptr nonnull dereferenceable(32) align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq -472(%rbp), %rdi
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
	# SetupCalls(6213:3): move argument ptr nonnull dereferenceable(112) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq -464(%rbp), %rdi
	callq _ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEED1Ev@PLT
	movq %rbx, %rax
	movq -496(%rbp), %r15
	movq -568(%rbp), %r14
	movq -528(%rbp), %r13
	movq -520(%rbp), %r12
	movq -536(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt8_DestroyI6LsItemEvPT_
.p2align 4, 0x90
_ZSt8_DestroyI6LsItemEvPT_:
	.___ZSt8_DestroyI6LsItemEvPT___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(6393:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(6394:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(6395:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# SetupCalls(6396:3): move argument ptr nonnull dereferenceable(33) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZN6LsItemD2Ev
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt12_Destroy_auxILb1EE9__destroyIPSt17basic_string_viewIcSt11char_traitsIcEEEEvT_S7_
.p2align 4, 0x90
_ZNSt12_Destroy_auxILb1EE9__destroyIPSt17basic_string_viewIcSt11char_traitsIcEEEEvT_S7_:
	.___ZNSt12_Destroy_auxILb1EE9__destroyIPSt17basic_string_viewIcSt11char_traitsIcEEEEvT_S7___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(5144:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %rax
	# LowerAlloca(5145:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %rbx
	# LowerStore(5146:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rax)
	# LowerStore(5147:3).9: mov ptr %rsi, (^4)
	movq %rsi, (%rbx)
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE13_M_deallocateEPS3_m
.p2align 4, 0x90
_ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE13_M_deallocateEPS3_m:
	.___ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE13_M_deallocateEPS3_m__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(56 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -56(%rbp)
	# LowerAlloca(5153:3): size = 8, type = ptr*, var = ^4
	leaq -8(%rbp), %r9
	# LowerAlloca(5154:3): size = 8, type = ptr*, var = ^5
	leaq -16(%rbp), %r8
	# LowerAlloca(5155:3): size = 8, type = i64*, var = ^6
	leaq -24(%rbp), %rbx
	# LowerAlloca(5156:3): size = 8, type = ptr*, var = ^7
	leaq -32(%rbp), %rcx
	# LowerAlloca(5157:3): size = 8, type = ptr*, var = ^8
	leaq -40(%rbp), %rax
	# LowerAlloca(5158:3): size = 8, type = i64*, var = ^9
	leaq -48(%rbp), %r10
	# LowerStore(5159:3).9: mov ptr %rdi, (^7)
	movq %rdi, (%rcx)
	# LowerStore(5160:3).9: mov ptr %rsi, (^8)
	movq %rsi, (%rax)
	# LowerStore(5161:3).9: mov i64 %rdx, (^9)
	movq %rdx, (%r10)
	# LowerLoad(5162:3).2: (^7) into ptr ^10
	movq (%rcx), %rdx
	# LowerLoad(5163:3).2: (^8) into ptr ^11
	movq (%rax), %rcx
	# LowerIcmp(5164:3): ptr ^11 vs. intlike 0
	cmpq $0, %rcx
	setne %cl
	andq $1, %rcx
	cmpb $0, %cl
	jne .___ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE13_M_deallocateEPS3_m__M27
	jmp .___ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE13_M_deallocateEPS3_m__M73
	.___ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE13_M_deallocateEPS3_m__M27:
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(5168:3): struct-type: ptr ^10 -> ^14, indices=0,0
	movq %rdx, %rcx
	# LowerGetelementptr(5168:3): type of ^14 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# LowerLoad(5169:3).2: (^8) into ptr ^15
	movq (%rax), %rdx
	# LowerLoad(5170:3).2: (^9) into i64 ^16
	movq (%r10), %rax
	# LowerStore(5171:3).9: mov %"struct.std::_Vector_base"* ^14, (^4)
	movq %rcx, (%r9)
	# LowerStore(5172:3).9: mov ptr ^15, (^5)
	movq %rdx, (%r8)
	# LowerStore(5173:3).9: mov i64 ^16, (^6)
	movq %rax, (%rbx)
	# LowerLoad(5174:3).2: (^4) into ptr ^17
	movq (%r9), %rcx
	# LowerLoad(5175:3).2: (^5) into ptr ^18
	movq (%r8), %rdx
	# LowerLoad(5176:3).2: (^6) into i64 ^19
	movq (%rbx), %rax
	# SetupCalls(5177:3): move argument ptr nonnull dereferenceable(1) align 1 ^17
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(5177:3): move argument ptr ^18
	# Fixed movzx with identical source and destination widths
	movq %rdx, %rsi
	# SetupCalls(5177:3): move argument i64 ^19
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdx
	callq _ZNSt15__new_allocatorISt17basic_string_viewIcSt11char_traitsIcEEE10deallocateEPS3_m
	.___ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE13_M_deallocateEPS3_m__M73:
	movq -56(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt15__new_allocatorISt17basic_string_viewIcSt11char_traitsIcEEE10deallocateEPS3_m
.p2align 4, 0x90
_ZNSt15__new_allocatorISt17basic_string_viewIcSt11char_traitsIcEEE10deallocateEPS3_m:
	.___ZNSt15__new_allocatorISt17basic_string_viewIcSt11char_traitsIcEEE10deallocateEPS3_m__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	# LowerAlloca(5198:3): size = 8, type = ptr*, var = ^4
	leaq -8(%rbp), %rcx
	# LowerAlloca(5199:3): size = 8, type = ptr*, var = ^5
	leaq -16(%rbp), %rbx
	# LowerAlloca(5200:3): size = 8, type = i64*, var = ^6
	leaq -24(%rbp), %rax
	# LowerStore(5201:3).9: mov ptr %rdi, (^4)
	movq %rdi, (%rcx)
	# LowerStore(5202:3).9: mov ptr %rsi, (^5)
	movq %rsi, (%rbx)
	# LowerStore(5203:3).9: mov i64 %rdx, (^6)
	movq %rdx, (%rax)
	# LowerLoad(5204:3).2: (^4) into ptr ^7
	movq (%rcx), %rax
	# LowerLoad(5205:3).2: (^5) into ptr ^8
	movq (%rbx), %rax
	# SetupCalls(5206:3): move argument ptr ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZdlPv@PLT
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZN9__gnu_cxxmiIPSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_
.p2align 4, 0x90
_ZN9__gnu_cxxmiIPSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_:
	.___ZN9__gnu_cxxmiIPSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(72 + 0, 16)
	subq $80, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	movq %r12, -48(%rbp)
	movq %r13, -32(%rbp)
	# LowerAlloca(5468:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %rbx
	# LowerAlloca(5469:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %r13
	# LowerStore(5470:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rbx)
	# LowerStore(5471:3).9: mov ptr %rsi, (^4)
	movq %rsi, (%r13)
	# LowerLoad(5472:3).2: (^3) into ptr ^5
	movq (%rbx), %rax
	# SetupCalls(5473:3): move argument ptr nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIPSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEE4baseEv
	# SetupCalls(5473:3): move ptr result from %rax
	movq %rax, %rbx
	# LowerLoad(5474:3).2: (^6) into ptr ^7
	movq (%rbx), %r12
	# LowerLoad(5475:3).2: (^4) into ptr ^8
	movq (%r13), %rax
	# SetupCalls(5476:3): move argument ptr nonnull dereferenceable(8) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIPSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEE4baseEv
	# SetupCalls(5476:3): move ptr result from %rax
	movq %rax, %rbx
	# LowerLoad(5477:3).2: (^9) into ptr ^10
	movq (%rbx), %rcx
	# LowerBasicConversion(5478:3): ptr ^7 -> i64 ^11
	movq %r12, %rdx
	# LowerBasicConversion(5479:3): ptr ^10 -> i64 ^12
	movq %rcx, %rax
	# LowerMath(5480:3): ^11, ^12 into i64 ^13
	movq %rdx, %rbx
	subq %rax, %rbx
	# LowerSdiv(5481:3): ^13, 16 into i64 ^14
	movq %rbx, %rcx
	movq $0, %rdx
	movq %rcx, %rax
	movq $16, %rbx
	idivq %rbx
	movq %rax, %rcx
	movq %rcx, %rax
	movq -32(%rbp), %r13
	movq -48(%rbp), %r12
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE6_S_keyEPKSt18_Rb_tree_node_base
.p2align 4, 0x90
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE6_S_keyEPKSt18_Rb_tree_node_base:
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE6_S_keyEPKSt18_Rb_tree_node_base__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(9388:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(9389:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(9390:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# SetupCalls(9391:3): move argument ptr ^3
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE6_S_keyEPKSt13_Rb_tree_nodeISI_E
	# SetupCalls(9391:3): move ptr result from %rax
	movq %rax, %rbx
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEE13_M_const_castEv
.p2align 4, 0x90
_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEE13_M_const_castEv:
	.___ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEE13_M_const_castEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(40 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	movq %r12, -24(%rbp)
	# LowerAlloca(9336:3): size = 8, type = %"struct.std::_Rb_tree_iterator"*, var = ^2
	leaq -8(%rbp), %r12
	# LowerAlloca(9337:3): size = 8, type = ptr*, var = ^3
	leaq -16(%rbp), %rax
	# LowerStore(9338:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rax)
	# LowerLoad(9339:3).2: (^3) into ptr ^4
	movq (%rax), %rbx
	# tt = Pointer, type = %"struct.std::_Rb_tree_const_iterator"
	# LowerGetelementptr(9340:3): struct-type: ptr ^4 -> ^5, indices=0,0
	# LowerGetelementptr(9340:3): type of ^5 is ptr*
	# LowerLoad(9341:3).2: (^5) into ptr ^6
	movq (%rbx), %rax
	# SetupCalls(9342:3): move argument ptr nonnull dereferenceable(8) align 8 ^2
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(9342:3): move argument ptr ^6
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEEC2EPSt18_Rb_tree_node_base
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(9343:3): struct-type: ptr ^2 -> ^7, indices=0,0
	movq %r12, %rbx
	# LowerGetelementptr(9343:3): type of ^7 is ptr*
	# LowerLoad(9344:3).2: (^7) into ptr ^8
	movq (%rbx), %rax
	movq -24(%rbp), %r12
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v
.p2align 4, 0x90
_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v:
	.___ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(4349:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(4350:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(4351:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# SetupCalls(4352:3): move argument ptr nonnull dereferenceable(16) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt9_Any_data9_M_accessEv
	# SetupCalls(4352:3): move ptr result from %rax
	movq %rax, %rbx
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt3maxImERKT_S2_S2_
.p2align 4, 0x90
_ZSt3maxImERKT_S2_S2_:
	.___ZSt3maxImERKT_S2_S2___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(48 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	movq %r15, -40(%rbp)
	# LowerAlloca(5538:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %rdx
	# LowerAlloca(5539:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %r8
	# LowerAlloca(5540:3): size = 8, type = ptr*, var = ^5
	leaq -24(%rbp), %rcx
	# LowerStore(5541:3).9: mov ptr %rdi, (^4)
	movq %rdi, (%r8)
	# LowerStore(5542:3).9: mov ptr %rsi, (^5)
	movq %rsi, (%rcx)
	# LowerLoad(5543:3).2: (^4) into ptr ^6
	movq (%r8), %rax
	# LowerLoad(5544:3).2: (^6) into i64 ^7
	movq (%rax), %rbx
	# LowerLoad(5545:3).2: (^5) into ptr ^8
	movq (%rcx), %rax
	# LowerLoad(5546:3).2: (^8) into i64 ^9
	movq (%rax), %rsi
	# LowerIcmp(5547:3): i64 ^7 vs. operand i64 ^9
	cmpq %rsi, %rbx
	setb %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZSt3maxImERKT_S2_S2___M23
	jmp .___ZSt3maxImERKT_S2_S2___M28
	.___ZSt3maxImERKT_S2_S2___M23:
	# LowerLoad(5551:3).2: (^5) into ptr ^12
	# Fixing source-to-dest movq (%rcx), (%rdx)
	movq (%rcx), %r15
	movq %r15, (%rdx)
	# LowerStore(5552:3).9: mov ptr ^12, (^3)
	jmp .___ZSt3maxImERKT_S2_S2___M33
	.___ZSt3maxImERKT_S2_S2___M28:
	# LowerLoad(5556:3).2: (^4) into ptr ^14
	# Fixing source-to-dest movq (%r8), (%rdx)
	movq (%r8), %r15
	movq %r15, (%rdx)
	# LowerStore(5557:3).9: mov ptr ^14, (^3)
	.___ZSt3maxImERKT_S2_S2___M33:
	# LowerLoad(5561:3).2: (^3) into ptr ^16
	movq (%rdx), %rax
	movq -40(%rbp), %r15
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt3getILm0EJPNSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSB_
.p2align 4, 0x90
_ZSt3getILm0EJPNSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSB_:
	.___ZSt3getILm0EJPNSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSB___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(3897:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(3898:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(3899:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# SetupCalls(3900:3): move argument ptr nonnull dereferenceable(8) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZSt12__get_helperILm0EPNSt10filesystem7__cxx114path5_List5_ImplEJNS3_13_Impl_deleterEEERT0_RSt11_Tuple_implIXT_EJS7_DpT1_EE
	# SetupCalls(3900:3): move ptr result from %rax
	movq %rax, %rbx
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNK9__gnu_cxx17__normal_iteratorIPSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEEmiEl
.p2align 4, 0x90
_ZNK9__gnu_cxx17__normal_iteratorIPSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEEmiEl:
	.___ZNK9__gnu_cxx17__normal_iteratorIPSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEEmiEl__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(56 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -48(%rbp)
	movq %r12, -40(%rbp)
	# LowerAlloca(5708:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator.19"*, var = ^3
	leaq -8(%rbp), %r12
	# LowerAlloca(5709:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %rdx
	# LowerAlloca(5710:3): size = 8, type = i64*, var = ^5
	leaq -24(%rbp), %rcx
	# LowerAlloca(5711:3): size = 8, type = ptr*, var = ^6
	leaq -32(%rbp), %rbx
	# LowerStore(5712:3).9: mov ptr %rdi, (^4)
	movq %rdi, (%rdx)
	# LowerStore(5713:3).9: mov i64 %rsi, (^5)
	movq %rsi, (%rcx)
	# LowerLoad(5714:3).2: (^4) into ptr ^7
	movq (%rdx), %rax
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator.19"
	# LowerGetelementptr(5715:3): struct-type: ptr ^7 -> ^8, indices=0,0
	# LowerGetelementptr(5715:3): type of ^8 is ptr*
	# LowerLoad(5716:3).2: (^8) into ptr ^9
	movq (%rax), %rdx
	# LowerLoad(5717:3).2: (^5) into i64 ^10
	movq (%rcx), %rax
	# LowerMath(5718:3): 0, ^10 into i64 ^11
	movq $0, %rcx
	subq %rax, %rcx
	# tt = Pointer, type = %"class.std::basic_string_view"
	# LowerGetelementptr(5719:3): pointer-type -> ^12
	movq %rcx, %rax
	shlq $4, %rax
	addq %rdx, %rax
	# LowerStore(5720:3).9: mov %"class.std::basic_string_view"* ^12, (^6)
	movq %rax, (%rbx)
	# SetupCalls(5721:3): move argument ptr nonnull dereferenceable(8) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(5721:3): move argument ptr nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZN9__gnu_cxx17__normal_iteratorIPSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEEC2ERKS5_
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator.19"
	# LowerGetelementptr(5722:3): struct-type: ptr ^3 -> ^13, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(5722:3): type of ^13 is ptr*
	# LowerLoad(5723:3).2: (^13) into ptr ^14
	movq (%rax), %rbx
	movq %rbx, %rax
	movq -40(%rbp), %r12
	movq -48(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10filesystem7__cxx114pathaSEOS1_
.p2align 4, 0x90
_ZNSt10filesystem7__cxx114pathaSEOS1_:
	.___ZNSt10filesystem7__cxx114pathaSEOS1___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(48 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -48(%rbp)
	movq %r12, -40(%rbp)
	movq %r13, -32(%rbp)
	# LowerAlloca(5894:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %r13
	# LowerAlloca(5895:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %rax
	# LowerAlloca(5896:3): size = 8, type = ptr*, var = ^5
	leaq -24(%rbp), %r12
	# LowerStore(5897:3).9: mov ptr %rdi, (^4)
	movq %rdi, (%rax)
	# LowerStore(5898:3).9: mov ptr %rsi, (^5)
	movq %rsi, (%r12)
	# LowerLoad(5899:3).2: (^4) into ptr ^6
	movq (%rax), %rbx
	# LowerLoad(5900:3).2: (^5) into ptr ^7
	movq (%r12), %rax
	# LowerIcmp(5901:3): ptr ^7 vs. operand ptr ^6
	cmpq %rbx, %rax
	sete %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt10filesystem7__cxx114pathaSEOS1___M19
	jmp .___ZNSt10filesystem7__cxx114pathaSEOS1___M22
	.___ZNSt10filesystem7__cxx114pathaSEOS1___M19:
	# LowerStore(5905:3).9: mov ptr ^6, (^3)
	movq %rbx, (%r13)
	jmp .___ZNSt10filesystem7__cxx114pathaSEOS1___M120
	.___ZNSt10filesystem7__cxx114pathaSEOS1___M22:
	# LowerLoad(5909:3).2: (^5) into ptr ^11
	movq (%r12), %rax
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path"
	# LowerGetelementptr(5910:3): struct-type: ptr ^11 -> ^12, indices=0,0
	# LowerGetelementptr(5910:3): type of ^12 is %"class.std::__cxx11::basic_string"*
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path"
	# LowerGetelementptr(5911:3): struct-type: ptr ^6 -> ^13, indices=0,0
	movq %rbx, %rcx
	# LowerGetelementptr(5911:3): type of ^13 is %"class.std::__cxx11::basic_string"*
	# SetupCalls(5912:3): move argument ptr nonnull dereferenceable(32) align 8 ^13
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(5912:3): move argument ptr nonnull dereferenceable(32) align 8 ^12
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_@PLT
	# SetupCalls(5912:3): move ptr result from %rax
	movq %rax, %rax
	# LowerLoad(5913:3).2: (^5) into ptr ^15
	movq (%r12), %rax
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path"
	# LowerGetelementptr(5914:3): struct-type: ptr ^15 -> ^16, indices=0,1
	addq $32, %rax
	# LowerGetelementptr(5914:3): type of ^16 is %"struct.std::filesystem::__cxx11::path::_List"*
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path"
	# LowerGetelementptr(5915:3): struct-type: ptr ^6 -> ^17, indices=0,1
	movq %rbx, %rcx
	addq $32, %rcx
	# LowerGetelementptr(5915:3): type of ^17 is %"struct.std::filesystem::__cxx11::path::_List"*
	# SetupCalls(5916:3): move argument ptr nonnull dereferenceable(8) align 8 ^17
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(5916:3): move argument ptr nonnull dereferenceable(8) align 8 ^16
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNSt10filesystem7__cxx114path5_ListaSEOS2_
	# SetupCalls(5916:3): move ptr result from %rax
	movq %rax, %rax
	# LowerLoad(5917:3).2: (^5) into ptr ^19
	movq (%r12), %rax
	# SetupCalls(5918:3): move argument ptr nonnull dereferenceable(40) align 8 ^19
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt10filesystem7__cxx114path5clearEv
	# LowerStore(5919:3).9: mov ptr ^6, (^3)
	movq %rbx, (%r13)
	.___ZNSt10filesystem7__cxx114pathaSEOS1___M120:
	# LowerLoad(5923:3).2: (^3) into ptr ^21
	movq (%r13), %rax
	movq -32(%rbp), %r13
	movq -40(%rbp), %r12
	movq -48(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10filesystem7__cxx114path5clearEv
.p2align 4, 0x90
_ZNSt10filesystem7__cxx114path5clearEv:
	.___ZNSt10filesystem7__cxx114path5clearEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(5973:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(5974:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(5975:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path"
	# LowerGetelementptr(5976:3): struct-type: ptr ^3 -> ^4, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(5976:3): type of ^4 is %"class.std::__cxx11::basic_string"*
	# SetupCalls(5977:3): move argument ptr nonnull dereferenceable(32) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv@PLT
	# SetupCalls(5978:3): move argument ptr nonnull dereferenceable(40) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt10filesystem7__cxx114path14_M_split_cmptsEv@PLT
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZN9__gnu_cxxltIP6LsItemSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_
.p2align 4, 0x90
_ZN9__gnu_cxxltIP6LsItemSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_:
	.___ZN9__gnu_cxxltIP6LsItemSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(56 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	movq %r12, -48(%rbp)
	movq %r13, -32(%rbp)
	# LowerAlloca(7535:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %rbx
	# LowerAlloca(7536:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %r13
	# LowerStore(7537:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rbx)
	# LowerStore(7538:3).9: mov ptr %rsi, (^4)
	movq %rsi, (%r13)
	# LowerLoad(7539:3).2: (^3) into ptr ^5
	movq (%rbx), %rax
	# SetupCalls(7540:3): move argument ptr nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEE4baseEv
	# SetupCalls(7540:3): move ptr result from %rax
	movq %rax, %rbx
	# LowerLoad(7541:3).2: (^6) into ptr ^7
	movq (%rbx), %r12
	# LowerLoad(7542:3).2: (^4) into ptr ^8
	movq (%r13), %rax
	# SetupCalls(7543:3): move argument ptr nonnull dereferenceable(8) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEE4baseEv
	# SetupCalls(7543:3): move ptr result from %rax
	movq %rax, %rbx
	# LowerLoad(7544:3).2: (^9) into ptr ^10
	movq (%rbx), %rax
	# LowerIcmp(7545:3): ptr ^7 vs. operand ptr ^10
	cmpq %rax, %r12
	setb %al
	andq $1, %rax
	movq -32(%rbp), %r13
	movq -48(%rbp), %r12
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE9_M_createIRKSB_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE
.p2align 4, 0x90
_ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE9_M_createIRKSB_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE:
	.___ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE9_M_createIRKSB_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(56 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	movq %r12, -40(%rbp)
	movq %r15, -56(%rbp)
	# LowerAlloca(4437:3): size = 1, type = %"struct.std::integral_constant"*, var = ^3
	leaq -1(%rbp), %rax
	# LowerAlloca(4438:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %rbx
	# LowerAlloca(4439:3): size = 8, type = ptr*, var = ^5
	leaq -24(%rbp), %r12
	# LowerStore(4440:3).9: mov ptr %rdi, (^4)
	movq %rdi, (%rbx)
	# LowerStore(4441:3).9: mov ptr %rsi, (^5)
	movq %rsi, (%r12)
	# LowerLoad(4442:3).2: (^4) into ptr ^6
	movq (%rbx), %rax
	# SetupCalls(4443:3): move argument ptr nonnull dereferenceable(16) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt9_Any_data9_M_accessEv
	# SetupCalls(4443:3): move ptr result from %rax
	movq %rax, %rbx
	# LowerLoad(4444:3).2: (^5) into ptr ^8
	movq (%r12), %rax
	# LowerLoad(4445:3).2: (^8) into ptr ^9
	# Fixing source-to-dest movq (%rax), (%rbx)
	movq (%rax), %r15
	movq %r15, (%rbx)
	# LowerStore(4446:3).9: mov ptr ^9, (^7)
	movq -56(%rbp), %r15
	movq -40(%rbp), %r12
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt6vectorI6LsItemSaIS0_EE4sizeEv
.p2align 4, 0x90
_ZNKSt6vectorI6LsItemSaIS0_EE4sizeEv:
	.___ZNKSt6vectorI6LsItemSaIS0_EE4sizeEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(40 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(6779:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(6780:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(6781:3).2: (^2) into ptr ^3
	movq (%rax), %rcx
	# tt = Pointer, type = %"struct.std::_Vector_base.6"
	# LowerGetelementptr(6782:3): struct-type: ptr ^3 -> ^4, indices=0,0
	movq %rcx, %rax
	# LowerGetelementptr(6782:3): type of ^4 is %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl"*
	# tt = Pointer, type = %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"
	# LowerGetelementptr(6783:3): struct-type: ptr ^4 -> ^5, indices=0,1
	addq $8, %rax
	# LowerGetelementptr(6783:3): type of ^5 is ptr*
	# LowerLoad(6784:3).2: (^5) into ptr ^6
	movq (%rax), %rbx
	# tt = Pointer, type = %"struct.std::_Vector_base.6"
	# LowerGetelementptr(6785:3): struct-type: ptr ^3 -> ^7, indices=0,0
	movq %rcx, %rax
	# LowerGetelementptr(6785:3): type of ^7 is %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl"*
	# tt = Pointer, type = %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"
	# LowerGetelementptr(6786:3): struct-type: ptr ^7 -> ^8, indices=0,0
	# LowerGetelementptr(6786:3): type of ^8 is ptr*
	# LowerLoad(6787:3).2: (^8) into ptr ^9
	movq (%rax), %rcx
	# LowerBasicConversion(6788:3): ptr ^6 -> i64 ^10
	movq %rbx, %rdx
	# LowerBasicConversion(6789:3): ptr ^9 -> i64 ^11
	movq %rcx, %rbx
	# LowerMath(6790:3): ^10, ^11 into i64 ^12
	movq %rdx, %rax
	subq %rbx, %rax
	# LowerSdiv(6791:3): ^12, 40 into i64 ^13
	movq %rax, %rbx
	movq $0, %rdx
	movq %rbx, %rax
	movq $40, %rbx
	idivq %rbx
	movq %rax, %rbx
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt15__uniq_ptr_dataINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterELb1ELb1EEaSEOS6_
.p2align 4, 0x90
_ZNSt15__uniq_ptr_dataINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterELb1ELb1EEaSEOS6_:
	.___ZNSt15__uniq_ptr_dataINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterELb1ELb1EEaSEOS6___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(5998:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %rax
	# LowerAlloca(5999:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %rcx
	# LowerStore(6000:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rax)
	# LowerStore(6001:3).9: mov ptr %rsi, (^4)
	movq %rsi, (%rcx)
	# LowerLoad(6002:3).2: (^3) into ptr ^5
	movq (%rax), %rbx
	# LowerLoad(6003:3).2: (^4) into ptr ^6
	movq (%rcx), %rax
	# SetupCalls(6004:3): move argument ptr nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(6004:3): move argument ptr nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEEaSEOS6_
	# SetupCalls(6004:3): move ptr result from %rax
	movq %rax, %rax
	movq %rbx, %rax
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt17basic_string_viewIcSt11char_traitsIcEE5emptyEv
.p2align 4, 0x90
_ZNKSt17basic_string_viewIcSt11char_traitsIcEE5emptyEv:
	.___ZNKSt17basic_string_viewIcSt11char_traitsIcEE5emptyEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(951:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(952:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(953:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::basic_string_view"
	# LowerGetelementptr(954:3): struct-type: ptr ^3 -> ^4, indices=0,0
	# LowerGetelementptr(954:3): type of ^4 is i64*
	# LowerLoad(955:3).2: (^4) into i64 ^5
	movq (%rbx), %rax
	# LowerIcmp(956:3): i64 ^5 vs. intlike 0
	cmpq $0, %rax
	sete %al
	andq $1, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10filesystem7__cxx114pathC2ISt17basic_string_viewIcSt11char_traitsIcEES1_EERKT_NS1_6formatE
.p2align 4, 0x90
_ZNSt10filesystem7__cxx114pathC2ISt17basic_string_viewIcSt11char_traitsIcEES1_EERKT_NS1_6formatE:
	.___ZNSt10filesystem7__cxx114pathC2ISt17basic_string_viewIcSt11char_traitsIcEES1_EERKT_NS1_6formatE__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(264 + 0, 16)
	subq $272, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -152(%rbp)
	movq %r12, -168(%rbp)
	movq %r13, -192(%rbp)
	movq %r14, -200(%rbp)
	movq %r15, -136(%rbp)
	# LowerAlloca(6072:3): size = 8, type = ptr*, var = ^4
	# Fixing source-to-dest leaq -8(%rbp), -128(%rbp)
	leaq -8(%rbp), %r15
	movq %r15, -128(%rbp)
	# LowerAlloca(6073:3): size = 8, type = ptr*, var = ^5
	# Fixing source-to-dest leaq -16(%rbp), -104(%rbp)
	leaq -16(%rbp), %r15
	movq %r15, -104(%rbp)
	# LowerAlloca(6074:3): size = 8, type = ptr*, var = ^6
	leaq -24(%rbp), %rbx
	# LowerAlloca(6075:3): size = 8, type = ptr*, var = ^7
	leaq -32(%rbp), %rcx
	# LowerAlloca(6076:3): size = 8, type = ptr*, var = ^8
	leaq -40(%rbp), %rax
	# LowerAlloca(6077:3): size = 1, type = i8*, var = ^9
	leaq -41(%rbp), %r9
	# LowerAlloca(6078:3): size = 16, type = %"class.std::basic_string_view"*, var = ^10
	# Fixing source-to-dest leaq -64(%rbp), -120(%rbp)
	leaq -64(%rbp), %r15
	movq %r15, -120(%rbp)
	# LowerAlloca(6079:3): size = 16, type = %"class.std::basic_string_view"*, var = ^11
	leaq -80(%rbp), %r12
	# LowerAlloca(6080:3): size = 1, type = %"class.std::allocator.0"*, var = ^12
	# Fixing source-to-dest leaq -81(%rbp), -112(%rbp)
	leaq -81(%rbp), %r15
	movq %r15, -112(%rbp)
	# LowerStore(6081:3).9: mov ptr %rdi, (^7)
	movq %rdi, (%rcx)
	# LowerStore(6082:3).9: mov ptr %rsi, (^8)
	movq %rsi, (%rax)
	# LowerStore(6083:3).9: mov i8 %dl, (^9)
	movb %dl, (%r9)
	# LowerLoad(6084:3).2: (^7) into ptr ^13
	# Fixing source-to-dest movq (%rcx), -96(%rbp)
	movq (%rcx), %r15
	movq %r15, -96(%rbp)
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path"
	# LowerGetelementptr(6085:3): struct-type: ptr ^13 -> ^14, indices=0,0
	movq -96(%rbp), %r13
	# LowerGetelementptr(6085:3): type of ^14 is %"class.std::__cxx11::basic_string"*
	# LowerLoad(6086:3).2: (^8) into ptr ^15
	movq (%rax), %rcx
	# SetupCalls(6087:3): move argument ptr nonnull dereferenceable(16) align 8 ^15
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	callq _ZNSt10filesystem7__cxx118__detail17__effective_rangeIcSt11char_traitsIcEEESt17basic_string_viewIT_S3_IS6_EERKS5_IS6_T0_E
	# SetupCalls(6087:3): move 128-bit result from %rax and %rdx
	# Multireg move: <%hax %hdx> -> <%hr14 %hr15>
	movq %rax, %r14
	movq %rdx, %r15
	# tt = Pointer, type = {i64, ptr}
	# LowerGetelementptr(6088:3): struct-type: ptr ^11 -> ^17, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(6088:3): type of ^17 is i64*
	# LowerExtractvalue(6090:3)
	# PaddedStructs({i64, ptr} -> i64): move from pack ^16 ({i64, ptr}) to ^36 (opaque), index = 0
	movq %r14, %rdx
	movq %rdx, %rcx
	# LowerStore(6090:3).9: mov i64 ^18, (^17)
	movq %rcx, (%rax)
	# tt = Pointer, type = {i64, ptr}
	# LowerGetelementptr(6091:3): struct-type: ptr ^11 -> ^19, indices=0,1
	movq %r12, %rax
	addq $8, %rax
	# LowerGetelementptr(6091:3): type of ^19 is ptr*
	# LowerExtractvalue(6093:3)
	# PaddedStructs({i64, ptr} -> ptr): move from pack ^16 ({i64, ptr}) to ^37 (opaque), index = 1
	movq %r15, %rdx
	movq %rdx, %rcx
	# LowerStore(6093:3).9: mov ptr ^20, (^19)
	movq %rcx, (%rax)
	# tt = Pointer, type = {i64, ptr}
	# LowerGetelementptr(6094:3): struct-type: ptr ^11 -> ^21, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(6094:3): type of ^21 is i64*
	# LowerLoad(6095:3).2: (^21) into i64 ^22
	movq (%rax), %rcx
	# tt = Pointer, type = {i64, ptr}
	# LowerGetelementptr(6096:3): struct-type: ptr ^11 -> ^23, indices=0,1
	movq %r12, %rax
	addq $8, %rax
	# LowerGetelementptr(6096:3): type of ^23 is ptr*
	# LowerLoad(6097:3).2: (^23) into ptr ^24
	movq (%rax), %rdx
	# SetupCalls(6098:3): move argument i64 ^22
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(6098:3): move argument ptr ^24
	# Fixed movzx with identical source and destination widths
	movq %rdx, %rsi
	callq _ZNSt10filesystem7__cxx114path10_S_convertISt17basic_string_viewIcSt11char_traitsIcEEEEDaT_
	# SetupCalls(6098:3): move 128-bit result from %rax and %rdx
	# Multireg move: <%hax %hdx> -> <%hr12 %hr14>
	movq %rax, %r12
	movq %rdx, %r14
	# tt = Pointer, type = {i64, ptr}
	# LowerGetelementptr(6099:3): struct-type: ptr ^10 -> ^26, indices=0,0
	movq -120(%rbp), %rax
	# LowerGetelementptr(6099:3): type of ^26 is i64*
	# LowerExtractvalue(6101:3)
	# PaddedStructs({i64, ptr} -> i64): move from pack ^25 ({i64, ptr}) to ^38 (opaque), index = 0
	movq %r12, %rdx
	movq %rdx, %rcx
	# LowerStore(6101:3).9: mov i64 ^27, (^26)
	movq %rcx, (%rax)
	# tt = Pointer, type = {i64, ptr}
	# LowerGetelementptr(6102:3): struct-type: ptr ^10 -> ^28, indices=0,1
	movq -120(%rbp), %rax
	addq $8, %rax
	# LowerGetelementptr(6102:3): type of ^28 is ptr*
	# LowerExtractvalue(6104:3)
	# PaddedStructs({i64, ptr} -> ptr): move from pack ^25 ({i64, ptr}) to ^39 (opaque), index = 1
	movq %r14, %rdx
	movq %rdx, %rcx
	# LowerStore(6104:3).9: mov ptr ^29, (^28)
	movq %rcx, (%rax)
	# LowerStore(6105:3).9: mov %"class.std::allocator.0"* ^12, (^6)
	# Fixing source-to-dest movq -112(%rbp), (%rbx)
	movq -112(%rbp), %r15
	movq %r15, (%rbx)
	# LowerLoad(6106:3).2: (^6) into ptr ^30
	movq -128(%rbp), %rax
	# Fixing source-to-dest movq (%rbx), (%rax)
	movq (%rbx), %r15
	movq %r15, (%rax)
	# LowerStore(6107:3).9: mov ptr ^30, (^4)
	# LowerLoad(6108:3).2: (^4) into ptr ^31
	movq -128(%rbp), %rbx
	movq (%rbx), %rax
	# SetupCalls(6109:3): move argument ptr nonnull dereferenceable(32) align 8 ^14
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	# SetupCalls(6109:3): move argument ptr nonnull dereferenceable(16) align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq -120(%rbp), %rsi
	# SetupCalls(6109:3): move argument ptr nonnull dereferenceable(1) align 1 ^12
	# Fixed movzx with identical source and destination widths
	movq -112(%rbp), %rdx
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ISt17basic_string_viewIcS2_EvEERKT_RKS3_
	# LowerStore(6110:3).9: mov %"class.std::allocator.0"* ^12, (^5)
	movq -104(%rbp), %rax
	# Fixing source-to-dest movq -112(%rbp), (%rax)
	movq -112(%rbp), %r15
	movq %r15, (%rax)
	# LowerLoad(6111:3).2: (^5) into ptr ^32
	movq -104(%rbp), %rbx
	movq (%rbx), %rax
	# SetupCalls(6112:3): move argument ptr nonnull dereferenceable(1) align 1 ^32
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt15__new_allocatorIcED2Ev
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path"
	# LowerGetelementptr(6113:3): struct-type: ptr ^13 -> ^33, indices=0,1
	movq -96(%rbp), %rax
	addq $32, %rax
	# LowerGetelementptr(6113:3): type of ^33 is %"struct.std::filesystem::__cxx11::path::_List"*
	# SetupCalls(6114:3): move argument ptr nonnull dereferenceable(8) align 8 ^33
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt10filesystem7__cxx114path5_ListC1Ev@PLT
	# SetupCalls(6115:3): move argument ptr nonnull dereferenceable(40) align 8 ^13
	# Fixed movzx with identical source and destination widths
	movq -96(%rbp), %rdi
	callq _ZNSt10filesystem7__cxx114path14_M_split_cmptsEv@PLT
	movq -136(%rbp), %r15
	movq -200(%rbp), %r14
	movq -192(%rbp), %r13
	movq -168(%rbp), %r12
	movq -152(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt9_Any_data9_M_accessEv
.p2align 4, 0x90
_ZNKSt9_Any_data9_M_accessEv:
	.___ZNKSt9_Any_data9_M_accessEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(4340:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(4341:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(4342:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# tt = Pointer, type = [16 x i8]
	# LowerGetelementptr(4343:3): struct-type: ptr ^3 -> ^4, indices=0,0
	# LowerGetelementptr(4343:3): type of ^4 is i8*
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv
.p2align 4, 0x90
_ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv:
	.___ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(6260:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(6261:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(6262:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator.20"
	# LowerGetelementptr(6263:3): struct-type: ptr ^3 -> ^4, indices=0,0
	# LowerGetelementptr(6263:3): type of ^4 is ptr*
	# LowerLoad(6264:3).2: (^4) into ptr ^5
	movq (%rbx), %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE10_M_insert_IRKSI_NSO_11_Alloc_nodeEEESt17_Rb_tree_iteratorISI_EPSt18_Rb_tree_node_baseSW_OT_RT0_
.p2align 4, 0x90
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE10_M_insert_IRKSI_NSO_11_Alloc_nodeEEESt17_Rb_tree_iteratorISI_EPSt18_Rb_tree_node_baseSW_OT_RT0_:
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE10_M_insert_IRKSI_NSO_11_Alloc_nodeEEESt17_Rb_tree_iteratorISI_EPSt18_Rb_tree_node_baseSW_OT_RT0___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(296 + 0, 16)
	subq $304, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -128(%rbp)
	movq %r12, -168(%rbp)
	movq %r13, -144(%rbp)
	movq %r14, -152(%rbp)
	movq %r15, -120(%rbp)
	# LowerAlloca(9257:3): size = 8, type = %"struct.std::_Rb_tree_iterator"*, var = ^6
	# Fixing source-to-dest leaq -8(%rbp), -72(%rbp)
	leaq -8(%rbp), %r15
	movq %r15, -72(%rbp)
	# LowerAlloca(9258:3): size = 8, type = ptr*, var = ^7
	leaq -16(%rbp), %rbx
	# LowerAlloca(9259:3): size = 8, type = ptr*, var = ^8
	leaq -24(%rbp), %rax
	# LowerAlloca(9260:3): size = 8, type = ptr*, var = ^9
	# Fixing source-to-dest leaq -32(%rbp), -96(%rbp)
	leaq -32(%rbp), %r15
	movq %r15, -96(%rbp)
	# LowerAlloca(9261:3): size = 8, type = ptr*, var = ^10
	leaq -40(%rbp), %r13
	# LowerAlloca(9262:3): size = 8, type = ptr*, var = ^11
	leaq -48(%rbp), %r14
	# LowerAlloca(9263:3): size = 1, type = i8*, var = ^12
	# Fixing source-to-dest leaq -49(%rbp), -104(%rbp)
	leaq -49(%rbp), %r15
	movq %r15, -104(%rbp)
	# LowerAlloca(9264:3): size = 1, type = %"struct.std::_Select1st"*, var = ^13
	leaq -50(%rbp), %r12
	# LowerAlloca(9265:3): size = 8, type = ptr*, var = ^14
	# Fixing source-to-dest leaq -64(%rbp), -80(%rbp)
	leaq -64(%rbp), %r15
	movq %r15, -80(%rbp)
	# LowerStore(9266:3).9: mov ptr %rdi, (^7)
	movq %rdi, (%rbx)
	# LowerStore(9267:3).9: mov ptr %rsi, (^8)
	movq %rsi, (%rax)
	# LowerStore(9268:3).9: mov ptr %rdx, (^9)
	movq -96(%rbp), %rsi
	movq %rdx, (%rsi)
	# LowerStore(9269:3).9: mov ptr %rcx, (^10)
	movq %rcx, (%r13)
	# LowerStore(9270:3).9: mov ptr %r8, (^11)
	movq %r8, (%r14)
	# LowerLoad(9271:3).2: (^7) into ptr ^15
	# Fixing source-to-dest movq (%rbx), -88(%rbp)
	movq (%rbx), %r15
	movq %r15, -88(%rbp)
	# LowerLoad(9272:3).2: (^8) into ptr ^16
	movq (%rax), %rbx
	# LowerIcmp(9273:3): ptr ^16 vs. intlike 0
	cmpq $0, %rbx
	setne %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE10_M_insert_IRKSI_NSO_11_Alloc_nodeEEESt17_Rb_tree_iteratorISI_EPSt18_Rb_tree_node_baseSW_OT_RT0___M37
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE10_M_insert_IRKSI_NSO_11_Alloc_nodeEEESt17_Rb_tree_iteratorISI_EPSt18_Rb_tree_node_baseSW_OT_RT0___M40
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE10_M_insert_IRKSI_NSO_11_Alloc_nodeEEESt17_Rb_tree_iteratorISI_EPSt18_Rb_tree_node_baseSW_OT_RT0___M37:
	# MovePhi: intlike -> ^31 (in new block 53 whose parent is 5)
	movb $1, -112(%rbp)
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE10_M_insert_IRKSI_NSO_11_Alloc_nodeEEESt17_Rb_tree_iteratorISI_EPSt18_Rb_tree_node_baseSW_OT_RT0___M163
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE10_M_insert_IRKSI_NSO_11_Alloc_nodeEEESt17_Rb_tree_iteratorISI_EPSt18_Rb_tree_node_baseSW_OT_RT0___M40:
	# LowerLoad(9277:3).2: (^9) into ptr ^19
	movq -96(%rbp), %rax
	movq (%rax), %rbx
	# SetupCalls(9278:3): move argument ptr nonnull dereferenceable(48) align 8 ^15
	# Fixed movzx with identical source and destination widths
	movq -88(%rbp), %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE6_M_endEv
	# SetupCalls(9278:3): move ptr result from %rax
	movq %rax, %r15
	# LowerIcmp(9279:3): ptr ^19 vs. operand ptr ^20
	cmpq %r15, %rbx
	sete %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE10_M_insert_IRKSI_NSO_11_Alloc_nodeEEESt17_Rb_tree_iteratorISI_EPSt18_Rb_tree_node_baseSW_OT_RT0___M70
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE10_M_insert_IRKSI_NSO_11_Alloc_nodeEEESt17_Rb_tree_iteratorISI_EPSt18_Rb_tree_node_baseSW_OT_RT0___M73
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE10_M_insert_IRKSI_NSO_11_Alloc_nodeEEESt17_Rb_tree_iteratorISI_EPSt18_Rb_tree_node_baseSW_OT_RT0___M70:
	# MovePhi: intlike -> ^31 (in new block 52 whose parent is 18)
	movb $1, -112(%rbp)
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE10_M_insert_IRKSI_NSO_11_Alloc_nodeEEESt17_Rb_tree_iteratorISI_EPSt18_Rb_tree_node_baseSW_OT_RT0___M163
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE10_M_insert_IRKSI_NSO_11_Alloc_nodeEEESt17_Rb_tree_iteratorISI_EPSt18_Rb_tree_node_baseSW_OT_RT0___M73:
	# tt = Pointer, type = %"class.std::_Rb_tree"
	# LowerGetelementptr(9283:3): struct-type: ptr ^15 -> ^23, indices=0,0
	movq -88(%rbp), %r15
	# LowerGetelementptr(9283:3): type of ^23 is %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Rb_tree_impl"*
	# tt = Pointer, type = %"struct.std::_Rb_tree_key_compare"
	# LowerGetelementptr(9284:3): struct-type: ptr ^23 -> ^24, indices=0,0
	# LowerGetelementptr(9284:3): type of ^24 is %"struct.std::less"*
	# LowerLoad(9285:3).2: (^10) into ptr ^25
	movq (%r13), %rax
	# SetupCalls(9286:3): move argument ptr nonnull dereferenceable(1) align 1 ^13
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(9286:3): move argument ptr nonnull dereferenceable(64) align 8 ^25
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEEclERKSI_
	# SetupCalls(9286:3): move ptr result from %rax
	movq %rax, %rbx
	# LowerLoad(9287:3).2: (^9) into ptr ^27
	movq -96(%rbp), %rcx
	movq (%rcx), %rax
	# SetupCalls(9288:3): move argument ptr ^27
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE6_S_keyEPKSt18_Rb_tree_node_base
	# SetupCalls(9288:3): move ptr result from %rax
	movq %rax, %r12
	# SetupCalls(9289:3): move argument ptr nonnull dereferenceable(1) align 1 ^24
	# Fixed movzx with identical source and destination widths
	movq %r15, %rdi
	# SetupCalls(9289:3): move argument ptr nonnull dereferenceable(32) align 8 ^26
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(9289:3): move argument ptr nonnull dereferenceable(32) align 8 ^28
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdx
	callq _ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_
	# SetupCalls(9289:3): move i1 result from %rax
	movb %al, %bl
	# MovePhi: ^29 -> ^31
	movb %bl, -112(%rbp)
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE10_M_insert_IRKSI_NSO_11_Alloc_nodeEEESt17_Rb_tree_iteratorISI_EPSt18_Rb_tree_node_baseSW_OT_RT0___M163:
	# LowerBasicConversion(9294:3): i1 ^31 -> i8 ^32
	movq -104(%rbp), %rax
	# Fixing source-to-dest movb -112(%rbp), (%rax)
	movb -112(%rbp), %r15b
	movb %r15b, (%rax)
	# LowerStore(9295:3).9: mov i8 ^32, (^12)
	# LowerLoad(9296:3).2: (^11) into ptr ^33
	movq (%r14), %rax
	# LowerLoad(9297:3).2: (^10) into ptr ^34
	movq (%r13), %rbx
	# SetupCalls(9298:3): move argument ptr nonnull dereferenceable(8) align 8 ^33
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(9298:3): move argument ptr nonnull dereferenceable(64) align 8 ^34
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE11_Alloc_nodeclIRKSI_EEPSt13_Rb_tree_nodeISI_EOT_
	# SetupCalls(9298:3): move ptr result from %rax
	movq %rax, %rbx
	# LowerStore(9299:3).9: mov ptr ^35, (^14)
	movq -80(%rbp), %rax
	movq %rbx, (%rax)
	# LowerLoad(9300:3).2: (^12) into i8 ^36
	movq -104(%rbp), %rax
	movb (%rax), %bl
	# LowerTrunc(9301:3): 8 to 1, move
	# LowerTrunc(9301:3): 8 to 1, apply mask
	andq $1, %rbx
	# LowerLoad(9302:3).2: (^14) into ptr ^38
	movq -80(%rbp), %rax
	movq (%rax), %rcx
	# LowerLoad(9303:3).2: (^9) into ptr ^39
	movq -96(%rbp), %rdx
	movq (%rdx), %rax
	# tt = Pointer, type = %"class.std::_Rb_tree"
	# LowerGetelementptr(9304:3): struct-type: ptr ^15 -> ^40, indices=0,0
	movq -88(%rbp), %rdx
	# LowerGetelementptr(9304:3): type of ^40 is %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Rb_tree_impl"*
	# tt = Pointer, type = i8
	# LowerGetelementptr(9305:3): struct-type: ptr ^40 -> ^41, indices=8
	addq $8, %rdx
	# LowerGetelementptr(9305:3): type of ^41 is i8*
	# tt = Pointer, type = %"struct.std::_Rb_tree_header"
	# LowerGetelementptr(9306:3): struct-type: ptr ^41 -> ^42, indices=0,0
	movq %rdx, %r8
	# LowerGetelementptr(9306:3): type of ^42 is %"struct.std::_Rb_tree_node_base"*
	# SetupCalls(9307:3): move argument i1 zeroext ^37
	movzbq %bl, %rdi
	andq $1, %rdi
	# SetupCalls(9307:3): move argument ptr ^38
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(9307:3): move argument ptr ^39
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdx
	# SetupCalls(9307:3): move argument ptr nonnull dereferenceable(32) align 8 ^42
	# Fixed movzx with identical source and destination widths
	movq %r8, %rcx
	callq _ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_@PLT
	# tt = Pointer, type = %"class.std::_Rb_tree"
	# LowerGetelementptr(9308:3): struct-type: ptr ^15 -> ^43, indices=0,0
	movq -88(%rbp), %rax
	# LowerGetelementptr(9308:3): type of ^43 is %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Rb_tree_impl"*
	# tt = Pointer, type = i8
	# LowerGetelementptr(9309:3): struct-type: ptr ^43 -> ^44, indices=8
	addq $8, %rax
	# LowerGetelementptr(9309:3): type of ^44 is i8*
	# tt = Pointer, type = %"struct.std::_Rb_tree_header"
	# LowerGetelementptr(9310:3): struct-type: ptr ^44 -> ^45, indices=0,1
	movq %rax, %rbx
	addq $32, %rbx
	# LowerGetelementptr(9310:3): type of ^45 is i64*
	# LowerLoad(9311:3).2: (^45) into i64 ^46
	movq (%rbx), %rax
	# LowerMath(9312:3): ^46, 1 into i64 ^47
	addq $1, %rax
	# LowerStore(9313:3).9: mov i64 ^47, (^45)
	movq %rax, (%rbx)
	# LowerLoad(9314:3).2: (^14) into ptr ^48
	movq -80(%rbp), %rax
	movq (%rax), %rbx
	# SetupCalls(9315:3): move argument ptr nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq -72(%rbp), %rdi
	# SetupCalls(9315:3): move argument ptr ^48
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEEC2EPSt18_Rb_tree_node_base
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(9316:3): struct-type: ptr ^6 -> ^49, indices=0,0
	movq -72(%rbp), %rax
	# LowerGetelementptr(9316:3): type of ^49 is ptr*
	# LowerLoad(9317:3).2: (^49) into ptr ^50
	movq (%rax), %rbx
	movq %rbx, %rax
	movq -120(%rbp), %r15
	movq -152(%rbp), %r14
	movq -144(%rbp), %r13
	movq -168(%rbp), %r12
	movq -128(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt8__detail14_Quoted_stringIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEC2ES8_cc
.p2align 4, 0x90
_ZNSt8__detail14_Quoted_stringIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEC2ES8_cc:
	.___ZNSt8__detail14_Quoted_stringIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEC2ES8_cc__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(72 + 0, 16)
	subq $80, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	movq %r15, -40(%rbp)
	# LowerAlloca(6296:3): size = 8, type = ptr*, var = ^5
	leaq -8(%rbp), %r9
	# LowerAlloca(6297:3): size = 8, type = ptr*, var = ^6
	leaq -16(%rbp), %rbx
	# LowerAlloca(6298:3): size = 1, type = i8*, var = ^7
	leaq -17(%rbp), %r8
	# LowerAlloca(6299:3): size = 1, type = i8*, var = ^8
	leaq -18(%rbp), %rax
	# LowerStore(6300:3).9: mov ptr %rdi, (^5)
	movq %rdi, (%r9)
	# LowerStore(6301:3).9: mov ptr %rsi, (^6)
	movq %rsi, (%rbx)
	# LowerStore(6302:3).9: mov i8 %dl, (^7)
	movb %dl, (%r8)
	# LowerStore(6303:3).9: mov i8 %cl, (^8)
	movb %cl, (%rax)
	# LowerLoad(6304:3).2: (^5) into ptr ^9
	movq (%r9), %rcx
	# tt = Pointer, type = %"struct.std::__detail::_Quoted_string"
	# LowerGetelementptr(6305:3): struct-type: ptr ^9 -> ^10, indices=0,0
	movq %rcx, %rdx
	# LowerGetelementptr(6305:3): type of ^10 is ptr*
	# LowerLoad(6306:3).2: (^6) into ptr ^11
	# Fixing source-to-dest movq (%rbx), (%rdx)
	movq (%rbx), %r15
	movq %r15, (%rdx)
	# LowerStore(6307:3).9: mov ptr ^11, (^10)
	# tt = Pointer, type = %"struct.std::__detail::_Quoted_string"
	# LowerGetelementptr(6308:3): struct-type: ptr ^9 -> ^12, indices=0,1
	movq %rcx, %rbx
	addq $8, %rbx
	# LowerGetelementptr(6308:3): type of ^12 is i8*
	# LowerLoad(6309:3).2: (^7) into i8 ^13
	# Fixing source-to-dest movb (%r8), (%rbx)
	movb (%r8), %r15b
	movb %r15b, (%rbx)
	# LowerStore(6310:3).9: mov i8 ^13, (^12)
	# tt = Pointer, type = %"struct.std::__detail::_Quoted_string"
	# LowerGetelementptr(6311:3): struct-type: ptr ^9 -> ^14, indices=0,2
	movq %rcx, %rbx
	addq $9, %rbx
	# LowerGetelementptr(6311:3): type of ^14 is i8*
	# LowerLoad(6312:3).2: (^8) into i8 ^15
	# Fixing source-to-dest movb (%rax), (%rbx)
	movb (%rax), %r15b
	movb %r15b, (%rbx)
	# LowerStore(6313:3).9: mov i8 ^15, (^14)
	movq -40(%rbp), %r15
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt12_Vector_baseI6LsItemSaIS0_EED2Ev
.p2align 4, 0x90
_ZNSt12_Vector_baseI6LsItemSaIS0_EED2Ev:
	.___ZNSt12_Vector_baseI6LsItemSaIS0_EED2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	movq %r12, -16(%rbp)
	# LowerAlloca(6328:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(6329:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(6330:3).2: (^2) into ptr ^3
	movq (%rax), %r12
	# tt = Pointer, type = %"struct.std::_Vector_base.6"
	# LowerGetelementptr(6331:3): struct-type: ptr ^3 -> ^4, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(6331:3): type of ^4 is %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl"*
	# tt = Pointer, type = %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"
	# LowerGetelementptr(6332:3): struct-type: ptr ^4 -> ^5, indices=0,0
	# LowerGetelementptr(6332:3): type of ^5 is ptr*
	# LowerLoad(6333:3).2: (^5) into ptr ^6
	movq (%rax), %rbx
	# tt = Pointer, type = %"struct.std::_Vector_base.6"
	# LowerGetelementptr(6334:3): struct-type: ptr ^3 -> ^7, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(6334:3): type of ^7 is %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl"*
	# tt = Pointer, type = %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"
	# LowerGetelementptr(6335:3): struct-type: ptr ^7 -> ^8, indices=0,2
	addq $16, %rax
	# LowerGetelementptr(6335:3): type of ^8 is ptr*
	# LowerLoad(6336:3).2: (^8) into ptr ^9
	movq (%rax), %rdx
	# tt = Pointer, type = %"struct.std::_Vector_base.6"
	# LowerGetelementptr(6337:3): struct-type: ptr ^3 -> ^10, indices=0,0
	movq %r12, %rcx
	# LowerGetelementptr(6337:3): type of ^10 is %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl"*
	# tt = Pointer, type = %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"
	# LowerGetelementptr(6338:3): struct-type: ptr ^10 -> ^11, indices=0,0
	# LowerGetelementptr(6338:3): type of ^11 is ptr*
	# LowerLoad(6339:3).2: (^11) into ptr ^12
	movq (%rcx), %rax
	# LowerBasicConversion(6340:3): ptr ^9 -> i64 ^13
	movq %rdx, %rcx
	# LowerBasicConversion(6341:3): ptr ^12 -> i64 ^14
	movq %rax, %rdx
	# LowerMath(6342:3): ^13, ^14 into i64 ^15
	movq %rcx, %rax
	subq %rdx, %rax
	# LowerSdiv(6343:3): ^15, 40 into i64 ^16
	movq %rax, %rcx
	movq $0, %rdx
	movq %rcx, %rax
	movq $40, %rcx
	idivq %rcx
	movq %rax, %rcx
	# SetupCalls(6344:3): move argument ptr nonnull dereferenceable(24) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(6344:3): move argument ptr ^6
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(6344:3): move argument i64 ^16
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdx
	callq _ZNSt12_Vector_baseI6LsItemSaIS0_EE13_M_deallocateEPS0_m
	# tt = Pointer, type = %"struct.std::_Vector_base.6"
	# LowerGetelementptr(6345:3): struct-type: ptr ^3 -> ^17, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(6345:3): type of ^17 is %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl"*
	# SetupCalls(6346:3): move argument ptr nonnull dereferenceable(24) align 8 ^17
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt12_Vector_baseI6LsItemSaIS0_EE12_Vector_implD2Ev
	movq -16(%rbp), %r12
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findES2_m
.p2align 4, 0x90
_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findES2_m:
	.___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findES2_m__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(64 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -40(%rbp)
	# LowerAlloca(974:3): size = 16, type = %"class.std::basic_string_view"*, var = ^5
	leaq -16(%rbp), %r9
	# LowerAlloca(975:3): size = 8, type = ptr*, var = ^6
	leaq -24(%rbp), %rbx
	# LowerAlloca(976:3): size = 8, type = i64*, var = ^7
	leaq -32(%rbp), %r8
	# tt = Pointer, type = {i64, ptr}
	# LowerGetelementptr(977:3): struct-type: ptr ^5 -> ^8, indices=0,0
	movq %r9, %rax
	# LowerGetelementptr(977:3): type of ^8 is i64*
	# LowerStore(978:3).9: mov i64 %rsi, (^8)
	movq %rsi, (%rax)
	# tt = Pointer, type = {i64, ptr}
	# LowerGetelementptr(979:3): struct-type: ptr ^5 -> ^9, indices=0,1
	movq %r9, %rax
	addq $8, %rax
	# LowerGetelementptr(979:3): type of ^9 is ptr*
	# LowerStore(980:3).9: mov ptr %rdx, (^9)
	movq %rdx, (%rax)
	# LowerStore(981:3).9: mov ptr %rdi, (^6)
	movq %rdi, (%rbx)
	# LowerStore(982:3).9: mov i64 %rcx, (^7)
	movq %rcx, (%r8)
	# LowerLoad(983:3).2: (^6) into ptr ^10
	movq (%rbx), %rcx
	# tt = Pointer, type = %"class.std::basic_string_view"
	# LowerGetelementptr(984:3): struct-type: ptr ^5 -> ^11, indices=0,1
	movq %r9, %rbx
	addq $8, %rbx
	# LowerGetelementptr(984:3): type of ^11 is ptr*
	# LowerLoad(985:3).2: (^11) into ptr ^12
	movq (%rbx), %rax
	# LowerLoad(986:3).2: (^7) into i64 ^13
	movq (%r8), %rbx
	# tt = Pointer, type = %"class.std::basic_string_view"
	# LowerGetelementptr(987:3): struct-type: ptr ^5 -> ^14, indices=0,0
	movq %r9, %rdx
	# LowerGetelementptr(987:3): type of ^14 is i64*
	# LowerLoad(988:3).2: (^14) into i64 ^15
	movq (%rdx), %r8
	# SetupCalls(989:3): move argument ptr nonnull dereferenceable(16) align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(989:3): move argument ptr ^12
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(989:3): move argument i64 ^13
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdx
	# SetupCalls(989:3): move argument i64 ^15
	# Fixed movzx with identical source and destination widths
	movq %r8, %rcx
	callq _ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm
	# SetupCalls(989:3): move i64 result from %rax
	movq %rax, %rbx
	movq %rbx, %rax
	movq -40(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt8_DestroyIP6LsItemEvT_S2_
.p2align 4, 0x90
_ZSt8_DestroyIP6LsItemEvT_S2_:
	.___ZSt8_DestroyIP6LsItemEvT_S2___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(6352:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %rax
	# LowerAlloca(6353:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %rcx
	# LowerStore(6354:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rax)
	# LowerStore(6355:3).9: mov ptr %rsi, (^4)
	movq %rsi, (%rcx)
	# LowerLoad(6356:3).2: (^3) into ptr ^5
	movq (%rax), %rbx
	# LowerLoad(6357:3).2: (^4) into ptr ^6
	movq (%rcx), %rax
	# SetupCalls(6358:3): move argument ptr ^5
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(6358:3): move argument ptr ^6
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNSt12_Destroy_auxILb0EE9__destroyIP6LsItemEEvT_S4_
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt12_Destroy_auxILb0EE9__destroyIP6LsItemEEvT_S4_
.p2align 4, 0x90
_ZNSt12_Destroy_auxILb0EE9__destroyIP6LsItemEEvT_S4_:
	.___ZNSt12_Destroy_auxILb0EE9__destroyIP6LsItemEEvT_S4___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(40 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -40(%rbp)
	movq %r12, -24(%rbp)
	movq %r13, -32(%rbp)
	# LowerAlloca(6364:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %r12
	# LowerAlloca(6365:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %r13
	# LowerStore(6366:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%r12)
	# LowerStore(6367:3).9: mov ptr %rsi, (^4)
	movq %rsi, (%r13)
	.___ZNSt12_Destroy_auxILb0EE9__destroyIP6LsItemEEvT_S4___M9:
	# LowerLoad(6371:3).2: (^3) into ptr ^6
	movq (%r12), %rax
	# LowerLoad(6372:3).2: (^4) into ptr ^7
	movq (%r13), %rbx
	# LowerIcmp(6373:3): ptr ^6 vs. operand ptr ^7
	cmpq %rbx, %rax
	setne %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt12_Destroy_auxILb0EE9__destroyIP6LsItemEEvT_S4___M18
	jmp .___ZNSt12_Destroy_auxILb0EE9__destroyIP6LsItemEEvT_S4___M52
	.___ZNSt12_Destroy_auxILb0EE9__destroyIP6LsItemEEvT_S4___M18:
	# LowerLoad(6377:3).2: (^3) into ptr ^10
	movq (%r12), %rax
	# SetupCalls(6378:3): move argument ptr ^10
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZSt8_DestroyI6LsItemEvPT_
	# LowerLoad(6382:3).2: (^3) into ptr ^12
	movq (%r12), %rax
	# tt = Pointer, type = %struct.LsItem
	# LowerGetelementptr(6383:3): struct-type: ptr ^12 -> ^13, indices=1
	addq $40, %rax
	# LowerGetelementptr(6383:3): type of ^13 is %struct.LsItem*
	# LowerStore(6384:3).9: mov %struct.LsItem* ^13, (^3)
	movq %rax, (%r12)
	jmp .___ZNSt12_Destroy_auxILb0EE9__destroyIP6LsItemEEvT_S4___M9
	.___ZNSt12_Destroy_auxILb0EE9__destroyIP6LsItemEEvT_S4___M52:
	movq -32(%rbp), %r13
	movq -24(%rbp), %r12
	movq -40(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt10_ConstructISt17basic_string_viewIcSt11char_traitsIcEEJRKS3_EEvPT_DpOT0_
.p2align 4, 0x90
_ZSt10_ConstructISt17basic_string_viewIcSt11char_traitsIcEEJRKS3_EEvPT_DpOT0_:
	.___ZSt10_ConstructISt17basic_string_viewIcSt11char_traitsIcEEJRKS3_EEvPT_DpOT0___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(5086:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %rax
	# LowerAlloca(5087:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %rcx
	# LowerStore(5088:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rax)
	# LowerStore(5089:3).9: mov ptr %rsi, (^4)
	movq %rsi, (%rcx)
	# LowerLoad(5090:3).2: (^3) into ptr ^5
	movq (%rax), %rbx
	# LowerLoad(5091:3).2: (^4) into ptr ^6
	movq (%rcx), %rax
	# SetupCalls(5092:3): move argument ptr align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(5092:3): move argument ptr align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(5092:3): move argument i64 16
	movq $16, %rdx
	callq memcpy@PLT
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZN6LsItemD2Ev
.p2align 4, 0x90
_ZN6LsItemD2Ev:
	.___ZN6LsItemD2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(6402:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(6403:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(6404:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %struct.LsItem
	# LowerGetelementptr(6405:3): struct-type: ptr ^3 -> ^4, indices=0,0
	# LowerGetelementptr(6405:3): type of ^4 is %"class.std::__cxx11::basic_string"*
	# SetupCalls(6406:3): move argument ptr nonnull dereferenceable(32) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt8functionIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEEclES8_
.p2align 4, 0x90
_ZNKSt8functionIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEEclES8_:
	.___ZNKSt8functionIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEEclES8___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(56 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -40(%rbp)
	movq %r12, -32(%rbp)
	movq %r13, -24(%rbp)
	# LowerAlloca(2590:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %rax
	# LowerAlloca(2591:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %r13
	# LowerStore(2592:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rax)
	# LowerStore(2593:3).9: mov ptr %rsi, (^4)
	movq %rsi, (%r13)
	# LowerLoad(2594:3).2: (^3) into ptr ^5
	movq (%rax), %r12
	# SetupCalls(2595:3): move argument ptr nonnull dereferenceable(24) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	callq _ZNKSt14_Function_base8_M_emptyEv
	# SetupCalls(2595:3): move i1 result from %rax
	movb %al, %bl
	cmpb $0, %bl
	jne .___ZNKSt8functionIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEEclES8___M34
	jmp .___ZNKSt8functionIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEEclES8___M54
	.___ZNKSt8functionIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEEclES8___M34:
	callq _ZSt25__throw_bad_function_callv@PLT
	.___ZNKSt8functionIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEEclES8___M54:
	# tt = Pointer, type = %"class.std::function"
	# LowerGetelementptr(2603:3): struct-type: ptr ^5 -> ^9, indices=0,1
	movq %r12, %rax
	addq $24, %rax
	# LowerGetelementptr(2603:3): type of ^9 is ptr*
	# LowerLoad(2604:3).2: (^9) into ptr ^10
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::_Function_base"
	# LowerGetelementptr(2605:3): struct-type: ptr ^5 -> ^11, indices=0,0
	movq %r12, %rcx
	# LowerGetelementptr(2605:3): type of ^11 is %"union.std::_Any_data"*
	# LowerLoad(2606:3).2: (^4) into ptr ^12
	movq (%r13), %rax
	# SetupCalls(2607:3): move argument ptr nonnull dereferenceable(16) align 8 ^11
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(2607:3): move argument ptr nonnull dereferenceable(24) align 8 ^12
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(2607:3): jump to function operand ^10
	callq *%rbx
	# SetupCalls(2607:3): move i32 result from %rax
	movl %eax, %ebx
	movl %ebx, %eax
	movq -24(%rbp), %r13
	movq -32(%rbp), %r12
	movq -40(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZStneRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEESL_
.p2align 4, 0x90
_ZStneRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEESL_:
	.___ZStneRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEESL___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(2548:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %rbx
	# LowerAlloca(2549:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %rcx
	# LowerStore(2550:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rbx)
	# LowerStore(2551:3).9: mov ptr %rsi, (^4)
	movq %rsi, (%rcx)
	# LowerLoad(2552:3).2: (^3) into ptr ^5
	movq (%rbx), %rax
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(2553:3): struct-type: ptr ^5 -> ^6, indices=0,0
	# LowerGetelementptr(2553:3): type of ^6 is ptr*
	# LowerLoad(2554:3).2: (^6) into ptr ^7
	movq (%rax), %rbx
	# LowerLoad(2555:3).2: (^4) into ptr ^8
	movq (%rcx), %rax
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(2556:3): struct-type: ptr ^8 -> ^9, indices=0,0
	# LowerGetelementptr(2556:3): type of ^9 is ptr*
	# LowerLoad(2557:3).2: (^9) into ptr ^10
	movq (%rax), %rcx
	# LowerIcmp(2558:3): ptr ^7 vs. operand ptr ^10
	cmpq %rcx, %rbx
	setne %al
	andq $1, %rax
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt12_Vector_baseI6LsItemSaIS0_EE13_M_deallocateEPS0_m
.p2align 4, 0x90
_ZNSt12_Vector_baseI6LsItemSaIS0_EE13_M_deallocateEPS0_m:
	.___ZNSt12_Vector_baseI6LsItemSaIS0_EE13_M_deallocateEPS0_m__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(56 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -56(%rbp)
	# LowerAlloca(6412:3): size = 8, type = ptr*, var = ^4
	leaq -8(%rbp), %r9
	# LowerAlloca(6413:3): size = 8, type = ptr*, var = ^5
	leaq -16(%rbp), %r8
	# LowerAlloca(6414:3): size = 8, type = i64*, var = ^6
	leaq -24(%rbp), %rbx
	# LowerAlloca(6415:3): size = 8, type = ptr*, var = ^7
	leaq -32(%rbp), %rcx
	# LowerAlloca(6416:3): size = 8, type = ptr*, var = ^8
	leaq -40(%rbp), %rax
	# LowerAlloca(6417:3): size = 8, type = i64*, var = ^9
	leaq -48(%rbp), %r10
	# LowerStore(6418:3).9: mov ptr %rdi, (^7)
	movq %rdi, (%rcx)
	# LowerStore(6419:3).9: mov ptr %rsi, (^8)
	movq %rsi, (%rax)
	# LowerStore(6420:3).9: mov i64 %rdx, (^9)
	movq %rdx, (%r10)
	# LowerLoad(6421:3).2: (^7) into ptr ^10
	movq (%rcx), %rdx
	# LowerLoad(6422:3).2: (^8) into ptr ^11
	movq (%rax), %rcx
	# LowerIcmp(6423:3): ptr ^11 vs. intlike 0
	cmpq $0, %rcx
	setne %cl
	andq $1, %rcx
	cmpb $0, %cl
	jne .___ZNSt12_Vector_baseI6LsItemSaIS0_EE13_M_deallocateEPS0_m__M27
	jmp .___ZNSt12_Vector_baseI6LsItemSaIS0_EE13_M_deallocateEPS0_m__M73
	.___ZNSt12_Vector_baseI6LsItemSaIS0_EE13_M_deallocateEPS0_m__M27:
	# tt = Pointer, type = %"struct.std::_Vector_base.6"
	# LowerGetelementptr(6427:3): struct-type: ptr ^10 -> ^14, indices=0,0
	movq %rdx, %rcx
	# LowerGetelementptr(6427:3): type of ^14 is %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl"*
	# LowerLoad(6428:3).2: (^8) into ptr ^15
	movq (%rax), %rdx
	# LowerLoad(6429:3).2: (^9) into i64 ^16
	movq (%r10), %rax
	# LowerStore(6430:3).9: mov %"struct.std::_Vector_base.6"* ^14, (^4)
	movq %rcx, (%r9)
	# LowerStore(6431:3).9: mov ptr ^15, (^5)
	movq %rdx, (%r8)
	# LowerStore(6432:3).9: mov i64 ^16, (^6)
	movq %rax, (%rbx)
	# LowerLoad(6433:3).2: (^4) into ptr ^17
	movq (%r9), %rcx
	# LowerLoad(6434:3).2: (^5) into ptr ^18
	movq (%r8), %rdx
	# LowerLoad(6435:3).2: (^6) into i64 ^19
	movq (%rbx), %rax
	# SetupCalls(6436:3): move argument ptr nonnull dereferenceable(1) align 1 ^17
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(6436:3): move argument ptr ^18
	# Fixed movzx with identical source and destination widths
	movq %rdx, %rsi
	# SetupCalls(6436:3): move argument i64 ^19
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdx
	callq _ZNSt15__new_allocatorI6LsItemE10deallocateEPS0_m
	.___ZNSt12_Vector_baseI6LsItemSaIS0_EE13_M_deallocateEPS0_m__M73:
	movq -56(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt6vectorI6LsItemSaIS0_EED2Ev
.p2align 4, 0x90
_ZNSt6vectorI6LsItemSaIS0_EED2Ev:
	.___ZNSt6vectorI6LsItemSaIS0_EED2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(128 + 0, 16)
	subq $128, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -80(%rbp)
	movq %r12, -112(%rbp)
	movq %r13, -64(%rbp)
	movq %r14, -72(%rbp)
	movq %r15, -56(%rbp)
	# LowerAlloca(1861:3): size = 8, type = ptr*, var = ^2
	# Fixing source-to-dest leaq -8(%rbp), -48(%rbp)
	leaq -8(%rbp), %r15
	movq %r15, -48(%rbp)
	# LowerAlloca(1862:3): size = 8, type = ptr*, var = ^3
	leaq -16(%rbp), %r13
	# LowerAlloca(1863:3): size = 8, type = ptr*, var = ^4
	leaq -24(%rbp), %r14
	# LowerAlloca(1864:3): size = 8, type = ptr*, var = ^5
	leaq -32(%rbp), %rbx
	# LowerStore(1865:3).9: mov ptr %rdi, (^5)
	movq %rdi, (%rbx)
	# LowerLoad(1866:3).2: (^5) into ptr ^6
	# Fixing source-to-dest movq (%rbx), -40(%rbp)
	movq (%rbx), %r15
	movq %r15, -40(%rbp)
	# tt = Pointer, type = %"struct.std::_Vector_base.6"
	# LowerGetelementptr(1867:3): struct-type: ptr ^6 -> ^7, indices=0,0
	movq -40(%rbp), %rax
	# LowerGetelementptr(1867:3): type of ^7 is %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl"*
	# tt = Pointer, type = %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"
	# LowerGetelementptr(1868:3): struct-type: ptr ^7 -> ^8, indices=0,0
	# LowerGetelementptr(1868:3): type of ^8 is ptr*
	# LowerLoad(1869:3).2: (^8) into ptr ^9
	movq (%rax), %r15
	# tt = Pointer, type = %"struct.std::_Vector_base.6"
	# LowerGetelementptr(1870:3): struct-type: ptr ^6 -> ^10, indices=0,0
	movq -40(%rbp), %rax
	# LowerGetelementptr(1870:3): type of ^10 is %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl"*
	# tt = Pointer, type = %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"
	# LowerGetelementptr(1871:3): struct-type: ptr ^10 -> ^11, indices=0,1
	addq $8, %rax
	# LowerGetelementptr(1871:3): type of ^11 is ptr*
	# LowerLoad(1872:3).2: (^11) into ptr ^12
	movq (%rax), %rbx
	# SetupCalls(1873:3): move argument ptr nonnull dereferenceable(24) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq -40(%rbp), %rdi
	callq _ZNSt12_Vector_baseI6LsItemSaIS0_EE19_M_get_Tp_allocatorEv
	# SetupCalls(1873:3): move ptr result from %rax
	movq %rax, %r12
	# LowerStore(1874:3).9: mov ptr ^9, (^2)
	movq -48(%rbp), %rax
	movq %r15, (%rax)
	# LowerStore(1875:3).9: mov ptr ^12, (^3)
	movq %rbx, (%r13)
	# LowerStore(1876:3).9: mov ptr ^13, (^4)
	movq %r12, (%r14)
	# LowerLoad(1877:3).2: (^2) into ptr ^14
	movq -48(%rbp), %rbx
	movq (%rbx), %rax
	# LowerLoad(1878:3).2: (^3) into ptr ^15
	movq (%r13), %rbx
	# SetupCalls(1879:3): move argument ptr ^14
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(1879:3): move argument ptr ^15
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZSt8_DestroyIP6LsItemEvT_S2_
	# SetupCalls(1880:3): move argument ptr nonnull dereferenceable(24) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq -40(%rbp), %rdi
	callq _ZNSt12_Vector_baseI6LsItemSaIS0_EED2Ev
	movq -56(%rbp), %r15
	movq -72(%rbp), %r14
	movq -64(%rbp), %r13
	movq -112(%rbp), %r12
	movq -80(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZN6LsItemC2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
.p2align 4, 0x90
_ZN6LsItemC2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb:
	.___ZN6LsItemC2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(40 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	movq %r12, -24(%rbp)
	# LowerAlloca(6619:3): size = 8, type = ptr*, var = ^4
	leaq -8(%rbp), %rax
	# LowerAlloca(6620:3): size = 1, type = i8*, var = ^5
	leaq -9(%rbp), %r12
	# LowerStore(6621:3).9: mov ptr %rdi, (^4)
	movq %rdi, (%rax)
	# LowerBasicConversion(6622:3): i1 %dl -> i8 ^6
	movb %dl, (%r12)
	# LowerStore(6623:3).9: mov i8 ^6, (^5)
	# LowerLoad(6624:3).2: (^4) into ptr ^7
	movq (%rax), %rbx
	# tt = Pointer, type = %struct.LsItem
	# LowerGetelementptr(6625:3): struct-type: ptr ^7 -> ^8, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(6625:3): type of ^8 is %"class.std::__cxx11::basic_string"*
	# SetupCalls(6626:3): move argument ptr nonnull dereferenceable(32) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(6626:3): move argument ptr nonnull dereferenceable(32) align 8 %rsi
	# Semiunclobber non-live %rsi into %rsi
	movq %rsi, %rsi
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_@PLT
	# tt = Pointer, type = %struct.LsItem
	# LowerGetelementptr(6627:3): struct-type: ptr ^7 -> ^9, indices=0,1
	movq %rbx, %rax
	addq $32, %rax
	# LowerGetelementptr(6627:3): type of ^9 is i8*
	# LowerLoad(6628:3).2: (^5) into i8 ^10
	movb (%r12), %bl
	# LowerTrunc(6629:3): 8 to 1, move
	# LowerTrunc(6629:3): 8 to 1, apply mask
	andq $1, %rbx
	# LowerBasicConversion(6630:3): i1 ^11 -> i8 ^12
	movb %bl, (%rax)
	# LowerStore(6631:3).9: mov i8 ^12, (^9)
	movq -24(%rbp), %r12
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE11_M_put_nodeEPSt13_Rb_tree_nodeISI_E
.p2align 4, 0x90
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE11_M_put_nodeEPSt13_Rb_tree_nodeISI_E:
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE11_M_put_nodeEPSt13_Rb_tree_nodeISI_E__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(96 + 0, 16)
	subq $96, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -72(%rbp)
	movq %r12, -80(%rbp)
	movq %r13, -64(%rbp)
	movq %r14, -48(%rbp)
	movq %r15, -56(%rbp)
	# LowerAlloca(4618:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %r14
	# LowerAlloca(4619:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %r15
	# LowerAlloca(4620:3): size = 8, type = i64*, var = ^5
	leaq -24(%rbp), %r13
	# LowerAlloca(4621:3): size = 8, type = ptr*, var = ^6
	leaq -32(%rbp), %rbx
	# LowerAlloca(4622:3): size = 8, type = ptr*, var = ^7
	leaq -40(%rbp), %r12
	# LowerStore(4623:3).9: mov ptr %rdi, (^6)
	movq %rdi, (%rbx)
	# LowerStore(4624:3).9: mov ptr %rsi, (^7)
	movq %rsi, (%r12)
	# LowerLoad(4625:3).2: (^6) into ptr ^8
	movq (%rbx), %rax
	# SetupCalls(4626:3): move argument ptr nonnull dereferenceable(48) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE21_M_get_Node_allocatorEv
	# SetupCalls(4626:3): move ptr result from %rax
	movq %rax, %rbx
	# LowerLoad(4627:3).2: (^7) into ptr ^10
	movq (%r12), %rax
	# LowerStore(4628:3).9: mov ptr ^9, (^3)
	movq %rbx, (%r14)
	# LowerStore(4629:3).9: mov ptr ^10, (^4)
	movq %rax, (%r15)
	# LowerStore(4630:3).3: mov $imm, (^5)
	movq $1, (%r13)
	# LowerLoad(4631:3).2: (^3) into ptr ^11
	movq (%r14), %rcx
	# LowerLoad(4632:3).2: (^4) into ptr ^12
	movq (%r15), %rax
	# LowerLoad(4633:3).2: (^5) into i64 ^13
	movq (%r13), %rbx
	# SetupCalls(4634:3): move argument ptr nonnull dereferenceable(1) align 1 ^11
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(4634:3): move argument ptr ^12
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(4634:3): move argument i64 ^13
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdx
	callq _ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEEE10deallocateEPSK_m
	movq -56(%rbp), %r15
	movq -48(%rbp), %r14
	movq -64(%rbp), %r13
	movq -80(%rbp), %r12
	movq -72(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt15__new_allocatorISt17basic_string_viewIcSt11char_traitsIcEEED2Ev
.p2align 4, 0x90
_ZNSt15__new_allocatorISt17basic_string_viewIcSt11char_traitsIcEEED2Ev:
	.___ZNSt15__new_allocatorISt17basic_string_viewIcSt11char_traitsIcEEED2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(4723:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(4724:3).9: mov ptr %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(4725:3).2: (^2) into ptr ^3
	movq (%rax), %rbx
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZN9__gnu_cxxmiIP6LsItemSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_
.p2align 4, 0x90
_ZN9__gnu_cxxmiIP6LsItemSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_:
	.___ZN9__gnu_cxxmiIP6LsItemSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(72 + 0, 16)
	subq $80, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	movq %r12, -48(%rbp)
	movq %r13, -32(%rbp)
	# LowerAlloca(6692:3): size = 8, type = ptr*, var = ^3
	leaq -8(%rbp), %rbx
	# LowerAlloca(6693:3): size = 8, type = ptr*, var = ^4
	leaq -16(%rbp), %r13
	# LowerStore(6694:3).9: mov ptr %rdi, (^3)
	movq %rdi, (%rbx)
	# LowerStore(6695:3).9: mov ptr %rsi, (^4)
	movq %rsi, (%r13)
	# LowerLoad(6696:3).2: (^3) into ptr ^5
	movq (%rbx), %rax
	# SetupCalls(6697:3): move argument ptr nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEE4baseEv
	# SetupCalls(6697:3): move ptr result from %rax
	movq %rax, %rbx
	# LowerLoad(6698:3).2: (^6) into ptr ^7
	movq (%rbx), %r12
	# LowerLoad(6699:3).2: (^4) into ptr ^8
	movq (%r13), %rax
	# SetupCalls(6700:3): move argument ptr nonnull dereferenceable(8) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEE4baseEv
	# SetupCalls(6700:3): move ptr result from %rax
	movq %rax, %rbx
	# LowerLoad(6701:3).2: (^9) into ptr ^10
	movq (%rbx), %rcx
	# LowerBasicConversion(6702:3): ptr ^7 -> i64 ^11
	movq %r12, %rdx
	# LowerBasicConversion(6703:3): ptr ^10 -> i64 ^12
	movq %rcx, %rax
	# LowerMath(6704:3): ^11, ^12 into i64 ^13
	movq %rdx, %rbx
	subq %rax, %rbx
	# LowerSdiv(6705:3): ^13, 40 into i64 ^14
	movq %rbx, %rcx
	movq $0, %rdx
	movq %rcx, %rax
	movq $40, %rbx
	idivq %rbx
	movq %rax, %rcx
	movq %rcx, %rax
	movq -32(%rbp), %r13
	movq -48(%rbp), %r12
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt6vectorI6LsItemSaIS0_EE11_S_max_sizeERKS1_
.p2align 4, 0x90
_ZNSt6vectorI6LsItemSaIS0_EE11_S_max_sizeERKS1_:
	.___ZNSt6vectorI6LsItemSaIS0_EE11_S_max_sizeERKS1___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(88 + 0, 16)
	subq $96, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -56(%rbp)
	movq %r15, -64(%rbp)
	# LowerAlloca(6797:3): size = 8, type = ptr*, var = ^2
	leaq -8(%rbp), %rcx
	# LowerAlloca(6798:3): size = 8, type = ptr*, var = ^3
	leaq -16(%rbp), %rsi
	# LowerAlloca(6799:3): size = 8, type = ptr*, var = ^4
	leaq -24(%rbp), %r8
	# LowerAlloca(6800:3): size = 8, type = ptr*, var = ^5
	leaq -32(%rbp), %rdx
	# LowerAlloca(6801:3): size = 8, type = i64*, var = ^6
	leaq -40(%rbp), %rax
	# LowerAlloca(6802:3): size = 8, type = i64*, var = ^7
	leaq -48(%rbp), %rbx
	# LowerStore(6803:3).9: mov ptr %rdi, (^5)
	movq %rdi, (%rdx)
	# LowerStore(6804:3).3: mov $imm, (^6)
	movabsq $230584300921369395, %rdi
	movq %rdi, (%rax)
	# LowerLoad(6805:3).2: (^5) into ptr ^8
	# Fixing source-to-dest movq (%rdx), (%r8)
	movq (%rdx), %r15
	movq %r15, (%r8)
	# LowerStore(6806:3).9: mov ptr ^8, (^4)
	# LowerLoad(6807:3).2: (^4) into ptr ^9
	# Fixing source-to-dest movq (%r8), (%rsi)
	movq (%r8), %r15
	movq %r15, (%rsi)
	# LowerStore(6808:3).9: mov ptr ^9, (^3)
	# LowerLoad(6809:3).2: (^3) into ptr ^10
	# Fixing source-to-dest movq (%rsi), (%rcx)
	movq (%rsi), %r15
	movq %r15, (%rcx)
	# LowerStore(6810:3).9: mov ptr ^10, (^2)
	# LowerLoad(6811:3).2: (^2) into ptr ^11
	movq (%rcx), %rdx
	# LowerStore(6812:3).3: mov $imm, (^7)
	movabsq $230584300921369395, %rcx
	movq %rcx, (%rbx)
	# SetupCalls(6813:3): move argument ptr nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(6813:3): move argument ptr nonnull dereferenceable(8) align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZSt3minImERKT_S2_S2_
	# SetupCalls(6813:3): move ptr result from %rax
	movq %rax, %rbx
	# LowerLoad(6814:3).2: (^12) into i64 ^13
	movq (%rbx), %rax
	movq -64(%rbp), %r15
	movq -56(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISA_EEEEEC2IRA4_KcRSF_Lb1EEEOT_OT0_
.p2align 4, 0x90
_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISA_EEEEEC2IRA4_KcRSF_Lb1EEEOT_OT0_:
	.___ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISA_EEEEEC2IRA4_KcRSF_Lb1EEEOT_OT0___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(112 + 0, 16)
	subq $112, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -72(%rbp)
	movq %r12, -64(%rbp)
	movq %r13, -80(%rbp)
	movq %r14, -88(%rbp)
	movq %r15, -96(%rbp)
	# LowerAlloca(2291:3): size = 8, type = ptr*, var = ^4
	leaq -8(%rbp), %r8
	# LowerAlloca(2292:3): size = 8, type = ptr*, var = ^5
	leaq -16(%rbp), %r12
	# LowerAlloca(2293:3): size = 8, type = ptr*, var = ^6
	leaq -24(%rbp), %rbx
	# LowerAlloca(2294:3): size = 8, type = ptr*, var = ^7
	leaq -32(%rbp), %rcx
	# LowerAlloca(2295:3): size = 8, type = ptr*, var = ^8
	leaq -40(%rbp), %rax
	# LowerAlloca(2296:3): size = 8, type = ptr*, var = ^9
	leaq -48(%rbp), %r13
	# LowerAlloca(2297:3): size = 1, type = %"class.std::allocator.0"*, var = ^10
	leaq -49(%rbp), %r14
	# LowerStore(2298:3).9: mov ptr %rdi, (^7)
	movq %rdi, (%rcx)
	# LowerStore(2299:3).9: mov ptr %rsi, (^8)
	movq %rsi, (%rax)
	# LowerStore(2300:3).9: mov ptr %rdx, (^9)
	movq %rdx, (%r13)
	# LowerLoad(2301:3).2: (^7) into ptr ^11
	movq (%rcx), %r15
	# tt = Pointer, type = %"struct.std::pair"
	# LowerGetelementptr(2302:3): struct-type: ptr ^11 -> ^12, indices=0,0
	movq %r15, %rcx
	# LowerGetelementptr(2302:3): type of ^12 is %"class.std::__cxx11::basic_string"*
	# LowerLoad(2303:3).2: (^8) into ptr ^13
	movq (%rax), %rdx
	# tt = Pointer, type = [4 x i8]
	# LowerGetelementptr(2304:3): struct-type: ptr ^13 -> ^14, indices=0,0
	# LowerGetelementptr(2304:3): type of ^14 is i8*
	# LowerStore(2305:3).9: mov %"class.std::allocator.0"* ^10, (^6)
	movq %r14, (%rbx)
	# LowerLoad(2306:3).2: (^6) into ptr ^15
	# Fixing source-to-dest movq (%rbx), (%r8)
	pushq %r15
	movq (%rbx), %r15
	movq %r15, (%r8)
	popq %r15
	# LowerStore(2307:3).9: mov ptr ^15, (^4)
	# LowerLoad(2308:3).2: (^4) into ptr ^16
	movq (%r8), %rax
	# SetupCalls(2309:3): move argument ptr nonnull dereferenceable(32) align 8 ^12
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(2309:3): move argument ptr ^14
	# Fixed movzx with identical source and destination widths
	movq %rdx, %rsi
	# SetupCalls(2309:3): move argument ptr nonnull dereferenceable(1) align 1 ^10
	# Fixed movzx with identical source and destination widths
	movq %r14, %rdx
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_
	# LowerStore(2310:3).9: mov %"class.std::allocator.0"* ^10, (^5)
	movq %r14, (%r12)
	# LowerLoad(2311:3).2: (^5) into ptr ^17
	movq (%r12), %rax
	# SetupCalls(2312:3): move argument ptr nonnull dereferenceable(1) align 1 ^17
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt15__new_allocatorIcED2Ev
	# tt = Pointer, type = %"struct.std::pair"
	# LowerGetelementptr(2313:3): struct-type: ptr ^11 -> ^18, indices=0,1
	movq %r15, %rbx
	addq $32, %rbx
	# LowerGetelementptr(2313:3): type of ^18 is %"class.std::function"*
	# LowerLoad(2314:3).2: (^9) into ptr ^19
	movq (%r13), %rax
	# SetupCalls(2315:3): move argument ptr nonnull dereferenceable(32) align 8 ^18
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(2315:3): move argument ptr nonnull ^19
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNSt8functionIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEEC2IRS9_vEEOT_
	movq -96(%rbp), %r15
	movq -88(%rbp), %r14
	movq -80(%rbp), %r13
	movq -64(%rbp), %r12
	movq -72(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt6vectorI6LsItemSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_
.p2align 4, 0x90
_ZNSt6vectorI6LsItemSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_:
	.___ZNSt6vectorI6LsItemSaIS0_EE11_S_relocateEPS0_S3_S3_RS1___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(56 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -40(%rbp)
	# LowerAlloca(6742:3): size = 8, type = ptr*, var = ^5
	leaq -8(%rbp), %r9
	# LowerAlloca(6743:3): size = 8, type = ptr*, var = ^6
	leaq -16(%rbp), %rbx
	# LowerAlloca(6744:3): size = 8, type = ptr*, var = ^7
	leaq -24(%rbp), %r8
	# LowerAlloca(6745:3): size = 8, type = ptr*, var = ^8
	leaq -32(%rbp), %rax
	# LowerStore(6746:3).9: mov ptr %rdi, (^5)
	movq %rdi, (%r9)
	# LowerStore(6747:3).9: mov ptr %rsi, (^6)
	movq %rsi, (%rbx)
	# LowerStore(6748:3).9: mov ptr %rdx, (^7)
	movq %rdx, (%r8)
	# LowerStore(6749:3).9: mov ptr %rcx, (^8)
	movq %rcx, (%rax)
	# LowerLoad(6750:3).2: (^5) into ptr ^9
	movq (%r9), %rcx
	# LowerLoad(6751:3).2: (^6) into ptr ^10
	movq (%rbx), %rdx
	# LowerLoad(6752:3).2: (^7) into ptr ^11
	movq (%r8), %r9
	# LowerLoad(6753:3).2: (^8) into ptr ^12
	movq (%rax), %rbx
	# SetupCalls(6754:3): move argument ptr ^9
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(6754:3): move argument ptr ^10
	# Fixed movzx with identical source and destination widths
	movq %rdx, %rsi
	# SetupCalls(6754:3): move argument ptr ^11
	# Fixed movzx with identical source and destination widths
	movq %r9, %rdx
	# SetupCalls(6754:3): move argument ptr nonnull dereferenceable(1) align 1 ^12
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rcx
	callq _ZSt12__relocate_aIP6LsItemS1_SaIS0_EET0_T_S4_S3_RT1_
	# SetupCalls(6754:3): move ptr result from %rax
	movq %rax, %rbx
	movq %rbx, %rax
	movq -40(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt15__new_allocatorI6LsItemE8allocateEmPKv
.p2align 4, 0x90
_ZNSt15__new_allocatorI6LsItemE8allocateEmPKv:
	.___ZNSt15__new_allocatorI6LsItemE8allocateEmPKv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(56 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -40(%rbp)
	# LowerAlloca(6829:3): size = 8, type = ptr*, var = ^4
	leaq -8(%rbp), %r8
	# LowerAlloca(6830:3): size = 8, type = ptr*, var = ^5
	leaq -16(%rbp), %rcx
	# LowerAlloca(6831:3): size = 8, type = i64*, var = ^6
	leaq -24(%rbp), %rbx
	# LowerAlloca(6832:3): size = 8, type = ptr*, var = ^7
	leaq -32(%rbp), %rax
	# LowerStore(6833:3).9: mov ptr %rdi, (^5)
	movq %rdi, (%rcx)
	# LowerStore(6834:3).9: mov i64 %rsi, (^6)
	movq %rsi, (%rbx)
	# LowerStore(6835:3).9: mov ptr %rdx, (^7)
	movq %rdx, (%rax)
	# LowerLoad(6836:3).2: (^5) into ptr ^8
	movq (%rcx), %rax
	# LowerLoad(6837:3).2: (^6) into i64 ^9
	movq (%rbx), %rcx
	# LowerStore(6838:3).9: mov ptr ^8, (^4)
	movq %rax, (%r8)
	# LowerLoad(6839:3).2: (^4) into ptr ^10
	movq (%r8), %rax
	# LowerIcmp(6840:3): i64 ^9 vs. intlike 230584300921369395
	movabsq $230584300921369395, %rax
	cmpq %rax, %rcx
	seta %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt15__new_allocatorI6LsItemE8allocateEmPKv__M28
	jmp .___ZNSt15__new_allocatorI6LsItemE8allocateEmPKv__M76
	.___ZNSt15__new_allocatorI6LsItemE8allocateEmPKv__M28:
	# LowerLoad(6844:3).2: (^6) into i64 ^13
	movq (%rbx), %rax
	# LowerIcmp(6845:3): i64 ^13 vs. intlike 461168601842738790
	movabsq $461168601842738790, %rcx
	cmpq %rcx, %rax
	seta %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt15__new_allocatorI6LsItemE8allocateEmPKv__M36
	jmp .___ZNSt15__new_allocatorI6LsItemE8allocateEmPKv__M56
	.___ZNSt15__new_allocatorI6LsItemE8allocateEmPKv__M36:
	callq _ZSt28__throw_bad_array_new_lengthv@PLT
	.___ZNSt15__new_allocatorI6LsItemE8allocateEmPKv__M56:
	callq _ZSt17__throw_bad_allocv@PLT
	.___ZNSt15__new_allocatorI6LsItemE8allocateEmPKv__M76:
	# LowerLoad(6857:3).2: (^6) into i64 ^18
	movq (%rbx), %rcx
	# LowerMath(6858:3): ^18, 40 into i64 ^19
	# LowerMult(6858:3): delegating to Function::multiply
	movq %rcx, %rax
	movq $40, %rbx
	imulq %rbx
	movq %rax, %rcx
	# SetupCalls(6859:3): move argument i64 ^19
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	callq _Znwm@PLT
	# SetupCalls(6859:3): move ptr result from %rax
	movq %rax, %rbx
	movq %rbx, %rax
	movq -40(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

