.section .rodata
.align 8
.str:
.ascii ".\x00"

.section .rodata
.align 8
.str.1:
.ascii "Invalid number of arguments: \x00"

.section .rodata
.align 8
.str.10:
.ascii "\x1B[2J\x1B[3J\x1B[H\x00"

.section .rodata
.align 8
.str.11:
.ascii "ls\x00"

.section .rodata
.align 8
.str.12:
.ascii "pwd\x00"

.section .rodata
.align 8
.str.13:
.ascii "cd\x00"

.section .rodata
.align 8
.str.14:
.ascii "exit\x00"

.section .rodata
.align 8
.str.15:
.ascii "quit\x00"

.section .rodata
.align 8
.str.16:
.ascii "clear\x00"

.section .rodata
.align 8
.str.17:
.ascii "\x1B[32m$\x1B[39m \x00"

.section .rodata
.align 8
.str.18:
.ascii " \x00"

.section .rodata
.align 8
.str.19:
.ascii ": command not found\x0A\x00"

.section .rodata
.align 8
.str.2:
.ascii "Not found: \x00"

.section .rodata
.align 8
.str.20:
.ascii "\x1B[3\x00"

.section .rodata
.align 8
.str.21:
.ascii "m$\x1B[39m \x00"

.section .rodata
.align 8
.str.22:
.ascii "ptr[%p, %p]\x0A\x00"

.section .rodata
.align 8
.str.23:
.ascii "basic_string_view::substr\x00"

.section .rodata
.align 8
.str.24:
.ascii "%s: __pos (which is %zu) > __size (which is %zu)\x00"

.section .rodata
.align 8
.str.25:
.ascii "basic_string: construction from null is not valid\x00"

.section .rodata
.align 8
.str.26:
.ascii "cannot create std::vector larger than max_size()\x00"

.section .rodata
.align 8
.str.27:
.ascii "vector::_M_realloc_insert\x00"

.section .rodata
.align 8
.str.3:
.ascii "\x1B[36m\x00"

.section .rodata
.align 8
.str.4:
.ascii "\x1B[39m\x0A\x00"

.section .rodata
.align 8
.str.5:
.ascii "HOME\x00"

.section .rodata
.align 8
.str.6:
.ascii "Couldn't find a home directory to return to.\x0A\x00"

.section .rodata
.align 8
.str.7:
.ascii "Couldn't change directory to \x00"

.section .rodata
.align 8
.str.8:
.ascii ": not found\x0A\x00"

.section .rodata
.align 8
.str.9:
.ascii ": not a directory\x0A\x00"

.section .data
.align 8
_ZTIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEE:
.quad _ZTVN10__cxxabiv120__function_type_infoE+16
.quad _ZTSFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEE+0

.section .data
.align 8
_ZTIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEE:
.quad _ZTVN10__cxxabiv119__pointer_type_infoE+16
.quad _ZTSPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEE+0
.int 0
.fill 4, 1, 0
.quad _ZTIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEE

.section .rodata
.align 8
_ZTSFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEE:
.ascii "FiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEE\x00"

.section .rodata
.align 8
_ZTSPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEE:
.ascii "PFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEE\x00"

.section .text
.global _ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv
.p2align 4, 0x90
_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv:
	.___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(10781:3): size = 8, type = %"class.std::basic_string_view"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(10782:3).9: mov %"class.std::basic_string_view"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(10783:3).2: (^2) into %"class.std::basic_string_view"* ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::basic_string_view"
	# LowerGetelementptr(10784:3): struct-type: %"class.std::basic_string_view"* ^3 -> ^4, indices=0,1
	movq %rbx, %rax
	addq $8, %rax
	# LowerGetelementptr(10784:3): type of ^4 is i8**
	# LowerLoad(10785:3).2: (^4) into i8* ^5
	movq (%rax), %rbx
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE4findERS7_
.p2align 4, 0x90
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE4findERS7_:
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE4findERS7___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(216 + 0, 16)
	subq $224, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -96(%rbp)
	movq %r12, -112(%rbp)
	movq %r13, -128(%rbp)
	movq %r14, -88(%rbp)
	movq %r15, -80(%rbp)
	# LowerAlloca(10668:3): size = 8, type = %"struct.std::_Rb_tree_iterator"*, var = ^3
	# Fixing source-to-dest leaq -8(%rbp), -48(%rbp)
	leaq -8(%rbp), %r15
	movq %r15, -48(%rbp)
	# LowerAlloca(10669:3): size = 8, type = %"class.std::_Rb_tree"**, var = ^4
	leaq -16(%rbp), %rax
	# LowerAlloca(10670:3): size = 8, type = %"class.std::__cxx11::basic_string"**, var = ^5
	leaq -24(%rbp), %r14
	# LowerAlloca(10671:3): size = 8, type = %"struct.std::_Rb_tree_iterator"*, var = ^6
	# Fixing source-to-dest leaq -32(%rbp), -56(%rbp)
	leaq -32(%rbp), %r15
	movq %r15, -56(%rbp)
	# LowerAlloca(10672:3): size = 8, type = %"struct.std::_Rb_tree_iterator"*, var = ^7
	leaq -40(%rbp), %r12
	# LowerStore(10673:3).9: mov %"class.std::_Rb_tree"* %rdi, (^4)
	movq %rdi, (%rax)
	# LowerStore(10674:3).9: mov %"class.std::__cxx11::basic_string"* %rsi, (^5)
	movq %rsi, (%r14)
	# LowerLoad(10675:3).2: (^4) into %"class.std::_Rb_tree"* ^8
	movq (%rax), %rbx
	# SetupCalls(10676:3): move argument %"class.std::_Rb_tree"* nonnull dereferenceable(48) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE8_M_beginEv
	# SetupCalls(10676:3): move %"struct.std::_Rb_tree_node"* result from %rax
	movq %rax, %r13
	# SetupCalls(10677:3): move argument %"class.std::_Rb_tree"* nonnull dereferenceable(48) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE6_M_endEv
	# SetupCalls(10677:3): move %"struct.std::_Rb_tree_node_base"* result from %rax
	movq %rax, %r15
	# LowerLoad(10678:3).2: (^5) into %"class.std::__cxx11::basic_string"* ^11
	movq (%r14), %rax
	# Clobber %rax
	movq %rax, -64(%rbp)
	# SetupCalls(10679:3): move argument %"class.std::_Rb_tree"* nonnull dereferenceable(48) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(10679:3): move argument %"struct.std::_Rb_tree_node"* ^9
	# Fixed movzx with identical source and destination widths
	movq %r13, %rsi
	# SetupCalls(10679:3): move argument %"struct.std::_Rb_tree_node_base"* ^10
	# Fixed movzx with identical source and destination widths
	movq %r15, %rdx
	# SetupCalls(10679:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^11
	# Fixed movzx with identical source and destination widths
	movq %rax, %rcx
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE14_M_lower_boundEPSt13_Rb_tree_nodeISI_EPSt18_Rb_tree_node_baseRS7_
	# SetupCalls(10679:3): move %"struct.std::_Rb_tree_node_base"* result from %rax
	movq %rax, %r13
	# Unclobber %rax
	movq -64(%rbp), %rax
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(10680:3): struct-type: %"struct.std::_Rb_tree_iterator"* ^6 -> ^13, indices=0,0
	movq -56(%rbp), %rax
	# LowerGetelementptr(10680:3): type of ^13 is %"struct.std::_Rb_tree_node_base"**
	# LowerStore(10681:3).9: mov %"struct.std::_Rb_tree_node_base"* ^12, (^13)
	movq %r13, (%rax)
	# SetupCalls(10682:3): move argument %"class.std::_Rb_tree"* nonnull dereferenceable(48) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE3endEv
	# SetupCalls(10682:3): move %"struct.std::_Rb_tree_node_base"* result from %rax
	movq %rax, %r13
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(10683:3): struct-type: %"struct.std::_Rb_tree_iterator"* ^7 -> ^15, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(10683:3): type of ^15 is %"struct.std::_Rb_tree_node_base"**
	# LowerStore(10684:3).9: mov %"struct.std::_Rb_tree_node_base"* ^14, (^15)
	movq %r13, (%rax)
	# SetupCalls(10685:3): move argument %"struct.std::_Rb_tree_iterator"* nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq -56(%rbp), %rdi
	# SetupCalls(10685:3): move argument %"struct.std::_Rb_tree_iterator"* nonnull dereferenceable(8) align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq %r12, %rsi
	callq _ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEESL_
	# SetupCalls(10685:3): move i1 result from %rax
	movb %al, %r12b
	cmpb $0, %r12b
	jne .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE4findERS7___M223
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE4findERS7___M154:
	# tt = Pointer, type = %"class.std::_Rb_tree"
	# LowerGetelementptr(10689:3): struct-type: %"class.std::_Rb_tree"* ^8 -> ^18, indices=0,0
	movq %rbx, %rcx
	# LowerGetelementptr(10689:3): type of ^18 is %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Rb_tree_impl"*
	# LowerBasicConversion(10690:3): %"class.std::_Rb_tree"* ^18 -> %"struct.std::_Rb_tree_key_compare"* ^19
	movq %rcx, %rax
	# tt = Pointer, type = %"struct.std::_Rb_tree_key_compare"
	# LowerGetelementptr(10691:3): struct-type: %"struct.std::_Rb_tree_key_compare"* ^19 -> ^20, indices=0,0
	movq %rax, %r12
	# LowerGetelementptr(10691:3): type of ^20 is %"struct.std::less"*
	# LowerLoad(10692:3).2: (^5) into %"class.std::__cxx11::basic_string"* ^21
	movq (%r14), %r13
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(10693:3): struct-type: %"struct.std::_Rb_tree_iterator"* ^6 -> ^22, indices=0,0
	movq -56(%rbp), %rax
	# LowerGetelementptr(10693:3): type of ^22 is %"struct.std::_Rb_tree_node_base"**
	# LowerLoad(10694:3).2: (^22) into %"struct.std::_Rb_tree_node_base"* ^23
	movq (%rax), %rcx
	# Clobber %rcx
	movq %rcx, -72(%rbp)
	# SetupCalls(10695:3): move argument %"struct.std::_Rb_tree_node_base"* ^23
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE6_S_keyEPKSt18_Rb_tree_node_base
	# SetupCalls(10695:3): move %"class.std::__cxx11::basic_string"* result from %rax
	movq %rax, %r14
	# Unclobber %rcx
	movq -72(%rbp), %rcx
	# SetupCalls(10696:3): move argument %"struct.std::less"* nonnull dereferenceable(1) align 1 ^20
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(10696:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^21
	# Fixed movzx with identical source and destination widths
	movq %r13, %rsi
	# SetupCalls(10696:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^24
	# Fixed movzx with identical source and destination widths
	movq %r14, %rdx
	callq _ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_
	# SetupCalls(10696:3): move i1 result from %rax
	movb %al, %r12b
	cmpb $0, %r12b
	jne .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE4findERS7___M223
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE4findERS7___M253
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE4findERS7___M223:
	# SetupCalls(10700:3): move argument %"class.std::_Rb_tree"* nonnull dereferenceable(48) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE3endEv
	# SetupCalls(10700:3): move %"struct.std::_Rb_tree_node_base"* result from %rax
	movq %rax, %rbx
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(10701:3): struct-type: %"struct.std::_Rb_tree_iterator"* ^3 -> ^28, indices=0,0
	movq -48(%rbp), %rax
	# LowerGetelementptr(10701:3): type of ^28 is %"struct.std::_Rb_tree_node_base"**
	# LowerStore(10702:3).9: mov %"struct.std::_Rb_tree_node_base"* ^27, (^28)
	movq %rbx, (%rax)
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE4findERS7___M283
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE4findERS7___M253:
	# LowerBasicConversion(10706:3): %"struct.std::_Rb_tree_iterator"* ^3 -> i8* ^30
	movq -48(%rbp), %rax
	# LowerBasicConversion(10707:3): %"struct.std::_Rb_tree_iterator"* ^6 -> i8* ^31
	movq -56(%rbp), %rbx
	# Clobber %rax
	movq %rax, -64(%rbp)
	# SetupCalls(10708:3): move argument i8* align 8 ^30
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(10708:3): move argument i8* align 8 ^31
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(10708:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -64(%rbp), %rax
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE4findERS7___M283:
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(10712:3): struct-type: %"struct.std::_Rb_tree_iterator"* ^3 -> ^33, indices=0,0
	movq -48(%rbp), %rax
	# LowerGetelementptr(10712:3): type of ^33 is %"struct.std::_Rb_tree_node_base"**
	# LowerLoad(10713:3).2: (^33) into %"struct.std::_Rb_tree_node_base"* ^34
	movq (%rax), %rbx
	movq %rbx, %rax
	movq -80(%rbp), %r15
	movq -88(%rbp), %r14
	movq -128(%rbp), %r13
	movq -112(%rbp), %r12
	movq -96(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNK9__gnu_cxx17__normal_iteratorIPKSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEE4baseEv
.p2align 4, 0x90
_ZNK9__gnu_cxx17__normal_iteratorIPKSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEE4baseEv:
	.___ZNK9__gnu_cxx17__normal_iteratorIPKSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEE4baseEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(10637:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator.24"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(10638:3).9: mov %"class.__gnu_cxx::__normal_iterator.24"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(10639:3).2: (^2) into %"class.__gnu_cxx::__normal_iterator.24"* ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator.24"
	# LowerGetelementptr(10640:3): struct-type: %"class.__gnu_cxx::__normal_iterator.24"* ^3 -> ^4, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(10640:3): type of ^4 is %"class.std::basic_string_view"**
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE3endEv
.p2align 4, 0x90
_ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE3endEv:
	.___ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE3endEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(64 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -40(%rbp)
	movq %r12, -32(%rbp)
	# LowerAlloca(10621:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator.24"*, var = ^2
	leaq -8(%rbp), %r12
	# LowerAlloca(10622:3): size = 8, type = %"class.std::vector"**, var = ^3
	leaq -16(%rbp), %rbx
	# LowerStore(10623:3).9: mov %"class.std::vector"* %rdi, (^3)
	movq %rdi, (%rbx)
	# LowerLoad(10624:3).2: (^3) into %"class.std::vector"* ^4
	movq (%rbx), %rax
	# LowerBasicConversion(10625:3): %"class.std::vector"* ^4 -> %"struct.std::_Vector_base"* ^5
	movq %rax, %rbx
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(10626:3): struct-type: %"struct.std::_Vector_base"* ^5 -> ^6, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(10626:3): type of ^6 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# LowerBasicConversion(10627:3): %"struct.std::_Vector_base"* ^6 -> %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^7
	movq %rax, %rbx
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(10628:3): struct-type: %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^7 -> ^8, indices=0,1
	movq %rbx, %rax
	addq $8, %rax
	# LowerGetelementptr(10628:3): type of ^8 is %"class.std::basic_string_view"**
	# Clobber %rax
	movq %rax, -24(%rbp)
	# SetupCalls(10629:3): move argument %"class.__gnu_cxx::__normal_iterator.24"* nonnull dereferenceable(8) align 8 ^2
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(10629:3): move argument %"class.std::basic_string_view"** nonnull dereferenceable(8) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZN9__gnu_cxx17__normal_iteratorIPKSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEEC2ERKS6_
	# Unclobber %rax
	movq -24(%rbp), %rax
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator.24"
	# LowerGetelementptr(10630:3): struct-type: %"class.__gnu_cxx::__normal_iterator.24"* ^2 -> ^9, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(10630:3): type of ^9 is %"class.std::basic_string_view"**
	# LowerLoad(10631:3).2: (^9) into %"class.std::basic_string_view"* ^10
	movq (%rax), %rbx
	movq %rbx, %rax
	movq -32(%rbp), %r12
	movq -40(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt16initializer_listISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEE4sizeEv
.p2align 4, 0x90
_ZNKSt16initializer_listISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEE4sizeEv:
	.___ZNKSt16initializer_listISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEE4sizeEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(10579:3): size = 8, type = %"class.std::initializer_list.13"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(10580:3).9: mov %"class.std::initializer_list.13"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(10581:3).2: (^2) into %"class.std::initializer_list.13"* ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::initializer_list.13"
	# LowerGetelementptr(10582:3): struct-type: %"class.std::initializer_list.13"* ^3 -> ^4, indices=0,1
	movq %rbx, %rax
	addq $8, %rax
	# LowerGetelementptr(10582:3): type of ^4 is i64*
	# LowerLoad(10583:3).2: (^4) into i64 ^5
	movq (%rax), %rbx
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt14_Function_base8_M_emptyEv
.p2align 4, 0x90
_ZNKSt14_Function_base8_M_emptyEv:
	.___ZNKSt14_Function_base8_M_emptyEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(10567:3): size = 8, type = %"class.std::_Function_base"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(10568:3).9: mov %"class.std::_Function_base"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(10569:3).2: (^2) into %"class.std::_Function_base"* ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::_Function_base"
	# LowerGetelementptr(10570:3): struct-type: %"class.std::_Function_base"* ^3 -> ^4, indices=0,1
	movq %rbx, %rax
	addq $16, %rax
	# LowerGetelementptr(10570:3): type of ^4 is i1 (%"union.std::_Any_data"*, %"union.std::_Any_data"*, i32) ***
	# LowerLoad(10571:3).2: (^4) into i1 (%"union.std::_Any_data"*, %"union.std::_Any_data"*, i32) ** ^5
	movq (%rax), %rbx
	# LowerIcmp(10572:3): i1 (%"union.std::_Any_data"*, %"union.std::_Any_data"*, i32) ** ^5 vs. intlike 0
	cmpq $0, %rbx
	setne %bl
	andq $1, %rbx
	# LowerLogic(10574:3): ^6, true into i1 ^7
	movb %bl, %al
	xorb $1, %al
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISA_EEEEEC2ERKSH_
.p2align 4, 0x90
_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISA_EEEEEC2ERKSH_:
	.___ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISA_EEEEEC2ERKSH___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(64 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -48(%rbp)
	movq %r12, -56(%rbp)
	# LowerAlloca(10487:3): size = 8, type = %"struct.std::pair"**, var = ^3
	leaq -8(%rbp), %rax
	# LowerAlloca(10488:3): size = 8, type = %"struct.std::pair"**, var = ^4
	leaq -16(%rbp), %rbx
	# LowerStore(10489:3).9: mov %"struct.std::pair"* %rdi, (^3)
	movq %rdi, (%rax)
	# LowerStore(10490:3).9: mov %"struct.std::pair"* %rsi, (^4)
	movq %rsi, (%rbx)
	# LowerLoad(10491:3).2: (^3) into %"struct.std::pair"* ^5
	movq (%rax), %r12
	# LowerBasicConversion(10492:3): %"struct.std::pair"* ^5 -> %"class.std::__pair_base"* ^6
	movq %r12, %rax
	# LowerLoad(10493:3).2: (^4) into %"struct.std::pair"* ^7
	movq (%rbx), %rcx
	# LowerBasicConversion(10494:3): %"struct.std::pair"* ^7 -> %"class.std::__pair_base"* ^8
	movq %rcx, %rax
	# tt = Pointer, type = %"struct.std::pair"
	# LowerGetelementptr(10495:3): struct-type: %"struct.std::pair"* ^5 -> ^9, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(10495:3): type of ^9 is %"class.std::__cxx11::basic_string"*
	# LowerLoad(10496:3).2: (^4) into %"struct.std::pair"* ^10
	movq (%rbx), %rcx
	# tt = Pointer, type = %"struct.std::pair"
	# LowerGetelementptr(10497:3): struct-type: %"struct.std::pair"* ^10 -> ^11, indices=0,0
	movq %rcx, %rdx
	# LowerGetelementptr(10497:3): type of ^11 is %"class.std::__cxx11::basic_string"*
	# Clobber %rdx
	movq %rdx, -24(%rbp)
	# Clobber %rax
	movq %rax, -32(%rbp)
	# SetupCalls(10498:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(10498:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^11
	# Fixed movzx with identical source and destination widths
	movq %rdx, %rsi
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_@PLT
	# Unclobber %rax
	movq -32(%rbp), %rax
	# Unclobber %rdx
	movq -24(%rbp), %rdx
	# tt = Pointer, type = %"struct.std::pair"
	# LowerGetelementptr(10499:3): struct-type: %"struct.std::pair"* ^5 -> ^12, indices=0,1
	movq %r12, %rcx
	addq $32, %rcx
	# LowerGetelementptr(10499:3): type of ^12 is %"class.std::function"*
	# LowerLoad(10500:3).2: (^4) into %"struct.std::pair"* ^13
	movq (%rbx), %rax
	# tt = Pointer, type = %"struct.std::pair"
	# LowerGetelementptr(10501:3): struct-type: %"struct.std::pair"* ^13 -> ^14, indices=0,1
	movq %rax, %rbx
	addq $32, %rbx
	# LowerGetelementptr(10501:3): type of ^14 is %"class.std::function"*
	# Clobber %rcx
	movq %rcx, -40(%rbp)
	# SetupCalls(10502:3): move argument %"class.std::function"* nonnull dereferenceable(32) align 8 ^12
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(10502:3): move argument %"class.std::function"* nonnull dereferenceable(32) align 8 ^14
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZNSt8functionIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEEC2ERKSA_
	# Unclobber %rcx
	movq -40(%rbp), %rcx
	movq -56(%rbp), %r12
	movq -48(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE11_M_get_nodeEv
.p2align 4, 0x90
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE11_M_get_nodeEv:
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE11_M_get_nodeEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(88 + 0, 16)
	subq $96, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -56(%rbp)
	movq %r12, -40(%rbp)
	movq %r13, -48(%rbp)
	# LowerAlloca(10393:3): size = 8, type = %"class.std::allocator.10"**, var = ^2
	leaq -8(%rbp), %r12
	# LowerAlloca(10394:3): size = 8, type = i64*, var = ^3
	leaq -16(%rbp), %r13
	# LowerAlloca(10395:3): size = 8, type = %"class.std::_Rb_tree"**, var = ^4
	leaq -24(%rbp), %rax
	# LowerStore(10396:3).9: mov %"class.std::_Rb_tree"* %rdi, (^4)
	movq %rdi, (%rax)
	# LowerLoad(10397:3).2: (^4) into %"class.std::_Rb_tree"* ^5
	movq (%rax), %rbx
	# SetupCalls(10398:3): move argument %"class.std::_Rb_tree"* nonnull dereferenceable(48) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE21_M_get_Node_allocatorEv
	# SetupCalls(10398:3): move %"class.std::allocator.10"* result from %rax
	movq %rax, %rbx
	# LowerStore(10399:3).9: mov %"class.std::allocator.10"* ^6, (^2)
	movq %rbx, (%r12)
	# LowerStore(10400:3).3: mov $imm, (^3)
	movq $1, (%r13)
	# LowerLoad(10401:3).2: (^2) into %"class.std::allocator.10"* ^7
	movq (%r12), %rbx
	# LowerBasicConversion(10402:3): %"class.std::allocator.10"* ^7 -> %"class.std::__new_allocator.11"* ^8
	movq %rbx, %rax
	# LowerLoad(10403:3).2: (^3) into i64 ^9
	movq (%r13), %rbx
	# Clobber %rax
	movq %rax, -32(%rbp)
	# SetupCalls(10404:3): move argument %"class.std::__new_allocator.11"* nonnull dereferenceable(1) align 1 ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(10404:3): move argument i64 ^9
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(10404:3): move argument i8* null
	movq $0, %rdx
	callq _ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEEE8allocateEmPKv
	# SetupCalls(10404:3): move %"struct.std::_Rb_tree_node"* result from %rax
	movq %rax, %rbx
	# Unclobber %rax
	movq -32(%rbp), %rax
	movq %rbx, %rax
	movq -48(%rbp), %r13
	movq -40(%rbp), %r12
	movq -56(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE14_M_create_nodeIJRKSI_EEEPSt13_Rb_tree_nodeISI_EDpOT_
.p2align 4, 0x90
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE14_M_create_nodeIJRKSI_EEEPSt13_Rb_tree_nodeISI_EDpOT_:
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE14_M_create_nodeIJRKSI_EEEPSt13_Rb_tree_nodeISI_EDpOT___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(72 + 0, 16)
	subq $80, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -48(%rbp)
	movq %r12, -72(%rbp)
	movq %r13, -64(%rbp)
	movq %r14, -56(%rbp)
	# LowerAlloca(10376:3): size = 8, type = %"class.std::_Rb_tree"**, var = ^3
	leaq -8(%rbp), %rax
	# LowerAlloca(10377:3): size = 8, type = %"struct.std::pair"**, var = ^4
	leaq -16(%rbp), %rbx
	# LowerAlloca(10378:3): size = 8, type = %"struct.std::_Rb_tree_node"**, var = ^5
	leaq -24(%rbp), %r14
	# LowerStore(10379:3).9: mov %"class.std::_Rb_tree"* %rdi, (^3)
	movq %rdi, (%rax)
	# LowerStore(10380:3).9: mov %"struct.std::pair"* %rsi, (^4)
	movq %rsi, (%rbx)
	# LowerLoad(10381:3).2: (^3) into %"class.std::_Rb_tree"* ^6
	movq (%rax), %r13
	# SetupCalls(10382:3): move argument %"class.std::_Rb_tree"* nonnull dereferenceable(48) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE11_M_get_nodeEv
	# SetupCalls(10382:3): move %"struct.std::_Rb_tree_node"* result from %rax
	movq %rax, %r12
	# LowerStore(10383:3).9: mov %"struct.std::_Rb_tree_node"* ^7, (^5)
	movq %r12, (%r14)
	# LowerLoad(10384:3).2: (^5) into %"struct.std::_Rb_tree_node"* ^8
	movq (%r14), %rax
	# LowerLoad(10385:3).2: (^4) into %"struct.std::pair"* ^9
	movq (%rbx), %rcx
	# Clobber %rcx
	movq %rcx, -32(%rbp)
	# Clobber %rax
	movq %rax, -40(%rbp)
	# SetupCalls(10386:3): move argument %"class.std::_Rb_tree"* nonnull dereferenceable(48) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	# SetupCalls(10386:3): move argument %"struct.std::_Rb_tree_node"* ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(10386:3): move argument %"struct.std::pair"* nonnull dereferenceable(64) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdx
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE17_M_construct_nodeIJRKSI_EEEvPSt13_Rb_tree_nodeISI_EDpOT_
	# Unclobber %rax
	movq -40(%rbp), %rax
	# Unclobber %rcx
	movq -32(%rbp), %rcx
	# LowerLoad(10387:3).2: (^5) into %"struct.std::_Rb_tree_node"* ^10
	movq (%r14), %rax
	movq -56(%rbp), %r14
	movq -64(%rbp), %r13
	movq -72(%rbp), %r12
	movq -48(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE11_Alloc_nodeclIRKSI_EEPSt13_Rb_tree_nodeISI_EOT_
.p2align 4, 0x90
_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE11_Alloc_nodeclIRKSI_EEPSt13_Rb_tree_nodeISI_EOT_:
	.___ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE11_Alloc_nodeclIRKSI_EEPSt13_Rb_tree_nodeISI_EOT___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(48 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -40(%rbp)
	# LowerAlloca(10359:3): size = 8, type = %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Alloc_node"**, var = ^3
	leaq -8(%rbp), %rax
	# LowerAlloca(10360:3): size = 8, type = %"struct.std::pair"**, var = ^4
	leaq -16(%rbp), %rbx
	# LowerStore(10361:3).9: mov %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Alloc_node"* %rdi, (^3)
	movq %rdi, (%rax)
	# LowerStore(10362:3).9: mov %"struct.std::pair"* %rsi, (^4)
	movq %rsi, (%rbx)
	# LowerLoad(10363:3).2: (^3) into %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Alloc_node"* ^5
	movq (%rax), %rcx
	# tt = Pointer, type = %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Alloc_node"
	# LowerGetelementptr(10364:3): struct-type: %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Alloc_node"* ^5 -> ^6, indices=0,0
	movq %rcx, %rax
	# LowerGetelementptr(10364:3): type of ^6 is %"class.std::_Rb_tree"**
	# LowerLoad(10365:3).2: (^6) into %"class.std::_Rb_tree"* ^7
	movq (%rax), %rcx
	# LowerLoad(10366:3).2: (^4) into %"struct.std::pair"* ^8
	movq (%rbx), %rax
	# Clobber %rcx
	movq %rcx, -24(%rbp)
	# Clobber %rax
	movq %rax, -32(%rbp)
	# SetupCalls(10367:3): move argument %"class.std::_Rb_tree"* nonnull dereferenceable(48) align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(10367:3): move argument %"struct.std::pair"* nonnull dereferenceable(64) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE14_M_create_nodeIJRKSI_EEEPSt13_Rb_tree_nodeISI_EDpOT_
	# SetupCalls(10367:3): move %"struct.std::_Rb_tree_node"* result from %rax
	movq %rax, %rbx
	# Unclobber %rax
	movq -32(%rbp), %rax
	# Unclobber %rcx
	movq -24(%rbp), %rcx
	movq %rbx, %rax
	movq -40(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE5beginEv
.p2align 4, 0x90
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE5beginEv:
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE5beginEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(72 + 0, 16)
	subq $80, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	movq %r12, -24(%rbp)
	# LowerAlloca(10312:3): size = 8, type = %"struct.std::_Rb_tree_iterator"*, var = ^2
	leaq -8(%rbp), %r12
	# LowerAlloca(10313:3): size = 8, type = %"class.std::_Rb_tree"**, var = ^3
	leaq -16(%rbp), %rbx
	# LowerStore(10314:3).9: mov %"class.std::_Rb_tree"* %rdi, (^3)
	movq %rdi, (%rbx)
	# LowerLoad(10315:3).2: (^3) into %"class.std::_Rb_tree"* ^4
	movq (%rbx), %rax
	# tt = Pointer, type = %"class.std::_Rb_tree"
	# LowerGetelementptr(10316:3): struct-type: %"class.std::_Rb_tree"* ^4 -> ^5, indices=0,0
	movq %rax, %rbx
	# LowerGetelementptr(10316:3): type of ^5 is %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Rb_tree_impl"*
	# LowerBasicConversion(10317:3): %"class.std::_Rb_tree"* ^5 -> i8* ^6
	movq %rbx, %rax
	# tt = Pointer, type = i8
	# LowerGetelementptr(10318:3): struct-type: i8* ^6 -> ^7, indices=8
	movq %rax, %rbx
	addq $8, %rbx
	# LowerGetelementptr(10318:3): type of ^7 is i8*
	# LowerBasicConversion(10319:3): i8* ^7 -> %"struct.std::_Rb_tree_header"* ^8
	movq %rbx, %rax
	# tt = Pointer, type = %"struct.std::_Rb_tree_header"
	# LowerGetelementptr(10320:3): struct-type: %"struct.std::_Rb_tree_header"* ^8 -> ^9, indices=0,0
	movq %rax, %rbx
	# LowerGetelementptr(10320:3): type of ^9 is %"struct.std::_Rb_tree_node_base"*
	# tt = Pointer, type = %"struct.std::_Rb_tree_node_base"
	# LowerGetelementptr(10321:3): struct-type: %"struct.std::_Rb_tree_node_base"* ^9 -> ^10, indices=0,2
	movq %rbx, %rax
	addq $16, %rax
	# LowerGetelementptr(10321:3): type of ^10 is %"struct.std::_Rb_tree_node_base"**
	# LowerLoad(10322:3).2: (^10) into %"struct.std::_Rb_tree_node_base"* ^11
	movq (%rax), %rbx
	# SetupCalls(10323:3): move argument %"struct.std::_Rb_tree_iterator"* nonnull dereferenceable(8) align 8 ^2
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(10323:3): move argument %"struct.std::_Rb_tree_node_base"* ^11
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEEC2EPSt18_Rb_tree_node_base
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(10324:3): struct-type: %"struct.std::_Rb_tree_iterator"* ^2 -> ^12, indices=0,0
	movq %r12, %rbx
	# LowerGetelementptr(10324:3): type of ^12 is %"struct.std::_Rb_tree_node_base"**
	# LowerLoad(10325:3).2: (^12) into %"struct.std::_Rb_tree_node_base"* ^13
	movq (%rbx), %rax
	movq -24(%rbp), %r12
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEESL_
.p2align 4, 0x90
_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEESL_:
	.___ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEESL___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(10296:3): size = 8, type = %"struct.std::_Rb_tree_iterator"**, var = ^3
	leaq -8(%rbp), %rax
	# LowerAlloca(10297:3): size = 8, type = %"struct.std::_Rb_tree_iterator"**, var = ^4
	leaq -16(%rbp), %rbx
	# LowerStore(10298:3).9: mov %"struct.std::_Rb_tree_iterator"* %rdi, (^3)
	movq %rdi, (%rax)
	# LowerStore(10299:3).9: mov %"struct.std::_Rb_tree_iterator"* %rsi, (^4)
	movq %rsi, (%rbx)
	# LowerLoad(10300:3).2: (^3) into %"struct.std::_Rb_tree_iterator"* ^5
	movq (%rax), %rcx
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(10301:3): struct-type: %"struct.std::_Rb_tree_iterator"* ^5 -> ^6, indices=0,0
	movq %rcx, %rax
	# LowerGetelementptr(10301:3): type of ^6 is %"struct.std::_Rb_tree_node_base"**
	# LowerLoad(10302:3).2: (^6) into %"struct.std::_Rb_tree_node_base"* ^7
	movq (%rax), %rcx
	# LowerLoad(10303:3).2: (^4) into %"struct.std::_Rb_tree_iterator"* ^8
	movq (%rbx), %rax
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(10304:3): struct-type: %"struct.std::_Rb_tree_iterator"* ^8 -> ^9, indices=0,0
	movq %rax, %rbx
	# LowerGetelementptr(10304:3): type of ^9 is %"struct.std::_Rb_tree_node_base"**
	# LowerLoad(10305:3).2: (^9) into %"struct.std::_Rb_tree_node_base"* ^10
	movq (%rbx), %rax
	# LowerIcmp(10306:3): %"struct.std::_Rb_tree_node_base"* ^7 vs. operand %"struct.std::_Rb_tree_node_base"* ^10
	cmpq %rax, %rcx
	sete %al
	andq $1, %rax
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEE7_M_addrEv
.p2align 4, 0x90
_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEE7_M_addrEv:
	.___ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEE7_M_addrEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(10286:3): size = 8, type = %"struct.__gnu_cxx::__aligned_membuf"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(10287:3).9: mov %"struct.__gnu_cxx::__aligned_membuf"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(10288:3).2: (^2) into %"struct.__gnu_cxx::__aligned_membuf"* ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"struct.__gnu_cxx::__aligned_membuf"
	# LowerGetelementptr(10289:3): struct-type: %"struct.__gnu_cxx::__aligned_membuf"* ^3 -> ^4, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(10289:3): type of ^4 is [64 x i8]*
	# LowerBasicConversion(10290:3): %"struct.__gnu_cxx::__aligned_membuf"* ^4 -> i8* ^5
	movq %rax, %rbx
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEE6_M_ptrEv
.p2align 4, 0x90
_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEE6_M_ptrEv:
	.___ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEE6_M_ptrEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(10276:3): size = 8, type = %"struct.__gnu_cxx::__aligned_membuf"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(10277:3).9: mov %"struct.__gnu_cxx::__aligned_membuf"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(10278:3).2: (^2) into %"struct.__gnu_cxx::__aligned_membuf"* ^3
	movq (%rax), %rbx
	# SetupCalls(10279:3): move argument %"struct.__gnu_cxx::__aligned_membuf"* nonnull dereferenceable(64) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEE7_M_addrEv
	# SetupCalls(10279:3): move i8* result from %rax
	movq %rax, %rbx
	# LowerBasicConversion(10280:3): i8* ^4 -> %"struct.std::pair"* ^5
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_S4_Lb1EEEOT_OT0_
.p2align 4, 0x90
_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_S4_Lb1EEEOT_OT0_:
	.___ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_S4_Lb1EEEOT_OT0___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(40 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	# LowerAlloca(10208:3): size = 8, type = %"struct.std::pair.21"**, var = ^4
	leaq -8(%rbp), %rax
	# LowerAlloca(10209:3): size = 8, type = %"struct.std::_Rb_tree_node_base"***, var = ^5
	leaq -16(%rbp), %r8
	# LowerAlloca(10210:3): size = 8, type = %"struct.std::_Rb_tree_node_base"***, var = ^6
	leaq -24(%rbp), %rcx
	# LowerStore(10211:3).9: mov %"struct.std::pair.21"* %rdi, (^4)
	movq %rdi, (%rax)
	# LowerStore(10212:3).9: mov %"struct.std::_Rb_tree_node_base"** %rsi, (^5)
	movq %rsi, (%r8)
	# LowerStore(10213:3).9: mov %"struct.std::_Rb_tree_node_base"** %rdx, (^6)
	movq %rdx, (%rcx)
	# LowerLoad(10214:3).2: (^4) into %"struct.std::pair.21"* ^7
	movq (%rax), %rbx
	# LowerBasicConversion(10215:3): %"struct.std::pair.21"* ^7 -> %"class.std::__pair_base.22"* ^8
	movq %rbx, %rax
	# tt = Pointer, type = %"struct.std::pair.21"
	# LowerGetelementptr(10216:3): struct-type: %"struct.std::pair.21"* ^7 -> ^9, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(10216:3): type of ^9 is %"struct.std::_Rb_tree_node_base"**
	# LowerLoad(10217:3).2: (^5) into %"struct.std::_Rb_tree_node_base"** ^10
	movq (%r8), %rdx
	# LowerLoad(10218:3).2: (^10) into %"struct.std::_Rb_tree_node_base"* ^11
	movq (%rdx), %rsi
	# LowerStore(10219:3).9: mov %"struct.std::_Rb_tree_node_base"* ^11, (^9)
	movq %rsi, (%rax)
	# tt = Pointer, type = %"struct.std::pair.21"
	# LowerGetelementptr(10220:3): struct-type: %"struct.std::pair.21"* ^7 -> ^12, indices=0,1
	movq %rbx, %rdx
	addq $8, %rdx
	# LowerGetelementptr(10220:3): type of ^12 is %"struct.std::_Rb_tree_node_base"**
	# LowerLoad(10221:3).2: (^6) into %"struct.std::_Rb_tree_node_base"** ^13
	movq (%rcx), %rax
	# LowerLoad(10222:3).2: (^13) into %"struct.std::_Rb_tree_node_base"* ^14
	movq (%rax), %rbx
	# LowerStore(10223:3).9: mov %"struct.std::_Rb_tree_node_base"* ^14, (^12)
	movq %rbx, (%rdx)
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE11_M_leftmostEv
.p2align 4, 0x90
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE11_M_leftmostEv:
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE11_M_leftmostEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(40 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(10194:3): size = 8, type = %"class.std::_Rb_tree"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(10195:3).9: mov %"class.std::_Rb_tree"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(10196:3).2: (^2) into %"class.std::_Rb_tree"* ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::_Rb_tree"
	# LowerGetelementptr(10197:3): struct-type: %"class.std::_Rb_tree"* ^3 -> ^4, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(10197:3): type of ^4 is %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Rb_tree_impl"*
	# LowerBasicConversion(10198:3): %"class.std::_Rb_tree"* ^4 -> i8* ^5
	movq %rax, %rbx
	# tt = Pointer, type = i8
	# LowerGetelementptr(10199:3): struct-type: i8* ^5 -> ^6, indices=8
	movq %rbx, %rax
	addq $8, %rax
	# LowerGetelementptr(10199:3): type of ^6 is i8*
	# LowerBasicConversion(10200:3): i8* ^6 -> %"struct.std::_Rb_tree_header"* ^7
	movq %rax, %rbx
	# tt = Pointer, type = %"struct.std::_Rb_tree_header"
	# LowerGetelementptr(10201:3): struct-type: %"struct.std::_Rb_tree_header"* ^7 -> ^8, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(10201:3): type of ^8 is %"struct.std::_Rb_tree_node_base"*
	# tt = Pointer, type = %"struct.std::_Rb_tree_node_base"
	# LowerGetelementptr(10202:3): struct-type: %"struct.std::_Rb_tree_node_base"* ^8 -> ^9, indices=0,2
	movq %rax, %rbx
	addq $16, %rbx
	# LowerGetelementptr(10202:3): type of ^9 is %"struct.std::_Rb_tree_node_base"**
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE24_M_get_insert_unique_posERS7_
.p2align 4, 0x90
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE24_M_get_insert_unique_posERS7_:
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE24_M_get_insert_unique_posERS7___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(400 + 0, 16)
	subq $400, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -176(%rbp)
	movq %r12, -264(%rbp)
	movq %r13, -280(%rbp)
	movq %r14, -288(%rbp)
	movq %r15, -168(%rbp)
	# LowerAlloca(10082:3): size = 16, type = %"struct.std::pair.21"*, var = ^3
	# Fixing source-to-dest leaq -16(%rbp), -88(%rbp)
	pushq %r15
	leaq -16(%rbp), %r15
	movq %r15, -88(%rbp)
	popq %r15
	# LowerAlloca(10083:3): size = 8, type = %"class.std::_Rb_tree"**, var = ^4
	leaq -24(%rbp), %rax
	# LowerAlloca(10084:3): size = 8, type = %"class.std::__cxx11::basic_string"**, var = ^5
	# Fixing source-to-dest leaq -32(%rbp), -128(%rbp)
	pushq %r15
	leaq -32(%rbp), %r15
	movq %r15, -128(%rbp)
	popq %r15
	# LowerAlloca(10085:3): size = 8, type = %"struct.std::_Rb_tree_node"**, var = ^6
	# Fixing source-to-dest leaq -40(%rbp), -104(%rbp)
	pushq %r15
	leaq -40(%rbp), %r15
	movq %r15, -104(%rbp)
	popq %r15
	# LowerAlloca(10086:3): size = 8, type = %"struct.std::_Rb_tree_node_base"**, var = ^7
	# Fixing source-to-dest leaq -48(%rbp), -96(%rbp)
	pushq %r15
	leaq -48(%rbp), %r15
	movq %r15, -96(%rbp)
	popq %r15
	# LowerAlloca(10087:3): size = 1, type = i8*, var = ^8
	leaq -49(%rbp), %rbx
	# LowerAlloca(10088:3): size = 8, type = %"struct.std::_Rb_tree_iterator"*, var = ^9
	# Fixing source-to-dest leaq -64(%rbp), -120(%rbp)
	pushq %r15
	leaq -64(%rbp), %r15
	movq %r15, -120(%rbp)
	popq %r15
	# LowerAlloca(10089:3): size = 8, type = %"struct.std::_Rb_tree_iterator"*, var = ^10
	# Fixing source-to-dest leaq -72(%rbp), -144(%rbp)
	pushq %r15
	leaq -72(%rbp), %r15
	movq %r15, -144(%rbp)
	popq %r15
	# LowerAlloca(10090:3): size = 8, type = %"struct.std::_Rb_tree_node_base"**, var = ^11
	# Fixing source-to-dest leaq -80(%rbp), -112(%rbp)
	pushq %r15
	leaq -80(%rbp), %r15
	movq %r15, -112(%rbp)
	popq %r15
	# LowerStore(10091:3).9: mov %"class.std::_Rb_tree"* %rdi, (^4)
	movq %rdi, (%rax)
	# LowerStore(10092:3).9: mov %"class.std::__cxx11::basic_string"* %rsi, (^5)
	movq -128(%rbp), %rcx
	movq %rsi, (%rcx)
	# LowerLoad(10093:3).2: (^4) into %"class.std::_Rb_tree"* ^12
	# Fixing source-to-dest movq (%rax), -136(%rbp)
	pushq %r15
	movq (%rax), %r15
	movq %r15, -136(%rbp)
	popq %r15
	# SetupCalls(10094:3): move argument %"class.std::_Rb_tree"* nonnull dereferenceable(48) align 8 ^12
	# Fixed movzx with identical source and destination widths
	movq -136(%rbp), %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE8_M_beginEv
	# SetupCalls(10094:3): move %"struct.std::_Rb_tree_node"* result from %rax
	movq %rax, %r12
	# LowerStore(10095:3).9: mov %"struct.std::_Rb_tree_node"* ^13, (^6)
	movq -104(%rbp), %rax
	movq %r12, (%rax)
	# SetupCalls(10096:3): move argument %"class.std::_Rb_tree"* nonnull dereferenceable(48) align 8 ^12
	# Fixed movzx with identical source and destination widths
	movq -136(%rbp), %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE6_M_endEv
	# SetupCalls(10096:3): move %"struct.std::_Rb_tree_node_base"* result from %rax
	movq %rax, %r12
	# LowerStore(10097:3).9: mov %"struct.std::_Rb_tree_node_base"* ^14, (^7)
	movq -96(%rbp), %rax
	movq %r12, (%rax)
	# LowerStore(10098:3).3: mov $imm, (^8)
	movb $1, (%rbx)
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE24_M_get_insert_unique_posERS7___M77:
	# LowerLoad(10102:3).2: (^6) into %"struct.std::_Rb_tree_node"* ^16
	movq -104(%rbp), %rcx
	movq (%rcx), %rax
	# LowerIcmp(10103:3): %"struct.std::_Rb_tree_node"* ^16 vs. intlike 0
	cmpq $0, %rax
	setne %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE24_M_get_insert_unique_posERS7___M84
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE24_M_get_insert_unique_posERS7___M228
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE24_M_get_insert_unique_posERS7___M84:
	# LowerLoad(10107:3).2: (^6) into %"struct.std::_Rb_tree_node"* ^19
	movq -104(%rbp), %rax
	movq (%rax), %rcx
	# LowerBasicConversion(10108:3): %"struct.std::_Rb_tree_node"* ^19 -> %"struct.std::_Rb_tree_node_base"* ^20
	movq %rcx, %rax
	# LowerStore(10109:3).9: mov %"struct.std::_Rb_tree_node_base"* ^20, (^7)
	movq -96(%rbp), %rcx
	movq %rax, (%rcx)
	# tt = Pointer, type = %"class.std::_Rb_tree"
	# LowerGetelementptr(10110:3): struct-type: %"class.std::_Rb_tree"* ^12 -> ^21, indices=0,0
	movq -136(%rbp), %rax
	# LowerGetelementptr(10110:3): type of ^21 is %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Rb_tree_impl"*
	# LowerBasicConversion(10111:3): %"class.std::_Rb_tree"* ^21 -> %"struct.std::_Rb_tree_key_compare"* ^22
	movq %rax, %rcx
	# tt = Pointer, type = %"struct.std::_Rb_tree_key_compare"
	# LowerGetelementptr(10112:3): struct-type: %"struct.std::_Rb_tree_key_compare"* ^22 -> ^23, indices=0,0
	movq %rcx, %r13
	# LowerGetelementptr(10112:3): type of ^23 is %"struct.std::less"*
	# LowerLoad(10113:3).2: (^5) into %"class.std::__cxx11::basic_string"* ^24
	movq -128(%rbp), %rax
	movq (%rax), %r14
	# LowerLoad(10114:3).2: (^6) into %"struct.std::_Rb_tree_node"* ^25
	movq -104(%rbp), %rcx
	movq (%rcx), %rax
	# Clobber %rax
	movq %rax, -152(%rbp)
	# SetupCalls(10115:3): move argument %"struct.std::_Rb_tree_node"* ^25
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE6_S_keyEPKSt13_Rb_tree_nodeISI_E
	# SetupCalls(10115:3): move %"class.std::__cxx11::basic_string"* result from %rax
	movq %rax, %r12
	# Unclobber %rax
	movq -152(%rbp), %rax
	# SetupCalls(10116:3): move argument %"struct.std::less"* nonnull dereferenceable(1) align 1 ^23
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	# SetupCalls(10116:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^24
	# Fixed movzx with identical source and destination widths
	movq %r14, %rsi
	# SetupCalls(10116:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^26
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdx
	callq _ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_
	# SetupCalls(10116:3): move i1 result from %rax
	movb %al, %r12b
	# LowerBasicConversion(10117:3): i1 ^27 -> i8 ^28
	movb %r12b, %al
	# LowerStore(10118:3).9: mov i8 ^28, (^8)
	movb %al, (%rbx)
	# LowerLoad(10119:3).2: (^8) into i8 ^29
	movb (%rbx), %cl
	# LowerTrunc(10120:3): 8 to 1, move
	movb %cl, %al
	# LowerTrunc(10120:3): 8 to 1, apply mask
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE24_M_get_insert_unique_posERS7___M165
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE24_M_get_insert_unique_posERS7___M195
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE24_M_get_insert_unique_posERS7___M165:
	# LowerLoad(10124:3).2: (^6) into %"struct.std::_Rb_tree_node"* ^32
	movq -104(%rbp), %rcx
	movq (%rcx), %rax
	# LowerBasicConversion(10125:3): %"struct.std::_Rb_tree_node"* ^32 -> %"struct.std::_Rb_tree_node_base"* ^33
	movq %rax, %rcx
	# Clobber %rcx
	movq %rcx, -160(%rbp)
	# SetupCalls(10126:3): move argument %"struct.std::_Rb_tree_node_base"* ^33
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE7_S_leftEPSt18_Rb_tree_node_base
	# SetupCalls(10126:3): move %"struct.std::_Rb_tree_node"* result from %rax
	movq %rax, %r12
	# Unclobber %rcx
	movq -160(%rbp), %rcx
	# MovePhi: ^34 -> ^40
	movq %r12, %r15
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE24_M_get_insert_unique_posERS7___M225
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE24_M_get_insert_unique_posERS7___M195:
	# LowerLoad(10130:3).2: (^6) into %"struct.std::_Rb_tree_node"* ^36
	movq -104(%rbp), %rax
	movq (%rax), %rcx
	# LowerBasicConversion(10131:3): %"struct.std::_Rb_tree_node"* ^36 -> %"struct.std::_Rb_tree_node_base"* ^37
	movq %rcx, %rax
	# Clobber %rax
	movq %rax, -152(%rbp)
	# SetupCalls(10132:3): move argument %"struct.std::_Rb_tree_node_base"* ^37
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE8_S_rightEPSt18_Rb_tree_node_base
	# SetupCalls(10132:3): move %"struct.std::_Rb_tree_node"* result from %rax
	movq %rax, %r12
	# Unclobber %rax
	movq -152(%rbp), %rax
	# MovePhi: ^38 -> ^40
	movq %r12, %r15
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE24_M_get_insert_unique_posERS7___M225:
	# LowerStore(10137:3).9: mov %"struct.std::_Rb_tree_node"* ^40, (^6)
	movq -104(%rbp), %rax
	movq %r15, (%rax)
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE24_M_get_insert_unique_posERS7___M77
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE24_M_get_insert_unique_posERS7___M228:
	# LowerLoad(10141:3).2: (^7) into %"struct.std::_Rb_tree_node_base"* ^42
	movq -96(%rbp), %rax
	movq (%rax), %rcx
	# Clobber %rcx
	movq %rcx, -160(%rbp)
	# SetupCalls(10142:3): move argument %"struct.std::_Rb_tree_iterator"* nonnull dereferenceable(8) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq -120(%rbp), %rdi
	# SetupCalls(10142:3): move argument %"struct.std::_Rb_tree_node_base"* ^42
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	callq _ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEEC2EPSt18_Rb_tree_node_base
	# Unclobber %rcx
	movq -160(%rbp), %rcx
	# LowerLoad(10143:3).2: (^8) into i8 ^43
	movb (%rbx), %al
	# LowerTrunc(10144:3): 8 to 1, move
	movb %al, %bl
	# LowerTrunc(10144:3): 8 to 1, apply mask
	andq $1, %rbx
	cmpb $0, %bl
	jne .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE24_M_get_insert_unique_posERS7___M260
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE24_M_get_insert_unique_posERS7___M366
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE24_M_get_insert_unique_posERS7___M260:
	# SetupCalls(10148:3): move argument %"class.std::_Rb_tree"* nonnull dereferenceable(48) align 8 ^12
	# Fixed movzx with identical source and destination widths
	movq -136(%rbp), %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE5beginEv
	# SetupCalls(10148:3): move %"struct.std::_Rb_tree_node_base"* result from %rax
	movq %rax, %rbx
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(10149:3): struct-type: %"struct.std::_Rb_tree_iterator"* ^10 -> ^47, indices=0,0
	movq -144(%rbp), %rax
	# LowerGetelementptr(10149:3): type of ^47 is %"struct.std::_Rb_tree_node_base"**
	# LowerStore(10150:3).9: mov %"struct.std::_Rb_tree_node_base"* ^46, (^47)
	movq %rbx, (%rax)
	# SetupCalls(10151:3): move argument %"struct.std::_Rb_tree_iterator"* nonnull dereferenceable(8) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq -120(%rbp), %rdi
	# SetupCalls(10151:3): move argument %"struct.std::_Rb_tree_iterator"* nonnull dereferenceable(8) align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq -144(%rbp), %rsi
	callq _ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEESL_
	# SetupCalls(10151:3): move i1 result from %rax
	movb %al, %bl
	cmpb $0, %bl
	jne .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE24_M_get_insert_unique_posERS7___M315
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE24_M_get_insert_unique_posERS7___M341
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE24_M_get_insert_unique_posERS7___M315:
	# SetupCalls(10155:3): move argument %"struct.std::pair.21"* nonnull dereferenceable(16) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq -88(%rbp), %rdi
	# SetupCalls(10155:3): move argument %"struct.std::_Rb_tree_node"** nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq -104(%rbp), %rsi
	# SetupCalls(10155:3): move argument %"struct.std::_Rb_tree_node_base"** nonnull dereferenceable(8) align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq -96(%rbp), %rdx
	callq _ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS8_ESaISF_EEEEEERS1_Lb1EEEOT_OT0_
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE24_M_get_insert_unique_posERS7___M493
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE24_M_get_insert_unique_posERS7___M341:
	# SetupCalls(10159:3): move argument %"struct.std::_Rb_tree_iterator"* nonnull dereferenceable(8) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq -120(%rbp), %rdi
	callq _ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEEmmEv
	# SetupCalls(10159:3): move %"struct.std::_Rb_tree_iterator"* result from %rax
	movq %rax, %rax
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE24_M_get_insert_unique_posERS7___M366:
	# tt = Pointer, type = %"class.std::_Rb_tree"
	# LowerGetelementptr(10166:3): struct-type: %"class.std::_Rb_tree"* ^12 -> ^54, indices=0,0
	movq -136(%rbp), %rbx
	# LowerGetelementptr(10166:3): type of ^54 is %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Rb_tree_impl"*
	# LowerBasicConversion(10167:3): %"class.std::_Rb_tree"* ^54 -> %"struct.std::_Rb_tree_key_compare"* ^55
	movq %rbx, %rax
	# tt = Pointer, type = %"struct.std::_Rb_tree_key_compare"
	# LowerGetelementptr(10168:3): struct-type: %"struct.std::_Rb_tree_key_compare"* ^55 -> ^56, indices=0,0
	movq %rax, %rbx
	# LowerGetelementptr(10168:3): type of ^56 is %"struct.std::less"*
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(10169:3): struct-type: %"struct.std::_Rb_tree_iterator"* ^9 -> ^57, indices=0,0
	movq -120(%rbp), %rax
	# LowerGetelementptr(10169:3): type of ^57 is %"struct.std::_Rb_tree_node_base"**
	# LowerLoad(10170:3).2: (^57) into %"struct.std::_Rb_tree_node_base"* ^58
	movq (%rax), %rcx
	# Clobber %rcx
	movq %rcx, -160(%rbp)
	# SetupCalls(10171:3): move argument %"struct.std::_Rb_tree_node_base"* ^58
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE6_S_keyEPKSt18_Rb_tree_node_base
	# SetupCalls(10171:3): move %"class.std::__cxx11::basic_string"* result from %rax
	movq %rax, %r12
	# Unclobber %rcx
	movq -160(%rbp), %rcx
	# LowerLoad(10172:3).2: (^5) into %"class.std::__cxx11::basic_string"* ^60
	movq -128(%rbp), %rax
	movq (%rax), %rcx
	# Clobber %rcx
	movq %rcx, -160(%rbp)
	# SetupCalls(10173:3): move argument %"struct.std::less"* nonnull dereferenceable(1) align 1 ^56
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(10173:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^59
	# Fixed movzx with identical source and destination widths
	movq %r12, %rsi
	# SetupCalls(10173:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^60
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdx
	callq _ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_
	# SetupCalls(10173:3): move i1 result from %rax
	movb %al, %bl
	# Unclobber %rcx
	movq -160(%rbp), %rcx
	cmpb $0, %bl
	jne .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE24_M_get_insert_unique_posERS7___M435
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE24_M_get_insert_unique_posERS7___M461
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE24_M_get_insert_unique_posERS7___M435:
	# SetupCalls(10177:3): move argument %"struct.std::pair.21"* nonnull dereferenceable(16) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq -88(%rbp), %rdi
	# SetupCalls(10177:3): move argument %"struct.std::_Rb_tree_node"** nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq -104(%rbp), %rsi
	# SetupCalls(10177:3): move argument %"struct.std::_Rb_tree_node_base"** nonnull dereferenceable(8) align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq -96(%rbp), %rdx
	callq _ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS8_ESaISF_EEEEEERS1_Lb1EEEOT_OT0_
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE24_M_get_insert_unique_posERS7___M493
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE24_M_get_insert_unique_posERS7___M461:
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(10181:3): struct-type: %"struct.std::_Rb_tree_iterator"* ^9 -> ^64, indices=0,0
	movq -120(%rbp), %rax
	# LowerGetelementptr(10181:3): type of ^64 is %"struct.std::_Rb_tree_node_base"**
	# LowerStore(10182:3).3: mov $imm, (^11)
	movq -112(%rbp), %rbx
	movq $0, (%rbx)
	# Clobber %rax
	movq %rax, -152(%rbp)
	# SetupCalls(10183:3): move argument %"struct.std::pair.21"* nonnull dereferenceable(16) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq -88(%rbp), %rdi
	# SetupCalls(10183:3): move argument %"struct.std::_Rb_tree_node_base"** nonnull dereferenceable(8) align 8 ^64
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(10183:3): move argument %"struct.std::_Rb_tree_node_base"** nonnull dereferenceable(8) align 8 ^11
	# Fixed movzx with identical source and destination widths
	movq -112(%rbp), %rdx
	callq _ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IS1_S1_Lb1EEERKS1_S5_
	# Unclobber %rax
	movq -152(%rbp), %rax
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE24_M_get_insert_unique_posERS7___M493:
	# LowerBasicConversion(10187:3): %"struct.std::pair.21"* ^3 -> {%"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"*}* ^66
	movq -88(%rbp), %rcx
	# LowerLoad(10188:3).2: (^66) into {%"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"*} ^67
	# FinishMultireg: mov (%reg), <%pack...>
	movq (%rcx), %rax
	movq 8(%rcx), %rbx
	# LowerRet: two-register return
	movq %rax, %rax
	movq %rbx, %rdx
	movq -168(%rbp), %r15
	movq -288(%rbp), %r14
	movq -280(%rbp), %r13
	movq -264(%rbp), %r12
	movq -176(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IS1_S1_Lb1EEERKS1_S5_
.p2align 4, 0x90
_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IS1_S1_Lb1EEERKS1_S5_:
	.___ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IS1_S1_Lb1EEERKS1_S5___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(40 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	# LowerAlloca(10061:3): size = 8, type = %"struct.std::pair.21"**, var = ^4
	leaq -8(%rbp), %rax
	# LowerAlloca(10062:3): size = 8, type = %"struct.std::_Rb_tree_node_base"***, var = ^5
	leaq -16(%rbp), %r8
	# LowerAlloca(10063:3): size = 8, type = %"struct.std::_Rb_tree_node_base"***, var = ^6
	leaq -24(%rbp), %rcx
	# LowerStore(10064:3).9: mov %"struct.std::pair.21"* %rdi, (^4)
	movq %rdi, (%rax)
	# LowerStore(10065:3).9: mov %"struct.std::_Rb_tree_node_base"** %rsi, (^5)
	movq %rsi, (%r8)
	# LowerStore(10066:3).9: mov %"struct.std::_Rb_tree_node_base"** %rdx, (^6)
	movq %rdx, (%rcx)
	# LowerLoad(10067:3).2: (^4) into %"struct.std::pair.21"* ^7
	movq (%rax), %rbx
	# LowerBasicConversion(10068:3): %"struct.std::pair.21"* ^7 -> %"class.std::__pair_base.22"* ^8
	movq %rbx, %rax
	# tt = Pointer, type = %"struct.std::pair.21"
	# LowerGetelementptr(10069:3): struct-type: %"struct.std::pair.21"* ^7 -> ^9, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(10069:3): type of ^9 is %"struct.std::_Rb_tree_node_base"**
	# LowerLoad(10070:3).2: (^5) into %"struct.std::_Rb_tree_node_base"** ^10
	movq (%r8), %rdx
	# LowerLoad(10071:3).2: (^10) into %"struct.std::_Rb_tree_node_base"* ^11
	movq (%rdx), %rsi
	# LowerStore(10072:3).9: mov %"struct.std::_Rb_tree_node_base"* ^11, (^9)
	movq %rsi, (%rax)
	# tt = Pointer, type = %"struct.std::pair.21"
	# LowerGetelementptr(10073:3): struct-type: %"struct.std::pair.21"* ^7 -> ^12, indices=0,1
	movq %rbx, %rdx
	addq $8, %rdx
	# LowerGetelementptr(10073:3): type of ^12 is %"struct.std::_Rb_tree_node_base"**
	# LowerLoad(10074:3).2: (^6) into %"struct.std::_Rb_tree_node_base"** ^13
	movq (%rcx), %rax
	# LowerLoad(10075:3).2: (^13) into %"struct.std::_Rb_tree_node_base"* ^14
	movq (%rax), %rbx
	# LowerStore(10076:3).9: mov %"struct.std::_Rb_tree_node_base"* ^14, (^12)
	movq %rbx, (%rdx)
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_
.p2align 4, 0x90
_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_:
	.___ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(56 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -40(%rbp)
	# LowerAlloca(10022:3): size = 8, type = %"struct.std::less"**, var = ^4
	leaq -8(%rbp), %rax
	# LowerAlloca(10023:3): size = 8, type = %"class.std::__cxx11::basic_string"**, var = ^5
	leaq -16(%rbp), %r8
	# LowerAlloca(10024:3): size = 8, type = %"class.std::__cxx11::basic_string"**, var = ^6
	leaq -24(%rbp), %rcx
	# LowerStore(10025:3).9: mov %"struct.std::less"* %rdi, (^4)
	movq %rdi, (%rax)
	# LowerStore(10026:3).9: mov %"class.std::__cxx11::basic_string"* %rsi, (^5)
	movq %rsi, (%r8)
	# LowerStore(10027:3).9: mov %"class.std::__cxx11::basic_string"* %rdx, (^6)
	movq %rdx, (%rcx)
	# LowerLoad(10028:3).2: (^4) into %"struct.std::less"* ^7
	movq (%rax), %rbx
	# LowerLoad(10029:3).2: (^5) into %"class.std::__cxx11::basic_string"* ^8
	movq (%r8), %rax
	# LowerLoad(10030:3).2: (^6) into %"class.std::__cxx11::basic_string"* ^9
	movq (%rcx), %rbx
	# Clobber %rax
	movq %rax, -32(%rbp)
	# SetupCalls(10031:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(10031:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_
	# SetupCalls(10031:3): move i1 result from %rax
	movb %al, %bl
	# Unclobber %rax
	movq -32(%rbp), %rax
	movb %bl, %al
	movq -40(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE6_M_endEv
.p2align 4, 0x90
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE6_M_endEv:
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE6_M_endEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(9995:3): size = 8, type = %"class.std::_Rb_tree"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(9996:3).9: mov %"class.std::_Rb_tree"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(9997:3).2: (^2) into %"class.std::_Rb_tree"* ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::_Rb_tree"
	# LowerGetelementptr(9998:3): struct-type: %"class.std::_Rb_tree"* ^3 -> ^4, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(9998:3): type of ^4 is %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Rb_tree_impl"*
	# LowerBasicConversion(9999:3): %"class.std::_Rb_tree"* ^4 -> i8* ^5
	movq %rax, %rbx
	# tt = Pointer, type = i8
	# LowerGetelementptr(10000:3): struct-type: i8* ^5 -> ^6, indices=8
	movq %rbx, %rax
	addq $8, %rax
	# LowerGetelementptr(10000:3): type of ^6 is i8*
	# LowerBasicConversion(10001:3): i8* ^6 -> %"struct.std::_Rb_tree_header"* ^7
	movq %rax, %rbx
	# tt = Pointer, type = %"struct.std::_Rb_tree_header"
	# LowerGetelementptr(10002:3): struct-type: %"struct.std::_Rb_tree_header"* ^7 -> ^8, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(10002:3): type of ^8 is %"struct.std::_Rb_tree_node_base"*
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEEC2EPSt18_Rb_tree_node_base
.p2align 4, 0x90
_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEEC2EPSt18_Rb_tree_node_base:
	.___ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEEC2EPSt18_Rb_tree_node_base__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(9968:3): size = 8, type = %"struct.std::_Rb_tree_iterator"**, var = ^3
	leaq -8(%rbp), %rcx
	# LowerAlloca(9969:3): size = 8, type = %"struct.std::_Rb_tree_node_base"**, var = ^4
	leaq -16(%rbp), %rax
	# LowerStore(9970:3).9: mov %"struct.std::_Rb_tree_iterator"* %rdi, (^3)
	movq %rdi, (%rcx)
	# LowerStore(9971:3).9: mov %"struct.std::_Rb_tree_node_base"* %rsi, (^4)
	movq %rsi, (%rax)
	# LowerLoad(9972:3).2: (^3) into %"struct.std::_Rb_tree_iterator"* ^5
	movq (%rcx), %rbx
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(9973:3): struct-type: %"struct.std::_Rb_tree_iterator"* ^5 -> ^6, indices=0,0
	movq %rbx, %rcx
	# LowerGetelementptr(9973:3): type of ^6 is %"struct.std::_Rb_tree_node_base"**
	# LowerLoad(9974:3).2: (^4) into %"struct.std::_Rb_tree_node_base"* ^7
	movq (%rax), %rbx
	# LowerStore(9975:3).9: mov %"struct.std::_Rb_tree_node_base"* ^7, (^6)
	movq %rbx, (%rcx)
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEEC2ERKSt17_Rb_tree_iteratorISI_E
.p2align 4, 0x90
_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEEC2ERKSt17_Rb_tree_iteratorISI_E:
	.___ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEEC2ERKSt17_Rb_tree_iteratorISI_E__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(40 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(9652:3): size = 8, type = %"struct.std::_Rb_tree_const_iterator"**, var = ^3
	leaq -8(%rbp), %rcx
	# LowerAlloca(9653:3): size = 8, type = %"struct.std::_Rb_tree_iterator"**, var = ^4
	leaq -16(%rbp), %rax
	# LowerStore(9654:3).9: mov %"struct.std::_Rb_tree_const_iterator"* %rdi, (^3)
	movq %rdi, (%rcx)
	# LowerStore(9655:3).9: mov %"struct.std::_Rb_tree_iterator"* %rsi, (^4)
	movq %rsi, (%rax)
	# LowerLoad(9656:3).2: (^3) into %"struct.std::_Rb_tree_const_iterator"* ^5
	movq (%rcx), %rbx
	# tt = Pointer, type = %"struct.std::_Rb_tree_const_iterator"
	# LowerGetelementptr(9657:3): struct-type: %"struct.std::_Rb_tree_const_iterator"* ^5 -> ^6, indices=0,0
	movq %rbx, %rcx
	# LowerGetelementptr(9657:3): type of ^6 is %"struct.std::_Rb_tree_node_base"**
	# LowerLoad(9658:3).2: (^4) into %"struct.std::_Rb_tree_iterator"* ^7
	movq (%rax), %rbx
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(9659:3): struct-type: %"struct.std::_Rb_tree_iterator"* ^7 -> ^8, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(9659:3): type of ^8 is %"struct.std::_Rb_tree_node_base"**
	# LowerLoad(9660:3).2: (^8) into %"struct.std::_Rb_tree_node_base"* ^9
	movq (%rax), %rbx
	# LowerStore(9661:3).9: mov %"struct.std::_Rb_tree_node_base"* ^9, (^6)
	movq %rbx, (%rcx)
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE17_M_insert_unique_IRKSI_NSO_11_Alloc_nodeEEESt17_Rb_tree_iteratorISI_ESt23_Rb_tree_const_iteratorISI_EOT_RT0_
.p2align 4, 0x90
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE17_M_insert_unique_IRKSI_NSO_11_Alloc_nodeEEESt17_Rb_tree_iteratorISI_ESt23_Rb_tree_const_iteratorISI_EOT_RT0_:
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE17_M_insert_unique_IRKSI_NSO_11_Alloc_nodeEEESt17_Rb_tree_iteratorISI_ESt23_Rb_tree_const_iteratorISI_EOT_RT0___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(272 + 0, 16)
	subq $272, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -136(%rbp)
	movq %r12, -176(%rbp)
	movq %r13, -160(%rbp)
	movq %r14, -168(%rbp)
	movq %r15, -128(%rbp)
	# LowerAlloca(9575:3): size = 8, type = %"struct.std::_Rb_tree_iterator"*, var = ^5
	# Fixing source-to-dest leaq -8(%rbp), -80(%rbp)
	leaq -8(%rbp), %r15
	movq %r15, -80(%rbp)
	# LowerAlloca(9576:3): size = 8, type = %"struct.std::_Rb_tree_const_iterator"*, var = ^6
	leaq -16(%rbp), %r8
	# LowerAlloca(9577:3): size = 8, type = %"class.std::_Rb_tree"**, var = ^7
	leaq -24(%rbp), %rbx
	# LowerAlloca(9578:3): size = 8, type = %"struct.std::pair"**, var = ^8
	# Fixing source-to-dest leaq -32(%rbp), -88(%rbp)
	leaq -32(%rbp), %r15
	movq %r15, -88(%rbp)
	# LowerAlloca(9579:3): size = 8, type = %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Alloc_node"**, var = ^9
	# Fixing source-to-dest leaq -40(%rbp), -96(%rbp)
	leaq -40(%rbp), %r15
	movq %r15, -96(%rbp)
	# LowerAlloca(9580:3): size = 16, type = %"struct.std::pair.21"*, var = ^10
	leaq -56(%rbp), %r13
	# LowerAlloca(9581:3): size = 8, type = %"struct.std::_Rb_tree_const_iterator"*, var = ^11
	leaq -64(%rbp), %r14
	# LowerAlloca(9582:3): size = 1, type = %"struct.std::_Select1st"*, var = ^12
	leaq -65(%rbp), %r12
	# tt = Pointer, type = %"struct.std::_Rb_tree_const_iterator"
	# LowerGetelementptr(9583:3): struct-type: %"struct.std::_Rb_tree_const_iterator"* ^6 -> ^13, indices=0,0
	movq %r8, %rax
	# LowerGetelementptr(9583:3): type of ^13 is %"struct.std::_Rb_tree_node_base"**
	# LowerStore(9584:3).9: mov %"struct.std::_Rb_tree_node_base"* %rsi, (^13)
	movq %rsi, (%rax)
	# LowerStore(9585:3).9: mov %"class.std::_Rb_tree"* %rdi, (^7)
	movq %rdi, (%rbx)
	# LowerStore(9586:3).9: mov %"struct.std::pair"* %rdx, (^8)
	movq -88(%rbp), %rax
	movq %rdx, (%rax)
	# LowerStore(9587:3).9: mov %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Alloc_node"* %rcx, (^9)
	movq -96(%rbp), %rax
	movq %rcx, (%rax)
	# LowerLoad(9588:3).2: (^7) into %"class.std::_Rb_tree"* ^14
	movq (%rbx), %r15
	# LowerBasicConversion(9589:3): %"struct.std::_Rb_tree_const_iterator"* ^11 -> i8* ^15
	movq %r14, %rax
	# LowerBasicConversion(9590:3): %"struct.std::_Rb_tree_const_iterator"* ^6 -> i8* ^16
	movq %r8, %rbx
	# Clobber %rax
	movq %rax, -104(%rbp)
	# SetupCalls(9591:3): move argument i8* align 8 ^15
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(9591:3): move argument i8* align 8 ^16
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(9591:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -104(%rbp), %rax
	# LowerLoad(9592:3).2: (^8) into %"struct.std::pair"* ^17
	movq -88(%rbp), %rax
	movq (%rax), %rbx
	# SetupCalls(9593:3): move argument %"struct.std::_Select1st"* nonnull dereferenceable(1) align 1 ^12
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(9593:3): move argument %"struct.std::pair"* nonnull dereferenceable(64) align 8 ^17
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEEclERKSI_
	# SetupCalls(9593:3): move %"class.std::__cxx11::basic_string"* result from %rax
	movq %rax, %r12
	# tt = Pointer, type = %"struct.std::_Rb_tree_const_iterator"
	# LowerGetelementptr(9594:3): struct-type: %"struct.std::_Rb_tree_const_iterator"* ^11 -> ^19, indices=0,0
	movq %r14, %rbx
	# LowerGetelementptr(9594:3): type of ^19 is %"struct.std::_Rb_tree_node_base"**
	# LowerLoad(9595:3).2: (^19) into %"struct.std::_Rb_tree_node_base"* ^20
	movq (%rbx), %rax
	# Clobber %rax
	movq %rax, -104(%rbp)
	# SetupCalls(9596:3): move argument %"class.std::_Rb_tree"* nonnull dereferenceable(48) align 8 ^14
	# Fixed movzx with identical source and destination widths
	movq %r15, %rdi
	# SetupCalls(9596:3): move argument %"struct.std::_Rb_tree_node_base"* ^20
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(9596:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^18
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdx
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7_
	# SetupCalls(9596:3): move 128-bit result from %rax and %rdx
	# Multireg move: <%hax %hdx> -> <%hbx %hr12>
	movq %rax, %rbx
	movq %rdx, %r12
	# Unclobber %rax
	movq -104(%rbp), %rax
	# LowerBasicConversion(9597:3): %"struct.std::pair.21"* ^10 -> {%"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"*}* ^22
	movq %r13, %rcx
	# tt = Pointer, type = {%"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"*}
	# LowerGetelementptr(9598:3): struct-type: {%"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"*}* ^22 -> ^23, indices=0,0
	movq %rcx, %rdx
	# LowerGetelementptr(9598:3): type of ^23 is %"struct.std::_Rb_tree_node_base"**
	# LowerExtractvalue(9600:3)
	# PaddedStructs({%"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"*} -> %"struct.std::_Rb_tree_node_base"*): move from pack ^21 ({%"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"*}) to ^46 (opaque), index = 0
	movq %rbx, %rax
	movq %rax, %rsi
	# LowerStore(9600:3).9: mov %"struct.std::_Rb_tree_node_base"* ^24, (^23)
	movq %rsi, (%rdx)
	# tt = Pointer, type = {%"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"*}
	# LowerGetelementptr(9601:3): struct-type: {%"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"*}* ^22 -> ^25, indices=0,1
	movq %rcx, %rdx
	addq $8, %rdx
	# LowerGetelementptr(9601:3): type of ^25 is %"struct.std::_Rb_tree_node_base"**
	# LowerExtractvalue(9603:3)
	# PaddedStructs({%"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"*} -> %"struct.std::_Rb_tree_node_base"*): move from pack ^21 ({%"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"*}) to ^47 (opaque), index = 1
	movq %r12, %rcx
	movq %rcx, %rax
	# LowerStore(9603:3).9: mov %"struct.std::_Rb_tree_node_base"* ^26, (^25)
	movq %rax, (%rdx)
	# tt = Pointer, type = %"struct.std::pair.21"
	# LowerGetelementptr(9604:3): struct-type: %"struct.std::pair.21"* ^10 -> ^27, indices=0,1
	movq %r13, %rax
	addq $8, %rax
	# LowerGetelementptr(9604:3): type of ^27 is %"struct.std::_Rb_tree_node_base"**
	# LowerLoad(9605:3).2: (^27) into %"struct.std::_Rb_tree_node_base"* ^28
	movq (%rax), %rbx
	# LowerIcmp(9606:3): %"struct.std::_Rb_tree_node_base"* ^28 vs. intlike 0
	cmpq $0, %rbx
	setne %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE17_M_insert_unique_IRKSI_NSO_11_Alloc_nodeEEESt17_Rb_tree_iteratorISI_ESt23_Rb_tree_const_iteratorISI_EOT_RT0___M155
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE17_M_insert_unique_IRKSI_NSO_11_Alloc_nodeEEESt17_Rb_tree_iteratorISI_ESt23_Rb_tree_const_iteratorISI_EOT_RT0___M210
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE17_M_insert_unique_IRKSI_NSO_11_Alloc_nodeEEESt17_Rb_tree_iteratorISI_ESt23_Rb_tree_const_iteratorISI_EOT_RT0___M155:
	# tt = Pointer, type = %"struct.std::pair.21"
	# LowerGetelementptr(9610:3): struct-type: %"struct.std::pair.21"* ^10 -> ^31, indices=0,0
	movq %r13, %rax
	# LowerGetelementptr(9610:3): type of ^31 is %"struct.std::_Rb_tree_node_base"**
	# LowerLoad(9611:3).2: (^31) into %"struct.std::_Rb_tree_node_base"* ^32
	movq (%rax), %rbx
	# tt = Pointer, type = %"struct.std::pair.21"
	# LowerGetelementptr(9612:3): struct-type: %"struct.std::pair.21"* ^10 -> ^33, indices=0,1
	movq %r13, %rax
	addq $8, %rax
	# LowerGetelementptr(9612:3): type of ^33 is %"struct.std::_Rb_tree_node_base"**
	# LowerLoad(9613:3).2: (^33) into %"struct.std::_Rb_tree_node_base"* ^34
	movq (%rax), %rcx
	# LowerLoad(9614:3).2: (^8) into %"struct.std::pair"* ^35
	movq -88(%rbp), %rdx
	movq (%rdx), %rax
	# LowerLoad(9615:3).2: (^9) into %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Alloc_node"* ^36
	movq -96(%rbp), %rdx
	movq (%rdx), %r9
	# Clobber %rcx
	movq %rcx, -112(%rbp)
	# Clobber %r9
	movq %r9, -120(%rbp)
	# Clobber %rax
	movq %rax, -104(%rbp)
	# SetupCalls(9616:3): move argument %"class.std::_Rb_tree"* nonnull dereferenceable(48) align 8 ^14
	# Fixed movzx with identical source and destination widths
	movq %r15, %rdi
	# SetupCalls(9616:3): move argument %"struct.std::_Rb_tree_node_base"* ^32
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(9616:3): move argument %"struct.std::_Rb_tree_node_base"* ^34
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdx
	# SetupCalls(9616:3): move argument %"struct.std::pair"* nonnull dereferenceable(64) align 8 ^35
	# Fixed movzx with identical source and destination widths
	movq %rax, %rcx
	# SetupCalls(9616:3): move argument %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Alloc_node"* nonnull dereferenceable(8) align 8 ^36
	# Fixed movzx with identical source and destination widths
	movq %r9, %r8
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE10_M_insert_IRKSI_NSO_11_Alloc_nodeEEESt17_Rb_tree_iteratorISI_EPSt18_Rb_tree_node_baseSW_OT_RT0_
	# SetupCalls(9616:3): move %"struct.std::_Rb_tree_node_base"* result from %rax
	movq %rax, %rbx
	# Unclobber %rax
	movq -104(%rbp), %rax
	# Unclobber %r9
	movq -120(%rbp), %r9
	# Unclobber %rcx
	movq -112(%rbp), %rcx
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(9617:3): struct-type: %"struct.std::_Rb_tree_iterator"* ^5 -> ^38, indices=0,0
	movq -80(%rbp), %rax
	# LowerGetelementptr(9617:3): type of ^38 is %"struct.std::_Rb_tree_node_base"**
	# LowerStore(9618:3).9: mov %"struct.std::_Rb_tree_node_base"* ^37, (^38)
	movq %rbx, (%rax)
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE17_M_insert_unique_IRKSI_NSO_11_Alloc_nodeEEESt17_Rb_tree_iteratorISI_ESt23_Rb_tree_const_iteratorISI_EOT_RT0___M240
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE17_M_insert_unique_IRKSI_NSO_11_Alloc_nodeEEESt17_Rb_tree_iteratorISI_ESt23_Rb_tree_const_iteratorISI_EOT_RT0___M210:
	# tt = Pointer, type = %"struct.std::pair.21"
	# LowerGetelementptr(9622:3): struct-type: %"struct.std::pair.21"* ^10 -> ^40, indices=0,0
	movq %r13, %rax
	# LowerGetelementptr(9622:3): type of ^40 is %"struct.std::_Rb_tree_node_base"**
	# LowerLoad(9623:3).2: (^40) into %"struct.std::_Rb_tree_node_base"* ^41
	movq (%rax), %rbx
	# SetupCalls(9624:3): move argument %"struct.std::_Rb_tree_iterator"* nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq -80(%rbp), %rdi
	# SetupCalls(9624:3): move argument %"struct.std::_Rb_tree_node_base"* ^41
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEEC2EPSt18_Rb_tree_node_base
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE17_M_insert_unique_IRKSI_NSO_11_Alloc_nodeEEESt17_Rb_tree_iteratorISI_ESt23_Rb_tree_const_iteratorISI_EOT_RT0___M240:
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(9628:3): struct-type: %"struct.std::_Rb_tree_iterator"* ^5 -> ^43, indices=0,0
	movq -80(%rbp), %rax
	# LowerGetelementptr(9628:3): type of ^43 is %"struct.std::_Rb_tree_node_base"**
	# LowerLoad(9629:3).2: (^43) into %"struct.std::_Rb_tree_node_base"* ^44
	movq (%rax), %rbx
	movq %rbx, %rax
	movq -128(%rbp), %r15
	movq -168(%rbp), %r14
	movq -160(%rbp), %r13
	movq -176(%rbp), %r12
	movq -136(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE11_Alloc_nodeC2ERSO_
.p2align 4, 0x90
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE11_Alloc_nodeC2ERSO_:
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE11_Alloc_nodeC2ERSO___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(9562:3): size = 8, type = %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Alloc_node"**, var = ^3
	leaq -8(%rbp), %rcx
	# LowerAlloca(9563:3): size = 8, type = %"class.std::_Rb_tree"**, var = ^4
	leaq -16(%rbp), %rax
	# LowerStore(9564:3).9: mov %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Alloc_node"* %rdi, (^3)
	movq %rdi, (%rcx)
	# LowerStore(9565:3).9: mov %"class.std::_Rb_tree"* %rsi, (^4)
	movq %rsi, (%rax)
	# LowerLoad(9566:3).2: (^3) into %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Alloc_node"* ^5
	movq (%rcx), %rbx
	# tt = Pointer, type = %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Alloc_node"
	# LowerGetelementptr(9567:3): struct-type: %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Alloc_node"* ^5 -> ^6, indices=0,0
	movq %rbx, %rcx
	# LowerGetelementptr(9567:3): type of ^6 is %"class.std::_Rb_tree"**
	# LowerLoad(9568:3).2: (^4) into %"class.std::_Rb_tree"* ^7
	movq (%rax), %rbx
	# LowerStore(9569:3).9: mov %"class.std::_Rb_tree"* ^7, (^6)
	movq %rbx, (%rcx)
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt15_Rb_tree_header8_M_resetEv
.p2align 4, 0x90
_ZNSt15_Rb_tree_header8_M_resetEv:
	.___ZNSt15_Rb_tree_header8_M_resetEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(9541:3): size = 8, type = %"struct.std::_Rb_tree_header"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(9542:3).9: mov %"struct.std::_Rb_tree_header"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(9543:3).2: (^2) into %"struct.std::_Rb_tree_header"* ^3
	movq (%rax), %rdx
	# tt = Pointer, type = %"struct.std::_Rb_tree_header"
	# LowerGetelementptr(9544:3): struct-type: %"struct.std::_Rb_tree_header"* ^3 -> ^4, indices=0,0
	movq %rdx, %rax
	# LowerGetelementptr(9544:3): type of ^4 is %"struct.std::_Rb_tree_node_base"*
	# tt = Pointer, type = %"struct.std::_Rb_tree_node_base"
	# LowerGetelementptr(9545:3): struct-type: %"struct.std::_Rb_tree_node_base"* ^4 -> ^5, indices=0,1
	movq %rax, %rbx
	addq $8, %rbx
	# LowerGetelementptr(9545:3): type of ^5 is %"struct.std::_Rb_tree_node_base"**
	# LowerStore(9546:3).3: mov $imm, (^5)
	movq $0, (%rbx)
	# tt = Pointer, type = %"struct.std::_Rb_tree_header"
	# LowerGetelementptr(9547:3): struct-type: %"struct.std::_Rb_tree_header"* ^3 -> ^6, indices=0,0
	movq %rdx, %rcx
	# LowerGetelementptr(9547:3): type of ^6 is %"struct.std::_Rb_tree_node_base"*
	# tt = Pointer, type = %"struct.std::_Rb_tree_header"
	# LowerGetelementptr(9548:3): struct-type: %"struct.std::_Rb_tree_header"* ^3 -> ^7, indices=0,0
	movq %rdx, %rbx
	# LowerGetelementptr(9548:3): type of ^7 is %"struct.std::_Rb_tree_node_base"*
	# tt = Pointer, type = %"struct.std::_Rb_tree_node_base"
	# LowerGetelementptr(9549:3): struct-type: %"struct.std::_Rb_tree_node_base"* ^7 -> ^8, indices=0,2
	movq %rbx, %rax
	addq $16, %rax
	# LowerGetelementptr(9549:3): type of ^8 is %"struct.std::_Rb_tree_node_base"**
	# LowerStore(9550:3).9: mov %"struct.std::_Rb_tree_header"* ^6, (^8)
	movq %rcx, (%rax)
	# tt = Pointer, type = %"struct.std::_Rb_tree_header"
	# LowerGetelementptr(9551:3): struct-type: %"struct.std::_Rb_tree_header"* ^3 -> ^9, indices=0,0
	movq %rdx, %rax
	# LowerGetelementptr(9551:3): type of ^9 is %"struct.std::_Rb_tree_node_base"*
	# tt = Pointer, type = %"struct.std::_Rb_tree_header"
	# LowerGetelementptr(9552:3): struct-type: %"struct.std::_Rb_tree_header"* ^3 -> ^10, indices=0,0
	movq %rdx, %rbx
	# LowerGetelementptr(9552:3): type of ^10 is %"struct.std::_Rb_tree_node_base"*
	# tt = Pointer, type = %"struct.std::_Rb_tree_node_base"
	# LowerGetelementptr(9553:3): struct-type: %"struct.std::_Rb_tree_node_base"* ^10 -> ^11, indices=0,3
	movq %rbx, %rcx
	addq $24, %rcx
	# LowerGetelementptr(9553:3): type of ^11 is %"struct.std::_Rb_tree_node_base"**
	# LowerStore(9554:3).9: mov %"struct.std::_Rb_tree_header"* ^9, (^11)
	movq %rax, (%rcx)
	# tt = Pointer, type = %"struct.std::_Rb_tree_header"
	# LowerGetelementptr(9555:3): struct-type: %"struct.std::_Rb_tree_header"* ^3 -> ^12, indices=0,1
	movq %rdx, %rax
	addq $32, %rax
	# LowerGetelementptr(9555:3): type of ^12 is i64*
	# LowerStore(9556:3).3: mov $imm, (^12)
	movq $0, (%rax)
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt15_Rb_tree_headerC2Ev
.p2align 4, 0x90
_ZNSt15_Rb_tree_headerC2Ev:
	.___ZNSt15_Rb_tree_headerC2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(9528:3): size = 8, type = %"struct.std::_Rb_tree_header"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(9529:3).9: mov %"struct.std::_Rb_tree_header"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(9530:3).2: (^2) into %"struct.std::_Rb_tree_header"* ^3
	movq (%rax), %rcx
	# tt = Pointer, type = %"struct.std::_Rb_tree_header"
	# LowerGetelementptr(9531:3): struct-type: %"struct.std::_Rb_tree_header"* ^3 -> ^4, indices=0,0
	movq %rcx, %rax
	# LowerGetelementptr(9531:3): type of ^4 is %"struct.std::_Rb_tree_node_base"*
	# tt = Pointer, type = %"struct.std::_Rb_tree_header"
	# LowerGetelementptr(9532:3): struct-type: %"struct.std::_Rb_tree_header"* ^3 -> ^5, indices=0,0
	movq %rcx, %rbx
	# LowerGetelementptr(9532:3): type of ^5 is %"struct.std::_Rb_tree_node_base"*
	# tt = Pointer, type = %"struct.std::_Rb_tree_node_base"
	# LowerGetelementptr(9533:3): struct-type: %"struct.std::_Rb_tree_node_base"* ^5 -> ^6, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(9533:3): type of ^6 is i32*
	# LowerStore(9534:3).3: mov $imm, (^6)
	movl $0, (%rax)
	# Clobber %rcx
	movq %rcx, -16(%rbp)
	# SetupCalls(9535:3): move argument %"struct.std::_Rb_tree_header"* nonnull dereferenceable(40) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	callq _ZNSt15_Rb_tree_header8_M_resetEv
	# Unclobber %rcx
	movq -16(%rbp), %rcx
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EEC2ERKSM_RKSN_
.p2align 4, 0x90
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EEC2ERKSM_RKSN_:
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EEC2ERKSM_RKSN___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(112 + 0, 16)
	subq $112, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -88(%rbp)
	movq %r12, -96(%rbp)
	movq %r13, -104(%rbp)
	# LowerAlloca(9385:3): size = 8, type = %"class.std::__new_allocator.11"**, var = ^4
	leaq -8(%rbp), %rbx
	# LowerAlloca(9386:3): size = 8, type = %"class.std::allocator.10"**, var = ^5
	leaq -16(%rbp), %r12
	# LowerAlloca(9387:3): size = 8, type = %"class.std::allocator.10"**, var = ^6
	leaq -24(%rbp), %r8
	# LowerAlloca(9388:3): size = 8, type = %"class.std::allocator.14"**, var = ^7
	leaq -32(%rbp), %rcx
	# LowerAlloca(9389:3): size = 8, type = %"class.std::_Rb_tree"**, var = ^8
	leaq -40(%rbp), %rax
	# LowerAlloca(9390:3): size = 8, type = %"struct.std::less"**, var = ^9
	leaq -48(%rbp), %r9
	# LowerAlloca(9391:3): size = 8, type = %"class.std::allocator.14"**, var = ^10
	leaq -56(%rbp), %r10
	# LowerAlloca(9392:3): size = 1, type = %"class.std::allocator.10"*, var = ^11
	leaq -57(%rbp), %r13
	# LowerStore(9393:3).9: mov %"class.std::_Rb_tree"* %rdi, (^8)
	movq %rdi, (%rax)
	# LowerStore(9394:3).9: mov %"struct.std::less"* %rsi, (^9)
	movq %rsi, (%r9)
	# LowerStore(9395:3).9: mov %"class.std::allocator.14"* %rdx, (^10)
	movq %rdx, (%r10)
	# LowerLoad(9396:3).2: (^8) into %"class.std::_Rb_tree"* ^12
	movq (%rax), %rdx
	# tt = Pointer, type = %"class.std::_Rb_tree"
	# LowerGetelementptr(9397:3): struct-type: %"class.std::_Rb_tree"* ^12 -> ^13, indices=0,0
	movq %rdx, %rax
	# LowerGetelementptr(9397:3): type of ^13 is %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Rb_tree_impl"*
	# LowerLoad(9398:3).2: (^9) into %"struct.std::less"* ^14
	movq (%r9), %rdx
	# LowerLoad(9399:3).2: (^10) into %"class.std::allocator.14"* ^15
	movq (%r10), %rsi
	# LowerStore(9400:3).9: mov %"class.std::allocator.10"* ^11, (^6)
	movq %r13, (%r8)
	# LowerStore(9401:3).9: mov %"class.std::allocator.14"* ^15, (^7)
	movq %rsi, (%rcx)
	# LowerLoad(9402:3).2: (^6) into %"class.std::allocator.10"* ^16
	movq (%r8), %rcx
	# LowerBasicConversion(9403:3): %"class.std::allocator.10"* ^16 -> %"class.std::__new_allocator.11"* ^17
	movq %rcx, %rsi
	# LowerStore(9404:3).9: mov %"class.std::__new_allocator.11"* ^17, (^4)
	movq %rsi, (%rbx)
	# LowerLoad(9405:3).2: (^4) into %"class.std::__new_allocator.11"* ^18
	movq (%rbx), %rcx
	# Clobber %rdx
	movq %rdx, -72(%rbp)
	# Clobber %rax
	movq %rax, -80(%rbp)
	# SetupCalls(9406:3): move argument %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Rb_tree_impl"* nonnull dereferenceable(48) align 8 ^13
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(9406:3): move argument %"struct.std::less"* nonnull dereferenceable(1) align 1 ^14
	# Fixed movzx with identical source and destination widths
	movq %rdx, %rsi
	# SetupCalls(9406:3): move argument %"class.std::allocator.10"* nonnull dereferenceable(1) align 1 ^11
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdx
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE13_Rb_tree_implISM_Lb1EEC2ERKSM_OSaISt13_Rb_tree_nodeISI_EE
	# Unclobber %rax
	movq -80(%rbp), %rax
	# Unclobber %rdx
	movq -72(%rbp), %rdx
	# LowerStore(9407:3).9: mov %"class.std::allocator.10"* ^11, (^5)
	movq %r13, (%r12)
	# LowerLoad(9408:3).2: (^5) into %"class.std::allocator.10"* ^19
	movq (%r12), %rbx
	# LowerBasicConversion(9409:3): %"class.std::allocator.10"* ^19 -> %"class.std::__new_allocator.11"* ^20
	movq %rbx, %rax
	# Clobber %rax
	movq %rax, -80(%rbp)
	# SetupCalls(9410:3): move argument %"class.std::__new_allocator.11"* nonnull dereferenceable(1) align 1 ^20
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEEED2Ev
	# Unclobber %rax
	movq -80(%rbp), %rax
	movq -104(%rbp), %r13
	movq -96(%rbp), %r12
	movq -88(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10filesystem7__cxx118__detail17__effective_rangeIPKcEEDaRKT_
.p2align 4, 0x90
_ZNSt10filesystem7__cxx118__detail17__effective_rangeIPKcEEDaRKT_:
	.___ZNSt10filesystem7__cxx118__detail17__effective_rangeIPKcEEDaRKT___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(48 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -40(%rbp)
	# LowerAlloca(9364:3): size = 16, type = %"class.std::basic_string_view"*, var = ^2
	leaq -16(%rbp), %rbx
	# LowerAlloca(9365:3): size = 8, type = i8***, var = ^3
	leaq -24(%rbp), %rcx
	# LowerStore(9366:3).9: mov i8** %rdi, (^3)
	movq %rdi, (%rcx)
	# LowerLoad(9367:3).2: (^3) into i8** ^4
	movq (%rcx), %rax
	# LowerLoad(9368:3).2: (^4) into i8* ^5
	movq (%rax), %rcx
	# Clobber %rcx
	movq %rcx, -32(%rbp)
	# SetupCalls(9369:3): move argument %"class.std::basic_string_view"* nonnull dereferenceable(16) align 8 ^2
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(9369:3): move argument i8* ^5
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	callq _ZNSt17basic_string_viewIcSt11char_traitsIcEEC2EPKc
	# Unclobber %rcx
	movq -32(%rbp), %rcx
	# LowerBasicConversion(9370:3): %"class.std::basic_string_view"* ^2 -> {i64, i8*}* ^6
	movq %rbx, %rcx
	# LowerLoad(9371:3).2: (^6) into {i64, i8*} ^7
	# FinishMultireg: mov (%reg), <%pack...>
	movq (%rcx), %rax
	movq 8(%rcx), %rbx
	# LowerRet: two-register return
	movq %rax, %rax
	movq %rbx, %rdx
	movq -40(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2ERKS7_
.p2align 4, 0x90
_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2ERKS7_:
	.___ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2ERKS7___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(40 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(9516:3): size = 8, type = %"struct.std::_Rb_tree_key_compare"**, var = ^3
	leaq -8(%rbp), %rbx
	# LowerAlloca(9517:3): size = 8, type = %"struct.std::less"**, var = ^4
	leaq -16(%rbp), %rax
	# LowerStore(9518:3).9: mov %"struct.std::_Rb_tree_key_compare"* %rdi, (^3)
	movq %rdi, (%rbx)
	# LowerStore(9519:3).9: mov %"struct.std::less"* %rsi, (^4)
	movq %rsi, (%rax)
	# LowerLoad(9520:3).2: (^3) into %"struct.std::_Rb_tree_key_compare"* ^5
	movq (%rbx), %rcx
	# tt = Pointer, type = %"struct.std::_Rb_tree_key_compare"
	# LowerGetelementptr(9521:3): struct-type: %"struct.std::_Rb_tree_key_compare"* ^5 -> ^6, indices=0,0
	movq %rcx, %rbx
	# LowerGetelementptr(9521:3): type of ^6 is %"struct.std::less"*
	# LowerLoad(9522:3).2: (^4) into %"struct.std::less"* ^7
	movq (%rax), %rbx
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10filesystem7__cxx114pathC2IPKcS1_EERKT_NS1_6formatE
.p2align 4, 0x90
_ZNSt10filesystem7__cxx114pathC2IPKcS1_EERKT_NS1_6formatE:
	.___ZNSt10filesystem7__cxx114pathC2IPKcS1_EERKT_NS1_6formatE__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(336 + 0, 16)
	subq $336, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -176(%rbp)
	movq %r12, -168(%rbp)
	movq %r13, -192(%rbp)
	movq %r14, -216(%rbp)
	movq %r15, -152(%rbp)
	# LowerAlloca(9310:3): size = 8, type = %"class.std::__new_allocator.1"**, var = ^4
	# Fixing source-to-dest leaq -8(%rbp), -128(%rbp)
	leaq -8(%rbp), %r15
	movq %r15, -128(%rbp)
	# LowerAlloca(9311:3): size = 8, type = %"class.std::allocator.0"**, var = ^5
	# Fixing source-to-dest leaq -16(%rbp), -104(%rbp)
	leaq -16(%rbp), %r15
	movq %r15, -104(%rbp)
	# LowerAlloca(9312:3): size = 8, type = %"class.std::allocator.0"**, var = ^6
	leaq -24(%rbp), %r12
	# LowerAlloca(9313:3): size = 8, type = %"class.std::filesystem::__cxx11::path"**, var = ^7
	leaq -32(%rbp), %rbx
	# LowerAlloca(9314:3): size = 8, type = i8***, var = ^8
	leaq -40(%rbp), %rax
	# LowerAlloca(9315:3): size = 1, type = i8*, var = ^9
	leaq -41(%rbp), %r8
	# LowerAlloca(9316:3): size = 16, type = %"class.std::basic_string_view"*, var = ^10
	# Fixing source-to-dest leaq -64(%rbp), -120(%rbp)
	leaq -64(%rbp), %r15
	movq %r15, -120(%rbp)
	# LowerAlloca(9317:3): size = 16, type = %"class.std::basic_string_view"*, var = ^11
	leaq -80(%rbp), %r13
	# LowerAlloca(9318:3): size = 1, type = %"class.std::allocator.0"*, var = ^12
	# Fixing source-to-dest leaq -81(%rbp), -112(%rbp)
	leaq -81(%rbp), %r15
	movq %r15, -112(%rbp)
	# LowerStore(9319:3).9: mov %"class.std::filesystem::__cxx11::path"* %rdi, (^7)
	movq %rdi, (%rbx)
	# LowerStore(9320:3).9: mov i8** %rsi, (^8)
	movq %rsi, (%rax)
	# LowerStore(9321:3).9: mov i8 %dl, (^9)
	movb %dl, (%r8)
	# LowerLoad(9322:3).2: (^7) into %"class.std::filesystem::__cxx11::path"* ^13
	# Fixing source-to-dest movq (%rbx), -96(%rbp)
	movq (%rbx), %r15
	movq %r15, -96(%rbp)
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path"
	# LowerGetelementptr(9323:3): struct-type: %"class.std::filesystem::__cxx11::path"* ^13 -> ^14, indices=0,0
	movq -96(%rbp), %r14
	# LowerGetelementptr(9323:3): type of ^14 is %"class.std::__cxx11::basic_string"*
	# LowerLoad(9324:3).2: (^8) into i8** ^15
	movq (%rax), %rbx
	# SetupCalls(9325:3): move argument i8** nonnull dereferenceable(8) align 8 ^15
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt10filesystem7__cxx118__detail17__effective_rangeIPKcEEDaRKT_
	# SetupCalls(9325:3): move 128-bit result from %rax and %rdx
	# Multireg move: <%hax %hdx> -> <%hbx %hr15>
	movq %rax, %rbx
	movq %rdx, %r15
	# LowerBasicConversion(9326:3): %"class.std::basic_string_view"* ^11 -> {i64, i8*}* ^17
	movq %r13, %rcx
	# tt = Pointer, type = {i64, i8*}
	# LowerGetelementptr(9327:3): struct-type: {i64, i8*}* ^17 -> ^18, indices=0,0
	movq %rcx, %rdx
	# LowerGetelementptr(9327:3): type of ^18 is i64*
	# LowerExtractvalue(9329:3)
	# PaddedStructs({i64, i8*} -> i64): move from pack ^16 ({i64, i8*}) to ^41 (opaque), index = 0
	movq %rbx, %rsi
	movq %rsi, %rax
	# LowerStore(9329:3).9: mov i64 ^19, (^18)
	movq %rax, (%rdx)
	# tt = Pointer, type = {i64, i8*}
	# LowerGetelementptr(9330:3): struct-type: {i64, i8*}* ^17 -> ^20, indices=0,1
	movq %rcx, %rax
	addq $8, %rax
	# LowerGetelementptr(9330:3): type of ^20 is i8**
	# LowerExtractvalue(9332:3)
	# PaddedStructs({i64, i8*} -> i8*): move from pack ^16 ({i64, i8*}) to ^42 (opaque), index = 1
	movq %r15, %rcx
	movq %rcx, %rbx
	# LowerStore(9332:3).9: mov i8* ^21, (^20)
	movq %rbx, (%rax)
	# LowerBasicConversion(9333:3): %"class.std::basic_string_view"* ^11 -> {i64, i8*}* ^22
	movq %r13, %rax
	# tt = Pointer, type = {i64, i8*}
	# LowerGetelementptr(9334:3): struct-type: {i64, i8*}* ^22 -> ^23, indices=0,0
	movq %rax, %rbx
	# LowerGetelementptr(9334:3): type of ^23 is i64*
	# LowerLoad(9335:3).2: (^23) into i64 ^24
	movq (%rbx), %rcx
	# tt = Pointer, type = {i64, i8*}
	# LowerGetelementptr(9336:3): struct-type: {i64, i8*}* ^22 -> ^25, indices=0,1
	movq %rax, %rbx
	addq $8, %rbx
	# LowerGetelementptr(9336:3): type of ^25 is i8**
	# LowerLoad(9337:3).2: (^25) into i8* ^26
	movq (%rbx), %rax
	# Clobber %rcx
	movq %rcx, -136(%rbp)
	# Clobber %rax
	movq %rax, -144(%rbp)
	# SetupCalls(9338:3): move argument i64 ^24
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(9338:3): move argument i8* ^26
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNSt10filesystem7__cxx114path10_S_convertISt17basic_string_viewIcSt11char_traitsIcEEEEDaT_
	# SetupCalls(9338:3): move 128-bit result from %rax and %rdx
	# Multireg move: <%hax %hdx> -> <%hbx %hr13>
	movq %rax, %rbx
	movq %rdx, %r13
	# Unclobber %rax
	movq -144(%rbp), %rax
	# Unclobber %rcx
	movq -136(%rbp), %rcx
	# LowerBasicConversion(9339:3): %"class.std::basic_string_view"* ^10 -> {i64, i8*}* ^28
	movq -120(%rbp), %rcx
	# tt = Pointer, type = {i64, i8*}
	# LowerGetelementptr(9340:3): struct-type: {i64, i8*}* ^28 -> ^29, indices=0,0
	movq %rcx, %rdx
	# LowerGetelementptr(9340:3): type of ^29 is i64*
	# LowerExtractvalue(9342:3)
	# PaddedStructs({i64, i8*} -> i64): move from pack ^27 ({i64, i8*}) to ^43 (opaque), index = 0
	movq %rbx, %rsi
	movq %rsi, %rax
	# LowerStore(9342:3).9: mov i64 ^30, (^29)
	movq %rax, (%rdx)
	# tt = Pointer, type = {i64, i8*}
	# LowerGetelementptr(9343:3): struct-type: {i64, i8*}* ^28 -> ^31, indices=0,1
	movq %rcx, %rax
	addq $8, %rax
	# LowerGetelementptr(9343:3): type of ^31 is i8**
	# LowerExtractvalue(9345:3)
	# PaddedStructs({i64, i8*} -> i8*): move from pack ^27 ({i64, i8*}) to ^44 (opaque), index = 1
	movq %r13, %rcx
	movq %rcx, %rbx
	# LowerStore(9345:3).9: mov i8* ^32, (^31)
	movq %rbx, (%rax)
	# LowerStore(9346:3).9: mov %"class.std::allocator.0"* ^12, (^6)
	# Fixing source-to-dest movq -112(%rbp), (%r12)
	movq -112(%rbp), %r15
	movq %r15, (%r12)
	# LowerLoad(9347:3).2: (^6) into %"class.std::allocator.0"* ^33
	movq (%r12), %rax
	# LowerBasicConversion(9348:3): %"class.std::allocator.0"* ^33 -> %"class.std::__new_allocator.1"* ^34
	movq %rax, %rbx
	# LowerStore(9349:3).9: mov %"class.std::__new_allocator.1"* ^34, (^4)
	movq -128(%rbp), %rax
	movq %rbx, (%rax)
	# LowerLoad(9350:3).2: (^4) into %"class.std::__new_allocator.1"* ^35
	movq -128(%rbp), %rbx
	movq (%rbx), %rax
	# SetupCalls(9351:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^14
	# Fixed movzx with identical source and destination widths
	movq %r14, %rdi
	# SetupCalls(9351:3): move argument %"class.std::basic_string_view"* nonnull dereferenceable(16) align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq -120(%rbp), %rsi
	# SetupCalls(9351:3): move argument %"class.std::allocator.0"* nonnull dereferenceable(1) align 1 ^12
	# Fixed movzx with identical source and destination widths
	movq -112(%rbp), %rdx
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ISt17basic_string_viewIcS2_EvEERKT_RKS3_
	# LowerStore(9352:3).9: mov %"class.std::allocator.0"* ^12, (^5)
	movq -104(%rbp), %rax
	# Fixing source-to-dest movq -112(%rbp), (%rax)
	movq -112(%rbp), %r15
	movq %r15, (%rax)
	# LowerLoad(9353:3).2: (^5) into %"class.std::allocator.0"* ^36
	movq -104(%rbp), %rbx
	movq (%rbx), %rax
	# LowerBasicConversion(9354:3): %"class.std::allocator.0"* ^36 -> %"class.std::__new_allocator.1"* ^37
	movq %rax, %rbx
	# SetupCalls(9355:3): move argument %"class.std::__new_allocator.1"* nonnull dereferenceable(1) align 1 ^37
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt15__new_allocatorIcED2Ev
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path"
	# LowerGetelementptr(9356:3): struct-type: %"class.std::filesystem::__cxx11::path"* ^13 -> ^38, indices=0,1
	movq -96(%rbp), %rax
	addq $32, %rax
	# LowerGetelementptr(9356:3): type of ^38 is %"struct.std::filesystem::__cxx11::path::_List"*
	# Clobber %rax
	movq %rax, -144(%rbp)
	# SetupCalls(9357:3): move argument %"struct.std::filesystem::__cxx11::path::_List"* nonnull dereferenceable(8) align 8 ^38
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt10filesystem7__cxx114path5_ListC1Ev@PLT
	# Unclobber %rax
	movq -144(%rbp), %rax
	# SetupCalls(9358:3): move argument %"class.std::filesystem::__cxx11::path"* nonnull dereferenceable(40) align 8 ^13
	# Fixed movzx with identical source and destination widths
	movq -96(%rbp), %rdi
	callq _ZNSt10filesystem7__cxx114path14_M_split_cmptsEv@PLT
	movq -152(%rbp), %r15
	movq -216(%rbp), %r14
	movq -192(%rbp), %r13
	movq -168(%rbp), %r12
	movq -176(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EC2ESB_
.p2align 4, 0x90
_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EC2ESB_:
	.___ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EC2ESB___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(9300:3): size = 1, type = %class.anon*, var = ^2
	leaq -1(%rbp), %rax
	# LowerAlloca(9301:3): size = 8, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"**, var = ^3
	leaq -16(%rbp), %rbx
	# LowerStore(9302:3).9: mov %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %rdi, (^3)
	movq %rdi, (%rbx)
	# LowerLoad(9303:3).2: (^3) into %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* ^4
	movq (%rbx), %rax
	# tt = Pointer, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"
	# LowerGetelementptr(9304:3): struct-type: %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* ^4 -> ^5, indices=0,0
	movq %rax, %rbx
	# LowerGetelementptr(9304:3): type of ^5 is %class.anon*
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZN9__gnu_cxx5__ops14_Val_comp_iterIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EC2EONS0_15_Iter_comp_iterISB_EE
.p2align 4, 0x90
_ZN9__gnu_cxx5__ops14_Val_comp_iterIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EC2EONS0_15_Iter_comp_iterISB_EE:
	.___ZN9__gnu_cxx5__ops14_Val_comp_iterIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EC2EONS0_15_Iter_comp_iterISB_EE__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(40 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(9287:3): size = 8, type = %"struct.__gnu_cxx::__ops::_Val_comp_iter"**, var = ^3
	leaq -8(%rbp), %rbx
	# LowerAlloca(9288:3): size = 8, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"**, var = ^4
	leaq -16(%rbp), %rax
	# LowerStore(9289:3).9: mov %"struct.__gnu_cxx::__ops::_Val_comp_iter"* %rdi, (^3)
	movq %rdi, (%rbx)
	# LowerStore(9290:3).9: mov %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %rsi, (^4)
	movq %rsi, (%rax)
	# LowerLoad(9291:3).2: (^3) into %"struct.__gnu_cxx::__ops::_Val_comp_iter"* ^5
	movq (%rbx), %rcx
	# tt = Pointer, type = %"struct.__gnu_cxx::__ops::_Val_comp_iter"
	# LowerGetelementptr(9292:3): struct-type: %"struct.__gnu_cxx::__ops::_Val_comp_iter"* ^5 -> ^6, indices=0,0
	movq %rcx, %rbx
	# LowerGetelementptr(9292:3): type of ^6 is %class.anon*
	# LowerLoad(9293:3).2: (^4) into %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* ^7
	movq (%rax), %rbx
	# tt = Pointer, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"
	# LowerGetelementptr(9294:3): struct-type: %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* ^7 -> ^8, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(9294:3): type of ^8 is %class.anon*
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZN9__gnu_cxx5__ops14_Val_comp_iterIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EclI6LsItemNS_17__normal_iteratorIPSE_S2_ISE_SaISE_EEEEEEbRT_T0_
.p2align 4, 0x90
_ZN9__gnu_cxx5__ops14_Val_comp_iterIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EclI6LsItemNS_17__normal_iteratorIPSE_S2_ISE_SaISE_EEEEEEbRT_T0_:
	.___ZN9__gnu_cxx5__ops14_Val_comp_iterIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EclI6LsItemNS_17__normal_iteratorIPSE_S2_ISE_SaISE_EEEEEEbRT_T0___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(64 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	movq %r12, -40(%rbp)
	movq %r13, -48(%rbp)
	# LowerAlloca(9270:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^4
	leaq -8(%rbp), %rbx
	# LowerAlloca(9271:3): size = 8, type = %"struct.__gnu_cxx::__ops::_Val_comp_iter"**, var = ^5
	leaq -16(%rbp), %r8
	# LowerAlloca(9272:3): size = 8, type = %struct.LsItem**, var = ^6
	leaq -24(%rbp), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(9273:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^4 -> ^7, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(9273:3): type of ^7 is %struct.LsItem**
	# LowerStore(9274:3).9: mov %struct.LsItem* %rdx, (^7)
	movq %rdx, (%rax)
	# LowerStore(9275:3).9: mov %"struct.__gnu_cxx::__ops::_Val_comp_iter"* %rdi, (^5)
	movq %rdi, (%r8)
	# LowerStore(9276:3).9: mov %struct.LsItem* %rsi, (^6)
	movq %rsi, (%rcx)
	# LowerLoad(9277:3).2: (^5) into %"struct.__gnu_cxx::__ops::_Val_comp_iter"* ^8
	movq (%r8), %rax
	# tt = Pointer, type = %"struct.__gnu_cxx::__ops::_Val_comp_iter"
	# LowerGetelementptr(9278:3): struct-type: %"struct.__gnu_cxx::__ops::_Val_comp_iter"* ^8 -> ^9, indices=0,0
	movq %rax, %r12
	# LowerGetelementptr(9278:3): type of ^9 is %class.anon*
	# LowerLoad(9279:3).2: (^6) into %struct.LsItem* ^10
	movq (%rcx), %r13
	# SetupCalls(9280:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEdeEv
	# SetupCalls(9280:3): move %struct.LsItem* result from %rax
	movq %rax, %rbx
	# SetupCalls(9281:3): move argument %class.anon* nonnull dereferenceable(1) align 1 ^9
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(9281:3): move argument %struct.LsItem* nonnull dereferenceable(33) align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq %r13, %rsi
	# SetupCalls(9281:3): move argument %struct.LsItem* nonnull dereferenceable(33) align 8 ^11
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdx
	callq _ZZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEENK3$_0clERK6LsItemSB_
	# SetupCalls(9281:3): move i1 result from %rax
	movb %al, %bl
	movb %bl, %al
	movq -48(%rbp), %r13
	movq -40(%rbp), %r12
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIP6LsItemS4_EET0_T_S6_S5_
.p2align 4, 0x90
_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIP6LsItemS4_EET0_T_S6_S5_:
	.___ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIP6LsItemS4_EET0_T_S6_S5___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(112 + 0, 16)
	subq $112, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -48(%rbp)
	movq %r12, -72(%rbp)
	movq %r13, -64(%rbp)
	movq %r14, -56(%rbp)
	# LowerAlloca(9226:3): size = 8, type = %struct.LsItem**, var = ^4
	leaq -8(%rbp), %rbx
	# LowerAlloca(9227:3): size = 8, type = %struct.LsItem**, var = ^5
	leaq -16(%rbp), %r14
	# LowerAlloca(9228:3): size = 8, type = %struct.LsItem**, var = ^6
	leaq -24(%rbp), %r13
	# LowerAlloca(9229:3): size = 8, type = i64*, var = ^7
	leaq -32(%rbp), %r12
	# LowerStore(9230:3).9: mov %struct.LsItem* %rdi, (^4)
	movq %rdi, (%rbx)
	# LowerStore(9231:3).9: mov %struct.LsItem* %rsi, (^5)
	movq %rsi, (%r14)
	# LowerStore(9232:3).9: mov %struct.LsItem* %rdx, (^6)
	movq %rdx, (%r13)
	# LowerLoad(9233:3).2: (^5) into %struct.LsItem* ^8
	movq (%r14), %rax
	# LowerLoad(9234:3).2: (^4) into %struct.LsItem* ^9
	movq (%rbx), %rcx
	# LowerBasicConversion(9235:3): %struct.LsItem* ^8 -> i64 ^10
	movq %rax, %rbx
	# LowerBasicConversion(9236:3): %struct.LsItem* ^9 -> i64 ^11
	movq %rcx, %rdx
	# LowerMath(9237:3): ^10, ^11 into i64 ^12
	movq %rbx, %rax
	subq %rdx, %rax
	# LowerSdiv(9238:3): ^12, 40 into i64 ^13
	movq %rax, %rbx
	movq $0, %rdx
	movq %rbx, %rax
	movq $40, %rbx
	idivq %rbx
	movq %rax, %rbx
	# LowerStore(9239:3).9: mov i64 ^13, (^7)
	movq %rbx, (%r12)
	.___ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIP6LsItemS4_EET0_T_S6_S5___M39:
	# LowerLoad(9243:3).2: (^7) into i64 ^15
	movq (%r12), %rax
	# LowerIcmp(9244:3): i64 ^15 vs. intlike 0
	cmpq $0, %rax
	setg %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIP6LsItemS4_EET0_T_S6_S5___M46
	jmp .___ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIP6LsItemS4_EET0_T_S6_S5___M98
	.___ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIP6LsItemS4_EET0_T_S6_S5___M46:
	# LowerLoad(9248:3).2: (^5) into %struct.LsItem* ^18
	movq (%r14), %rax
	# tt = Pointer, type = %struct.LsItem
	# LowerGetelementptr(9249:3): struct-type: %struct.LsItem* ^18 -> ^19, indices=-1
	movq %rax, %rbx
	addq $-40, %rbx
	# LowerGetelementptr(9249:3): type of ^19 is %struct.LsItem*
	# LowerStore(9250:3).9: mov %struct.LsItem* ^19, (^5)
	movq %rbx, (%r14)
	# LowerLoad(9251:3).2: (^6) into %struct.LsItem* ^20
	movq (%r13), %rax
	# tt = Pointer, type = %struct.LsItem
	# LowerGetelementptr(9252:3): struct-type: %struct.LsItem* ^20 -> ^21, indices=-1
	movq %rax, %rcx
	addq $-40, %rcx
	# LowerGetelementptr(9252:3): type of ^21 is %struct.LsItem*
	# LowerStore(9253:3).9: mov %struct.LsItem* ^21, (^6)
	movq %rcx, (%r13)
	# Clobber %rcx
	movq %rcx, -40(%rbp)
	# SetupCalls(9254:3): move argument %struct.LsItem* nonnull dereferenceable(33) align 8 ^21
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(9254:3): move argument %struct.LsItem* nonnull dereferenceable(33) align 8 ^19
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZN6LsItemaSEOS_
	# SetupCalls(9254:3): move %struct.LsItem* result from %rax
	movq %rax, %rax
	# Unclobber %rcx
	movq -40(%rbp), %rcx
	# LowerLoad(9258:3).2: (^7) into i64 ^24
	movq (%r12), %rax
	# LowerMath(9259:3): ^24, -1 into i64 ^25
	movq %rax, %rbx
	addq $-1, %rbx
	# LowerStore(9260:3).9: mov i64 ^25, (^7)
	movq %rbx, (%r12)
	jmp .___ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIP6LsItemS4_EET0_T_S6_S5___M39
	.___ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIP6LsItemS4_EET0_T_S6_S5___M98:
	# LowerLoad(9264:3).2: (^6) into %struct.LsItem* ^27
	movq (%r13), %rax
	movq -56(%rbp), %r14
	movq -64(%rbp), %r13
	movq -72(%rbp), %r12
	movq -48(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt23__copy_move_backward_a2ILb1EP6LsItemS1_ET1_T0_S3_S2_
.p2align 4, 0x90
_ZSt23__copy_move_backward_a2ILb1EP6LsItemS1_ET1_T0_S3_S2_:
	.___ZSt23__copy_move_backward_a2ILb1EP6LsItemS1_ET1_T0_S3_S2___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(56 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -48(%rbp)
	# LowerAlloca(9211:3): size = 8, type = %struct.LsItem**, var = ^4
	leaq -8(%rbp), %rax
	# LowerAlloca(9212:3): size = 8, type = %struct.LsItem**, var = ^5
	leaq -16(%rbp), %r8
	# LowerAlloca(9213:3): size = 8, type = %struct.LsItem**, var = ^6
	leaq -24(%rbp), %rcx
	# LowerStore(9214:3).9: mov %struct.LsItem* %rdi, (^4)
	movq %rdi, (%rax)
	# LowerStore(9215:3).9: mov %struct.LsItem* %rsi, (^5)
	movq %rsi, (%r8)
	# LowerStore(9216:3).9: mov %struct.LsItem* %rdx, (^6)
	movq %rdx, (%rcx)
	# LowerLoad(9217:3).2: (^4) into %struct.LsItem* ^7
	movq (%rax), %rbx
	# LowerLoad(9218:3).2: (^5) into %struct.LsItem* ^8
	movq (%r8), %rax
	# LowerLoad(9219:3).2: (^6) into %struct.LsItem* ^9
	movq (%rcx), %r8
	# Clobber %r8
	movq %r8, -32(%rbp)
	# Clobber %rax
	movq %rax, -40(%rbp)
	# SetupCalls(9220:3): move argument %struct.LsItem* ^7
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(9220:3): move argument %struct.LsItem* ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(9220:3): move argument %struct.LsItem* ^9
	# Fixed movzx with identical source and destination widths
	movq %r8, %rdx
	callq _ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIP6LsItemS4_EET0_T_S6_S5_
	# SetupCalls(9220:3): move %struct.LsItem* result from %rax
	movq %rax, %rbx
	# Unclobber %rax
	movq -40(%rbp), %rax
	# Unclobber %r8
	movq -32(%rbp), %r8
	movq %rbx, %rax
	movq -48(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt12__niter_baseIP6LsItemSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE
.p2align 4, 0x90
_ZSt12__niter_baseIP6LsItemSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE:
	.___ZSt12__niter_baseIP6LsItemSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(9201:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^2
	leaq -8(%rbp), %rax
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(9202:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^2 -> ^3, indices=0,0
	movq %rax, %rbx
	# LowerGetelementptr(9202:3): type of ^3 is %struct.LsItem**
	# LowerStore(9203:3).9: mov %struct.LsItem* %rdi, (^3)
	movq %rdi, (%rbx)
	# Clobber %rax
	movq %rax, -16(%rbp)
	# SetupCalls(9204:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^2
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEE4baseEv
	# SetupCalls(9204:3): move %struct.LsItem** result from %rax
	movq %rax, %rbx
	# Unclobber %rax
	movq -16(%rbp), %rax
	# LowerLoad(9205:3).2: (^4) into %struct.LsItem* ^5
	movq (%rbx), %rax
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt23__copy_move_backward_a1ILb1EP6LsItemS1_ET1_T0_S3_S2_
.p2align 4, 0x90
_ZSt23__copy_move_backward_a1ILb1EP6LsItemS1_ET1_T0_S3_S2_:
	.___ZSt23__copy_move_backward_a1ILb1EP6LsItemS1_ET1_T0_S3_S2___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(56 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -48(%rbp)
	# LowerAlloca(9186:3): size = 8, type = %struct.LsItem**, var = ^4
	leaq -8(%rbp), %rax
	# LowerAlloca(9187:3): size = 8, type = %struct.LsItem**, var = ^5
	leaq -16(%rbp), %r8
	# LowerAlloca(9188:3): size = 8, type = %struct.LsItem**, var = ^6
	leaq -24(%rbp), %rcx
	# LowerStore(9189:3).9: mov %struct.LsItem* %rdi, (^4)
	movq %rdi, (%rax)
	# LowerStore(9190:3).9: mov %struct.LsItem* %rsi, (^5)
	movq %rsi, (%r8)
	# LowerStore(9191:3).9: mov %struct.LsItem* %rdx, (^6)
	movq %rdx, (%rcx)
	# LowerLoad(9192:3).2: (^4) into %struct.LsItem* ^7
	movq (%rax), %rbx
	# LowerLoad(9193:3).2: (^5) into %struct.LsItem* ^8
	movq (%r8), %rax
	# LowerLoad(9194:3).2: (^6) into %struct.LsItem* ^9
	movq (%rcx), %r8
	# Clobber %r8
	movq %r8, -32(%rbp)
	# Clobber %rax
	movq %rax, -40(%rbp)
	# SetupCalls(9195:3): move argument %struct.LsItem* ^7
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(9195:3): move argument %struct.LsItem* ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(9195:3): move argument %struct.LsItem* ^9
	# Fixed movzx with identical source and destination widths
	movq %r8, %rdx
	callq _ZSt23__copy_move_backward_a2ILb1EP6LsItemS1_ET1_T0_S3_S2_
	# SetupCalls(9195:3): move %struct.LsItem* result from %rax
	movq %rax, %rbx
	# Unclobber %rax
	movq -40(%rbp), %rax
	# Unclobber %r8
	movq -32(%rbp), %r8
	movq %rbx, %rax
	movq -48(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEEET_S8_
.p2align 4, 0x90
_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEEET_S8_:
	.___ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEEET_S8___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(48 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -40(%rbp)
	movq %r12, -32(%rbp)
	# LowerAlloca(9144:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^2
	leaq -8(%rbp), %r12
	# LowerAlloca(9145:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^3
	leaq -16(%rbp), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(9146:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^3 -> ^4, indices=0,0
	movq %rcx, %rax
	# LowerGetelementptr(9146:3): type of ^4 is %struct.LsItem**
	# LowerStore(9147:3).9: mov %struct.LsItem* %rdi, (^4)
	movq %rdi, (%rax)
	# LowerBasicConversion(9148:3): %"class.__gnu_cxx::__normal_iterator"* ^2 -> i8* ^5
	movq %r12, %rbx
	# LowerBasicConversion(9149:3): %"class.__gnu_cxx::__normal_iterator"* ^3 -> i8* ^6
	movq %rcx, %rax
	# Clobber %rax
	movq %rax, -24(%rbp)
	# SetupCalls(9150:3): move argument i8* align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(9150:3): move argument i8* align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(9150:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -24(%rbp), %rax
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(9151:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^2 -> ^7, indices=0,0
	movq %r12, %rbx
	# LowerGetelementptr(9151:3): type of ^7 is %struct.LsItem**
	# LowerLoad(9152:3).2: (^7) into %struct.LsItem* ^8
	movq (%rbx), %rax
	movq -32(%rbp), %r12
	movq -40(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE14_M_lower_boundEPSt13_Rb_tree_nodeISI_EPSt18_Rb_tree_node_baseRS7_
.p2align 4, 0x90
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE14_M_lower_boundEPSt13_Rb_tree_nodeISI_EPSt18_Rb_tree_node_baseRS7_:
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE14_M_lower_boundEPSt13_Rb_tree_nodeISI_EPSt18_Rb_tree_node_baseRS7___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(160 + 0, 16)
	subq $160, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -96(%rbp)
	movq %r12, -128(%rbp)
	movq %r13, -104(%rbp)
	movq %r14, -112(%rbp)
	movq %r15, -80(%rbp)
	# LowerAlloca(10719:3): size = 8, type = %"struct.std::_Rb_tree_iterator"*, var = ^5
	# Fixing source-to-dest leaq -8(%rbp), -48(%rbp)
	leaq -8(%rbp), %r15
	movq %r15, -48(%rbp)
	# LowerAlloca(10720:3): size = 8, type = %"class.std::_Rb_tree"**, var = ^6
	leaq -16(%rbp), %r8
	# LowerAlloca(10721:3): size = 8, type = %"struct.std::_Rb_tree_node"**, var = ^7
	# Fixing source-to-dest leaq -24(%rbp), -56(%rbp)
	leaq -24(%rbp), %r15
	movq %r15, -56(%rbp)
	# LowerAlloca(10722:3): size = 8, type = %"struct.std::_Rb_tree_node_base"**, var = ^8
	leaq -32(%rbp), %rbx
	# LowerAlloca(10723:3): size = 8, type = %"class.std::__cxx11::basic_string"**, var = ^9
	leaq -40(%rbp), %r13
	# LowerStore(10724:3).9: mov %"class.std::_Rb_tree"* %rdi, (^6)
	movq %rdi, (%r8)
	# LowerStore(10725:3).9: mov %"struct.std::_Rb_tree_node"* %rsi, (^7)
	movq -56(%rbp), %rax
	movq %rsi, (%rax)
	# LowerStore(10726:3).9: mov %"struct.std::_Rb_tree_node_base"* %rdx, (^8)
	movq %rdx, (%rbx)
	# LowerStore(10727:3).9: mov %"class.std::__cxx11::basic_string"* %rcx, (^9)
	movq %rcx, (%r13)
	# LowerLoad(10728:3).2: (^6) into %"class.std::_Rb_tree"* ^10
	movq (%r8), %r14
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE14_M_lower_boundEPSt13_Rb_tree_nodeISI_EPSt18_Rb_tree_node_baseRS7___M21:
	# LowerLoad(10732:3).2: (^7) into %"struct.std::_Rb_tree_node"* ^12
	movq -56(%rbp), %rcx
	movq (%rcx), %rax
	# LowerIcmp(10733:3): %"struct.std::_Rb_tree_node"* ^12 vs. intlike 0
	cmpq $0, %rax
	setne %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE14_M_lower_boundEPSt13_Rb_tree_nodeISI_EPSt18_Rb_tree_node_baseRS7___M28
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE14_M_lower_boundEPSt13_Rb_tree_nodeISI_EPSt18_Rb_tree_node_baseRS7___M160
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE14_M_lower_boundEPSt13_Rb_tree_nodeISI_EPSt18_Rb_tree_node_baseRS7___M28:
	# tt = Pointer, type = %"class.std::_Rb_tree"
	# LowerGetelementptr(10737:3): struct-type: %"class.std::_Rb_tree"* ^10 -> ^15, indices=0,0
	movq %r14, %rax
	# LowerGetelementptr(10737:3): type of ^15 is %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Rb_tree_impl"*
	# LowerBasicConversion(10738:3): %"class.std::_Rb_tree"* ^15 -> %"struct.std::_Rb_tree_key_compare"* ^16
	movq %rax, %rcx
	# tt = Pointer, type = %"struct.std::_Rb_tree_key_compare"
	# LowerGetelementptr(10739:3): struct-type: %"struct.std::_Rb_tree_key_compare"* ^16 -> ^17, indices=0,0
	movq %rcx, %r15
	# LowerGetelementptr(10739:3): type of ^17 is %"struct.std::less"*
	# LowerLoad(10740:3).2: (^7) into %"struct.std::_Rb_tree_node"* ^18
	movq -56(%rbp), %rax
	movq (%rax), %rcx
	# Clobber %rcx
	movq %rcx, -64(%rbp)
	# SetupCalls(10741:3): move argument %"struct.std::_Rb_tree_node"* ^18
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE6_S_keyEPKSt13_Rb_tree_nodeISI_E
	# SetupCalls(10741:3): move %"class.std::__cxx11::basic_string"* result from %rax
	movq %rax, %r12
	# Unclobber %rcx
	movq -64(%rbp), %rcx
	# LowerLoad(10742:3).2: (^9) into %"class.std::__cxx11::basic_string"* ^20
	movq (%r13), %rax
	# Clobber %rax
	movq %rax, -72(%rbp)
	# SetupCalls(10743:3): move argument %"struct.std::less"* nonnull dereferenceable(1) align 1 ^17
	# Fixed movzx with identical source and destination widths
	movq %r15, %rdi
	# SetupCalls(10743:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^19
	# Fixed movzx with identical source and destination widths
	movq %r12, %rsi
	# SetupCalls(10743:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^20
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdx
	callq _ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_
	# SetupCalls(10743:3): move i1 result from %rax
	movb %al, %r12b
	# Unclobber %rax
	movq -72(%rbp), %rax
	cmpb $0, %r12b
	jne .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE14_M_lower_boundEPSt13_Rb_tree_nodeISI_EPSt18_Rb_tree_node_baseRS7___M129
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE14_M_lower_boundEPSt13_Rb_tree_nodeISI_EPSt18_Rb_tree_node_baseRS7___M93:
	# LowerLoad(10747:3).2: (^7) into %"struct.std::_Rb_tree_node"* ^23
	movq -56(%rbp), %rax
	movq (%rax), %rcx
	# LowerBasicConversion(10748:3): %"struct.std::_Rb_tree_node"* ^23 -> %"struct.std::_Rb_tree_node_base"* ^24
	movq %rcx, %rax
	# LowerStore(10749:3).9: mov %"struct.std::_Rb_tree_node_base"* ^24, (^8)
	movq %rax, (%rbx)
	# LowerLoad(10750:3).2: (^7) into %"struct.std::_Rb_tree_node"* ^25
	movq -56(%rbp), %rax
	movq (%rax), %rcx
	# LowerBasicConversion(10751:3): %"struct.std::_Rb_tree_node"* ^25 -> %"struct.std::_Rb_tree_node_base"* ^26
	movq %rcx, %rax
	# Clobber %rax
	movq %rax, -72(%rbp)
	# SetupCalls(10752:3): move argument %"struct.std::_Rb_tree_node_base"* ^26
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE7_S_leftEPSt18_Rb_tree_node_base
	# SetupCalls(10752:3): move %"struct.std::_Rb_tree_node"* result from %rax
	movq %rax, %r12
	# Unclobber %rax
	movq -72(%rbp), %rax
	# LowerStore(10753:3).9: mov %"struct.std::_Rb_tree_node"* ^27, (^7)
	movq -56(%rbp), %rax
	movq %r12, (%rax)
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE14_M_lower_boundEPSt13_Rb_tree_nodeISI_EPSt18_Rb_tree_node_baseRS7___M159
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE14_M_lower_boundEPSt13_Rb_tree_nodeISI_EPSt18_Rb_tree_node_baseRS7___M129:
	# LowerLoad(10757:3).2: (^7) into %"struct.std::_Rb_tree_node"* ^29
	movq -56(%rbp), %rax
	movq (%rax), %rcx
	# LowerBasicConversion(10758:3): %"struct.std::_Rb_tree_node"* ^29 -> %"struct.std::_Rb_tree_node_base"* ^30
	movq %rcx, %rax
	# Clobber %rax
	movq %rax, -72(%rbp)
	# SetupCalls(10759:3): move argument %"struct.std::_Rb_tree_node_base"* ^30
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE8_S_rightEPSt18_Rb_tree_node_base
	# SetupCalls(10759:3): move %"struct.std::_Rb_tree_node"* result from %rax
	movq %rax, %r12
	# Unclobber %rax
	movq -72(%rbp), %rax
	# LowerStore(10760:3).9: mov %"struct.std::_Rb_tree_node"* ^31, (^7)
	movq -56(%rbp), %rax
	movq %r12, (%rax)
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE14_M_lower_boundEPSt13_Rb_tree_nodeISI_EPSt18_Rb_tree_node_baseRS7___M159:
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE14_M_lower_boundEPSt13_Rb_tree_nodeISI_EPSt18_Rb_tree_node_baseRS7___M21
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE14_M_lower_boundEPSt13_Rb_tree_nodeISI_EPSt18_Rb_tree_node_baseRS7___M160:
	# LowerLoad(10767:3).2: (^8) into %"struct.std::_Rb_tree_node_base"* ^34
	movq (%rbx), %rax
	# Clobber %rax
	movq %rax, -72(%rbp)
	# SetupCalls(10768:3): move argument %"struct.std::_Rb_tree_iterator"* nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq -48(%rbp), %rdi
	# SetupCalls(10768:3): move argument %"struct.std::_Rb_tree_node_base"* ^34
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEEC2EPSt18_Rb_tree_node_base
	# Unclobber %rax
	movq -72(%rbp), %rax
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(10769:3): struct-type: %"struct.std::_Rb_tree_iterator"* ^5 -> ^35, indices=0,0
	movq -48(%rbp), %rax
	# LowerGetelementptr(10769:3): type of ^35 is %"struct.std::_Rb_tree_node_base"**
	# LowerLoad(10770:3).2: (^35) into %"struct.std::_Rb_tree_node_base"* ^36
	movq (%rax), %rbx
	movq %rbx, %rax
	movq -80(%rbp), %r15
	movq -112(%rbp), %r14
	movq -104(%rbp), %r13
	movq -128(%rbp), %r12
	movq -96(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEES7_ET1_T0_S9_S8_
.p2align 4, 0x90
_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEES7_ET1_T0_S9_S8_:
	.___ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEES7_ET1_T0_S9_S8___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(224 + 0, 16)
	subq $224, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -136(%rbp)
	movq %r12, -128(%rbp)
	movq %r13, -120(%rbp)
	movq %r14, -152(%rbp)
	movq %r15, -112(%rbp)
	# LowerAlloca(9096:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^4
	# Fixing source-to-dest leaq -8(%rbp), -72(%rbp)
	leaq -8(%rbp), %r15
	movq %r15, -72(%rbp)
	# LowerAlloca(9097:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^5
	leaq -16(%rbp), %r13
	# LowerAlloca(9098:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^6
	leaq -24(%rbp), %r12
	# LowerAlloca(9099:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^7
	leaq -32(%rbp), %rbx
	# LowerAlloca(9100:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^8
	# Fixing source-to-dest leaq -40(%rbp), -80(%rbp)
	leaq -40(%rbp), %r15
	movq %r15, -80(%rbp)
	# LowerAlloca(9101:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^9
	leaq -48(%rbp), %r14
	# LowerAlloca(9102:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^10
	leaq -56(%rbp), %r15
	# LowerAlloca(9103:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^11
	# Fixing source-to-dest leaq -64(%rbp), -88(%rbp)
	pushq %r15
	leaq -64(%rbp), %r15
	movq %r15, -88(%rbp)
	popq %r15
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(9104:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^5 -> ^12, indices=0,0
	movq %r13, %rax
	# LowerGetelementptr(9104:3): type of ^12 is %struct.LsItem**
	# LowerStore(9105:3).9: mov %struct.LsItem* %rdi, (^12)
	movq %rdi, (%rax)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(9106:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^6 -> ^13, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(9106:3): type of ^13 is %struct.LsItem**
	# LowerStore(9107:3).9: mov %struct.LsItem* %rsi, (^13)
	movq %rsi, (%rax)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(9108:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^7 -> ^14, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(9108:3): type of ^14 is %struct.LsItem**
	# LowerStore(9109:3).9: mov %struct.LsItem* %rdx, (^14)
	movq %rdx, (%rax)
	# LowerBasicConversion(9110:3): %"class.__gnu_cxx::__normal_iterator"* ^8 -> i8* ^15
	movq -80(%rbp), %rax
	# LowerBasicConversion(9111:3): %"class.__gnu_cxx::__normal_iterator"* ^7 -> i8* ^16
	movq %rbx, %rcx
	# Clobber %rcx
	movq %rcx, -96(%rbp)
	# Clobber %rax
	movq %rax, -104(%rbp)
	# SetupCalls(9112:3): move argument i8* align 8 ^15
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(9112:3): move argument i8* align 8 ^16
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(9112:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -104(%rbp), %rax
	# Unclobber %rcx
	movq -96(%rbp), %rcx
	# LowerBasicConversion(9113:3): %"class.__gnu_cxx::__normal_iterator"* ^9 -> i8* ^17
	movq %r14, %rax
	# LowerBasicConversion(9114:3): %"class.__gnu_cxx::__normal_iterator"* ^5 -> i8* ^18
	movq %r13, %rcx
	# Clobber %rcx
	movq %rcx, -96(%rbp)
	# Clobber %rax
	movq %rax, -104(%rbp)
	# SetupCalls(9115:3): move argument i8* align 8 ^17
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(9115:3): move argument i8* align 8 ^18
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(9115:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -104(%rbp), %rax
	# Unclobber %rcx
	movq -96(%rbp), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(9116:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^9 -> ^19, indices=0,0
	movq %r14, %rcx
	# LowerGetelementptr(9116:3): type of ^19 is %struct.LsItem**
	# LowerLoad(9117:3).2: (^19) into %struct.LsItem* ^20
	movq (%rcx), %rax
	# Clobber %rax
	movq %rax, -104(%rbp)
	# SetupCalls(9118:3): move argument %struct.LsItem* ^20
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZSt12__niter_baseIP6LsItemSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE
	# SetupCalls(9118:3): move %struct.LsItem* result from %rax
	movq %rax, %r13
	# Unclobber %rax
	movq -104(%rbp), %rax
	# LowerBasicConversion(9119:3): %"class.__gnu_cxx::__normal_iterator"* ^10 -> i8* ^22
	movq %r15, %rax
	# LowerBasicConversion(9120:3): %"class.__gnu_cxx::__normal_iterator"* ^6 -> i8* ^23
	movq %r12, %rcx
	# Clobber %rcx
	movq %rcx, -96(%rbp)
	# Clobber %rax
	movq %rax, -104(%rbp)
	# SetupCalls(9121:3): move argument i8* align 8 ^22
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(9121:3): move argument i8* align 8 ^23
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(9121:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -104(%rbp), %rax
	# Unclobber %rcx
	movq -96(%rbp), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(9122:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^10 -> ^24, indices=0,0
	movq %r15, %rax
	# LowerGetelementptr(9122:3): type of ^24 is %struct.LsItem**
	# LowerLoad(9123:3).2: (^24) into %struct.LsItem* ^25
	movq (%rax), %rcx
	# Clobber %rcx
	movq %rcx, -96(%rbp)
	# SetupCalls(9124:3): move argument %struct.LsItem* ^25
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	callq _ZSt12__niter_baseIP6LsItemSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE
	# SetupCalls(9124:3): move %struct.LsItem* result from %rax
	movq %rax, %r12
	# Unclobber %rcx
	movq -96(%rbp), %rcx
	# LowerBasicConversion(9125:3): %"class.__gnu_cxx::__normal_iterator"* ^11 -> i8* ^27
	movq -88(%rbp), %rax
	# LowerBasicConversion(9126:3): %"class.__gnu_cxx::__normal_iterator"* ^7 -> i8* ^28
	movq %rbx, %rcx
	# Clobber %rcx
	movq %rcx, -96(%rbp)
	# Clobber %rax
	movq %rax, -104(%rbp)
	# SetupCalls(9127:3): move argument i8* align 8 ^27
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(9127:3): move argument i8* align 8 ^28
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(9127:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -104(%rbp), %rax
	# Unclobber %rcx
	movq -96(%rbp), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(9128:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^11 -> ^29, indices=0,0
	movq -88(%rbp), %rbx
	# LowerGetelementptr(9128:3): type of ^29 is %struct.LsItem**
	# LowerLoad(9129:3).2: (^29) into %struct.LsItem* ^30
	movq (%rbx), %rax
	# Clobber %rax
	movq %rax, -104(%rbp)
	# SetupCalls(9130:3): move argument %struct.LsItem* ^30
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZSt12__niter_baseIP6LsItemSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE
	# SetupCalls(9130:3): move %struct.LsItem* result from %rax
	movq %rax, %rbx
	# Unclobber %rax
	movq -104(%rbp), %rax
	# SetupCalls(9131:3): move argument %struct.LsItem* ^21
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	# SetupCalls(9131:3): move argument %struct.LsItem* ^26
	# Fixed movzx with identical source and destination widths
	movq %r12, %rsi
	# SetupCalls(9131:3): move argument %struct.LsItem* ^31
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdx
	callq _ZSt23__copy_move_backward_a1ILb1EP6LsItemS1_ET1_T0_S3_S2_
	# SetupCalls(9131:3): move %struct.LsItem* result from %rax
	movq %rax, %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(9132:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^8 -> ^33, indices=0,0
	movq -80(%rbp), %rax
	# LowerGetelementptr(9132:3): type of ^33 is %struct.LsItem**
	# LowerLoad(9133:3).2: (^33) into %struct.LsItem* ^34
	movq (%rax), %rcx
	# Clobber %rcx
	movq %rcx, -96(%rbp)
	# SetupCalls(9134:3): move argument %struct.LsItem* ^34
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(9134:3): move argument %struct.LsItem* ^32
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEES3_ET_S8_T0_
	# SetupCalls(9134:3): move %struct.LsItem* result from %rax
	movq %rax, %rbx
	# Unclobber %rcx
	movq -96(%rbp), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(9135:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^4 -> ^36, indices=0,0
	movq -72(%rbp), %rax
	# LowerGetelementptr(9135:3): type of ^36 is %struct.LsItem**
	# LowerStore(9136:3).9: mov %struct.LsItem* ^35, (^36)
	movq %rbx, (%rax)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(9137:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^4 -> ^37, indices=0,0
	movq -72(%rbp), %rax
	# LowerGetelementptr(9137:3): type of ^37 is %struct.LsItem**
	# LowerLoad(9138:3).2: (^37) into %struct.LsItem* ^38
	movq (%rax), %rbx
	movq %rbx, %rax
	movq -112(%rbp), %r15
	movq -152(%rbp), %r14
	movq -120(%rbp), %r13
	movq -128(%rbp), %r12
	movq -136(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZN9__gnu_cxx5__ops15__val_comp_iterIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterISD_EE
.p2align 4, 0x90
_ZN9__gnu_cxx5__ops15__val_comp_iterIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterISD_EE:
	.___ZN9__gnu_cxx5__ops15__val_comp_iterIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterISD_EE__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(9088:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Val_comp_iter"*, var = ^1
	leaq -1(%rbp), %rax
	# LowerAlloca(9089:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, var = ^2
	leaq -2(%rbp), %rbx
	# Clobber %rax
	movq %rax, -16(%rbp)
	# SetupCalls(9090:3): move argument %"struct.__gnu_cxx::__ops::_Val_comp_iter"* nonnull dereferenceable(1) align 1 ^1
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(9090:3): move argument %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* nonnull dereferenceable(1) align 1 ^2
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZN9__gnu_cxx5__ops14_Val_comp_iterIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EC2EONS0_15_Iter_comp_iterISB_EE
	# Unclobber %rax
	movq -16(%rbp), %rax
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops14_Val_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_
.p2align 4, 0x90
_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops14_Val_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_:
	.___ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops14_Val_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(208 + 0, 16)
	subq $208, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -144(%rbp)
	movq %r12, -136(%rbp)
	movq %r13, -128(%rbp)
	movq %r14, -184(%rbp)
	movq %r15, -104(%rbp)
	# LowerAlloca(9045:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^2
	# Fixing source-to-dest leaq -8(%rbp), -88(%rbp)
	leaq -8(%rbp), %r15
	movq %r15, -88(%rbp)
	# LowerAlloca(9046:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Val_comp_iter"*, var = ^3
	leaq -9(%rbp), %r15
	# LowerAlloca(9047:3): size = 40, type = %struct.LsItem*, var = ^4
	# Fixing source-to-dest leaq -56(%rbp), -80(%rbp)
	pushq %r15
	leaq -56(%rbp), %r15
	movq %r15, -80(%rbp)
	popq %r15
	# LowerAlloca(9048:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^5
	leaq -64(%rbp), %r13
	# LowerAlloca(9049:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^6
	leaq -72(%rbp), %r12
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(9050:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^2 -> ^7, indices=0,0
	movq -88(%rbp), %rax
	# LowerGetelementptr(9050:3): type of ^7 is %struct.LsItem**
	# LowerStore(9051:3).9: mov %struct.LsItem* %rdi, (^7)
	movq %rdi, (%rax)
	# SetupCalls(9052:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^2
	# Fixed movzx with identical source and destination widths
	movq -88(%rbp), %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEdeEv
	# SetupCalls(9052:3): move %struct.LsItem* result from %rax
	movq %rax, %rbx
	# SetupCalls(9053:3): move argument %struct.LsItem* nonnull dereferenceable(33) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -80(%rbp), %rdi
	# SetupCalls(9053:3): move argument %struct.LsItem* nonnull dereferenceable(33) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZN6LsItemC2EOS_
	# LowerBasicConversion(9054:3): %"class.__gnu_cxx::__normal_iterator"* ^5 -> i8* ^9
	movq %r13, %rax
	# LowerBasicConversion(9055:3): %"class.__gnu_cxx::__normal_iterator"* ^2 -> i8* ^10
	movq -88(%rbp), %rbx
	# Clobber %rax
	movq %rax, -96(%rbp)
	# SetupCalls(9056:3): move argument i8* align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(9056:3): move argument i8* align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(9056:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -96(%rbp), %rax
	# SetupCalls(9057:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	callq _ZN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEmmEv
	# SetupCalls(9057:3): move %"class.__gnu_cxx::__normal_iterator"* result from %rax
	movq %rax, %rax
	.___ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops14_Val_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0___M115:
	# LowerBasicConversion(9061:3): %"class.__gnu_cxx::__normal_iterator"* ^6 -> i8* ^13
	movq %r12, %rax
	# LowerBasicConversion(9062:3): %"class.__gnu_cxx::__normal_iterator"* ^5 -> i8* ^14
	movq %r13, %rbx
	# Clobber %rax
	movq %rax, -96(%rbp)
	# SetupCalls(9063:3): move argument i8* align 8 ^13
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(9063:3): move argument i8* align 8 ^14
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(9063:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -96(%rbp), %rax
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(9064:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^6 -> ^15, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(9064:3): type of ^15 is %struct.LsItem**
	# LowerLoad(9065:3).2: (^15) into %struct.LsItem* ^16
	movq (%rax), %rbx
	# SetupCalls(9066:3): move argument %"struct.__gnu_cxx::__ops::_Val_comp_iter"* nonnull dereferenceable(1) align 1 ^3
	# Fixed movzx with identical source and destination widths
	movq %r15, %rdi
	# SetupCalls(9066:3): move argument %struct.LsItem* nonnull dereferenceable(33) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -80(%rbp), %rsi
	# SetupCalls(9066:3): move argument %struct.LsItem* ^16
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdx
	callq _ZN9__gnu_cxx5__ops14_Val_comp_iterIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EclI6LsItemNS_17__normal_iteratorIPSE_S2_ISE_SaISE_EEEEEEbRT_T0_
	# SetupCalls(9066:3): move i1 result from %rax
	movb %al, %bl
	cmpb $0, %bl
	jne .___ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops14_Val_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0___M178
	jmp .___ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops14_Val_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0___M302
	.___ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops14_Val_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0___M178:
	# SetupCalls(9070:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEdeEv
	# SetupCalls(9070:3): move %struct.LsItem* result from %rax
	movq %rax, %r14
	# SetupCalls(9071:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^2
	# Fixed movzx with identical source and destination widths
	movq -88(%rbp), %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEdeEv
	# SetupCalls(9071:3): move %struct.LsItem* result from %rax
	movq %rax, %rbx
	# SetupCalls(9072:3): move argument %struct.LsItem* nonnull dereferenceable(33) align 8 ^20
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(9072:3): move argument %struct.LsItem* nonnull dereferenceable(33) align 8 ^19
	# Fixed movzx with identical source and destination widths
	movq %r14, %rsi
	callq _ZN6LsItemaSEOS_
	# SetupCalls(9072:3): move %struct.LsItem* result from %rax
	movq %rax, %rax
	# LowerBasicConversion(9073:3): %"class.__gnu_cxx::__normal_iterator"* ^2 -> i8* ^22
	movq -88(%rbp), %rax
	# LowerBasicConversion(9074:3): %"class.__gnu_cxx::__normal_iterator"* ^5 -> i8* ^23
	movq %r13, %rbx
	# Clobber %rax
	movq %rax, -96(%rbp)
	# SetupCalls(9075:3): move argument i8* align 8 ^22
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(9075:3): move argument i8* align 8 ^23
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(9075:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -96(%rbp), %rax
	# SetupCalls(9076:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	callq _ZN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEmmEv
	# SetupCalls(9076:3): move %"class.__gnu_cxx::__normal_iterator"* result from %rax
	movq %rax, %rax
	jmp .___ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops14_Val_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0___M115
	.___ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops14_Val_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0___M302:
	# SetupCalls(9080:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^2
	# Fixed movzx with identical source and destination widths
	movq -88(%rbp), %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEdeEv
	# SetupCalls(9080:3): move %struct.LsItem* result from %rax
	movq %rax, %rbx
	# SetupCalls(9081:3): move argument %struct.LsItem* nonnull dereferenceable(33) align 8 ^26
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(9081:3): move argument %struct.LsItem* nonnull dereferenceable(33) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -80(%rbp), %rsi
	callq _ZN6LsItemaSEOS_
	# SetupCalls(9081:3): move %struct.LsItem* result from %rax
	movq %rax, %rax
	# SetupCalls(9082:3): move argument %struct.LsItem* nonnull dereferenceable(33) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -80(%rbp), %rdi
	callq _ZN6LsItemD2Ev
	movq -104(%rbp), %r15
	movq -184(%rbp), %r14
	movq -128(%rbp), %r13
	movq -136(%rbp), %r12
	movq -144(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_
.p2align 4, 0x90
_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_:
	.___ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(232 + 0, 16)
	subq $240, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -160(%rbp)
	movq %r12, -152(%rbp)
	movq %r13, -144(%rbp)
	movq %r14, -168(%rbp)
	movq %r15, -136(%rbp)
	# LowerAlloca(8995:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^4
	# Fixing source-to-dest leaq -8(%rbp), -80(%rbp)
	leaq -8(%rbp), %r15
	movq %r15, -80(%rbp)
	# LowerAlloca(8996:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^5
	leaq -16(%rbp), %rcx
	# LowerAlloca(8997:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^6
	leaq -24(%rbp), %r13
	# LowerAlloca(8998:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^7
	leaq -32(%rbp), %r12
	# LowerAlloca(8999:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^8
	leaq -40(%rbp), %rbx
	# LowerAlloca(9000:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^9
	leaq -48(%rbp), %r14
	# LowerAlloca(9001:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^10
	# Fixing source-to-dest leaq -56(%rbp), -96(%rbp)
	leaq -56(%rbp), %r15
	movq %r15, -96(%rbp)
	# LowerAlloca(9002:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^11
	leaq -64(%rbp), %r15
	# LowerAlloca(9003:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^12
	# Fixing source-to-dest leaq -72(%rbp), -88(%rbp)
	pushq %r15
	leaq -72(%rbp), %r15
	movq %r15, -88(%rbp)
	popq %r15
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(9004:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^5 -> ^13, indices=0,0
	movq %rcx, %rax
	# LowerGetelementptr(9004:3): type of ^13 is %struct.LsItem**
	# LowerStore(9005:3).9: mov %struct.LsItem* %rdi, (^13)
	movq %rdi, (%rax)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(9006:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^6 -> ^14, indices=0,0
	movq %r13, %rax
	# LowerGetelementptr(9006:3): type of ^14 is %struct.LsItem**
	# LowerStore(9007:3).9: mov %struct.LsItem* %rsi, (^14)
	movq %rsi, (%rax)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(9008:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^7 -> ^15, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(9008:3): type of ^15 is %struct.LsItem**
	# LowerStore(9009:3).9: mov %struct.LsItem* %rdx, (^15)
	movq %rdx, (%rax)
	# LowerBasicConversion(9010:3): %"class.__gnu_cxx::__normal_iterator"* ^9 -> i8* ^16
	movq %r14, %rax
	# LowerBasicConversion(9011:3): %"class.__gnu_cxx::__normal_iterator"* ^5 -> i8* ^17
	movq %rcx, %rdx
	# Clobber %rdx
	movq %rdx, -104(%rbp)
	# Clobber %rax
	movq %rax, -112(%rbp)
	# SetupCalls(9012:3): move argument i8* align 8 ^16
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(9012:3): move argument i8* align 8 ^17
	# Fixed movzx with identical source and destination widths
	movq %rdx, %rsi
	# SetupCalls(9012:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -112(%rbp), %rax
	# Unclobber %rdx
	movq -104(%rbp), %rdx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(9013:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^9 -> ^18, indices=0,0
	movq %r14, %rcx
	# LowerGetelementptr(9013:3): type of ^18 is %struct.LsItem**
	# LowerLoad(9014:3).2: (^18) into %struct.LsItem* ^19
	movq (%rcx), %rax
	# Clobber %rax
	movq %rax, -112(%rbp)
	# SetupCalls(9015:3): move argument %struct.LsItem* ^19
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEEET_S8_
	# SetupCalls(9015:3): move %struct.LsItem* result from %rax
	movq %rax, %r14
	# Unclobber %rax
	movq -112(%rbp), %rax
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(9016:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^8 -> ^21, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(9016:3): type of ^21 is %struct.LsItem**
	# LowerStore(9017:3).9: mov %struct.LsItem* ^20, (^21)
	movq %r14, (%rax)
	# LowerBasicConversion(9018:3): %"class.__gnu_cxx::__normal_iterator"* ^11 -> i8* ^22
	movq %r15, %rax
	# LowerBasicConversion(9019:3): %"class.__gnu_cxx::__normal_iterator"* ^6 -> i8* ^23
	movq %r13, %rcx
	# Clobber %rcx
	movq %rcx, -120(%rbp)
	# Clobber %rax
	movq %rax, -112(%rbp)
	# SetupCalls(9020:3): move argument i8* align 8 ^22
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(9020:3): move argument i8* align 8 ^23
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(9020:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -112(%rbp), %rax
	# Unclobber %rcx
	movq -120(%rbp), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(9021:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^11 -> ^24, indices=0,0
	movq %r15, %rax
	# LowerGetelementptr(9021:3): type of ^24 is %struct.LsItem**
	# LowerLoad(9022:3).2: (^24) into %struct.LsItem* ^25
	movq (%rax), %rcx
	# Clobber %rcx
	movq %rcx, -120(%rbp)
	# SetupCalls(9023:3): move argument %struct.LsItem* ^25
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	callq _ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEEET_S8_
	# SetupCalls(9023:3): move %struct.LsItem* result from %rax
	movq %rax, %r13
	# Unclobber %rcx
	movq -120(%rbp), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(9024:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^10 -> ^27, indices=0,0
	movq -96(%rbp), %rax
	# LowerGetelementptr(9024:3): type of ^27 is %struct.LsItem**
	# LowerStore(9025:3).9: mov %struct.LsItem* ^26, (^27)
	movq %r13, (%rax)
	# LowerBasicConversion(9026:3): %"class.__gnu_cxx::__normal_iterator"* ^12 -> i8* ^28
	movq -88(%rbp), %rax
	# LowerBasicConversion(9027:3): %"class.__gnu_cxx::__normal_iterator"* ^7 -> i8* ^29
	movq %r12, %rcx
	# Clobber %rcx
	movq %rcx, -120(%rbp)
	# Clobber %rax
	movq %rax, -112(%rbp)
	# SetupCalls(9028:3): move argument i8* align 8 ^28
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(9028:3): move argument i8* align 8 ^29
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(9028:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -112(%rbp), %rax
	# Unclobber %rcx
	movq -120(%rbp), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(9029:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^8 -> ^30, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(9029:3): type of ^30 is %struct.LsItem**
	# LowerLoad(9030:3).2: (^30) into %struct.LsItem* ^31
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(9031:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^10 -> ^32, indices=0,0
	movq -96(%rbp), %rax
	# LowerGetelementptr(9031:3): type of ^32 is %struct.LsItem**
	# LowerLoad(9032:3).2: (^32) into %struct.LsItem* ^33
	movq (%rax), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(9033:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^12 -> ^34, indices=0,0
	movq -88(%rbp), %rax
	# LowerGetelementptr(9033:3): type of ^34 is %struct.LsItem**
	# LowerLoad(9034:3).2: (^34) into %struct.LsItem* ^35
	movq (%rax), %r8
	# Clobber %rcx
	movq %rcx, -120(%rbp)
	# Clobber %r8
	movq %r8, -128(%rbp)
	# SetupCalls(9035:3): move argument %struct.LsItem* ^31
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(9035:3): move argument %struct.LsItem* ^33
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(9035:3): move argument %struct.LsItem* ^35
	# Fixed movzx with identical source and destination widths
	movq %r8, %rdx
	callq _ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEES7_ET1_T0_S9_S8_
	# SetupCalls(9035:3): move %struct.LsItem* result from %rax
	movq %rax, %rbx
	# Unclobber %r8
	movq -128(%rbp), %r8
	# Unclobber %rcx
	movq -120(%rbp), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(9036:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^4 -> ^37, indices=0,0
	movq -80(%rbp), %rax
	# LowerGetelementptr(9036:3): type of ^37 is %struct.LsItem**
	# LowerStore(9037:3).9: mov %struct.LsItem* ^36, (^37)
	movq %rbx, (%rax)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(9038:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^4 -> ^38, indices=0,0
	movq -80(%rbp), %rax
	# LowerGetelementptr(9038:3): type of ^38 is %struct.LsItem**
	# LowerLoad(9039:3).2: (^38) into %struct.LsItem* ^39
	movq (%rax), %rbx
	movq %rbx, %rax
	movq -136(%rbp), %r15
	movq -168(%rbp), %r14
	movq -144(%rbp), %r13
	movq -152(%rbp), %r12
	movq -160(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0_
.p2align 4, 0x90
_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0_:
	.___ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(128 + 0, 16)
	subq $128, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -112(%rbp)
	movq %r12, -104(%rbp)
	movq %r13, -96(%rbp)
	movq %r14, -120(%rbp)
	movq %r15, -88(%rbp)
	# LowerAlloca(8935:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^3
	leaq -8(%rbp), %rcx
	# LowerAlloca(8936:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^4
	# Fixing source-to-dest leaq -16(%rbp), -56(%rbp)
	leaq -16(%rbp), %r15
	movq %r15, -56(%rbp)
	# LowerAlloca(8937:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, var = ^5
	leaq -17(%rbp), %r13
	# LowerAlloca(8938:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^6
	leaq -32(%rbp), %r12
	# LowerAlloca(8939:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^7
	leaq -40(%rbp), %rbx
	# LowerAlloca(8940:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Val_comp_iter"*, var = ^8
	leaq -41(%rbp), %rax
	# LowerAlloca(8941:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, var = ^9
	leaq -42(%rbp), %r14
	# LowerAlloca(8942:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Val_comp_iter"*, var = ^10
	leaq -43(%rbp), %rax
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8943:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^3 -> ^11, indices=0,0
	movq %rcx, %rax
	# LowerGetelementptr(8943:3): type of ^11 is %struct.LsItem**
	# LowerStore(8944:3).9: mov %struct.LsItem* %rdi, (^11)
	movq %rdi, (%rax)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8945:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^4 -> ^12, indices=0,0
	movq -56(%rbp), %rax
	# LowerGetelementptr(8945:3): type of ^12 is %struct.LsItem**
	# LowerStore(8946:3).9: mov %struct.LsItem* %rsi, (^12)
	movq %rsi, (%rax)
	# LowerBasicConversion(8947:3): %"class.__gnu_cxx::__normal_iterator"* ^6 -> i8* ^13
	movq %r12, %rax
	# LowerBasicConversion(8948:3): %"class.__gnu_cxx::__normal_iterator"* ^3 -> i8* ^14
	movq %rcx, %rdx
	# Clobber %rdx
	movq %rdx, -64(%rbp)
	# Clobber %rax
	movq %rax, -72(%rbp)
	# SetupCalls(8949:3): move argument i8* align 8 ^13
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(8949:3): move argument i8* align 8 ^14
	# Fixed movzx with identical source and destination widths
	movq %rdx, %rsi
	# SetupCalls(8949:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -72(%rbp), %rax
	# Unclobber %rdx
	movq -64(%rbp), %rdx
	.___ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M58:
	# SetupCalls(8953:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(8953:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -56(%rbp), %rsi
	callq _ZN9__gnu_cxxneIP6LsItemSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_
	# SetupCalls(8953:3): move i1 result from %rax
	movb %al, %r15b
	cmpb $0, %r15b
	jne .___ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M84
	jmp .___ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M213
	.___ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M84:
	# LowerBasicConversion(8957:3): %"class.__gnu_cxx::__normal_iterator"* ^7 -> i8* ^18
	movq %rbx, %rcx
	# LowerBasicConversion(8958:3): %"class.__gnu_cxx::__normal_iterator"* ^6 -> i8* ^19
	movq %r12, %rax
	# Clobber %rcx
	movq %rcx, -80(%rbp)
	# Clobber %rax
	movq %rax, -72(%rbp)
	# SetupCalls(8959:3): move argument i8* align 8 ^18
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(8959:3): move argument i8* align 8 ^19
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(8959:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -72(%rbp), %rax
	# Unclobber %rcx
	movq -80(%rbp), %rcx
	# LowerBasicConversion(8960:3): %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* ^9 -> i8* ^20
	movq %r14, %rax
	# LowerBasicConversion(8961:3): %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* ^5 -> i8* ^21
	movq %r13, %rcx
	# Clobber %rcx
	movq %rcx, -80(%rbp)
	# Clobber %rax
	movq %rax, -72(%rbp)
	# SetupCalls(8962:3): move argument i8* align 1 ^20
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(8962:3): move argument i8* align 1 ^21
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(8962:3): move argument i64 1
	movq $1, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -72(%rbp), %rax
	# Unclobber %rcx
	movq -80(%rbp), %rcx
	callq _ZN9__gnu_cxx5__ops15__val_comp_iterIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterISD_EE
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8964:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^7 -> ^22, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(8964:3): type of ^22 is %struct.LsItem**
	# LowerLoad(8965:3).2: (^22) into %struct.LsItem* ^23
	movq (%rax), %rcx
	# Clobber %rcx
	movq %rcx, -80(%rbp)
	# SetupCalls(8966:3): move argument %struct.LsItem* ^23
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	callq _ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops14_Val_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_
	# Unclobber %rcx
	movq -80(%rbp), %rcx
	# SetupCalls(8970:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	callq _ZN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEppEv
	# SetupCalls(8970:3): move %"class.__gnu_cxx::__normal_iterator"* result from %rax
	movq %rax, %rax
	jmp .___ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M58
	.___ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M213:
	movq -88(%rbp), %r15
	movq -120(%rbp), %r14
	movq -96(%rbp), %r13
	movq -104(%rbp), %r12
	movq -112(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0_
.p2align 4, 0x90
_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0_:
	.___ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(408 + 0, 16)
	subq $416, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -328(%rbp)
	movq %r12, -352(%rbp)
	movq %r13, -320(%rbp)
	movq %r14, -336(%rbp)
	movq %r15, -248(%rbp)
	# LowerAlloca(8834:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^3
	# Fixing source-to-dest leaq -8(%rbp), -144(%rbp)
	leaq -8(%rbp), %r15
	movq %r15, -144(%rbp)
	# LowerAlloca(8835:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^4
	# Fixing source-to-dest leaq -16(%rbp), -152(%rbp)
	leaq -16(%rbp), %r15
	movq %r15, -152(%rbp)
	# LowerAlloca(8836:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, var = ^5
	# Fixing source-to-dest leaq -17(%rbp), -160(%rbp)
	leaq -17(%rbp), %r15
	movq %r15, -160(%rbp)
	# LowerAlloca(8837:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^6
	# Fixing source-to-dest leaq -32(%rbp), -168(%rbp)
	leaq -32(%rbp), %r15
	movq %r15, -168(%rbp)
	# LowerAlloca(8838:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^7
	# Fixing source-to-dest leaq -40(%rbp), -176(%rbp)
	leaq -40(%rbp), %r15
	movq %r15, -176(%rbp)
	# LowerAlloca(8839:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^8
	# Fixing source-to-dest leaq -48(%rbp), -184(%rbp)
	leaq -48(%rbp), %r15
	movq %r15, -184(%rbp)
	# LowerAlloca(8840:3): size = 40, type = %struct.LsItem*, var = ^9
	# Fixing source-to-dest leaq -88(%rbp), -192(%rbp)
	leaq -88(%rbp), %r15
	movq %r15, -192(%rbp)
	# LowerAlloca(8841:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^10
	# Fixing source-to-dest leaq -96(%rbp), -200(%rbp)
	leaq -96(%rbp), %r15
	movq %r15, -200(%rbp)
	# LowerAlloca(8842:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^11
	# Fixing source-to-dest leaq -104(%rbp), -208(%rbp)
	leaq -104(%rbp), %r15
	movq %r15, -208(%rbp)
	# LowerAlloca(8843:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^12
	leaq -112(%rbp), %r13
	# LowerAlloca(8844:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^13
	leaq -120(%rbp), %rbx
	# LowerAlloca(8845:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^14
	leaq -128(%rbp), %r14
	# LowerAlloca(8846:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Val_comp_iter"*, var = ^15
	leaq -129(%rbp), %rax
	# LowerAlloca(8847:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, var = ^16
	leaq -130(%rbp), %r15
	# LowerAlloca(8848:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Val_comp_iter"*, var = ^17
	leaq -131(%rbp), %rax
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8849:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^3 -> ^18, indices=0,0
	movq -144(%rbp), %rax
	# LowerGetelementptr(8849:3): type of ^18 is %struct.LsItem**
	# LowerStore(8850:3).9: mov %struct.LsItem* %rdi, (^18)
	movq %rdi, (%rax)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8851:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^4 -> ^19, indices=0,0
	movq -152(%rbp), %rax
	# LowerGetelementptr(8851:3): type of ^19 is %struct.LsItem**
	# LowerStore(8852:3).9: mov %struct.LsItem* %rsi, (^19)
	movq %rsi, (%rax)
	# SetupCalls(8853:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq -144(%rbp), %rdi
	# SetupCalls(8853:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -152(%rbp), %rsi
	callq _ZN9__gnu_cxxeqIP6LsItemSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_
	# SetupCalls(8853:3): move i1 result from %rax
	movb %al, %r12b
	cmpb $0, %r12b
	jne .___ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M69
	jmp .___ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M70
	.___ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M69:
	jmp .___ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M613
	.___ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M70:
	# SetupCalls(8860:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq -144(%rbp), %rdi
	# SetupCalls(8860:3): move argument i64 1
	movq $1, %rsi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEplEl
	# SetupCalls(8860:3): move %struct.LsItem* result from %rax
	movq %rax, %r12
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8861:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^6 -> ^24, indices=0,0
	movq -168(%rbp), %rax
	# LowerGetelementptr(8861:3): type of ^24 is %struct.LsItem**
	# LowerStore(8862:3).9: mov %struct.LsItem* ^23, (^24)
	movq %r12, (%rax)
	.___ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M102:
	# SetupCalls(8866:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq -168(%rbp), %rdi
	# SetupCalls(8866:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -152(%rbp), %rsi
	callq _ZN9__gnu_cxxneIP6LsItemSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_
	# SetupCalls(8866:3): move i1 result from %rax
	movb %al, %r12b
	cmpb $0, %r12b
	jne .___ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M128
	jmp .___ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M613
	.___ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M128:
	# LowerBasicConversion(8870:3): %"class.__gnu_cxx::__normal_iterator"* ^7 -> i8* ^28
	movq -176(%rbp), %rax
	# LowerBasicConversion(8871:3): %"class.__gnu_cxx::__normal_iterator"* ^6 -> i8* ^29
	movq -168(%rbp), %rcx
	# Clobber %rcx
	movq %rcx, -216(%rbp)
	# Clobber %rax
	movq %rax, -224(%rbp)
	# SetupCalls(8872:3): move argument i8* align 8 ^28
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(8872:3): move argument i8* align 8 ^29
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(8872:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -224(%rbp), %rax
	# Unclobber %rcx
	movq -216(%rbp), %rcx
	# LowerBasicConversion(8873:3): %"class.__gnu_cxx::__normal_iterator"* ^8 -> i8* ^30
	movq -184(%rbp), %rax
	# LowerBasicConversion(8874:3): %"class.__gnu_cxx::__normal_iterator"* ^3 -> i8* ^31
	movq -144(%rbp), %rcx
	# Clobber %rcx
	movq %rcx, -216(%rbp)
	# Clobber %rax
	movq %rax, -224(%rbp)
	# SetupCalls(8875:3): move argument i8* align 8 ^30
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(8875:3): move argument i8* align 8 ^31
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(8875:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -224(%rbp), %rax
	# Unclobber %rcx
	movq -216(%rbp), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8876:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^7 -> ^32, indices=0,0
	movq -176(%rbp), %rax
	# LowerGetelementptr(8876:3): type of ^32 is %struct.LsItem**
	# LowerLoad(8877:3).2: (^32) into %struct.LsItem* ^33
	movq (%rax), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8878:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^8 -> ^34, indices=0,0
	movq -184(%rbp), %rax
	# LowerGetelementptr(8878:3): type of ^34 is %struct.LsItem**
	# LowerLoad(8879:3).2: (^34) into %struct.LsItem* ^35
	movq (%rax), %r8
	# Clobber %rcx
	movq %rcx, -216(%rbp)
	# Clobber %r8
	movq %r8, -232(%rbp)
	# SetupCalls(8880:3): move argument %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* nonnull dereferenceable(1) align 1 ^5
	# Fixed movzx with identical source and destination widths
	movq -160(%rbp), %rdi
	# SetupCalls(8880:3): move argument %struct.LsItem* ^33
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(8880:3): move argument %struct.LsItem* ^35
	# Fixed movzx with identical source and destination widths
	movq %r8, %rdx
	callq _ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EclINS_17__normal_iteratorIP6LsItemS2_ISF_SaISF_EEEESJ_EEbT_T0_
	# SetupCalls(8880:3): move i1 result from %rax
	movb %al, %r12b
	# Unclobber %r8
	movq -232(%rbp), %r8
	# Unclobber %rcx
	movq -216(%rbp), %rcx
	cmpb $0, %r12b
	jne .___ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M226
	jmp .___ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M483
	.___ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M226:
	# SetupCalls(8884:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq -168(%rbp), %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEdeEv
	# SetupCalls(8884:3): move %struct.LsItem* result from %rax
	movq %rax, %r12
	# SetupCalls(8885:3): move argument %struct.LsItem* nonnull dereferenceable(33) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq -192(%rbp), %rdi
	# SetupCalls(8885:3): move argument %struct.LsItem* nonnull dereferenceable(33) align 8 ^38
	# Fixed movzx with identical source and destination widths
	movq %r12, %rsi
	callq _ZN6LsItemC2EOS_
	# LowerBasicConversion(8886:3): %"class.__gnu_cxx::__normal_iterator"* ^10 -> i8* ^39
	movq -200(%rbp), %rax
	# LowerBasicConversion(8887:3): %"class.__gnu_cxx::__normal_iterator"* ^3 -> i8* ^40
	movq -144(%rbp), %rcx
	# Clobber %rcx
	movq %rcx, -216(%rbp)
	# Clobber %rax
	movq %rax, -224(%rbp)
	# SetupCalls(8888:3): move argument i8* align 8 ^39
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(8888:3): move argument i8* align 8 ^40
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(8888:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -224(%rbp), %rax
	# Unclobber %rcx
	movq -216(%rbp), %rcx
	# LowerBasicConversion(8889:3): %"class.__gnu_cxx::__normal_iterator"* ^11 -> i8* ^41
	movq -208(%rbp), %rax
	# LowerBasicConversion(8890:3): %"class.__gnu_cxx::__normal_iterator"* ^6 -> i8* ^42
	movq -168(%rbp), %rcx
	# Clobber %rcx
	movq %rcx, -216(%rbp)
	# Clobber %rax
	movq %rax, -224(%rbp)
	# SetupCalls(8891:3): move argument i8* align 8 ^41
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(8891:3): move argument i8* align 8 ^42
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(8891:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -224(%rbp), %rax
	# Unclobber %rcx
	movq -216(%rbp), %rcx
	# SetupCalls(8892:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq -168(%rbp), %rdi
	# SetupCalls(8892:3): move argument i64 1
	movq $1, %rsi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEplEl
	# SetupCalls(8892:3): move %struct.LsItem* result from %rax
	movq %rax, %r12
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8893:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^12 -> ^44, indices=0,0
	movq %r13, %rax
	# LowerGetelementptr(8893:3): type of ^44 is %struct.LsItem**
	# LowerStore(8894:3).9: mov %struct.LsItem* ^43, (^44)
	movq %r12, (%rax)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8895:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^10 -> ^45, indices=0,0
	movq -200(%rbp), %rcx
	# LowerGetelementptr(8895:3): type of ^45 is %struct.LsItem**
	# LowerLoad(8896:3).2: (^45) into %struct.LsItem* ^46
	movq (%rcx), %rax
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8897:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^11 -> ^47, indices=0,0
	movq -208(%rbp), %rcx
	# LowerGetelementptr(8897:3): type of ^47 is %struct.LsItem**
	# LowerLoad(8898:3).2: (^47) into %struct.LsItem* ^48
	movq (%rcx), %rdx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8899:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^12 -> ^49, indices=0,0
	movq %r13, %rcx
	# LowerGetelementptr(8899:3): type of ^49 is %struct.LsItem**
	# LowerLoad(8900:3).2: (^49) into %struct.LsItem* ^50
	movq (%rcx), %r8
	# Clobber %rdx
	movq %rdx, -240(%rbp)
	# Clobber %r8
	movq %r8, -232(%rbp)
	# Clobber %rax
	movq %rax, -224(%rbp)
	# SetupCalls(8901:3): move argument %struct.LsItem* ^46
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(8901:3): move argument %struct.LsItem* ^48
	# Fixed movzx with identical source and destination widths
	movq %rdx, %rsi
	# SetupCalls(8901:3): move argument %struct.LsItem* ^50
	# Fixed movzx with identical source and destination widths
	movq %r8, %rdx
	callq _ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_
	# SetupCalls(8901:3): move %struct.LsItem* result from %rax
	movq %rax, %r12
	# Unclobber %rax
	movq -224(%rbp), %rax
	# Unclobber %r8
	movq -232(%rbp), %r8
	# Unclobber %rdx
	movq -240(%rbp), %rdx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8902:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^13 -> ^52, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(8902:3): type of ^52 is %struct.LsItem**
	# LowerStore(8903:3).9: mov %struct.LsItem* ^51, (^52)
	movq %r12, (%rax)
	# SetupCalls(8904:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq -144(%rbp), %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEdeEv
	# SetupCalls(8904:3): move %struct.LsItem* result from %rax
	movq %rax, %r12
	# SetupCalls(8905:3): move argument %struct.LsItem* nonnull dereferenceable(33) align 8 ^53
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(8905:3): move argument %struct.LsItem* nonnull dereferenceable(33) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq -192(%rbp), %rsi
	callq _ZN6LsItemaSEOS_
	# SetupCalls(8905:3): move %struct.LsItem* result from %rax
	movq %rax, %rax
	# SetupCalls(8906:3): move argument %struct.LsItem* nonnull dereferenceable(33) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq -192(%rbp), %rdi
	callq _ZN6LsItemD2Ev
	jmp .___ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M588
	.___ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M483:
	# LowerBasicConversion(8910:3): %"class.__gnu_cxx::__normal_iterator"* ^14 -> i8* ^56
	movq %r14, %rax
	# LowerBasicConversion(8911:3): %"class.__gnu_cxx::__normal_iterator"* ^6 -> i8* ^57
	movq -168(%rbp), %rcx
	# Clobber %rcx
	movq %rcx, -216(%rbp)
	# Clobber %rax
	movq %rax, -224(%rbp)
	# SetupCalls(8912:3): move argument i8* align 8 ^56
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(8912:3): move argument i8* align 8 ^57
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(8912:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -224(%rbp), %rax
	# Unclobber %rcx
	movq -216(%rbp), %rcx
	# LowerBasicConversion(8913:3): %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* ^16 -> i8* ^58
	movq %r15, %rax
	# LowerBasicConversion(8914:3): %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* ^5 -> i8* ^59
	movq -160(%rbp), %rcx
	# Clobber %rcx
	movq %rcx, -216(%rbp)
	# Clobber %rax
	movq %rax, -224(%rbp)
	# SetupCalls(8915:3): move argument i8* align 1 ^58
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(8915:3): move argument i8* align 1 ^59
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(8915:3): move argument i64 1
	movq $1, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -224(%rbp), %rax
	# Unclobber %rcx
	movq -216(%rbp), %rcx
	callq _ZN9__gnu_cxx5__ops15__val_comp_iterIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterISD_EE
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8917:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^14 -> ^60, indices=0,0
	movq %r14, %rax
	# LowerGetelementptr(8917:3): type of ^60 is %struct.LsItem**
	# LowerLoad(8918:3).2: (^60) into %struct.LsItem* ^61
	movq (%rax), %rcx
	# Clobber %rcx
	movq %rcx, -216(%rbp)
	# SetupCalls(8919:3): move argument %struct.LsItem* ^61
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	callq _ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops14_Val_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_
	# Unclobber %rcx
	movq -216(%rbp), %rcx
	.___ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M588:
	# SetupCalls(8926:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq -168(%rbp), %rdi
	callq _ZN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEppEv
	# SetupCalls(8926:3): move %"class.__gnu_cxx::__normal_iterator"* result from %rax
	movq %rax, %rax
	jmp .___ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M102
	.___ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M613:
	movq -248(%rbp), %r15
	movq -336(%rbp), %r14
	movq -320(%rbp), %r13
	movq -352(%rbp), %r12
	movq -328(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt13__countl_zeroImEiT_
.p2align 4, 0x90
_ZSt13__countl_zeroImEiT_:
	.___ZSt13__countl_zeroImEiT___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(80 + 0, 16)
	subq $80, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -48(%rbp)
	# LowerAlloca(8795:3): size = 4, type = i32*, var = ^2
	leaq -4(%rbp), %rsi
	# LowerAlloca(8796:3): size = 8, type = i64*, var = ^3
	leaq -16(%rbp), %r9
	# LowerAlloca(8797:3): size = 4, type = i32*, var = ^4
	leaq -20(%rbp), %rbx
	# LowerAlloca(8798:3): size = 4, type = i32*, var = ^5
	leaq -24(%rbp), %r8
	# LowerAlloca(8799:3): size = 4, type = i32*, var = ^6
	leaq -28(%rbp), %rdx
	# LowerAlloca(8800:3): size = 4, type = i32*, var = ^7
	leaq -32(%rbp), %rcx
	# LowerAlloca(8801:3): size = 4, type = i32*, var = ^8
	leaq -36(%rbp), %rax
	# LowerStore(8802:3).9: mov i64 %rdi, (^3)
	movq %rdi, (%r9)
	# LowerStore(8803:3).3: mov $imm, (^4)
	movl $64, (%rbx)
	# LowerLoad(8804:3).2: (^3) into i64 ^9
	movq (%r9), %rbx
	# LowerIcmp(8805:3): i64 ^9 vs. intlike 0
	cmpq $0, %rbx
	sete %bl
	andq $1, %rbx
	cmpb $0, %bl
	jne .___ZSt13__countl_zeroImEiT___M25
	jmp .___ZSt13__countl_zeroImEiT___M28
	.___ZSt13__countl_zeroImEiT___M25:
	# LowerStore(8809:3).3: mov $imm, (^2)
	movl $64, (%rsi)
	jmp .___ZSt13__countl_zeroImEiT___M47
	.___ZSt13__countl_zeroImEiT___M28:
	# LowerStore(8813:3).3: mov $imm, (^5)
	movl $64, (%r8)
	# LowerStore(8814:3).3: mov $imm, (^6)
	movl $64, (%rdx)
	# LowerStore(8815:3).3: mov $imm, (^7)
	movl $32, (%rcx)
	# LowerStore(8816:3).3: mov $imm, (^8)
	movl $0, (%rax)
	# LowerLoad(8817:3).2: (^3) into i64 ^13
	movq (%r9), %rax
	lzcntq %rax, %rbx
	# LowerTrunc(8819:3): 64 to 32, move and clear upper bits
	movl %ebx, %eax
	# LowerMath(8820:3): ^15, 0 into i32 ^16
	movl %eax, %ebx
	subl $0, %ebx
	# LowerStore(8821:3).9: mov i32 ^16, (^2)
	movl %ebx, (%rsi)
	.___ZSt13__countl_zeroImEiT___M47:
	# LowerLoad(8825:3).2: (^2) into i32 ^18
	movl (%rsi), %eax
	movq -48(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt11__bit_widthImEiT_
.p2align 4, 0x90
_ZSt11__bit_widthImEiT_:
	.___ZSt11__bit_widthImEiT___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(40 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	# LowerAlloca(8783:3): size = 8, type = i64*, var = ^2
	leaq -8(%rbp), %rbx
	# LowerAlloca(8784:3): size = 4, type = i32*, var = ^3
	leaq -12(%rbp), %rax
	# LowerStore(8785:3).9: mov i64 %rdi, (^2)
	movq %rdi, (%rbx)
	# LowerStore(8786:3).3: mov $imm, (^3)
	movl $64, (%rax)
	# LowerLoad(8787:3).2: (^2) into i64 ^4
	movq (%rbx), %rax
	# Clobber %rax
	movq %rax, -24(%rbp)
	# SetupCalls(8788:3): move argument i64 ^4
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZSt13__countl_zeroImEiT_
	# SetupCalls(8788:3): move i32 result from %rax
	movl %eax, %ebx
	# Unclobber %rax
	movq -24(%rbp), %rax
	# LowerMath(8789:3): 64, ^5 into i32 ^6
	movl $64, %eax
	subl %ebx, %eax
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt4swapI6LsItemENSt9enable_ifIXsr6__and_ISt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SD_
.p2align 4, 0x90
_ZSt4swapI6LsItemENSt9enable_ifIXsr6__and_ISt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SD_:
	.___ZSt4swapI6LsItemENSt9enable_ifIXsr6__and_ISt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SD___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(96 + 0, 16)
	subq $96, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -88(%rbp)
	movq %r12, -96(%rbp)
	movq %r13, -80(%rbp)
	# LowerAlloca(8765:3): size = 8, type = %struct.LsItem**, var = ^3
	leaq -8(%rbp), %r13
	# LowerAlloca(8766:3): size = 8, type = %struct.LsItem**, var = ^4
	leaq -16(%rbp), %rbx
	# LowerAlloca(8767:3): size = 40, type = %struct.LsItem*, var = ^5
	leaq -56(%rbp), %r12
	# LowerStore(8768:3).9: mov %struct.LsItem* %rdi, (^3)
	movq %rdi, (%r13)
	# LowerStore(8769:3).9: mov %struct.LsItem* %rsi, (^4)
	movq %rsi, (%rbx)
	# LowerLoad(8770:3).2: (^3) into %struct.LsItem* ^6
	movq (%r13), %rax
	# Clobber %rax
	movq %rax, -64(%rbp)
	# SetupCalls(8771:3): move argument %struct.LsItem* nonnull dereferenceable(33) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(8771:3): move argument %struct.LsItem* nonnull dereferenceable(33) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZN6LsItemC2EOS_
	# Unclobber %rax
	movq -64(%rbp), %rax
	# LowerLoad(8772:3).2: (^4) into %struct.LsItem* ^7
	movq (%rbx), %rcx
	# LowerLoad(8773:3).2: (^3) into %struct.LsItem* ^8
	movq (%r13), %rax
	# Clobber %rcx
	movq %rcx, -72(%rbp)
	# Clobber %rax
	movq %rax, -64(%rbp)
	# SetupCalls(8774:3): move argument %struct.LsItem* nonnull dereferenceable(33) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(8774:3): move argument %struct.LsItem* nonnull dereferenceable(33) align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	callq _ZN6LsItemaSEOS_
	# SetupCalls(8774:3): move %struct.LsItem* result from %rax
	movq %rax, %rax
	# Unclobber %rax
	movq -64(%rbp), %rax
	# Unclobber %rcx
	movq -72(%rbp), %rcx
	# LowerLoad(8775:3).2: (^4) into %struct.LsItem* ^10
	movq (%rbx), %rax
	# Clobber %rax
	movq %rax, -64(%rbp)
	# SetupCalls(8776:3): move argument %struct.LsItem* nonnull dereferenceable(33) align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(8776:3): move argument %struct.LsItem* nonnull dereferenceable(33) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r12, %rsi
	callq _ZN6LsItemaSEOS_
	# SetupCalls(8776:3): move %struct.LsItem* result from %rax
	movq %rax, %rax
	# Unclobber %rax
	movq -64(%rbp), %rax
	# SetupCalls(8777:3): move argument %struct.LsItem* nonnull dereferenceable(33) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	callq _ZN6LsItemD2Ev
	movq -80(%rbp), %r13
	movq -96(%rbp), %r12
	movq -88(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEES7_EvT_T0_
.p2align 4, 0x90
_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEES7_EvT_T0_:
	.___ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEES7_EvT_T0___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(48 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	movq %r12, -40(%rbp)
	# LowerAlloca(8751:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^3
	leaq -8(%rbp), %rcx
	# LowerAlloca(8752:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^4
	leaq -16(%rbp), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8753:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^3 -> ^5, indices=0,0
	movq %rcx, %rax
	# LowerGetelementptr(8753:3): type of ^5 is %struct.LsItem**
	# LowerStore(8754:3).9: mov %struct.LsItem* %rdi, (^5)
	movq %rdi, (%rax)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8755:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^4 -> ^6, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(8755:3): type of ^6 is %struct.LsItem**
	# LowerStore(8756:3).9: mov %struct.LsItem* %rsi, (^6)
	movq %rsi, (%rax)
	# Clobber %rcx
	movq %rcx, -24(%rbp)
	# SetupCalls(8757:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEdeEv
	# SetupCalls(8757:3): move %struct.LsItem* result from %rax
	movq %rax, %r12
	# Unclobber %rcx
	movq -24(%rbp), %rcx
	# SetupCalls(8758:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEdeEv
	# SetupCalls(8758:3): move %struct.LsItem* result from %rax
	movq %rax, %rbx
	# SetupCalls(8759:3): move argument %struct.LsItem* nonnull dereferenceable(33) align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(8759:3): move argument %struct.LsItem* nonnull dereferenceable(33) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZSt4swapI6LsItemENSt9enable_ifIXsr6__and_ISt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SD_
	movq -40(%rbp), %r12
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEET_SK_SK_SK_T0_
.p2align 4, 0x90
_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEET_SK_SK_SK_T0_:
	.___ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEET_SK_SK_SK_T0___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(288 + 0, 16)
	subq $288, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -256(%rbp)
	movq %r12, -248(%rbp)
	movq %r13, -272(%rbp)
	movq %r14, -240(%rbp)
	movq %r15, -184(%rbp)
	# LowerAlloca(8659:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^4
	# Fixing source-to-dest leaq -8(%rbp), -96(%rbp)
	leaq -8(%rbp), %r15
	movq %r15, -96(%rbp)
	# LowerAlloca(8660:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^5
	# Fixing source-to-dest leaq -16(%rbp), -104(%rbp)
	leaq -16(%rbp), %r15
	movq %r15, -104(%rbp)
	# LowerAlloca(8661:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^6
	# Fixing source-to-dest leaq -24(%rbp), -112(%rbp)
	leaq -24(%rbp), %r15
	movq %r15, -112(%rbp)
	# LowerAlloca(8662:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^7
	# Fixing source-to-dest leaq -32(%rbp), -120(%rbp)
	leaq -32(%rbp), %r15
	movq %r15, -120(%rbp)
	# LowerAlloca(8663:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, var = ^8
	# Fixing source-to-dest leaq -33(%rbp), -128(%rbp)
	leaq -33(%rbp), %r15
	movq %r15, -128(%rbp)
	# LowerAlloca(8664:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^9
	# Fixing source-to-dest leaq -48(%rbp), -136(%rbp)
	leaq -48(%rbp), %r15
	movq %r15, -136(%rbp)
	# LowerAlloca(8665:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^10
	# Fixing source-to-dest leaq -56(%rbp), -144(%rbp)
	leaq -56(%rbp), %r15
	movq %r15, -144(%rbp)
	# LowerAlloca(8666:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^11
	leaq -64(%rbp), %r14
	# LowerAlloca(8667:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^12
	leaq -72(%rbp), %r12
	# LowerAlloca(8668:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^13
	leaq -80(%rbp), %rbx
	# LowerAlloca(8669:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^14
	leaq -88(%rbp), %r15
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8670:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^5 -> ^15, indices=0,0
	movq -104(%rbp), %rax
	# LowerGetelementptr(8670:3): type of ^15 is %struct.LsItem**
	# LowerStore(8671:3).9: mov %struct.LsItem* %rdi, (^15)
	movq %rdi, (%rax)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8672:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^6 -> ^16, indices=0,0
	movq -112(%rbp), %rax
	# LowerGetelementptr(8672:3): type of ^16 is %struct.LsItem**
	# LowerStore(8673:3).9: mov %struct.LsItem* %rsi, (^16)
	movq %rsi, (%rax)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8674:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^7 -> ^17, indices=0,0
	movq -120(%rbp), %rax
	# LowerGetelementptr(8674:3): type of ^17 is %struct.LsItem**
	# LowerStore(8675:3).9: mov %struct.LsItem* %rdx, (^17)
	movq %rdx, (%rax)
	.___ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEET_SK_SK_SK_T0___M41:
	.___ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEET_SK_SK_SK_T0___M42:
	# LowerBasicConversion(8682:3): %"class.__gnu_cxx::__normal_iterator"* ^9 -> i8* ^20
	movq -136(%rbp), %rax
	# LowerBasicConversion(8683:3): %"class.__gnu_cxx::__normal_iterator"* ^5 -> i8* ^21
	movq -104(%rbp), %rcx
	# Clobber %rcx
	movq %rcx, -152(%rbp)
	# Clobber %rax
	movq %rax, -160(%rbp)
	# SetupCalls(8684:3): move argument i8* align 8 ^20
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(8684:3): move argument i8* align 8 ^21
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(8684:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -160(%rbp), %rax
	# Unclobber %rcx
	movq -152(%rbp), %rcx
	# LowerBasicConversion(8685:3): %"class.__gnu_cxx::__normal_iterator"* ^10 -> i8* ^22
	movq -144(%rbp), %rax
	# LowerBasicConversion(8686:3): %"class.__gnu_cxx::__normal_iterator"* ^7 -> i8* ^23
	movq -120(%rbp), %rcx
	# Clobber %rcx
	movq %rcx, -152(%rbp)
	# Clobber %rax
	movq %rax, -160(%rbp)
	# SetupCalls(8687:3): move argument i8* align 8 ^22
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(8687:3): move argument i8* align 8 ^23
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(8687:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -160(%rbp), %rax
	# Unclobber %rcx
	movq -152(%rbp), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8688:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^9 -> ^24, indices=0,0
	movq -136(%rbp), %rax
	# LowerGetelementptr(8688:3): type of ^24 is %struct.LsItem**
	# LowerLoad(8689:3).2: (^24) into %struct.LsItem* ^25
	movq (%rax), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8690:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^10 -> ^26, indices=0,0
	movq -144(%rbp), %rax
	# LowerGetelementptr(8690:3): type of ^26 is %struct.LsItem**
	# LowerLoad(8691:3).2: (^26) into %struct.LsItem* ^27
	movq (%rax), %r8
	# Clobber %rcx
	movq %rcx, -152(%rbp)
	# Clobber %r8
	movq %r8, -168(%rbp)
	# SetupCalls(8692:3): move argument %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* nonnull dereferenceable(1) align 1 ^8
	# Fixed movzx with identical source and destination widths
	movq -128(%rbp), %rdi
	# SetupCalls(8692:3): move argument %struct.LsItem* ^25
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(8692:3): move argument %struct.LsItem* ^27
	# Fixed movzx with identical source and destination widths
	movq %r8, %rdx
	callq _ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EclINS_17__normal_iteratorIP6LsItemS2_ISF_SaISF_EEEESJ_EEbT_T0_
	# SetupCalls(8692:3): move i1 result from %rax
	movb %al, %r13b
	# Unclobber %r8
	movq -168(%rbp), %r8
	# Unclobber %rcx
	movq -152(%rbp), %rcx
	cmpb $0, %r13b
	jne .___ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEET_SK_SK_SK_T0___M140
	jmp .___ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEET_SK_SK_SK_T0___M164
	.___ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEET_SK_SK_SK_T0___M140:
	# SetupCalls(8696:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq -104(%rbp), %rdi
	callq _ZN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEppEv
	# SetupCalls(8696:3): move %"class.__gnu_cxx::__normal_iterator"* result from %rax
	movq %rax, %rax
	jmp .___ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEET_SK_SK_SK_T0___M42
	.___ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEET_SK_SK_SK_T0___M164:
	# SetupCalls(8700:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq -112(%rbp), %rdi
	callq _ZN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEmmEv
	# SetupCalls(8700:3): move %"class.__gnu_cxx::__normal_iterator"* result from %rax
	movq %rax, %rax
	.___ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEET_SK_SK_SK_T0___M188:
	# LowerBasicConversion(8704:3): %"class.__gnu_cxx::__normal_iterator"* ^11 -> i8* ^34
	movq %r14, %rax
	# LowerBasicConversion(8705:3): %"class.__gnu_cxx::__normal_iterator"* ^7 -> i8* ^35
	movq -120(%rbp), %rcx
	# Clobber %rcx
	movq %rcx, -152(%rbp)
	# Clobber %rax
	movq %rax, -160(%rbp)
	# SetupCalls(8706:3): move argument i8* align 8 ^34
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(8706:3): move argument i8* align 8 ^35
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(8706:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -160(%rbp), %rax
	# Unclobber %rcx
	movq -152(%rbp), %rcx
	# LowerBasicConversion(8707:3): %"class.__gnu_cxx::__normal_iterator"* ^12 -> i8* ^36
	movq %r12, %rax
	# LowerBasicConversion(8708:3): %"class.__gnu_cxx::__normal_iterator"* ^6 -> i8* ^37
	movq -112(%rbp), %rcx
	# Clobber %rcx
	movq %rcx, -152(%rbp)
	# Clobber %rax
	movq %rax, -160(%rbp)
	# SetupCalls(8709:3): move argument i8* align 8 ^36
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(8709:3): move argument i8* align 8 ^37
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(8709:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -160(%rbp), %rax
	# Unclobber %rcx
	movq -152(%rbp), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8710:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^11 -> ^38, indices=0,0
	movq %r14, %rax
	# LowerGetelementptr(8710:3): type of ^38 is %struct.LsItem**
	# LowerLoad(8711:3).2: (^38) into %struct.LsItem* ^39
	movq (%rax), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8712:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^12 -> ^40, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(8712:3): type of ^40 is %struct.LsItem**
	# LowerLoad(8713:3).2: (^40) into %struct.LsItem* ^41
	movq (%rax), %r8
	# Clobber %rcx
	movq %rcx, -152(%rbp)
	# Clobber %r8
	movq %r8, -168(%rbp)
	# SetupCalls(8714:3): move argument %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* nonnull dereferenceable(1) align 1 ^8
	# Fixed movzx with identical source and destination widths
	movq -128(%rbp), %rdi
	# SetupCalls(8714:3): move argument %struct.LsItem* ^39
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(8714:3): move argument %struct.LsItem* ^41
	# Fixed movzx with identical source and destination widths
	movq %r8, %rdx
	callq _ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EclINS_17__normal_iteratorIP6LsItemS2_ISF_SaISF_EEEESJ_EEbT_T0_
	# SetupCalls(8714:3): move i1 result from %rax
	movb %al, %r13b
	# Unclobber %r8
	movq -168(%rbp), %r8
	# Unclobber %rcx
	movq -152(%rbp), %rcx
	cmpb $0, %r13b
	jne .___ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEET_SK_SK_SK_T0___M286
	jmp .___ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEET_SK_SK_SK_T0___M310
	.___ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEET_SK_SK_SK_T0___M286:
	# SetupCalls(8718:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq -112(%rbp), %rdi
	callq _ZN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEmmEv
	# SetupCalls(8718:3): move %"class.__gnu_cxx::__normal_iterator"* result from %rax
	movq %rax, %rax
	jmp .___ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEET_SK_SK_SK_T0___M188
	.___ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEET_SK_SK_SK_T0___M310:
	# SetupCalls(8722:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq -104(%rbp), %rdi
	# SetupCalls(8722:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq -112(%rbp), %rsi
	callq _ZN9__gnu_cxxltIP6LsItemSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_
	# SetupCalls(8722:3): move i1 result from %rax
	movb %al, %r13b
	cmpb $0, %r13b
	jne .___ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEET_SK_SK_SK_T0___M372
	.___ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEET_SK_SK_SK_T0___M336:
	# LowerBasicConversion(8726:3): %"class.__gnu_cxx::__normal_iterator"* ^4 -> i8* ^48
	movq -96(%rbp), %rcx
	# LowerBasicConversion(8727:3): %"class.__gnu_cxx::__normal_iterator"* ^5 -> i8* ^49
	movq -104(%rbp), %rax
	# Clobber %rcx
	movq %rcx, -152(%rbp)
	# Clobber %rax
	movq %rax, -160(%rbp)
	# SetupCalls(8728:3): move argument i8* align 8 ^48
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(8728:3): move argument i8* align 8 ^49
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(8728:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -160(%rbp), %rax
	# Unclobber %rcx
	movq -152(%rbp), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8729:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^4 -> ^50, indices=0,0
	movq -96(%rbp), %rax
	# LowerGetelementptr(8729:3): type of ^50 is %struct.LsItem**
	# LowerLoad(8730:3).2: (^50) into %struct.LsItem* ^51
	movq (%rax), %rcx
	movq %rcx, %rax
	movq -184(%rbp), %r15
	movq -240(%rbp), %r14
	movq -272(%rbp), %r13
	movq -248(%rbp), %r12
	movq -256(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq
	.___ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEET_SK_SK_SK_T0___M372:
	# LowerBasicConversion(8734:3): %"class.__gnu_cxx::__normal_iterator"* ^13 -> i8* ^53
	movq %rbx, %rax
	# LowerBasicConversion(8735:3): %"class.__gnu_cxx::__normal_iterator"* ^5 -> i8* ^54
	movq -104(%rbp), %rcx
	# Clobber %rcx
	movq %rcx, -152(%rbp)
	# Clobber %rax
	movq %rax, -160(%rbp)
	# SetupCalls(8736:3): move argument i8* align 8 ^53
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(8736:3): move argument i8* align 8 ^54
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(8736:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -160(%rbp), %rax
	# Unclobber %rcx
	movq -152(%rbp), %rcx
	# LowerBasicConversion(8737:3): %"class.__gnu_cxx::__normal_iterator"* ^14 -> i8* ^55
	movq %r15, %rcx
	# LowerBasicConversion(8738:3): %"class.__gnu_cxx::__normal_iterator"* ^6 -> i8* ^56
	movq -112(%rbp), %rax
	# Clobber %rcx
	movq %rcx, -152(%rbp)
	# Clobber %rax
	movq %rax, -160(%rbp)
	# SetupCalls(8739:3): move argument i8* align 8 ^55
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(8739:3): move argument i8* align 8 ^56
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(8739:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -160(%rbp), %rax
	# Unclobber %rcx
	movq -152(%rbp), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8740:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^13 -> ^57, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(8740:3): type of ^57 is %struct.LsItem**
	# LowerLoad(8741:3).2: (^57) into %struct.LsItem* ^58
	movq (%rax), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8742:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^14 -> ^59, indices=0,0
	movq %r15, %rax
	# LowerGetelementptr(8742:3): type of ^59 is %struct.LsItem**
	# LowerLoad(8743:3).2: (^59) into %struct.LsItem* ^60
	movq (%rax), %rdx
	# Clobber %rdx
	movq %rdx, -176(%rbp)
	# Clobber %rcx
	movq %rcx, -152(%rbp)
	# SetupCalls(8744:3): move argument %struct.LsItem* ^58
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(8744:3): move argument %struct.LsItem* ^60
	# Fixed movzx with identical source and destination widths
	movq %rdx, %rsi
	callq _ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEES7_EvT_T0_
	# Unclobber %rcx
	movq -152(%rbp), %rcx
	# Unclobber %rdx
	movq -176(%rbp), %rdx
	# SetupCalls(8745:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq -104(%rbp), %rdi
	callq _ZN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEppEv
	# SetupCalls(8745:3): move %"class.__gnu_cxx::__normal_iterator"* result from %rax
	movq %rax, %rax
	jmp .___ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEET_SK_SK_SK_T0___M41

.section .text
.global _ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_SK_T0_
.p2align 4, 0x90
_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_SK_T0_:
	.___ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_SK_T0___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(896 + 0, 16)
	subq $896, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -480(%rbp)
	movq %r12, -464(%rbp)
	movq %r13, -472(%rbp)
	movq %r14, -560(%rbp)
	movq %r15, -424(%rbp)
	# LowerAlloca(8453:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^5
	# Fixing source-to-dest leaq -8(%rbp), -232(%rbp)
	leaq -8(%rbp), %r15
	movq %r15, -232(%rbp)
	# LowerAlloca(8454:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^6
	# Fixing source-to-dest leaq -16(%rbp), -240(%rbp)
	leaq -16(%rbp), %r15
	movq %r15, -240(%rbp)
	# LowerAlloca(8455:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^7
	# Fixing source-to-dest leaq -24(%rbp), -248(%rbp)
	leaq -24(%rbp), %r15
	movq %r15, -248(%rbp)
	# LowerAlloca(8456:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^8
	# Fixing source-to-dest leaq -32(%rbp), -224(%rbp)
	leaq -32(%rbp), %r15
	movq %r15, -224(%rbp)
	# LowerAlloca(8457:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, var = ^9
	# Fixing source-to-dest leaq -33(%rbp), -256(%rbp)
	leaq -33(%rbp), %r15
	movq %r15, -256(%rbp)
	# LowerAlloca(8458:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^10
	leaq -48(%rbp), %r12
	# LowerAlloca(8459:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^11
	leaq -56(%rbp), %r13
	# LowerAlloca(8460:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^12
	leaq -64(%rbp), %rbx
	# LowerAlloca(8461:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^13
	# Fixing source-to-dest leaq -72(%rbp), -392(%rbp)
	leaq -72(%rbp), %r15
	movq %r15, -392(%rbp)
	# LowerAlloca(8462:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^14
	# Fixing source-to-dest leaq -80(%rbp), -336(%rbp)
	leaq -80(%rbp), %r15
	movq %r15, -336(%rbp)
	# LowerAlloca(8463:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^15
	# Fixing source-to-dest leaq -88(%rbp), -328(%rbp)
	leaq -88(%rbp), %r15
	movq %r15, -328(%rbp)
	# LowerAlloca(8464:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^16
	# Fixing source-to-dest leaq -96(%rbp), -352(%rbp)
	leaq -96(%rbp), %r15
	movq %r15, -352(%rbp)
	# LowerAlloca(8465:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^17
	# Fixing source-to-dest leaq -104(%rbp), -344(%rbp)
	leaq -104(%rbp), %r15
	movq %r15, -344(%rbp)
	# LowerAlloca(8466:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^18
	# Fixing source-to-dest leaq -112(%rbp), -272(%rbp)
	leaq -112(%rbp), %r15
	movq %r15, -272(%rbp)
	# LowerAlloca(8467:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^19
	# Fixing source-to-dest leaq -120(%rbp), -264(%rbp)
	leaq -120(%rbp), %r15
	movq %r15, -264(%rbp)
	# LowerAlloca(8468:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^20
	# Fixing source-to-dest leaq -128(%rbp), -288(%rbp)
	leaq -128(%rbp), %r15
	movq %r15, -288(%rbp)
	# LowerAlloca(8469:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^21
	# Fixing source-to-dest leaq -136(%rbp), -280(%rbp)
	leaq -136(%rbp), %r15
	movq %r15, -280(%rbp)
	# LowerAlloca(8470:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^22
	leaq -144(%rbp), %r14
	# LowerAlloca(8471:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^23
	leaq -152(%rbp), %r15
	# LowerAlloca(8472:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^24
	# Fixing source-to-dest leaq -160(%rbp), -368(%rbp)
	pushq %r15
	leaq -160(%rbp), %r15
	movq %r15, -368(%rbp)
	popq %r15
	# LowerAlloca(8473:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^25
	# Fixing source-to-dest leaq -168(%rbp), -360(%rbp)
	pushq %r15
	leaq -168(%rbp), %r15
	movq %r15, -360(%rbp)
	popq %r15
	# LowerAlloca(8474:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^26
	# Fixing source-to-dest leaq -176(%rbp), -384(%rbp)
	pushq %r15
	leaq -176(%rbp), %r15
	movq %r15, -384(%rbp)
	popq %r15
	# LowerAlloca(8475:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^27
	# Fixing source-to-dest leaq -184(%rbp), -376(%rbp)
	pushq %r15
	leaq -184(%rbp), %r15
	movq %r15, -376(%rbp)
	popq %r15
	# LowerAlloca(8476:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^28
	# Fixing source-to-dest leaq -192(%rbp), -304(%rbp)
	pushq %r15
	leaq -192(%rbp), %r15
	movq %r15, -304(%rbp)
	popq %r15
	# LowerAlloca(8477:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^29
	# Fixing source-to-dest leaq -200(%rbp), -296(%rbp)
	pushq %r15
	leaq -200(%rbp), %r15
	movq %r15, -296(%rbp)
	popq %r15
	# LowerAlloca(8478:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^30
	# Fixing source-to-dest leaq -208(%rbp), -320(%rbp)
	pushq %r15
	leaq -208(%rbp), %r15
	movq %r15, -320(%rbp)
	popq %r15
	# LowerAlloca(8479:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^31
	# Fixing source-to-dest leaq -216(%rbp), -312(%rbp)
	pushq %r15
	leaq -216(%rbp), %r15
	movq %r15, -312(%rbp)
	popq %r15
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8480:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^5 -> ^32, indices=0,0
	movq -232(%rbp), %rax
	# LowerGetelementptr(8480:3): type of ^32 is %struct.LsItem**
	# LowerStore(8481:3).9: mov %struct.LsItem* %rdi, (^32)
	movq %rdi, (%rax)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8482:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^6 -> ^33, indices=0,0
	movq -240(%rbp), %rax
	# LowerGetelementptr(8482:3): type of ^33 is %struct.LsItem**
	# LowerStore(8483:3).9: mov %struct.LsItem* %rsi, (^33)
	movq %rsi, (%rax)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8484:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^7 -> ^34, indices=0,0
	movq -248(%rbp), %rax
	# LowerGetelementptr(8484:3): type of ^34 is %struct.LsItem**
	# LowerStore(8485:3).9: mov %struct.LsItem* %rdx, (^34)
	movq %rdx, (%rax)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8486:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^8 -> ^35, indices=0,0
	movq -224(%rbp), %rax
	# LowerGetelementptr(8486:3): type of ^35 is %struct.LsItem**
	# LowerStore(8487:3).9: mov %struct.LsItem* %rcx, (^35)
	movq %rcx, (%rax)
	# LowerBasicConversion(8488:3): %"class.__gnu_cxx::__normal_iterator"* ^10 -> i8* ^36
	movq %r12, %rax
	# LowerBasicConversion(8489:3): %"class.__gnu_cxx::__normal_iterator"* ^6 -> i8* ^37
	movq -240(%rbp), %rcx
	# Clobber %rcx
	movq %rcx, -400(%rbp)
	# Clobber %rax
	movq %rax, -408(%rbp)
	# SetupCalls(8490:3): move argument i8* align 8 ^36
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(8490:3): move argument i8* align 8 ^37
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(8490:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -408(%rbp), %rax
	# Unclobber %rcx
	movq -400(%rbp), %rcx
	# LowerBasicConversion(8491:3): %"class.__gnu_cxx::__normal_iterator"* ^11 -> i8* ^38
	movq %r13, %rax
	# LowerBasicConversion(8492:3): %"class.__gnu_cxx::__normal_iterator"* ^7 -> i8* ^39
	movq -248(%rbp), %rcx
	# Clobber %rcx
	movq %rcx, -400(%rbp)
	# Clobber %rax
	movq %rax, -408(%rbp)
	# SetupCalls(8493:3): move argument i8* align 8 ^38
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(8493:3): move argument i8* align 8 ^39
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(8493:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -408(%rbp), %rax
	# Unclobber %rcx
	movq -400(%rbp), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8494:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^10 -> ^40, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(8494:3): type of ^40 is %struct.LsItem**
	# LowerLoad(8495:3).2: (^40) into %struct.LsItem* ^41
	movq (%rax), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8496:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^11 -> ^42, indices=0,0
	movq %r13, %rax
	# LowerGetelementptr(8496:3): type of ^42 is %struct.LsItem**
	# LowerLoad(8497:3).2: (^42) into %struct.LsItem* ^43
	movq (%rax), %r8
	# Clobber %rcx
	movq %rcx, -400(%rbp)
	# Clobber %r8
	movq %r8, -416(%rbp)
	# SetupCalls(8498:3): move argument %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* nonnull dereferenceable(1) align 1 ^9
	# Fixed movzx with identical source and destination widths
	movq -256(%rbp), %rdi
	# SetupCalls(8498:3): move argument %struct.LsItem* ^41
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(8498:3): move argument %struct.LsItem* ^43
	# Fixed movzx with identical source and destination widths
	movq %r8, %rdx
	callq _ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EclINS_17__normal_iteratorIP6LsItemS2_ISF_SaISF_EEEESJ_EEbT_T0_
	# SetupCalls(8498:3): move i1 result from %rax
	movb %al, %r12b
	# Unclobber %r8
	movq -416(%rbp), %r8
	# Unclobber %rcx
	movq -400(%rbp), %rcx
	cmpb $0, %r12b
	jne .___ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_SK_T0___M178
	jmp .___ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_SK_T0___M658
	.___ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_SK_T0___M178:
	# LowerBasicConversion(8502:3): %"class.__gnu_cxx::__normal_iterator"* ^12 -> i8* ^46
	movq %rbx, %rax
	# LowerBasicConversion(8503:3): %"class.__gnu_cxx::__normal_iterator"* ^7 -> i8* ^47
	movq -248(%rbp), %rcx
	# Clobber %rcx
	movq %rcx, -400(%rbp)
	# Clobber %rax
	movq %rax, -408(%rbp)
	# SetupCalls(8504:3): move argument i8* align 8 ^46
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(8504:3): move argument i8* align 8 ^47
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(8504:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -408(%rbp), %rax
	# Unclobber %rcx
	movq -400(%rbp), %rcx
	# LowerBasicConversion(8505:3): %"class.__gnu_cxx::__normal_iterator"* ^13 -> i8* ^48
	movq -392(%rbp), %rcx
	# LowerBasicConversion(8506:3): %"class.__gnu_cxx::__normal_iterator"* ^8 -> i8* ^49
	movq -224(%rbp), %rax
	# Clobber %rcx
	movq %rcx, -400(%rbp)
	# Clobber %rax
	movq %rax, -408(%rbp)
	# SetupCalls(8507:3): move argument i8* align 8 ^48
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(8507:3): move argument i8* align 8 ^49
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(8507:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -408(%rbp), %rax
	# Unclobber %rcx
	movq -400(%rbp), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8508:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^12 -> ^50, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(8508:3): type of ^50 is %struct.LsItem**
	# LowerLoad(8509:3).2: (^50) into %struct.LsItem* ^51
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8510:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^13 -> ^52, indices=0,0
	movq -392(%rbp), %rax
	# LowerGetelementptr(8510:3): type of ^52 is %struct.LsItem**
	# LowerLoad(8511:3).2: (^52) into %struct.LsItem* ^53
	movq (%rax), %rcx
	# Clobber %rcx
	movq %rcx, -400(%rbp)
	# SetupCalls(8512:3): move argument %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* nonnull dereferenceable(1) align 1 ^9
	# Fixed movzx with identical source and destination widths
	movq -256(%rbp), %rdi
	# SetupCalls(8512:3): move argument %struct.LsItem* ^51
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(8512:3): move argument %struct.LsItem* ^53
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdx
	callq _ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EclINS_17__normal_iteratorIP6LsItemS2_ISF_SaISF_EEEESJ_EEbT_T0_
	# SetupCalls(8512:3): move i1 result from %rax
	movb %al, %bl
	# Unclobber %rcx
	movq -400(%rbp), %rcx
	cmpb $0, %bl
	jne .___ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_SK_T0___M276
	jmp .___ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_SK_T0___M370
	.___ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_SK_T0___M276:
	# LowerBasicConversion(8516:3): %"class.__gnu_cxx::__normal_iterator"* ^14 -> i8* ^56
	movq -336(%rbp), %rax
	# LowerBasicConversion(8517:3): %"class.__gnu_cxx::__normal_iterator"* ^5 -> i8* ^57
	movq -232(%rbp), %rbx
	# Clobber %rax
	movq %rax, -408(%rbp)
	# SetupCalls(8518:3): move argument i8* align 8 ^56
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(8518:3): move argument i8* align 8 ^57
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(8518:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -408(%rbp), %rax
	# LowerBasicConversion(8519:3): %"class.__gnu_cxx::__normal_iterator"* ^15 -> i8* ^58
	movq -328(%rbp), %rax
	# LowerBasicConversion(8520:3): %"class.__gnu_cxx::__normal_iterator"* ^7 -> i8* ^59
	movq -248(%rbp), %rbx
	# Clobber %rax
	movq %rax, -408(%rbp)
	# SetupCalls(8521:3): move argument i8* align 8 ^58
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(8521:3): move argument i8* align 8 ^59
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(8521:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -408(%rbp), %rax
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8522:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^14 -> ^60, indices=0,0
	movq -336(%rbp), %rax
	# LowerGetelementptr(8522:3): type of ^60 is %struct.LsItem**
	# LowerLoad(8523:3).2: (^60) into %struct.LsItem* ^61
	movq (%rax), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8524:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^15 -> ^62, indices=0,0
	movq -328(%rbp), %rax
	# LowerGetelementptr(8524:3): type of ^62 is %struct.LsItem**
	# LowerLoad(8525:3).2: (^62) into %struct.LsItem* ^63
	movq (%rax), %rbx
	# Clobber %rcx
	movq %rcx, -400(%rbp)
	# SetupCalls(8526:3): move argument %struct.LsItem* ^61
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(8526:3): move argument %struct.LsItem* ^63
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEES7_EvT_T0_
	# Unclobber %rcx
	movq -400(%rbp), %rcx
	jmp .___ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_SK_T0___M657
	.___ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_SK_T0___M370:
	# LowerBasicConversion(8530:3): %"class.__gnu_cxx::__normal_iterator"* ^16 -> i8* ^65
	movq -352(%rbp), %rax
	# LowerBasicConversion(8531:3): %"class.__gnu_cxx::__normal_iterator"* ^6 -> i8* ^66
	movq -240(%rbp), %rbx
	# Clobber %rax
	movq %rax, -408(%rbp)
	# SetupCalls(8532:3): move argument i8* align 8 ^65
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(8532:3): move argument i8* align 8 ^66
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(8532:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -408(%rbp), %rax
	# LowerBasicConversion(8533:3): %"class.__gnu_cxx::__normal_iterator"* ^17 -> i8* ^67
	movq -344(%rbp), %rax
	# LowerBasicConversion(8534:3): %"class.__gnu_cxx::__normal_iterator"* ^8 -> i8* ^68
	movq -224(%rbp), %rbx
	# Clobber %rax
	movq %rax, -408(%rbp)
	# SetupCalls(8535:3): move argument i8* align 8 ^67
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(8535:3): move argument i8* align 8 ^68
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(8535:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -408(%rbp), %rax
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8536:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^16 -> ^69, indices=0,0
	movq -352(%rbp), %rax
	# LowerGetelementptr(8536:3): type of ^69 is %struct.LsItem**
	# LowerLoad(8537:3).2: (^69) into %struct.LsItem* ^70
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8538:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^17 -> ^71, indices=0,0
	movq -344(%rbp), %rax
	# LowerGetelementptr(8538:3): type of ^71 is %struct.LsItem**
	# LowerLoad(8539:3).2: (^71) into %struct.LsItem* ^72
	movq (%rax), %rcx
	# Clobber %rcx
	movq %rcx, -400(%rbp)
	# SetupCalls(8540:3): move argument %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* nonnull dereferenceable(1) align 1 ^9
	# Fixed movzx with identical source and destination widths
	movq -256(%rbp), %rdi
	# SetupCalls(8540:3): move argument %struct.LsItem* ^70
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(8540:3): move argument %struct.LsItem* ^72
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdx
	callq _ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EclINS_17__normal_iteratorIP6LsItemS2_ISF_SaISF_EEEESJ_EEbT_T0_
	# SetupCalls(8540:3): move i1 result from %rax
	movb %al, %bl
	# Unclobber %rcx
	movq -400(%rbp), %rcx
	cmpb $0, %bl
	jne .___ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_SK_T0___M468
	jmp .___ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_SK_T0___M562
	.___ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_SK_T0___M468:
	# LowerBasicConversion(8544:3): %"class.__gnu_cxx::__normal_iterator"* ^18 -> i8* ^75
	movq -272(%rbp), %rax
	# LowerBasicConversion(8545:3): %"class.__gnu_cxx::__normal_iterator"* ^5 -> i8* ^76
	movq -232(%rbp), %rbx
	# Clobber %rax
	movq %rax, -408(%rbp)
	# SetupCalls(8546:3): move argument i8* align 8 ^75
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(8546:3): move argument i8* align 8 ^76
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(8546:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -408(%rbp), %rax
	# LowerBasicConversion(8547:3): %"class.__gnu_cxx::__normal_iterator"* ^19 -> i8* ^77
	movq -264(%rbp), %rax
	# LowerBasicConversion(8548:3): %"class.__gnu_cxx::__normal_iterator"* ^8 -> i8* ^78
	movq -224(%rbp), %rbx
	# Clobber %rax
	movq %rax, -408(%rbp)
	# SetupCalls(8549:3): move argument i8* align 8 ^77
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(8549:3): move argument i8* align 8 ^78
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(8549:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -408(%rbp), %rax
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8550:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^18 -> ^79, indices=0,0
	movq -272(%rbp), %rax
	# LowerGetelementptr(8550:3): type of ^79 is %struct.LsItem**
	# LowerLoad(8551:3).2: (^79) into %struct.LsItem* ^80
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8552:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^19 -> ^81, indices=0,0
	movq -264(%rbp), %rax
	# LowerGetelementptr(8552:3): type of ^81 is %struct.LsItem**
	# LowerLoad(8553:3).2: (^81) into %struct.LsItem* ^82
	movq (%rax), %rcx
	# Clobber %rcx
	movq %rcx, -400(%rbp)
	# SetupCalls(8554:3): move argument %struct.LsItem* ^80
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(8554:3): move argument %struct.LsItem* ^82
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	callq _ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEES7_EvT_T0_
	# Unclobber %rcx
	movq -400(%rbp), %rcx
	jmp .___ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_SK_T0___M656
	.___ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_SK_T0___M562:
	# LowerBasicConversion(8558:3): %"class.__gnu_cxx::__normal_iterator"* ^20 -> i8* ^84
	movq -288(%rbp), %rax
	# LowerBasicConversion(8559:3): %"class.__gnu_cxx::__normal_iterator"* ^5 -> i8* ^85
	movq -232(%rbp), %rbx
	# Clobber %rax
	movq %rax, -408(%rbp)
	# SetupCalls(8560:3): move argument i8* align 8 ^84
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(8560:3): move argument i8* align 8 ^85
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(8560:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -408(%rbp), %rax
	# LowerBasicConversion(8561:3): %"class.__gnu_cxx::__normal_iterator"* ^21 -> i8* ^86
	movq -280(%rbp), %rax
	# LowerBasicConversion(8562:3): %"class.__gnu_cxx::__normal_iterator"* ^6 -> i8* ^87
	movq -240(%rbp), %rbx
	# Clobber %rax
	movq %rax, -408(%rbp)
	# SetupCalls(8563:3): move argument i8* align 8 ^86
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(8563:3): move argument i8* align 8 ^87
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(8563:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -408(%rbp), %rax
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8564:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^20 -> ^88, indices=0,0
	movq -288(%rbp), %rax
	# LowerGetelementptr(8564:3): type of ^88 is %struct.LsItem**
	# LowerLoad(8565:3).2: (^88) into %struct.LsItem* ^89
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8566:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^21 -> ^90, indices=0,0
	movq -280(%rbp), %rax
	# LowerGetelementptr(8566:3): type of ^90 is %struct.LsItem**
	# LowerLoad(8567:3).2: (^90) into %struct.LsItem* ^91
	movq (%rax), %rcx
	# Clobber %rcx
	movq %rcx, -400(%rbp)
	# SetupCalls(8568:3): move argument %struct.LsItem* ^89
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(8568:3): move argument %struct.LsItem* ^91
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	callq _ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEES7_EvT_T0_
	# Unclobber %rcx
	movq -400(%rbp), %rcx
	.___ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_SK_T0___M656:
	.___ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_SK_T0___M657:
	jmp .___ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_SK_T0___M1138
	.___ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_SK_T0___M658:
	# LowerBasicConversion(8578:3): %"class.__gnu_cxx::__normal_iterator"* ^22 -> i8* ^95
	movq %r14, %rax
	# LowerBasicConversion(8579:3): %"class.__gnu_cxx::__normal_iterator"* ^6 -> i8* ^96
	movq -240(%rbp), %rbx
	# Clobber %rax
	movq %rax, -408(%rbp)
	# SetupCalls(8580:3): move argument i8* align 8 ^95
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(8580:3): move argument i8* align 8 ^96
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(8580:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -408(%rbp), %rax
	# LowerBasicConversion(8581:3): %"class.__gnu_cxx::__normal_iterator"* ^23 -> i8* ^97
	movq %r15, %rax
	# LowerBasicConversion(8582:3): %"class.__gnu_cxx::__normal_iterator"* ^8 -> i8* ^98
	movq -224(%rbp), %rbx
	# Clobber %rax
	movq %rax, -408(%rbp)
	# SetupCalls(8583:3): move argument i8* align 8 ^97
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(8583:3): move argument i8* align 8 ^98
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(8583:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -408(%rbp), %rax
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8584:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^22 -> ^99, indices=0,0
	movq %r14, %rax
	# LowerGetelementptr(8584:3): type of ^99 is %struct.LsItem**
	# LowerLoad(8585:3).2: (^99) into %struct.LsItem* ^100
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8586:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^23 -> ^101, indices=0,0
	movq %r15, %rax
	# LowerGetelementptr(8586:3): type of ^101 is %struct.LsItem**
	# LowerLoad(8587:3).2: (^101) into %struct.LsItem* ^102
	movq (%rax), %rcx
	# Clobber %rcx
	movq %rcx, -400(%rbp)
	# SetupCalls(8588:3): move argument %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* nonnull dereferenceable(1) align 1 ^9
	# Fixed movzx with identical source and destination widths
	movq -256(%rbp), %rdi
	# SetupCalls(8588:3): move argument %struct.LsItem* ^100
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(8588:3): move argument %struct.LsItem* ^102
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdx
	callq _ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EclINS_17__normal_iteratorIP6LsItemS2_ISF_SaISF_EEEESJ_EEbT_T0_
	# SetupCalls(8588:3): move i1 result from %rax
	movb %al, %bl
	# Unclobber %rcx
	movq -400(%rbp), %rcx
	cmpb $0, %bl
	jne .___ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_SK_T0___M756
	jmp .___ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_SK_T0___M850
	.___ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_SK_T0___M756:
	# LowerBasicConversion(8592:3): %"class.__gnu_cxx::__normal_iterator"* ^24 -> i8* ^105
	movq -368(%rbp), %rax
	# LowerBasicConversion(8593:3): %"class.__gnu_cxx::__normal_iterator"* ^5 -> i8* ^106
	movq -232(%rbp), %rbx
	# Clobber %rax
	movq %rax, -408(%rbp)
	# SetupCalls(8594:3): move argument i8* align 8 ^105
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(8594:3): move argument i8* align 8 ^106
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(8594:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -408(%rbp), %rax
	# LowerBasicConversion(8595:3): %"class.__gnu_cxx::__normal_iterator"* ^25 -> i8* ^107
	movq -360(%rbp), %rbx
	# LowerBasicConversion(8596:3): %"class.__gnu_cxx::__normal_iterator"* ^6 -> i8* ^108
	movq -240(%rbp), %rax
	# Clobber %rax
	movq %rax, -408(%rbp)
	# SetupCalls(8597:3): move argument i8* align 8 ^107
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(8597:3): move argument i8* align 8 ^108
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(8597:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -408(%rbp), %rax
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8598:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^24 -> ^109, indices=0,0
	movq -368(%rbp), %rax
	# LowerGetelementptr(8598:3): type of ^109 is %struct.LsItem**
	# LowerLoad(8599:3).2: (^109) into %struct.LsItem* ^110
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8600:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^25 -> ^111, indices=0,0
	movq -360(%rbp), %rax
	# LowerGetelementptr(8600:3): type of ^111 is %struct.LsItem**
	# LowerLoad(8601:3).2: (^111) into %struct.LsItem* ^112
	movq (%rax), %rcx
	# Clobber %rcx
	movq %rcx, -400(%rbp)
	# SetupCalls(8602:3): move argument %struct.LsItem* ^110
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(8602:3): move argument %struct.LsItem* ^112
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	callq _ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEES7_EvT_T0_
	# Unclobber %rcx
	movq -400(%rbp), %rcx
	jmp .___ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_SK_T0___M1137
	.___ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_SK_T0___M850:
	# LowerBasicConversion(8606:3): %"class.__gnu_cxx::__normal_iterator"* ^26 -> i8* ^114
	movq -384(%rbp), %rax
	# LowerBasicConversion(8607:3): %"class.__gnu_cxx::__normal_iterator"* ^7 -> i8* ^115
	movq -248(%rbp), %rbx
	# Clobber %rax
	movq %rax, -408(%rbp)
	# SetupCalls(8608:3): move argument i8* align 8 ^114
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(8608:3): move argument i8* align 8 ^115
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(8608:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -408(%rbp), %rax
	# LowerBasicConversion(8609:3): %"class.__gnu_cxx::__normal_iterator"* ^27 -> i8* ^116
	movq -376(%rbp), %rax
	# LowerBasicConversion(8610:3): %"class.__gnu_cxx::__normal_iterator"* ^8 -> i8* ^117
	movq -224(%rbp), %rbx
	# Clobber %rax
	movq %rax, -408(%rbp)
	# SetupCalls(8611:3): move argument i8* align 8 ^116
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(8611:3): move argument i8* align 8 ^117
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(8611:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -408(%rbp), %rax
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8612:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^26 -> ^118, indices=0,0
	movq -384(%rbp), %rax
	# LowerGetelementptr(8612:3): type of ^118 is %struct.LsItem**
	# LowerLoad(8613:3).2: (^118) into %struct.LsItem* ^119
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8614:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^27 -> ^120, indices=0,0
	movq -376(%rbp), %rax
	# LowerGetelementptr(8614:3): type of ^120 is %struct.LsItem**
	# LowerLoad(8615:3).2: (^120) into %struct.LsItem* ^121
	movq (%rax), %rcx
	# Clobber %rcx
	movq %rcx, -400(%rbp)
	# SetupCalls(8616:3): move argument %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* nonnull dereferenceable(1) align 1 ^9
	# Fixed movzx with identical source and destination widths
	movq -256(%rbp), %rdi
	# SetupCalls(8616:3): move argument %struct.LsItem* ^119
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(8616:3): move argument %struct.LsItem* ^121
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdx
	callq _ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EclINS_17__normal_iteratorIP6LsItemS2_ISF_SaISF_EEEESJ_EEbT_T0_
	# SetupCalls(8616:3): move i1 result from %rax
	movb %al, %bl
	# Unclobber %rcx
	movq -400(%rbp), %rcx
	cmpb $0, %bl
	jne .___ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_SK_T0___M948
	jmp .___ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_SK_T0___M1042
	.___ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_SK_T0___M948:
	# LowerBasicConversion(8620:3): %"class.__gnu_cxx::__normal_iterator"* ^28 -> i8* ^124
	movq -304(%rbp), %rax
	# LowerBasicConversion(8621:3): %"class.__gnu_cxx::__normal_iterator"* ^5 -> i8* ^125
	movq -232(%rbp), %rbx
	# Clobber %rax
	movq %rax, -408(%rbp)
	# SetupCalls(8622:3): move argument i8* align 8 ^124
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(8622:3): move argument i8* align 8 ^125
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(8622:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -408(%rbp), %rax
	# LowerBasicConversion(8623:3): %"class.__gnu_cxx::__normal_iterator"* ^29 -> i8* ^126
	movq -296(%rbp), %rax
	# LowerBasicConversion(8624:3): %"class.__gnu_cxx::__normal_iterator"* ^8 -> i8* ^127
	movq -224(%rbp), %rbx
	# Clobber %rax
	movq %rax, -408(%rbp)
	# SetupCalls(8625:3): move argument i8* align 8 ^126
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(8625:3): move argument i8* align 8 ^127
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(8625:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -408(%rbp), %rax
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8626:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^28 -> ^128, indices=0,0
	movq -304(%rbp), %rax
	# LowerGetelementptr(8626:3): type of ^128 is %struct.LsItem**
	# LowerLoad(8627:3).2: (^128) into %struct.LsItem* ^129
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8628:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^29 -> ^130, indices=0,0
	movq -296(%rbp), %rax
	# LowerGetelementptr(8628:3): type of ^130 is %struct.LsItem**
	# LowerLoad(8629:3).2: (^130) into %struct.LsItem* ^131
	movq (%rax), %rcx
	# Clobber %rcx
	movq %rcx, -400(%rbp)
	# SetupCalls(8630:3): move argument %struct.LsItem* ^129
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(8630:3): move argument %struct.LsItem* ^131
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	callq _ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEES7_EvT_T0_
	# Unclobber %rcx
	movq -400(%rbp), %rcx
	jmp .___ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_SK_T0___M1136
	.___ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_SK_T0___M1042:
	# LowerBasicConversion(8634:3): %"class.__gnu_cxx::__normal_iterator"* ^30 -> i8* ^133
	movq -320(%rbp), %rax
	# LowerBasicConversion(8635:3): %"class.__gnu_cxx::__normal_iterator"* ^5 -> i8* ^134
	movq -232(%rbp), %rbx
	# Clobber %rax
	movq %rax, -408(%rbp)
	# SetupCalls(8636:3): move argument i8* align 8 ^133
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(8636:3): move argument i8* align 8 ^134
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(8636:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -408(%rbp), %rax
	# LowerBasicConversion(8637:3): %"class.__gnu_cxx::__normal_iterator"* ^31 -> i8* ^135
	movq -312(%rbp), %rax
	# LowerBasicConversion(8638:3): %"class.__gnu_cxx::__normal_iterator"* ^7 -> i8* ^136
	movq -248(%rbp), %rbx
	# Clobber %rax
	movq %rax, -408(%rbp)
	# SetupCalls(8639:3): move argument i8* align 8 ^135
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(8639:3): move argument i8* align 8 ^136
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(8639:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -408(%rbp), %rax
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8640:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^30 -> ^137, indices=0,0
	movq -320(%rbp), %rax
	# LowerGetelementptr(8640:3): type of ^137 is %struct.LsItem**
	# LowerLoad(8641:3).2: (^137) into %struct.LsItem* ^138
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8642:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^31 -> ^139, indices=0,0
	movq -312(%rbp), %rax
	# LowerGetelementptr(8642:3): type of ^139 is %struct.LsItem**
	# LowerLoad(8643:3).2: (^139) into %struct.LsItem* ^140
	movq (%rax), %rcx
	# Clobber %rcx
	movq %rcx, -400(%rbp)
	# SetupCalls(8644:3): move argument %struct.LsItem* ^138
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(8644:3): move argument %struct.LsItem* ^140
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	callq _ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEES7_EvT_T0_
	# Unclobber %rcx
	movq -400(%rbp), %rcx
	.___ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_SK_T0___M1136:
	.___ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_SK_T0___M1137:
	.___ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_SK_T0___M1138:
	movq -424(%rbp), %r15
	movq -560(%rbp), %r14
	movq -472(%rbp), %r13
	movq -464(%rbp), %r12
	movq -480(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEmmEv
.p2align 4, 0x90
_ZN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEmmEv:
	.___ZN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEmmEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(8441:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(8442:3).9: mov %"class.__gnu_cxx::__normal_iterator"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(8443:3).2: (^2) into %"class.__gnu_cxx::__normal_iterator"* ^3
	movq (%rax), %rdx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8444:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^3 -> ^4, indices=0,0
	movq %rdx, %rax
	# LowerGetelementptr(8444:3): type of ^4 is %struct.LsItem**
	# LowerLoad(8445:3).2: (^4) into %struct.LsItem* ^5
	movq (%rax), %rcx
	# tt = Pointer, type = %struct.LsItem
	# LowerGetelementptr(8446:3): struct-type: %struct.LsItem* ^5 -> ^6, indices=-1
	movq %rcx, %rbx
	addq $-40, %rbx
	# LowerGetelementptr(8446:3): type of ^6 is %struct.LsItem*
	# LowerStore(8447:3).9: mov %struct.LsItem* ^6, (^4)
	movq %rbx, (%rax)
	movq %rdx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_
.p2align 4, 0x90
_ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_:
	.___ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(48 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	# LowerAlloca(8426:3): size = 8, type = %"class.std::__cxx11::basic_string"**, var = ^3
	leaq -8(%rbp), %rbx
	# LowerAlloca(8427:3): size = 8, type = %"class.std::__cxx11::basic_string"**, var = ^4
	leaq -16(%rbp), %rax
	# LowerStore(8428:3).9: mov %"class.std::__cxx11::basic_string"* %rdi, (^3)
	movq %rdi, (%rbx)
	# LowerStore(8429:3).9: mov %"class.std::__cxx11::basic_string"* %rsi, (^4)
	movq %rsi, (%rax)
	# LowerLoad(8430:3).2: (^3) into %"class.std::__cxx11::basic_string"* ^5
	movq (%rbx), %rcx
	# LowerLoad(8431:3).2: (^4) into %"class.std::__cxx11::basic_string"* ^6
	movq (%rax), %rbx
	# Clobber %rcx
	movq %rcx, -24(%rbp)
	# SetupCalls(8432:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(8432:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_@PLT
	# SetupCalls(8432:3): move i32 result from %rax
	movl %eax, %ebx
	# Unclobber %rcx
	movq -24(%rbp), %rcx
	# LowerIcmp(8433:3): i32 ^7 vs. intlike 0
	cmpl $0, %ebx
	setl %al
	andq $1, %rax
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZN9__gnu_cxx5__ops14_Iter_comp_valIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EclINS_17__normal_iteratorIP6LsItemS2_ISF_SaISF_EEEESF_EEbT_RT0_
.p2align 4, 0x90
_ZN9__gnu_cxx5__ops14_Iter_comp_valIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EclINS_17__normal_iteratorIP6LsItemS2_ISF_SaISF_EEEESF_EEbT_RT0_:
	.___ZN9__gnu_cxx5__ops14_Iter_comp_valIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EclINS_17__normal_iteratorIP6LsItemS2_ISF_SaISF_EEEESF_EEbT_RT0___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(72 + 0, 16)
	subq $80, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -40(%rbp)
	movq %r12, -48(%rbp)
	movq %r13, -56(%rbp)
	# LowerAlloca(8364:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^4
	leaq -8(%rbp), %rbx
	# LowerAlloca(8365:3): size = 8, type = %"struct.__gnu_cxx::__ops::_Iter_comp_val"**, var = ^5
	leaq -16(%rbp), %rcx
	# LowerAlloca(8366:3): size = 8, type = %struct.LsItem**, var = ^6
	leaq -24(%rbp), %r12
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8367:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^4 -> ^7, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(8367:3): type of ^7 is %struct.LsItem**
	# LowerStore(8368:3).9: mov %struct.LsItem* %rsi, (^7)
	movq %rsi, (%rax)
	# LowerStore(8369:3).9: mov %"struct.__gnu_cxx::__ops::_Iter_comp_val"* %rdi, (^5)
	movq %rdi, (%rcx)
	# LowerStore(8370:3).9: mov %struct.LsItem* %rdx, (^6)
	movq %rdx, (%r12)
	# LowerLoad(8371:3).2: (^5) into %"struct.__gnu_cxx::__ops::_Iter_comp_val"* ^8
	movq (%rcx), %rax
	# tt = Pointer, type = %"struct.__gnu_cxx::__ops::_Iter_comp_val"
	# LowerGetelementptr(8372:3): struct-type: %"struct.__gnu_cxx::__ops::_Iter_comp_val"* ^8 -> ^9, indices=0,0
	movq %rax, %r13
	# LowerGetelementptr(8372:3): type of ^9 is %class.anon*
	# SetupCalls(8373:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEdeEv
	# SetupCalls(8373:3): move %struct.LsItem* result from %rax
	movq %rax, %rbx
	# LowerLoad(8374:3).2: (^6) into %struct.LsItem* ^11
	movq (%r12), %rax
	# Clobber %rax
	movq %rax, -32(%rbp)
	# SetupCalls(8375:3): move argument %class.anon* nonnull dereferenceable(1) align 1 ^9
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	# SetupCalls(8375:3): move argument %struct.LsItem* nonnull dereferenceable(33) align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(8375:3): move argument %struct.LsItem* nonnull dereferenceable(33) align 8 ^11
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdx
	callq _ZZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEENK3$_0clERK6LsItemSB_
	# SetupCalls(8375:3): move i1 result from %rax
	movb %al, %bl
	# Unclobber %rax
	movq -32(%rbp), %rax
	movb %bl, %al
	movq -56(%rbp), %r13
	movq -48(%rbp), %r12
	movq -40(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops14_Iter_comp_valIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_RT2_
.p2align 4, 0x90
_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops14_Iter_comp_valIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_RT2_:
	.___ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops14_Iter_comp_valIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_RT2___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(304 + 0, 16)
	subq $304, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -216(%rbp)
	movq %r12, -240(%rbp)
	movq %r13, -208(%rbp)
	movq %r14, -200(%rbp)
	movq %r15, -160(%rbp)
	# LowerAlloca(8291:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^6
	# Fixing source-to-dest leaq -8(%rbp), -88(%rbp)
	leaq -8(%rbp), %r15
	movq %r15, -88(%rbp)
	# LowerAlloca(8292:3): size = 8, type = i64*, var = ^7
	# Fixing source-to-dest leaq -16(%rbp), -104(%rbp)
	leaq -16(%rbp), %r15
	movq %r15, -104(%rbp)
	# LowerAlloca(8293:3): size = 8, type = i64*, var = ^8
	# Fixing source-to-dest leaq -24(%rbp), -112(%rbp)
	leaq -24(%rbp), %r15
	movq %r15, -112(%rbp)
	# LowerAlloca(8294:3): size = 8, type = %"struct.__gnu_cxx::__ops::_Iter_comp_val"**, var = ^9
	# Fixing source-to-dest leaq -32(%rbp), -120(%rbp)
	leaq -32(%rbp), %r15
	movq %r15, -120(%rbp)
	# LowerAlloca(8295:3): size = 8, type = i64*, var = ^10
	# Fixing source-to-dest leaq -40(%rbp), -128(%rbp)
	leaq -40(%rbp), %r15
	movq %r15, -128(%rbp)
	# LowerAlloca(8296:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^11
	leaq -48(%rbp), %r14
	# LowerAlloca(8297:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^12
	leaq -56(%rbp), %r13
	# LowerAlloca(8298:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^13
	leaq -64(%rbp), %rbx
	# LowerAlloca(8299:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^14
	# Fixing source-to-dest leaq -72(%rbp), -80(%rbp)
	leaq -72(%rbp), %r15
	movq %r15, -80(%rbp)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8300:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^6 -> ^15, indices=0,0
	movq -88(%rbp), %rax
	# LowerGetelementptr(8300:3): type of ^15 is %struct.LsItem**
	# LowerStore(8301:3).9: mov %struct.LsItem* %rdi, (^15)
	movq %rdi, (%rax)
	# LowerStore(8302:3).9: mov i64 %rsi, (^7)
	movq -104(%rbp), %rax
	movq %rsi, (%rax)
	# LowerStore(8303:3).9: mov i64 %rdx, (^8)
	movq -112(%rbp), %rax
	movq %rdx, (%rax)
	# LowerStore(8304:3).9: mov %"struct.__gnu_cxx::__ops::_Iter_comp_val"* %r8, (^9)
	movq -120(%rbp), %rax
	movq %r8, (%rax)
	# LowerLoad(8305:3).2: (^7) into i64 ^16
	movq -104(%rbp), %rax
	movq (%rax), %rdx
	# LowerMath(8306:3): ^16, 1 into i64 ^17
	movq %rdx, %rax
	subq $1, %rax
	# LowerSdiv(8307:3): ^17, 2 into i64 ^18
	movq %rax, %rdx
	sarq $1, %rdx
	# LowerStore(8308:3).9: mov i64 ^18, (^10)
	movq -128(%rbp), %rax
	movq %rdx, (%rax)
	.___ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops14_Iter_comp_valIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_RT2___M41:
	# LowerLoad(8312:3).2: (^7) into i64 ^20
	movq -104(%rbp), %rdx
	movq (%rdx), %rax
	# LowerLoad(8313:3).2: (^8) into i64 ^21
	movq -112(%rbp), %rsi
	movq (%rsi), %rdx
	# LowerIcmp(8314:3): i64 ^20 vs. operand i64 ^21
	cmpq %rdx, %rax
	setg %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops14_Iter_comp_valIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_RT2___M53
	.___ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops14_Iter_comp_valIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_RT2___M50:
	# MovePhi: intlike -> ^32 (in new block 53 whose parent is 19)
	movb $0, -96(%rbp)
	jmp .___ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops14_Iter_comp_valIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_RT2___M124
	.___ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops14_Iter_comp_valIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_RT2___M53:
	# LowerLoad(8318:3).2: (^9) into %"struct.__gnu_cxx::__ops::_Iter_comp_val"* ^24
	movq -120(%rbp), %rax
	movq (%rax), %r15
	# LowerLoad(8319:3).2: (^10) into i64 ^25
	movq -128(%rbp), %rdx
	movq (%rdx), %rax
	# Clobber %rcx
	movq %rcx, -136(%rbp)
	# Clobber %rax
	movq %rax, -144(%rbp)
	# SetupCalls(8320:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq -88(%rbp), %rdi
	# SetupCalls(8320:3): move argument i64 ^25
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEplEl
	# SetupCalls(8320:3): move %struct.LsItem* result from %rax
	movq %rax, %r12
	# Unclobber %rax
	movq -144(%rbp), %rax
	# Unclobber %rcx
	movq -136(%rbp), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8321:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^11 -> ^27, indices=0,0
	movq %r14, %rax
	# LowerGetelementptr(8321:3): type of ^27 is %struct.LsItem**
	# LowerStore(8322:3).9: mov %struct.LsItem* ^26, (^27)
	movq %r12, (%rax)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8323:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^11 -> ^28, indices=0,0
	movq %r14, %rax
	# LowerGetelementptr(8323:3): type of ^28 is %struct.LsItem**
	# LowerLoad(8324:3).2: (^28) into %struct.LsItem* ^29
	movq (%rax), %rdx
	# Clobber %rdx
	movq %rdx, -152(%rbp)
	# Clobber %rcx
	movq %rcx, -136(%rbp)
	# SetupCalls(8325:3): move argument %"struct.__gnu_cxx::__ops::_Iter_comp_val"* nonnull dereferenceable(1) align 1 ^24
	# Fixed movzx with identical source and destination widths
	movq %r15, %rdi
	# SetupCalls(8325:3): move argument %struct.LsItem* ^29
	# Fixed movzx with identical source and destination widths
	movq %rdx, %rsi
	# SetupCalls(8325:3): move argument %struct.LsItem* nonnull dereferenceable(33) align 8 %rcx
	# Semiunclobber live %rcx into %rdx
	movq -136(%rbp), %rdx
	callq _ZN9__gnu_cxx5__ops14_Iter_comp_valIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EclINS_17__normal_iteratorIP6LsItemS2_ISF_SaISF_EEEESF_EEbT_RT0_
	# SetupCalls(8325:3): move i1 result from %rax
	movb %al, %r12b
	# Unclobber %rcx
	movq -136(%rbp), %rcx
	# Unclobber %rdx
	movq -152(%rbp), %rdx
	# MovePhi: ^30 -> ^32
	movb %r12b, -96(%rbp)
	.___ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops14_Iter_comp_valIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_RT2___M124:
	cmpb $0, -96(%rbp)
	jne .___ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops14_Iter_comp_valIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_RT2___M125
	jmp .___ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops14_Iter_comp_valIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_RT2___M277
	.___ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops14_Iter_comp_valIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_RT2___M125:
	# LowerLoad(8333:3).2: (^10) into i64 ^34
	movq -128(%rbp), %rdx
	movq (%rdx), %rax
	# Clobber %rcx
	movq %rcx, -136(%rbp)
	# Clobber %rax
	movq %rax, -144(%rbp)
	# SetupCalls(8334:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq -88(%rbp), %rdi
	# SetupCalls(8334:3): move argument i64 ^34
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEplEl
	# SetupCalls(8334:3): move %struct.LsItem* result from %rax
	movq %rax, %r12
	# Unclobber %rax
	movq -144(%rbp), %rax
	# Unclobber %rcx
	movq -136(%rbp), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8335:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^12 -> ^36, indices=0,0
	movq %r13, %rax
	# LowerGetelementptr(8335:3): type of ^36 is %struct.LsItem**
	# LowerStore(8336:3).9: mov %struct.LsItem* ^35, (^36)
	movq %r12, (%rax)
	# Clobber %rcx
	movq %rcx, -136(%rbp)
	# SetupCalls(8337:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^12
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEdeEv
	# SetupCalls(8337:3): move %struct.LsItem* result from %rax
	movq %rax, %r12
	# Unclobber %rcx
	movq -136(%rbp), %rcx
	# LowerLoad(8338:3).2: (^7) into i64 ^38
	movq -104(%rbp), %rax
	movq (%rax), %rdx
	# Clobber %rdx
	movq %rdx, -152(%rbp)
	# Clobber %rcx
	movq %rcx, -136(%rbp)
	# SetupCalls(8339:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq -88(%rbp), %rdi
	# SetupCalls(8339:3): move argument i64 ^38
	# Fixed movzx with identical source and destination widths
	movq %rdx, %rsi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEplEl
	# SetupCalls(8339:3): move %struct.LsItem* result from %rax
	movq %rax, %r15
	# Unclobber %rcx
	movq -136(%rbp), %rcx
	# Unclobber %rdx
	movq -152(%rbp), %rdx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8340:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^13 -> ^40, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(8340:3): type of ^40 is %struct.LsItem**
	# LowerStore(8341:3).9: mov %struct.LsItem* ^39, (^40)
	movq %r15, (%rax)
	# Clobber %rcx
	movq %rcx, -136(%rbp)
	# SetupCalls(8342:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^13
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEdeEv
	# SetupCalls(8342:3): move %struct.LsItem* result from %rax
	movq %rax, %r15
	# Unclobber %rcx
	movq -136(%rbp), %rcx
	# Clobber %rcx
	movq %rcx, -136(%rbp)
	# SetupCalls(8343:3): move argument %struct.LsItem* nonnull dereferenceable(33) align 8 ^41
	# Fixed movzx with identical source and destination widths
	movq %r15, %rdi
	# SetupCalls(8343:3): move argument %struct.LsItem* nonnull dereferenceable(33) align 8 ^37
	# Fixed movzx with identical source and destination widths
	movq %r12, %rsi
	callq _ZN6LsItemaSEOS_
	# SetupCalls(8343:3): move %struct.LsItem* result from %rax
	movq %rax, %rax
	# Unclobber %rcx
	movq -136(%rbp), %rcx
	# LowerLoad(8344:3).2: (^10) into i64 ^43
	movq -128(%rbp), %rax
	movq (%rax), %rdx
	# LowerStore(8345:3).9: mov i64 ^43, (^7)
	movq -104(%rbp), %rax
	movq %rdx, (%rax)
	# LowerLoad(8346:3).2: (^7) into i64 ^44
	movq -104(%rbp), %rdx
	movq (%rdx), %rax
	# LowerMath(8347:3): ^44, 1 into i64 ^45
	movq %rax, %rsi
	subq $1, %rsi
	# LowerSdiv(8348:3): ^45, 2 into i64 ^46
	movq %rsi, %rdx
	sarq $1, %rdx
	# LowerStore(8349:3).9: mov i64 ^46, (^10)
	movq -128(%rbp), %rax
	movq %rdx, (%rax)
	jmp .___ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops14_Iter_comp_valIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_RT2___M41
	.___ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops14_Iter_comp_valIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_RT2___M277:
	# LowerLoad(8353:3).2: (^7) into i64 ^48
	movq -104(%rbp), %rbx
	movq (%rbx), %rax
	# Clobber %rcx
	movq %rcx, -136(%rbp)
	# Clobber %rax
	movq %rax, -144(%rbp)
	# SetupCalls(8354:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq -88(%rbp), %rdi
	# SetupCalls(8354:3): move argument i64 ^48
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEplEl
	# SetupCalls(8354:3): move %struct.LsItem* result from %rax
	movq %rax, %rbx
	# Unclobber %rax
	movq -144(%rbp), %rax
	# Unclobber %rcx
	movq -136(%rbp), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8355:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^14 -> ^50, indices=0,0
	movq -80(%rbp), %rax
	# LowerGetelementptr(8355:3): type of ^50 is %struct.LsItem**
	# LowerStore(8356:3).9: mov %struct.LsItem* ^49, (^50)
	movq %rbx, (%rax)
	# Clobber %rcx
	movq %rcx, -136(%rbp)
	# SetupCalls(8357:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^14
	# Fixed movzx with identical source and destination widths
	movq -80(%rbp), %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEdeEv
	# SetupCalls(8357:3): move %struct.LsItem* result from %rax
	movq %rax, %rbx
	# Unclobber %rcx
	movq -136(%rbp), %rcx
	# Clobber %rcx
	movq %rcx, -136(%rbp)
	# SetupCalls(8358:3): move argument %struct.LsItem* nonnull dereferenceable(33) align 8 ^51
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(8358:3): move argument %struct.LsItem* nonnull dereferenceable(33) align 8 %rcx
	# Semiunclobber live %rcx into %rsi
	movq -136(%rbp), %rsi
	callq _ZN6LsItemaSEOS_
	# SetupCalls(8358:3): move %struct.LsItem* result from %rax
	movq %rax, %rax
	# Unclobber %rcx
	movq -136(%rbp), %rcx
	movq -160(%rbp), %r15
	movq -200(%rbp), %r14
	movq -208(%rbp), %r13
	movq -240(%rbp), %r12
	movq -216(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZN9__gnu_cxx5__ops14_Iter_comp_valIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EC2EONS0_15_Iter_comp_iterISB_EE
.p2align 4, 0x90
_ZN9__gnu_cxx5__ops14_Iter_comp_valIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EC2EONS0_15_Iter_comp_iterISB_EE:
	.___ZN9__gnu_cxx5__ops14_Iter_comp_valIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EC2EONS0_15_Iter_comp_iterISB_EE__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(40 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(8278:3): size = 8, type = %"struct.__gnu_cxx::__ops::_Iter_comp_val"**, var = ^3
	leaq -8(%rbp), %rbx
	# LowerAlloca(8279:3): size = 8, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"**, var = ^4
	leaq -16(%rbp), %rax
	# LowerStore(8280:3).9: mov %"struct.__gnu_cxx::__ops::_Iter_comp_val"* %rdi, (^3)
	movq %rdi, (%rbx)
	# LowerStore(8281:3).9: mov %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %rsi, (^4)
	movq %rsi, (%rax)
	# LowerLoad(8282:3).2: (^3) into %"struct.__gnu_cxx::__ops::_Iter_comp_val"* ^5
	movq (%rbx), %rcx
	# tt = Pointer, type = %"struct.__gnu_cxx::__ops::_Iter_comp_val"
	# LowerGetelementptr(8283:3): struct-type: %"struct.__gnu_cxx::__ops::_Iter_comp_val"* ^5 -> ^6, indices=0,0
	movq %rcx, %rbx
	# LowerGetelementptr(8283:3): type of ^6 is %class.anon*
	# LowerLoad(8284:3).2: (^4) into %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* ^7
	movq (%rax), %rbx
	# tt = Pointer, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"
	# LowerGetelementptr(8285:3): struct-type: %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* ^7 -> ^8, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(8285:3): type of ^8 is %class.anon*
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEplEl
.p2align 4, 0x90
_ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEplEl:
	.___ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEplEl__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(80 + 0, 16)
	subq $80, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -64(%rbp)
	movq %r12, -56(%rbp)
	# LowerAlloca(8108:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^3
	leaq -8(%rbp), %r12
	# LowerAlloca(8109:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"**, var = ^4
	leaq -16(%rbp), %rax
	# LowerAlloca(8110:3): size = 8, type = i64*, var = ^5
	leaq -24(%rbp), %rdx
	# LowerAlloca(8111:3): size = 8, type = %struct.LsItem**, var = ^6
	leaq -32(%rbp), %rcx
	# LowerStore(8112:3).9: mov %"class.__gnu_cxx::__normal_iterator"* %rdi, (^4)
	movq %rdi, (%rax)
	# LowerStore(8113:3).9: mov i64 %rsi, (^5)
	movq %rsi, (%rdx)
	# LowerLoad(8114:3).2: (^4) into %"class.__gnu_cxx::__normal_iterator"* ^7
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8115:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^7 -> ^8, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(8115:3): type of ^8 is %struct.LsItem**
	# LowerLoad(8116:3).2: (^8) into %struct.LsItem* ^9
	movq (%rax), %rbx
	# LowerLoad(8117:3).2: (^5) into i64 ^10
	movq (%rdx), %rax
	# tt = Pointer, type = %struct.LsItem
	# LowerGetelementptr(8118:3): pointer-type -> ^11
	movq %rax, %rdx
	# Clobber %rdx
	movq %rdx, -40(%rbp)
	movq %rdx, %rax
	movq $40, %rsi
	imulq %rsi
	movq %rax, %rdx
	# Unclobber %rdx
	movq -40(%rbp), %rdx
	addq %rbx, %rdx
	# LowerStore(8119:3).9: mov %struct.LsItem* ^11, (^6)
	movq %rdx, (%rcx)
	# Clobber %rcx
	movq %rcx, -48(%rbp)
	# SetupCalls(8120:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(8120:3): move argument %struct.LsItem** nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	callq _ZN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEC2ERKS2_
	# Unclobber %rcx
	movq -48(%rbp), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8121:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^3 -> ^12, indices=0,0
	movq %r12, %rbx
	# LowerGetelementptr(8121:3): type of ^12 is %struct.LsItem**
	# LowerLoad(8122:3).2: (^12) into %struct.LsItem* ^13
	movq (%rbx), %rax
	movq -56(%rbp), %r12
	movq -64(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_RT0_
.p2align 4, 0x90
_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_RT0_:
	.___ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_RT0___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(160 + 0, 16)
	subq $160, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -144(%rbp)
	movq %r12, -136(%rbp)
	movq %r13, -128(%rbp)
	movq %r14, -160(%rbp)
	movq %r15, -112(%rbp)
	# LowerAlloca(7902:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^4
	# Fixing source-to-dest leaq -8(%rbp), -56(%rbp)
	leaq -8(%rbp), %r15
	movq %r15, -56(%rbp)
	# LowerAlloca(7903:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^5
	# Fixing source-to-dest leaq -16(%rbp), -64(%rbp)
	leaq -16(%rbp), %r15
	movq %r15, -64(%rbp)
	# LowerAlloca(7904:3): size = 8, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"**, var = ^6
	leaq -24(%rbp), %r13
	# LowerAlloca(7905:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^7
	leaq -32(%rbp), %r12
	# LowerAlloca(7906:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^8
	leaq -40(%rbp), %rbx
	# LowerAlloca(7907:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^9
	leaq -48(%rbp), %r15
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7908:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^4 -> ^10, indices=0,0
	movq -56(%rbp), %rax
	# LowerGetelementptr(7908:3): type of ^10 is %struct.LsItem**
	# LowerStore(7909:3).9: mov %struct.LsItem* %rdi, (^10)
	movq %rdi, (%rax)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7910:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^5 -> ^11, indices=0,0
	movq -64(%rbp), %rax
	# LowerGetelementptr(7910:3): type of ^11 is %struct.LsItem**
	# LowerStore(7911:3).9: mov %struct.LsItem* %rsi, (^11)
	movq %rsi, (%rax)
	# LowerStore(7912:3).9: mov %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %rdx, (^6)
	movq %rdx, (%r13)
	.___ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_RT0___M27:
	# SetupCalls(7916:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq -64(%rbp), %rdi
	# SetupCalls(7916:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -56(%rbp), %rsi
	callq _ZN9__gnu_cxxmiIP6LsItemSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_
	# SetupCalls(7916:3): move i64 result from %rax
	movq %rax, %r14
	# LowerIcmp(7917:3): i64 ^13 vs. intlike 1
	cmpq $1, %r14
	setg %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_RT0___M57
	jmp .___ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_RT0___M215
	.___ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_RT0___M57:
	# SetupCalls(7921:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq -64(%rbp), %rdi
	callq _ZN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEmmEv
	# SetupCalls(7921:3): move %"class.__gnu_cxx::__normal_iterator"* result from %rax
	movq %rax, %rax
	# LowerBasicConversion(7922:3): %"class.__gnu_cxx::__normal_iterator"* ^7 -> i8* ^17
	movq %r12, %rax
	# LowerBasicConversion(7923:3): %"class.__gnu_cxx::__normal_iterator"* ^4 -> i8* ^18
	movq -56(%rbp), %rcx
	# Clobber %rcx
	movq %rcx, -72(%rbp)
	# Clobber %rax
	movq %rax, -80(%rbp)
	# SetupCalls(7924:3): move argument i8* align 8 ^17
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(7924:3): move argument i8* align 8 ^18
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(7924:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -80(%rbp), %rax
	# Unclobber %rcx
	movq -72(%rbp), %rcx
	# LowerBasicConversion(7925:3): %"class.__gnu_cxx::__normal_iterator"* ^8 -> i8* ^19
	movq %rbx, %rcx
	# LowerBasicConversion(7926:3): %"class.__gnu_cxx::__normal_iterator"* ^5 -> i8* ^20
	movq -64(%rbp), %rax
	# Clobber %rcx
	movq %rcx, -72(%rbp)
	# Clobber %rax
	movq %rax, -80(%rbp)
	# SetupCalls(7927:3): move argument i8* align 8 ^19
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(7927:3): move argument i8* align 8 ^20
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(7927:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -80(%rbp), %rax
	# Unclobber %rcx
	movq -72(%rbp), %rcx
	# LowerBasicConversion(7928:3): %"class.__gnu_cxx::__normal_iterator"* ^9 -> i8* ^21
	movq %r15, %rax
	# LowerBasicConversion(7929:3): %"class.__gnu_cxx::__normal_iterator"* ^5 -> i8* ^22
	movq -64(%rbp), %rcx
	# Clobber %rcx
	movq %rcx, -72(%rbp)
	# Clobber %rax
	movq %rax, -80(%rbp)
	# SetupCalls(7930:3): move argument i8* align 8 ^21
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(7930:3): move argument i8* align 8 ^22
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(7930:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -80(%rbp), %rax
	# Unclobber %rcx
	movq -72(%rbp), %rcx
	# LowerLoad(7931:3).2: (^6) into %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* ^23
	movq (%r13), %r8
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7932:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^7 -> ^24, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(7932:3): type of ^24 is %struct.LsItem**
	# LowerLoad(7933:3).2: (^24) into %struct.LsItem* ^25
	movq (%rax), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7934:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^8 -> ^26, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(7934:3): type of ^26 is %struct.LsItem**
	# LowerLoad(7935:3).2: (^26) into %struct.LsItem* ^27
	movq (%rax), %rdx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7936:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^9 -> ^28, indices=0,0
	movq %r15, %rax
	# LowerGetelementptr(7936:3): type of ^28 is %struct.LsItem**
	# LowerLoad(7937:3).2: (^28) into %struct.LsItem* ^29
	movq (%rax), %r9
	# Clobber %rdx
	movq %rdx, -88(%rbp)
	# Clobber %rcx
	movq %rcx, -72(%rbp)
	# Clobber %r8
	movq %r8, -96(%rbp)
	# Clobber %r9
	movq %r9, -104(%rbp)
	# SetupCalls(7938:3): move argument %struct.LsItem* ^25
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(7938:3): move argument %struct.LsItem* ^27
	# Fixed movzx with identical source and destination widths
	movq %rdx, %rsi
	# SetupCalls(7938:3): move argument %struct.LsItem* ^29
	# Fixed movzx with identical source and destination widths
	movq %r9, %rdx
	# SetupCalls(7938:3): move argument %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* nonnull dereferenceable(1) align 1 ^23
	# Fixed movzx with identical source and destination widths
	movq %r8, %rcx
	callq _ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_RT0_
	# Unclobber %r9
	movq -104(%rbp), %r9
	# Unclobber %r8
	movq -96(%rbp), %r8
	# Unclobber %rcx
	movq -72(%rbp), %rcx
	# Unclobber %rdx
	movq -88(%rbp), %rdx
	jmp .___ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_RT0___M27
	.___ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_RT0___M215:
	movq -112(%rbp), %r15
	movq -160(%rbp), %r14
	movq -128(%rbp), %r13
	movq -136(%rbp), %r12
	movq -144(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEET_SK_SK_T0_
.p2align 4, 0x90
_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEET_SK_SK_T0_:
	.___ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEET_SK_SK_T0___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(432 + 0, 16)
	subq $432, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -272(%rbp)
	movq %r12, -264(%rbp)
	movq %r13, -304(%rbp)
	movq %r14, -344(%rbp)
	movq %r15, -232(%rbp)
	# LowerAlloca(7743:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^3
	# Fixing source-to-dest leaq -8(%rbp), -120(%rbp)
	leaq -8(%rbp), %r15
	movq %r15, -120(%rbp)
	# LowerAlloca(7744:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^4
	# Fixing source-to-dest leaq -16(%rbp), -168(%rbp)
	leaq -16(%rbp), %r15
	movq %r15, -168(%rbp)
	# LowerAlloca(7745:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^5
	# Fixing source-to-dest leaq -24(%rbp), -176(%rbp)
	leaq -24(%rbp), %r15
	movq %r15, -176(%rbp)
	# LowerAlloca(7746:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, var = ^6
	# Fixing source-to-dest leaq -25(%rbp), -152(%rbp)
	leaq -25(%rbp), %r15
	movq %r15, -152(%rbp)
	# LowerAlloca(7747:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^7
	leaq -40(%rbp), %r12
	# LowerAlloca(7748:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^8
	leaq -48(%rbp), %rbx
	# LowerAlloca(7749:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^9
	leaq -56(%rbp), %r15
	# LowerAlloca(7750:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^10
	# Fixing source-to-dest leaq -64(%rbp), -192(%rbp)
	pushq %r15
	leaq -64(%rbp), %r15
	movq %r15, -192(%rbp)
	popq %r15
	# LowerAlloca(7751:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^11
	# Fixing source-to-dest leaq -72(%rbp), -184(%rbp)
	pushq %r15
	leaq -72(%rbp), %r15
	movq %r15, -184(%rbp)
	popq %r15
	# LowerAlloca(7752:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, var = ^12
	leaq -73(%rbp), %r13
	# LowerAlloca(7753:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^13
	# Fixing source-to-dest leaq -88(%rbp), -144(%rbp)
	pushq %r15
	leaq -88(%rbp), %r15
	movq %r15, -144(%rbp)
	popq %r15
	# LowerAlloca(7754:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^14
	# Fixing source-to-dest leaq -96(%rbp), -136(%rbp)
	pushq %r15
	leaq -96(%rbp), %r15
	movq %r15, -136(%rbp)
	popq %r15
	# LowerAlloca(7755:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^15
	# Fixing source-to-dest leaq -104(%rbp), -128(%rbp)
	pushq %r15
	leaq -104(%rbp), %r15
	movq %r15, -128(%rbp)
	popq %r15
	# LowerAlloca(7756:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, var = ^16
	# Fixing source-to-dest leaq -105(%rbp), -160(%rbp)
	pushq %r15
	leaq -105(%rbp), %r15
	movq %r15, -160(%rbp)
	popq %r15
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7757:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^4 -> ^17, indices=0,0
	movq -168(%rbp), %rax
	# LowerGetelementptr(7757:3): type of ^17 is %struct.LsItem**
	# LowerStore(7758:3).9: mov %struct.LsItem* %rdi, (^17)
	movq %rdi, (%rax)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7759:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^5 -> ^18, indices=0,0
	movq -176(%rbp), %rax
	# LowerGetelementptr(7759:3): type of ^18 is %struct.LsItem**
	# LowerStore(7760:3).9: mov %struct.LsItem* %rsi, (^18)
	movq %rsi, (%rax)
	# SetupCalls(7761:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq -176(%rbp), %rdi
	# SetupCalls(7761:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -168(%rbp), %rsi
	callq _ZN9__gnu_cxxmiIP6LsItemSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_
	# SetupCalls(7761:3): move i64 result from %rax
	movq %rax, %r14
	# LowerSdiv(7762:3): ^19, 2 into i64 ^20
	movq %r14, %rax
	sarq $1, %rax
	# Clobber %rax
	movq %rax, -200(%rbp)
	# SetupCalls(7763:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -168(%rbp), %rdi
	# SetupCalls(7763:3): move argument i64 ^20
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEplEl
	# SetupCalls(7763:3): move %struct.LsItem* result from %rax
	movq %rax, %r14
	# Unclobber %rax
	movq -200(%rbp), %rax
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7764:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^7 -> ^22, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(7764:3): type of ^22 is %struct.LsItem**
	# LowerStore(7765:3).9: mov %struct.LsItem* ^21, (^22)
	movq %r14, (%rax)
	# LowerBasicConversion(7766:3): %"class.__gnu_cxx::__normal_iterator"* ^8 -> i8* ^23
	movq %rbx, %rax
	# LowerBasicConversion(7767:3): %"class.__gnu_cxx::__normal_iterator"* ^4 -> i8* ^24
	movq -168(%rbp), %rcx
	# Clobber %rcx
	movq %rcx, -208(%rbp)
	# Clobber %rax
	movq %rax, -200(%rbp)
	# SetupCalls(7768:3): move argument i8* align 8 ^23
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(7768:3): move argument i8* align 8 ^24
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(7768:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -200(%rbp), %rax
	# Unclobber %rcx
	movq -208(%rbp), %rcx
	# SetupCalls(7769:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -168(%rbp), %rdi
	# SetupCalls(7769:3): move argument i64 1
	movq $1, %rsi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEplEl
	# SetupCalls(7769:3): move %struct.LsItem* result from %rax
	movq %rax, %r14
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7770:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^9 -> ^26, indices=0,0
	movq %r15, %rax
	# LowerGetelementptr(7770:3): type of ^26 is %struct.LsItem**
	# LowerStore(7771:3).9: mov %struct.LsItem* ^25, (^26)
	movq %r14, (%rax)
	# LowerBasicConversion(7772:3): %"class.__gnu_cxx::__normal_iterator"* ^10 -> i8* ^27
	movq -192(%rbp), %rax
	# LowerBasicConversion(7773:3): %"class.__gnu_cxx::__normal_iterator"* ^7 -> i8* ^28
	movq %r12, %rcx
	# Clobber %rcx
	movq %rcx, -208(%rbp)
	# Clobber %rax
	movq %rax, -200(%rbp)
	# SetupCalls(7774:3): move argument i8* align 8 ^27
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(7774:3): move argument i8* align 8 ^28
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(7774:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -200(%rbp), %rax
	# Unclobber %rcx
	movq -208(%rbp), %rcx
	# SetupCalls(7775:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq -176(%rbp), %rdi
	# SetupCalls(7775:3): move argument i64 1
	movq $1, %rsi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEmiEl
	# SetupCalls(7775:3): move %struct.LsItem* result from %rax
	movq %rax, %r12
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7776:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^11 -> ^30, indices=0,0
	movq -184(%rbp), %rax
	# LowerGetelementptr(7776:3): type of ^30 is %struct.LsItem**
	# LowerStore(7777:3).9: mov %struct.LsItem* ^29, (^30)
	movq %r12, (%rax)
	# LowerBasicConversion(7778:3): %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* ^12 -> i8* ^31
	movq %r13, %rax
	# LowerBasicConversion(7779:3): %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* ^6 -> i8* ^32
	movq -152(%rbp), %rcx
	# Clobber %rcx
	movq %rcx, -208(%rbp)
	# Clobber %rax
	movq %rax, -200(%rbp)
	# SetupCalls(7780:3): move argument i8* align 1 ^31
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(7780:3): move argument i8* align 1 ^32
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(7780:3): move argument i64 1
	movq $1, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -200(%rbp), %rax
	# Unclobber %rcx
	movq -208(%rbp), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7781:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^8 -> ^33, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(7781:3): type of ^33 is %struct.LsItem**
	# LowerLoad(7782:3).2: (^33) into %struct.LsItem* ^34
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7783:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^9 -> ^35, indices=0,0
	movq %r15, %rax
	# LowerGetelementptr(7783:3): type of ^35 is %struct.LsItem**
	# LowerLoad(7784:3).2: (^35) into %struct.LsItem* ^36
	movq (%rax), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7785:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^10 -> ^37, indices=0,0
	movq -192(%rbp), %rax
	# LowerGetelementptr(7785:3): type of ^37 is %struct.LsItem**
	# LowerLoad(7786:3).2: (^37) into %struct.LsItem* ^38
	movq (%rax), %r8
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7787:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^11 -> ^39, indices=0,0
	movq -184(%rbp), %rax
	# LowerGetelementptr(7787:3): type of ^39 is %struct.LsItem**
	# LowerLoad(7788:3).2: (^39) into %struct.LsItem* ^40
	movq (%rax), %r9
	# Clobber %rcx
	movq %rcx, -208(%rbp)
	# Clobber %r8
	movq %r8, -216(%rbp)
	# Clobber %r9
	movq %r9, -224(%rbp)
	# SetupCalls(7789:3): move argument %struct.LsItem* ^34
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(7789:3): move argument %struct.LsItem* ^36
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(7789:3): move argument %struct.LsItem* ^38
	# Fixed movzx with identical source and destination widths
	movq %r8, %rdx
	# SetupCalls(7789:3): move argument %struct.LsItem* ^40
	# Fixed movzx with identical source and destination widths
	movq %r9, %rcx
	callq _ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_SK_T0_
	# Unclobber %r9
	movq -224(%rbp), %r9
	# Unclobber %r8
	movq -216(%rbp), %r8
	# Unclobber %rcx
	movq -208(%rbp), %rcx
	# SetupCalls(7790:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -168(%rbp), %rdi
	# SetupCalls(7790:3): move argument i64 1
	movq $1, %rsi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEplEl
	# SetupCalls(7790:3): move %struct.LsItem* result from %rax
	movq %rax, %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7791:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^13 -> ^42, indices=0,0
	movq -144(%rbp), %rax
	# LowerGetelementptr(7791:3): type of ^42 is %struct.LsItem**
	# LowerStore(7792:3).9: mov %struct.LsItem* ^41, (^42)
	movq %rbx, (%rax)
	# LowerBasicConversion(7793:3): %"class.__gnu_cxx::__normal_iterator"* ^14 -> i8* ^43
	movq -136(%rbp), %rax
	# LowerBasicConversion(7794:3): %"class.__gnu_cxx::__normal_iterator"* ^5 -> i8* ^44
	movq -176(%rbp), %rbx
	# Clobber %rax
	movq %rax, -200(%rbp)
	# SetupCalls(7795:3): move argument i8* align 8 ^43
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(7795:3): move argument i8* align 8 ^44
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(7795:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -200(%rbp), %rax
	# LowerBasicConversion(7796:3): %"class.__gnu_cxx::__normal_iterator"* ^15 -> i8* ^45
	movq -128(%rbp), %rbx
	# LowerBasicConversion(7797:3): %"class.__gnu_cxx::__normal_iterator"* ^4 -> i8* ^46
	movq -168(%rbp), %rax
	# Clobber %rax
	movq %rax, -200(%rbp)
	# SetupCalls(7798:3): move argument i8* align 8 ^45
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(7798:3): move argument i8* align 8 ^46
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(7798:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -200(%rbp), %rax
	# LowerBasicConversion(7799:3): %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* ^16 -> i8* ^47
	movq -160(%rbp), %rax
	# LowerBasicConversion(7800:3): %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* ^6 -> i8* ^48
	movq -152(%rbp), %rbx
	# Clobber %rax
	movq %rax, -200(%rbp)
	# SetupCalls(7801:3): move argument i8* align 1 ^47
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(7801:3): move argument i8* align 1 ^48
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(7801:3): move argument i64 1
	movq $1, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -200(%rbp), %rax
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7802:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^13 -> ^49, indices=0,0
	movq -144(%rbp), %rax
	# LowerGetelementptr(7802:3): type of ^49 is %struct.LsItem**
	# LowerLoad(7803:3).2: (^49) into %struct.LsItem* ^50
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7804:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^14 -> ^51, indices=0,0
	movq -136(%rbp), %rax
	# LowerGetelementptr(7804:3): type of ^51 is %struct.LsItem**
	# LowerLoad(7805:3).2: (^51) into %struct.LsItem* ^52
	movq (%rax), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7806:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^15 -> ^53, indices=0,0
	movq -128(%rbp), %rax
	# LowerGetelementptr(7806:3): type of ^53 is %struct.LsItem**
	# LowerLoad(7807:3).2: (^53) into %struct.LsItem* ^54
	movq (%rax), %r8
	# Clobber %rcx
	movq %rcx, -208(%rbp)
	# Clobber %r8
	movq %r8, -216(%rbp)
	# SetupCalls(7808:3): move argument %struct.LsItem* ^50
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(7808:3): move argument %struct.LsItem* ^52
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(7808:3): move argument %struct.LsItem* ^54
	# Fixed movzx with identical source and destination widths
	movq %r8, %rdx
	callq _ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEET_SK_SK_SK_T0_
	# SetupCalls(7808:3): move %struct.LsItem* result from %rax
	movq %rax, %rbx
	# Unclobber %r8
	movq -216(%rbp), %r8
	# Unclobber %rcx
	movq -208(%rbp), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7809:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^3 -> ^56, indices=0,0
	movq -120(%rbp), %rax
	# LowerGetelementptr(7809:3): type of ^56 is %struct.LsItem**
	# LowerStore(7810:3).9: mov %struct.LsItem* ^55, (^56)
	movq %rbx, (%rax)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7811:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^3 -> ^57, indices=0,0
	movq -120(%rbp), %rax
	# LowerGetelementptr(7811:3): type of ^57 is %struct.LsItem**
	# LowerLoad(7812:3).2: (^57) into %struct.LsItem* ^58
	movq (%rax), %rbx
	movq %rbx, %rax
	movq -232(%rbp), %r15
	movq -344(%rbp), %r14
	movq -304(%rbp), %r13
	movq -264(%rbp), %r12
	movq -272(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_T0_
.p2align 4, 0x90
_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_T0_:
	.___ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_T0___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(248 + 0, 16)
	subq $256, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -176(%rbp)
	movq %r12, -160(%rbp)
	movq %r13, -184(%rbp)
	movq %r14, -192(%rbp)
	movq %r15, -144(%rbp)
	# LowerAlloca(7692:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^4
	# Fixing source-to-dest leaq -8(%rbp), -120(%rbp)
	leaq -8(%rbp), %r15
	movq %r15, -120(%rbp)
	# LowerAlloca(7693:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^5
	# Fixing source-to-dest leaq -16(%rbp), -112(%rbp)
	leaq -16(%rbp), %r15
	movq %r15, -112(%rbp)
	# LowerAlloca(7694:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^6
	leaq -24(%rbp), %r12
	# LowerAlloca(7695:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, var = ^7
	# Fixing source-to-dest leaq -25(%rbp), -88(%rbp)
	leaq -25(%rbp), %r15
	movq %r15, -88(%rbp)
	# LowerAlloca(7696:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^8
	leaq -40(%rbp), %rbx
	# LowerAlloca(7697:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^9
	leaq -48(%rbp), %r13
	# LowerAlloca(7698:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^10
	leaq -56(%rbp), %r14
	# LowerAlloca(7699:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, var = ^11
	leaq -57(%rbp), %r15
	# LowerAlloca(7700:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^12
	# Fixing source-to-dest leaq -72(%rbp), -104(%rbp)
	pushq %r15
	leaq -72(%rbp), %r15
	movq %r15, -104(%rbp)
	popq %r15
	# LowerAlloca(7701:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^13
	# Fixing source-to-dest leaq -80(%rbp), -96(%rbp)
	pushq %r15
	leaq -80(%rbp), %r15
	movq %r15, -96(%rbp)
	popq %r15
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7702:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^4 -> ^14, indices=0,0
	movq -120(%rbp), %rax
	# LowerGetelementptr(7702:3): type of ^14 is %struct.LsItem**
	# LowerStore(7703:3).9: mov %struct.LsItem* %rdi, (^14)
	movq %rdi, (%rax)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7704:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^5 -> ^15, indices=0,0
	movq -112(%rbp), %rax
	# LowerGetelementptr(7704:3): type of ^15 is %struct.LsItem**
	# LowerStore(7705:3).9: mov %struct.LsItem* %rsi, (^15)
	movq %rsi, (%rax)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7706:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^6 -> ^16, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(7706:3): type of ^16 is %struct.LsItem**
	# LowerStore(7707:3).9: mov %struct.LsItem* %rdx, (^16)
	movq %rdx, (%rax)
	# LowerBasicConversion(7708:3): %"class.__gnu_cxx::__normal_iterator"* ^8 -> i8* ^17
	movq %rbx, %rax
	# LowerBasicConversion(7709:3): %"class.__gnu_cxx::__normal_iterator"* ^4 -> i8* ^18
	movq -120(%rbp), %rcx
	# Clobber %rcx
	movq %rcx, -128(%rbp)
	# Clobber %rax
	movq %rax, -136(%rbp)
	# SetupCalls(7710:3): move argument i8* align 8 ^17
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(7710:3): move argument i8* align 8 ^18
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(7710:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -136(%rbp), %rax
	# Unclobber %rcx
	movq -128(%rbp), %rcx
	# LowerBasicConversion(7711:3): %"class.__gnu_cxx::__normal_iterator"* ^9 -> i8* ^19
	movq %r13, %rcx
	# LowerBasicConversion(7712:3): %"class.__gnu_cxx::__normal_iterator"* ^5 -> i8* ^20
	movq -112(%rbp), %rax
	# Clobber %rcx
	movq %rcx, -128(%rbp)
	# Clobber %rax
	movq %rax, -136(%rbp)
	# SetupCalls(7713:3): move argument i8* align 8 ^19
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(7713:3): move argument i8* align 8 ^20
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(7713:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -136(%rbp), %rax
	# Unclobber %rcx
	movq -128(%rbp), %rcx
	# LowerBasicConversion(7714:3): %"class.__gnu_cxx::__normal_iterator"* ^10 -> i8* ^21
	movq %r14, %rax
	# LowerBasicConversion(7715:3): %"class.__gnu_cxx::__normal_iterator"* ^6 -> i8* ^22
	movq %r12, %rcx
	# Clobber %rcx
	movq %rcx, -128(%rbp)
	# Clobber %rax
	movq %rax, -136(%rbp)
	# SetupCalls(7716:3): move argument i8* align 8 ^21
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(7716:3): move argument i8* align 8 ^22
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(7716:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -136(%rbp), %rax
	# Unclobber %rcx
	movq -128(%rbp), %rcx
	# LowerBasicConversion(7717:3): %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* ^11 -> i8* ^23
	movq %r15, %rax
	# LowerBasicConversion(7718:3): %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* ^7 -> i8* ^24
	movq -88(%rbp), %rcx
	# Clobber %rcx
	movq %rcx, -128(%rbp)
	# Clobber %rax
	movq %rax, -136(%rbp)
	# SetupCalls(7719:3): move argument i8* align 1 ^23
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(7719:3): move argument i8* align 1 ^24
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(7719:3): move argument i64 1
	movq $1, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -136(%rbp), %rax
	# Unclobber %rcx
	movq -128(%rbp), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7720:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^8 -> ^25, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(7720:3): type of ^25 is %struct.LsItem**
	# LowerLoad(7721:3).2: (^25) into %struct.LsItem* ^26
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7722:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^9 -> ^27, indices=0,0
	movq %r13, %rax
	# LowerGetelementptr(7722:3): type of ^27 is %struct.LsItem**
	# LowerLoad(7723:3).2: (^27) into %struct.LsItem* ^28
	movq (%rax), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7724:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^10 -> ^29, indices=0,0
	movq %r14, %rdx
	# LowerGetelementptr(7724:3): type of ^29 is %struct.LsItem**
	# LowerLoad(7725:3).2: (^29) into %struct.LsItem* ^30
	movq (%rdx), %rax
	# Clobber %rcx
	movq %rcx, -128(%rbp)
	# Clobber %rax
	movq %rax, -136(%rbp)
	# SetupCalls(7726:3): move argument %struct.LsItem* ^26
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(7726:3): move argument %struct.LsItem* ^28
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(7726:3): move argument %struct.LsItem* ^30
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdx
	callq _ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_T0_
	# Unclobber %rax
	movq -136(%rbp), %rax
	# Unclobber %rcx
	movq -128(%rbp), %rcx
	# LowerBasicConversion(7727:3): %"class.__gnu_cxx::__normal_iterator"* ^12 -> i8* ^31
	movq -104(%rbp), %rax
	# LowerBasicConversion(7728:3): %"class.__gnu_cxx::__normal_iterator"* ^4 -> i8* ^32
	movq -120(%rbp), %rbx
	# Clobber %rax
	movq %rax, -136(%rbp)
	# SetupCalls(7729:3): move argument i8* align 8 ^31
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(7729:3): move argument i8* align 8 ^32
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(7729:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -136(%rbp), %rax
	# LowerBasicConversion(7730:3): %"class.__gnu_cxx::__normal_iterator"* ^13 -> i8* ^33
	movq -96(%rbp), %rax
	# LowerBasicConversion(7731:3): %"class.__gnu_cxx::__normal_iterator"* ^5 -> i8* ^34
	movq -112(%rbp), %rbx
	# Clobber %rax
	movq %rax, -136(%rbp)
	# SetupCalls(7732:3): move argument i8* align 8 ^33
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(7732:3): move argument i8* align 8 ^34
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(7732:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -136(%rbp), %rax
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7733:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^12 -> ^35, indices=0,0
	movq -104(%rbp), %rax
	# LowerGetelementptr(7733:3): type of ^35 is %struct.LsItem**
	# LowerLoad(7734:3).2: (^35) into %struct.LsItem* ^36
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7735:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^13 -> ^37, indices=0,0
	movq -96(%rbp), %rax
	# LowerGetelementptr(7735:3): type of ^37 is %struct.LsItem**
	# LowerLoad(7736:3).2: (^37) into %struct.LsItem* ^38
	movq (%rax), %rcx
	# Clobber %rcx
	movq %rcx, -128(%rbp)
	# SetupCalls(7737:3): move argument %struct.LsItem* ^36
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(7737:3): move argument %struct.LsItem* ^38
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(7737:3): move argument %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* nonnull dereferenceable(1) align 1 ^7
	# Fixed movzx with identical source and destination widths
	movq -88(%rbp), %rdx
	callq _ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_RT0_
	# Unclobber %rcx
	movq -128(%rbp), %rcx
	movq -144(%rbp), %r15
	movq -192(%rbp), %r14
	movq -184(%rbp), %r13
	movq -160(%rbp), %r12
	movq -176(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElNS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0_T1_
.p2align 4, 0x90
_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElNS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0_T1_:
	.___ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElNS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0_T1___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(512 + 0, 16)
	subq $512, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -368(%rbp)
	movq %r12, -344(%rbp)
	movq %r13, -352(%rbp)
	movq %r14, -360(%rbp)
	movq %r15, -248(%rbp)
	# LowerAlloca(7507:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^4
	# Fixing source-to-dest leaq -8(%rbp), -176(%rbp)
	leaq -8(%rbp), %r15
	movq %r15, -176(%rbp)
	# LowerAlloca(7508:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^5
	# Fixing source-to-dest leaq -16(%rbp), -168(%rbp)
	leaq -16(%rbp), %r15
	movq %r15, -168(%rbp)
	# LowerAlloca(7509:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, var = ^6
	# Fixing source-to-dest leaq -17(%rbp), -152(%rbp)
	leaq -17(%rbp), %r15
	movq %r15, -152(%rbp)
	# LowerAlloca(7510:3): size = 8, type = i64*, var = ^7
	# Fixing source-to-dest leaq -32(%rbp), -184(%rbp)
	leaq -32(%rbp), %r15
	movq %r15, -184(%rbp)
	# LowerAlloca(7511:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^8
	# Fixing source-to-dest leaq -40(%rbp), -144(%rbp)
	leaq -40(%rbp), %r15
	movq %r15, -144(%rbp)
	# LowerAlloca(7512:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^9
	# Fixing source-to-dest leaq -48(%rbp), -136(%rbp)
	leaq -48(%rbp), %r15
	movq %r15, -136(%rbp)
	# LowerAlloca(7513:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^10
	# Fixing source-to-dest leaq -56(%rbp), -128(%rbp)
	leaq -56(%rbp), %r15
	movq %r15, -128(%rbp)
	# LowerAlloca(7514:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, var = ^11
	# Fixing source-to-dest leaq -57(%rbp), -160(%rbp)
	leaq -57(%rbp), %r15
	movq %r15, -160(%rbp)
	# LowerAlloca(7515:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^12
	# Fixing source-to-dest leaq -72(%rbp), -192(%rbp)
	leaq -72(%rbp), %r15
	movq %r15, -192(%rbp)
	# LowerAlloca(7516:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^13
	# Fixing source-to-dest leaq -80(%rbp), -200(%rbp)
	leaq -80(%rbp), %r15
	movq %r15, -200(%rbp)
	# LowerAlloca(7517:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^14
	# Fixing source-to-dest leaq -88(%rbp), -208(%rbp)
	leaq -88(%rbp), %r15
	movq %r15, -208(%rbp)
	# LowerAlloca(7518:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, var = ^15
	# Fixing source-to-dest leaq -89(%rbp), -216(%rbp)
	leaq -89(%rbp), %r15
	movq %r15, -216(%rbp)
	# LowerAlloca(7519:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^16
	leaq -104(%rbp), %r12
	# LowerAlloca(7520:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^17
	leaq -112(%rbp), %r13
	# LowerAlloca(7521:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, var = ^18
	leaq -113(%rbp), %r14
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7522:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^4 -> ^19, indices=0,0
	movq -176(%rbp), %rax
	# LowerGetelementptr(7522:3): type of ^19 is %struct.LsItem**
	# LowerStore(7523:3).9: mov %struct.LsItem* %rdi, (^19)
	movq %rdi, (%rax)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7524:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^5 -> ^20, indices=0,0
	movq -168(%rbp), %rax
	# LowerGetelementptr(7524:3): type of ^20 is %struct.LsItem**
	# LowerStore(7525:3).9: mov %struct.LsItem* %rsi, (^20)
	movq %rsi, (%rax)
	# LowerStore(7526:3).9: mov i64 %rdx, (^7)
	movq -184(%rbp), %rax
	movq %rdx, (%rax)
	.___ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElNS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0_T1___M46:
	# SetupCalls(7530:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq -168(%rbp), %rdi
	# SetupCalls(7530:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -176(%rbp), %rsi
	callq _ZN9__gnu_cxxmiIP6LsItemSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_
	# SetupCalls(7530:3): move i64 result from %rax
	movq %rax, %rbx
	# LowerIcmp(7531:3): i64 ^22 vs. intlike 16
	cmpq $16, %rbx
	setg %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElNS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0_T1___M76
	jmp .___ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElNS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0_T1___M537
	.___ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElNS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0_T1___M76:
	# LowerLoad(7535:3).2: (^7) into i64 ^25
	movq -184(%rbp), %rax
	movq (%rax), %rbx
	# LowerIcmp(7536:3): i64 ^25 vs. intlike 0
	cmpq $0, %rbx
	sete %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElNS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0_T1___M83
	jmp .___ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElNS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0_T1___M243
	.___ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElNS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0_T1___M83:
	# LowerBasicConversion(7540:3): %"class.__gnu_cxx::__normal_iterator"* ^8 -> i8* ^28
	movq -144(%rbp), %rax
	# LowerBasicConversion(7541:3): %"class.__gnu_cxx::__normal_iterator"* ^4 -> i8* ^29
	movq -176(%rbp), %rbx
	# Clobber %rax
	movq %rax, -224(%rbp)
	# SetupCalls(7542:3): move argument i8* align 8 ^28
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(7542:3): move argument i8* align 8 ^29
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(7542:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -224(%rbp), %rax
	# LowerBasicConversion(7543:3): %"class.__gnu_cxx::__normal_iterator"* ^9 -> i8* ^30
	movq -136(%rbp), %rax
	# LowerBasicConversion(7544:3): %"class.__gnu_cxx::__normal_iterator"* ^5 -> i8* ^31
	movq -168(%rbp), %rbx
	# Clobber %rax
	movq %rax, -224(%rbp)
	# SetupCalls(7545:3): move argument i8* align 8 ^30
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(7545:3): move argument i8* align 8 ^31
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(7545:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -224(%rbp), %rax
	# LowerBasicConversion(7546:3): %"class.__gnu_cxx::__normal_iterator"* ^10 -> i8* ^32
	movq -128(%rbp), %rax
	# LowerBasicConversion(7547:3): %"class.__gnu_cxx::__normal_iterator"* ^5 -> i8* ^33
	movq -168(%rbp), %rbx
	# Clobber %rax
	movq %rax, -224(%rbp)
	# SetupCalls(7548:3): move argument i8* align 8 ^32
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(7548:3): move argument i8* align 8 ^33
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(7548:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -224(%rbp), %rax
	# LowerBasicConversion(7549:3): %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* ^11 -> i8* ^34
	movq -160(%rbp), %rax
	# LowerBasicConversion(7550:3): %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* ^6 -> i8* ^35
	movq -152(%rbp), %rbx
	# Clobber %rax
	movq %rax, -224(%rbp)
	# SetupCalls(7551:3): move argument i8* align 1 ^34
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(7551:3): move argument i8* align 1 ^35
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(7551:3): move argument i64 1
	movq $1, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -224(%rbp), %rax
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7552:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^8 -> ^36, indices=0,0
	movq -144(%rbp), %rax
	# LowerGetelementptr(7552:3): type of ^36 is %struct.LsItem**
	# LowerLoad(7553:3).2: (^36) into %struct.LsItem* ^37
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7554:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^9 -> ^38, indices=0,0
	movq -136(%rbp), %rax
	# LowerGetelementptr(7554:3): type of ^38 is %struct.LsItem**
	# LowerLoad(7555:3).2: (^38) into %struct.LsItem* ^39
	movq (%rax), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7556:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^10 -> ^40, indices=0,0
	movq -128(%rbp), %rax
	# LowerGetelementptr(7556:3): type of ^40 is %struct.LsItem**
	# LowerLoad(7557:3).2: (^40) into %struct.LsItem* ^41
	movq (%rax), %r8
	# Clobber %rcx
	movq %rcx, -232(%rbp)
	# Clobber %r8
	movq %r8, -240(%rbp)
	# SetupCalls(7558:3): move argument %struct.LsItem* ^37
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(7558:3): move argument %struct.LsItem* ^39
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(7558:3): move argument %struct.LsItem* ^41
	# Fixed movzx with identical source and destination widths
	movq %r8, %rdx
	callq _ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_T0_
	# Unclobber %r8
	movq -240(%rbp), %r8
	# Unclobber %rcx
	movq -232(%rbp), %rcx
	jmp .___ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElNS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0_T1___M537
	.___ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElNS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0_T1___M243:
	# LowerLoad(7562:3).2: (^7) into i64 ^43
	movq -184(%rbp), %rax
	movq (%rax), %rbx
	# LowerMath(7563:3): ^43, -1 into i64 ^44
	movq %rbx, %rcx
	addq $-1, %rcx
	# LowerStore(7564:3).9: mov i64 ^44, (^7)
	movq -184(%rbp), %rax
	movq %rcx, (%rax)
	# LowerBasicConversion(7565:3): %"class.__gnu_cxx::__normal_iterator"* ^13 -> i8* ^45
	movq -200(%rbp), %rbx
	# LowerBasicConversion(7566:3): %"class.__gnu_cxx::__normal_iterator"* ^4 -> i8* ^46
	movq -176(%rbp), %rax
	# Clobber %rax
	movq %rax, -224(%rbp)
	# SetupCalls(7567:3): move argument i8* align 8 ^45
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(7567:3): move argument i8* align 8 ^46
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(7567:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -224(%rbp), %rax
	# LowerBasicConversion(7568:3): %"class.__gnu_cxx::__normal_iterator"* ^14 -> i8* ^47
	movq -208(%rbp), %rax
	# LowerBasicConversion(7569:3): %"class.__gnu_cxx::__normal_iterator"* ^5 -> i8* ^48
	movq -168(%rbp), %rbx
	# Clobber %rax
	movq %rax, -224(%rbp)
	# SetupCalls(7570:3): move argument i8* align 8 ^47
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(7570:3): move argument i8* align 8 ^48
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(7570:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -224(%rbp), %rax
	# LowerBasicConversion(7571:3): %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* ^15 -> i8* ^49
	movq -216(%rbp), %rax
	# LowerBasicConversion(7572:3): %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* ^6 -> i8* ^50
	movq -152(%rbp), %rbx
	# Clobber %rax
	movq %rax, -224(%rbp)
	# SetupCalls(7573:3): move argument i8* align 1 ^49
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(7573:3): move argument i8* align 1 ^50
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(7573:3): move argument i64 1
	movq $1, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -224(%rbp), %rax
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7574:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^13 -> ^51, indices=0,0
	movq -200(%rbp), %rax
	# LowerGetelementptr(7574:3): type of ^51 is %struct.LsItem**
	# LowerLoad(7575:3).2: (^51) into %struct.LsItem* ^52
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7576:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^14 -> ^53, indices=0,0
	movq -208(%rbp), %rax
	# LowerGetelementptr(7576:3): type of ^53 is %struct.LsItem**
	# LowerLoad(7577:3).2: (^53) into %struct.LsItem* ^54
	movq (%rax), %rcx
	# Clobber %rcx
	movq %rcx, -232(%rbp)
	# SetupCalls(7578:3): move argument %struct.LsItem* ^52
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(7578:3): move argument %struct.LsItem* ^54
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	callq _ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEET_SK_SK_T0_
	# SetupCalls(7578:3): move %struct.LsItem* result from %rax
	movq %rax, %rbx
	# Unclobber %rcx
	movq -232(%rbp), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7579:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^12 -> ^56, indices=0,0
	movq -192(%rbp), %rax
	# LowerGetelementptr(7579:3): type of ^56 is %struct.LsItem**
	# LowerStore(7580:3).9: mov %struct.LsItem* ^55, (^56)
	movq %rbx, (%rax)
	# LowerBasicConversion(7581:3): %"class.__gnu_cxx::__normal_iterator"* ^16 -> i8* ^57
	movq %r12, %rax
	# LowerBasicConversion(7582:3): %"class.__gnu_cxx::__normal_iterator"* ^12 -> i8* ^58
	movq -192(%rbp), %rbx
	# Clobber %rax
	movq %rax, -224(%rbp)
	# SetupCalls(7583:3): move argument i8* align 8 ^57
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(7583:3): move argument i8* align 8 ^58
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(7583:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -224(%rbp), %rax
	# LowerBasicConversion(7584:3): %"class.__gnu_cxx::__normal_iterator"* ^17 -> i8* ^59
	movq %r13, %rax
	# LowerBasicConversion(7585:3): %"class.__gnu_cxx::__normal_iterator"* ^5 -> i8* ^60
	movq -168(%rbp), %rbx
	# Clobber %rax
	movq %rax, -224(%rbp)
	# SetupCalls(7586:3): move argument i8* align 8 ^59
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(7586:3): move argument i8* align 8 ^60
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(7586:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -224(%rbp), %rax
	# LowerLoad(7587:3).2: (^7) into i64 ^61
	movq -184(%rbp), %rax
	movq (%rax), %r15
	# LowerBasicConversion(7588:3): %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* ^18 -> i8* ^62
	movq %r14, %rax
	# LowerBasicConversion(7589:3): %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* ^6 -> i8* ^63
	movq -152(%rbp), %rbx
	# Clobber %rax
	movq %rax, -224(%rbp)
	# SetupCalls(7590:3): move argument i8* align 1 ^62
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(7590:3): move argument i8* align 1 ^63
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(7590:3): move argument i64 1
	movq $1, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -224(%rbp), %rax
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7591:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^16 -> ^64, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(7591:3): type of ^64 is %struct.LsItem**
	# LowerLoad(7592:3).2: (^64) into %struct.LsItem* ^65
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7593:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^17 -> ^66, indices=0,0
	movq %r13, %rcx
	# LowerGetelementptr(7593:3): type of ^66 is %struct.LsItem**
	# LowerLoad(7594:3).2: (^66) into %struct.LsItem* ^67
	movq (%rcx), %rax
	# Clobber %rax
	movq %rax, -224(%rbp)
	# SetupCalls(7595:3): move argument %struct.LsItem* ^65
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(7595:3): move argument %struct.LsItem* ^67
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(7595:3): move argument i64 ^61
	# Fixed movzx with identical source and destination widths
	movq %r15, %rdx
	callq _ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElNS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0_T1_
	# Unclobber %rax
	movq -224(%rbp), %rax
	# LowerBasicConversion(7596:3): %"class.__gnu_cxx::__normal_iterator"* ^5 -> i8* ^68
	movq -168(%rbp), %rax
	# LowerBasicConversion(7597:3): %"class.__gnu_cxx::__normal_iterator"* ^12 -> i8* ^69
	movq -192(%rbp), %rbx
	# Clobber %rax
	movq %rax, -224(%rbp)
	# SetupCalls(7598:3): move argument i8* align 8 ^68
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(7598:3): move argument i8* align 8 ^69
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(7598:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -224(%rbp), %rax
	jmp .___ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElNS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0_T1___M46
	.___ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElNS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0_T1___M537:
	movq -248(%rbp), %r15
	movq -360(%rbp), %r14
	movq -352(%rbp), %r13
	movq -344(%rbp), %r12
	movq -368(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZN9__gnu_cxx17__normal_iteratorIPKSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEEC2ERKS6_
.p2align 4, 0x90
_ZN9__gnu_cxx17__normal_iteratorIPKSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEEC2ERKS6_:
	.___ZN9__gnu_cxx17__normal_iteratorIPKSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEEC2ERKS6___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(10646:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator.24"**, var = ^3
	leaq -8(%rbp), %rcx
	# LowerAlloca(10647:3): size = 8, type = %"class.std::basic_string_view"***, var = ^4
	leaq -16(%rbp), %rax
	# LowerStore(10648:3).9: mov %"class.__gnu_cxx::__normal_iterator.24"* %rdi, (^3)
	movq %rdi, (%rcx)
	# LowerStore(10649:3).9: mov %"class.std::basic_string_view"** %rsi, (^4)
	movq %rsi, (%rax)
	# LowerLoad(10650:3).2: (^3) into %"class.__gnu_cxx::__normal_iterator.24"* ^5
	movq (%rcx), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator.24"
	# LowerGetelementptr(10651:3): struct-type: %"class.__gnu_cxx::__normal_iterator.24"* ^5 -> ^6, indices=0,0
	movq %rbx, %rcx
	# LowerGetelementptr(10651:3): type of ^6 is %"class.std::basic_string_view"**
	# LowerLoad(10652:3).2: (^4) into %"class.std::basic_string_view"** ^7
	movq (%rax), %rbx
	# LowerLoad(10653:3).2: (^7) into %"class.std::basic_string_view"* ^8
	movq (%rbx), %rax
	# LowerStore(10654:3).9: mov %"class.std::basic_string_view"* ^8, (^6)
	movq %rax, (%rcx)
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_RT0_
.p2align 4, 0x90
_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_RT0_:
	.___ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_RT0___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(360 + 0, 16)
	subq $368, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -304(%rbp)
	movq %r12, -296(%rbp)
	movq %r13, -240(%rbp)
	movq %r14, -312(%rbp)
	movq %r15, -232(%rbp)
	# LowerAlloca(7947:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^4
	# Fixing source-to-dest leaq -8(%rbp), -152(%rbp)
	leaq -8(%rbp), %r15
	movq %r15, -152(%rbp)
	# LowerAlloca(7948:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^5
	leaq -16(%rbp), %r13
	# LowerAlloca(7949:3): size = 8, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"**, var = ^6
	# Fixing source-to-dest leaq -24(%rbp), -160(%rbp)
	leaq -24(%rbp), %r15
	movq %r15, -160(%rbp)
	# LowerAlloca(7950:3): size = 8, type = i64*, var = ^7
	# Fixing source-to-dest leaq -32(%rbp), -168(%rbp)
	leaq -32(%rbp), %r15
	movq %r15, -168(%rbp)
	# LowerAlloca(7951:3): size = 8, type = i64*, var = ^8
	# Fixing source-to-dest leaq -40(%rbp), -176(%rbp)
	leaq -40(%rbp), %r15
	movq %r15, -176(%rbp)
	# LowerAlloca(7952:3): size = 40, type = %struct.LsItem*, var = ^9
	# Fixing source-to-dest leaq -80(%rbp), -184(%rbp)
	leaq -80(%rbp), %r15
	movq %r15, -184(%rbp)
	# LowerAlloca(7953:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^10
	# Fixing source-to-dest leaq -88(%rbp), -192(%rbp)
	leaq -88(%rbp), %r15
	movq %r15, -192(%rbp)
	# LowerAlloca(7954:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^11
	# Fixing source-to-dest leaq -96(%rbp), -200(%rbp)
	leaq -96(%rbp), %r15
	movq %r15, -200(%rbp)
	# LowerAlloca(7955:3): size = 40, type = %struct.LsItem*, var = ^12
	leaq -136(%rbp), %r12
	# LowerAlloca(7956:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, var = ^13
	leaq -137(%rbp), %rbx
	# LowerAlloca(7957:3): size = 4, type = i32*, var = ^14
	leaq -144(%rbp), %r14
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7958:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^4 -> ^15, indices=0,0
	movq -152(%rbp), %rax
	# LowerGetelementptr(7958:3): type of ^15 is %struct.LsItem**
	# LowerStore(7959:3).9: mov %struct.LsItem* %rdi, (^15)
	movq %rdi, (%rax)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7960:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^5 -> ^16, indices=0,0
	movq %r13, %rax
	# LowerGetelementptr(7960:3): type of ^16 is %struct.LsItem**
	# LowerStore(7961:3).9: mov %struct.LsItem* %rsi, (^16)
	movq %rsi, (%rax)
	# LowerStore(7962:3).9: mov %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %rdx, (^6)
	movq -160(%rbp), %rax
	movq %rdx, (%rax)
	# SetupCalls(7963:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	# SetupCalls(7963:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -152(%rbp), %rsi
	callq _ZN9__gnu_cxxmiIP6LsItemSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_
	# SetupCalls(7963:3): move i64 result from %rax
	movq %rax, %r15
	# LowerIcmp(7964:3): i64 ^17 vs. intlike 2
	cmpq $2, %r15
	setl %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_RT0___M67
	jmp .___ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_RT0___M68
	.___ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_RT0___M67:
	jmp .___ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_RT0___M378
	.___ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_RT0___M68:
	# SetupCalls(7971:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	# SetupCalls(7971:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -152(%rbp), %rsi
	callq _ZN9__gnu_cxxmiIP6LsItemSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_
	# SetupCalls(7971:3): move i64 result from %rax
	movq %rax, %r13
	# LowerStore(7972:3).9: mov i64 ^21, (^7)
	movq -168(%rbp), %rax
	movq %r13, (%rax)
	# LowerLoad(7973:3).2: (^7) into i64 ^22
	movq -168(%rbp), %rcx
	movq (%rcx), %rax
	# LowerMath(7974:3): ^22, 2 into i64 ^23
	movq %rax, %rcx
	subq $2, %rcx
	# LowerSdiv(7975:3): ^23, 2 into i64 ^24
	movq %rcx, %rax
	sarq $1, %rax
	# LowerStore(7976:3).9: mov i64 ^24, (^8)
	movq -176(%rbp), %rcx
	movq %rax, (%rcx)
	.___ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_RT0___M106:
	# LowerLoad(7980:3).2: (^8) into i64 ^26
	movq -176(%rbp), %rcx
	movq (%rcx), %rax
	# Clobber %rax
	movq %rax, -208(%rbp)
	# SetupCalls(7981:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -152(%rbp), %rdi
	# SetupCalls(7981:3): move argument i64 ^26
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEplEl
	# SetupCalls(7981:3): move %struct.LsItem* result from %rax
	movq %rax, %r13
	# Unclobber %rax
	movq -208(%rbp), %rax
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7982:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^10 -> ^28, indices=0,0
	movq -192(%rbp), %rax
	# LowerGetelementptr(7982:3): type of ^28 is %struct.LsItem**
	# LowerStore(7983:3).9: mov %struct.LsItem* ^27, (^28)
	movq %r13, (%rax)
	# SetupCalls(7984:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq -192(%rbp), %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEdeEv
	# SetupCalls(7984:3): move %struct.LsItem* result from %rax
	movq %rax, %r13
	# SetupCalls(7985:3): move argument %struct.LsItem* nonnull dereferenceable(33) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq -184(%rbp), %rdi
	# SetupCalls(7985:3): move argument %struct.LsItem* nonnull dereferenceable(33) align 8 ^29
	# Fixed movzx with identical source and destination widths
	movq %r13, %rsi
	callq _ZN6LsItemC2EOS_
	# LowerBasicConversion(7986:3): %"class.__gnu_cxx::__normal_iterator"* ^11 -> i8* ^30
	movq -200(%rbp), %rax
	# LowerBasicConversion(7987:3): %"class.__gnu_cxx::__normal_iterator"* ^4 -> i8* ^31
	movq -152(%rbp), %rcx
	# Clobber %rcx
	movq %rcx, -216(%rbp)
	# Clobber %rax
	movq %rax, -208(%rbp)
	# SetupCalls(7988:3): move argument i8* align 8 ^30
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(7988:3): move argument i8* align 8 ^31
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(7988:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -208(%rbp), %rax
	# Unclobber %rcx
	movq -216(%rbp), %rcx
	# LowerLoad(7989:3).2: (^8) into i64 ^32
	movq -176(%rbp), %rax
	movq (%rax), %r13
	# LowerLoad(7990:3).2: (^7) into i64 ^33
	movq -168(%rbp), %rax
	movq (%rax), %r15
	# SetupCalls(7991:3): move argument %struct.LsItem* nonnull dereferenceable(33) align 8 ^12
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(7991:3): move argument %struct.LsItem* nonnull dereferenceable(33) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq -184(%rbp), %rsi
	callq _ZN6LsItemC2EOS_
	# LowerLoad(7992:3).2: (^6) into %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* ^34
	movq -160(%rbp), %rax
	movq (%rax), %rcx
	# LowerBasicConversion(7993:3): %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* ^13 -> i8* ^35
	movq %rbx, %rax
	# LowerBasicConversion(7994:3): %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* ^34 -> i8* ^36
	movq %rcx, %rdx
	# Clobber %rdx
	movq %rdx, -224(%rbp)
	# Clobber %rax
	movq %rax, -208(%rbp)
	# SetupCalls(7995:3): move argument i8* align 1 ^35
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(7995:3): move argument i8* align 1 ^36
	# Fixed movzx with identical source and destination widths
	movq %rdx, %rsi
	# SetupCalls(7995:3): move argument i64 1
	movq $1, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -208(%rbp), %rax
	# Unclobber %rdx
	movq -224(%rbp), %rdx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7996:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^11 -> ^37, indices=0,0
	movq -200(%rbp), %rax
	# LowerGetelementptr(7996:3): type of ^37 is %struct.LsItem**
	# LowerLoad(7997:3).2: (^37) into %struct.LsItem* ^38
	movq (%rax), %rcx
	# Clobber %rcx
	movq %rcx, -216(%rbp)
	# SetupCalls(7998:3): move argument %struct.LsItem* ^38
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(7998:3): move argument i64 ^32
	# Fixed movzx with identical source and destination widths
	movq %r13, %rsi
	# SetupCalls(7998:3): move argument i64 ^33
	# Fixed movzx with identical source and destination widths
	movq %r15, %rdx
	# SetupCalls(7998:3): move argument %struct.LsItem* ^12
	# Fixed movzx with identical source and destination widths
	movq %r12, %rcx
	callq _ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_T2_
	# Unclobber %rcx
	movq -216(%rbp), %rcx
	# SetupCalls(7999:3): move argument %struct.LsItem* nonnull dereferenceable(33) align 8 ^12
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	callq _ZN6LsItemD2Ev
	# LowerLoad(8000:3).2: (^8) into i64 ^39
	movq -176(%rbp), %rcx
	movq (%rcx), %rax
	# LowerIcmp(8001:3): i64 ^39 vs. intlike 0
	cmpq $0, %rax
	sete %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_RT0___M334
	jmp .___ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_RT0___M337
	.___ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_RT0___M334:
	# LowerStore(8005:3).3: mov $imm, (^14)
	movl $1, (%r14)
	jmp .___ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_RT0___M347
	.___ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_RT0___M337:
	# LowerLoad(8009:3).2: (^8) into i64 ^43
	movq -176(%rbp), %rax
	movq (%rax), %rcx
	# LowerMath(8010:3): ^43, -1 into i64 ^44
	movq %rcx, %rdx
	addq $-1, %rdx
	# LowerStore(8011:3).9: mov i64 ^44, (^8)
	movq -176(%rbp), %rax
	movq %rdx, (%rax)
	# LowerStore(8012:3).3: mov $imm, (^14)
	movl $0, (%r14)
	.___ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_RT0___M347:
	# SetupCalls(8016:3): move argument %struct.LsItem* nonnull dereferenceable(33) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq -184(%rbp), %rdi
	callq _ZN6LsItemD2Ev
	# LowerLoad(8017:3).2: (^14) into i32 ^46
	movl (%r14), %eax
	# LowerSwitch(8018:3): begin conditions
	cmpl $0, %eax
	je .___ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_RT0___M377
	cmpl $1, %eax
	je .___ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_RT0___M378
	# LowerSwitch(8018:3): default
	jmp .___ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_RT0___M379
	.___ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_RT0___M377:
	jmp .___ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_RT0___M106
	.___ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_RT0___M378:
	movq -232(%rbp), %r15
	movq -312(%rbp), %r14
	movq -240(%rbp), %r13
	movq -296(%rbp), %r12
	movq -304(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq
	.___ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_RT0___M379:

.section .text
.global _ZN9__gnu_cxx5__ops16__iter_comp_iterIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EENS0_15_Iter_comp_iterIT_EESD_
.p2align 4, 0x90
_ZN9__gnu_cxx5__ops16__iter_comp_iterIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EENS0_15_Iter_comp_iterIT_EESD_:
	.___ZN9__gnu_cxx5__ops16__iter_comp_iterIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EENS0_15_Iter_comp_iterIT_EESD___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(7498:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, var = ^1
	leaq -1(%rbp), %rax
	# LowerAlloca(7499:3): size = 1, type = %class.anon*, var = ^2
	leaq -2(%rbp), %rbx
	# LowerAlloca(7500:3): size = 1, type = %class.anon*, var = ^3
	leaq -3(%rbp), %rbx
	# Clobber %rax
	movq %rax, -16(%rbp)
	# SetupCalls(7501:3): move argument %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* nonnull dereferenceable(1) align 1 ^1
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EC2ESB_
	# Unclobber %rax
	movq -16(%rbp), %rax
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZN6LsItemC2EOS_
.p2align 4, 0x90
_ZN6LsItemC2EOS_:
	.___ZN6LsItemC2EOS___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(64 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -40(%rbp)
	movq %r12, -48(%rbp)
	# LowerAlloca(7386:3): size = 8, type = %struct.LsItem**, var = ^3
	leaq -8(%rbp), %rax
	# LowerAlloca(7387:3): size = 8, type = %struct.LsItem**, var = ^4
	leaq -16(%rbp), %rbx
	# LowerStore(7388:3).9: mov %struct.LsItem* %rdi, (^3)
	movq %rdi, (%rax)
	# LowerStore(7389:3).9: mov %struct.LsItem* %rsi, (^4)
	movq %rsi, (%rbx)
	# LowerLoad(7390:3).2: (^3) into %struct.LsItem* ^5
	movq (%rax), %r12
	# tt = Pointer, type = %struct.LsItem
	# LowerGetelementptr(7391:3): struct-type: %struct.LsItem* ^5 -> ^6, indices=0,0
	movq %r12, %rdx
	# LowerGetelementptr(7391:3): type of ^6 is %"class.std::__cxx11::basic_string"*
	# LowerLoad(7392:3).2: (^4) into %struct.LsItem* ^7
	movq (%rbx), %rcx
	# tt = Pointer, type = %struct.LsItem
	# LowerGetelementptr(7393:3): struct-type: %struct.LsItem* ^7 -> ^8, indices=0,0
	movq %rcx, %rax
	# LowerGetelementptr(7393:3): type of ^8 is %"class.std::__cxx11::basic_string"*
	# Clobber %rdx
	movq %rdx, -24(%rbp)
	# Clobber %rax
	movq %rax, -32(%rbp)
	# SetupCalls(7394:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rdx, %rdi
	# SetupCalls(7394:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_@PLT
	# Unclobber %rax
	movq -32(%rbp), %rax
	# Unclobber %rdx
	movq -24(%rbp), %rdx
	# tt = Pointer, type = %struct.LsItem
	# LowerGetelementptr(7395:3): struct-type: %struct.LsItem* ^5 -> ^9, indices=0,1
	movq %r12, %rcx
	addq $32, %rcx
	# LowerGetelementptr(7395:3): type of ^9 is i8*
	# LowerLoad(7396:3).2: (^4) into %struct.LsItem* ^10
	movq (%rbx), %rax
	# tt = Pointer, type = %struct.LsItem
	# LowerGetelementptr(7397:3): struct-type: %struct.LsItem* ^10 -> ^11, indices=0,1
	movq %rax, %rdx
	addq $32, %rdx
	# LowerGetelementptr(7397:3): type of ^11 is i8*
	# LowerLoad(7398:3).2: (^11) into i8 ^12
	movb (%rdx), %bl
	# LowerTrunc(7399:3): 8 to 1, move
	movb %bl, %al
	# LowerTrunc(7399:3): 8 to 1, apply mask
	andq $1, %rax
	# LowerBasicConversion(7400:3): i1 ^13 -> i8 ^14
	movb %al, %bl
	# LowerStore(7401:3).9: mov i8 ^14, (^9)
	movb %bl, (%rcx)
	movq -48(%rbp), %r12
	movq -40(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE12_M_rightmostEv
.p2align 4, 0x90
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE12_M_rightmostEv:
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE12_M_rightmostEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(40 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(10047:3): size = 8, type = %"class.std::_Rb_tree"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(10048:3).9: mov %"class.std::_Rb_tree"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(10049:3).2: (^2) into %"class.std::_Rb_tree"* ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::_Rb_tree"
	# LowerGetelementptr(10050:3): struct-type: %"class.std::_Rb_tree"* ^3 -> ^4, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(10050:3): type of ^4 is %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Rb_tree_impl"*
	# LowerBasicConversion(10051:3): %"class.std::_Rb_tree"* ^4 -> i8* ^5
	movq %rax, %rbx
	# tt = Pointer, type = i8
	# LowerGetelementptr(10052:3): struct-type: i8* ^5 -> ^6, indices=8
	movq %rbx, %rax
	addq $8, %rax
	# LowerGetelementptr(10052:3): type of ^6 is i8*
	# LowerBasicConversion(10053:3): i8* ^6 -> %"struct.std::_Rb_tree_header"* ^7
	movq %rax, %rbx
	# tt = Pointer, type = %"struct.std::_Rb_tree_header"
	# LowerGetelementptr(10054:3): struct-type: %"struct.std::_Rb_tree_header"* ^7 -> ^8, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(10054:3): type of ^8 is %"struct.std::_Rb_tree_node_base"*
	# tt = Pointer, type = %"struct.std::_Rb_tree_node_base"
	# LowerGetelementptr(10055:3): struct-type: %"struct.std::_Rb_tree_node_base"* ^8 -> ^9, indices=0,3
	movq %rax, %rbx
	addq $24, %rbx
	# LowerGetelementptr(10055:3): type of ^9 is %"struct.std::_Rb_tree_node_base"**
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt12__niter_baseIP6LsItemET_S2_
.p2align 4, 0x90
_ZSt12__niter_baseIP6LsItemET_S2_:
	.___ZSt12__niter_baseIP6LsItemET_S2___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(7327:3): size = 8, type = %struct.LsItem**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(7328:3).9: mov %struct.LsItem* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(7329:3).2: (^2) into %struct.LsItem* ^3
	movq (%rax), %rbx
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt14__relocate_a_1IP6LsItemS1_SaIS0_EET0_T_S4_S3_RT1_
.p2align 4, 0x90
_ZSt14__relocate_a_1IP6LsItemS1_SaIS0_EET0_T_S4_S3_RT1_:
	.___ZSt14__relocate_a_1IP6LsItemS1_SaIS0_EET0_T_S4_S3_RT1___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(96 + 0, 16)
	subq $96, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -88(%rbp)
	movq %r12, -80(%rbp)
	movq %r13, -72(%rbp)
	movq %r14, -96(%rbp)
	# LowerAlloca(7285:3): size = 8, type = %struct.LsItem**, var = ^5
	leaq -8(%rbp), %r13
	# LowerAlloca(7286:3): size = 8, type = %struct.LsItem**, var = ^6
	leaq -16(%rbp), %r12
	# LowerAlloca(7287:3): size = 8, type = %struct.LsItem**, var = ^7
	leaq -24(%rbp), %rax
	# LowerAlloca(7288:3): size = 8, type = %"class.std::allocator.7"**, var = ^8
	leaq -32(%rbp), %rbx
	# LowerAlloca(7289:3): size = 8, type = %struct.LsItem**, var = ^9
	leaq -40(%rbp), %r14
	# LowerStore(7290:3).9: mov %struct.LsItem* %rdi, (^5)
	movq %rdi, (%r13)
	# LowerStore(7291:3).9: mov %struct.LsItem* %rsi, (^6)
	movq %rsi, (%r12)
	# LowerStore(7292:3).9: mov %struct.LsItem* %rdx, (^7)
	movq %rdx, (%rax)
	# LowerStore(7293:3).9: mov %"class.std::allocator.7"* %rcx, (^8)
	movq %rcx, (%rbx)
	# LowerLoad(7294:3).2: (^7) into %struct.LsItem* ^10
	movq (%rax), %rcx
	# LowerStore(7295:3).9: mov %struct.LsItem* ^10, (^9)
	movq %rcx, (%r14)
	.___ZSt14__relocate_a_1IP6LsItemS1_SaIS0_EET0_T_S4_S3_RT1___M23:
	# LowerLoad(7299:3).2: (^5) into %struct.LsItem* ^12
	movq (%r13), %rcx
	# LowerLoad(7300:3).2: (^6) into %struct.LsItem* ^13
	movq (%r12), %rax
	# LowerIcmp(7301:3): %struct.LsItem* ^12 vs. operand %struct.LsItem* ^13
	cmpq %rax, %rcx
	setne %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZSt14__relocate_a_1IP6LsItemS1_SaIS0_EET0_T_S4_S3_RT1___M32
	jmp .___ZSt14__relocate_a_1IP6LsItemS1_SaIS0_EET0_T_S4_S3_RT1___M83
	.___ZSt14__relocate_a_1IP6LsItemS1_SaIS0_EET0_T_S4_S3_RT1___M32:
	# LowerLoad(7305:3).2: (^9) into %struct.LsItem* ^16
	movq (%r14), %rax
	# LowerLoad(7306:3).2: (^5) into %struct.LsItem* ^17
	movq (%r13), %rcx
	# LowerLoad(7307:3).2: (^8) into %"class.std::allocator.7"* ^18
	movq (%rbx), %r8
	# Clobber %rcx
	movq %rcx, -48(%rbp)
	# Clobber %r8
	movq %r8, -56(%rbp)
	# Clobber %rax
	movq %rax, -64(%rbp)
	# SetupCalls(7308:3): move argument %struct.LsItem* ^16
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(7308:3): move argument %struct.LsItem* ^17
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(7308:3): move argument %"class.std::allocator.7"* nonnull dereferenceable(1) align 1 ^18
	# Fixed movzx with identical source and destination widths
	movq %r8, %rdx
	callq _ZSt19__relocate_object_aI6LsItemS0_SaIS0_EEvPT_PT0_RT1_
	# Unclobber %rax
	movq -64(%rbp), %rax
	# Unclobber %r8
	movq -56(%rbp), %r8
	# Unclobber %rcx
	movq -48(%rbp), %rcx
	# LowerLoad(7312:3).2: (^5) into %struct.LsItem* ^20
	movq (%r13), %rax
	# tt = Pointer, type = %struct.LsItem
	# LowerGetelementptr(7313:3): struct-type: %struct.LsItem* ^20 -> ^21, indices=1
	movq %rax, %rcx
	addq $40, %rcx
	# LowerGetelementptr(7313:3): type of ^21 is %struct.LsItem*
	# LowerStore(7314:3).9: mov %struct.LsItem* ^21, (^5)
	movq %rcx, (%r13)
	# LowerLoad(7315:3).2: (^9) into %struct.LsItem* ^22
	movq (%r14), %rax
	# tt = Pointer, type = %struct.LsItem
	# LowerGetelementptr(7316:3): struct-type: %struct.LsItem* ^22 -> ^23, indices=1
	movq %rax, %rcx
	addq $40, %rcx
	# LowerGetelementptr(7316:3): type of ^23 is %struct.LsItem*
	# LowerStore(7317:3).9: mov %struct.LsItem* ^23, (^9)
	movq %rcx, (%r14)
	jmp .___ZSt14__relocate_a_1IP6LsItemS1_SaIS0_EET0_T_S4_S3_RT1___M23
	.___ZSt14__relocate_a_1IP6LsItemS1_SaIS0_EET0_T_S4_S3_RT1___M83:
	# LowerLoad(7321:3).2: (^9) into %struct.LsItem* ^25
	movq (%r14), %rax
	movq -96(%rbp), %r14
	movq -72(%rbp), %r13
	movq -80(%rbp), %r12
	movq -88(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10_Head_baseILm0EPNSt10filesystem7__cxx114path5_List5_ImplELb0EE7_M_headERS6_
.p2align 4, 0x90
_ZNSt10_Head_baseILm0EPNSt10filesystem7__cxx114path5_List5_ImplELb0EE7_M_headERS6_:
	.___ZNSt10_Head_baseILm0EPNSt10filesystem7__cxx114path5_List5_ImplELb0EE7_M_headERS6___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(4118:3): size = 8, type = %"struct.std::_Head_base.4"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(4119:3).9: mov %"struct.std::_Head_base.4"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(4120:3).2: (^2) into %"struct.std::_Head_base.4"* ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"struct.std::_Head_base.4"
	# LowerGetelementptr(4121:3): struct-type: %"struct.std::_Head_base.4"* ^3 -> ^4, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(4121:3): type of ^4 is %"struct.std::filesystem::__cxx11::path::_List::_Impl"**
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEE7_M_addrEv
.p2align 4, 0x90
_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEE7_M_addrEv:
	.___ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEE7_M_addrEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(4892:3): size = 8, type = %"struct.__gnu_cxx::__aligned_membuf"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(4893:3).9: mov %"struct.__gnu_cxx::__aligned_membuf"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(4894:3).2: (^2) into %"struct.__gnu_cxx::__aligned_membuf"* ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"struct.__gnu_cxx::__aligned_membuf"
	# LowerGetelementptr(4895:3): struct-type: %"struct.__gnu_cxx::__aligned_membuf"* ^3 -> ^4, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(4895:3): type of ^4 is [64 x i8]*
	# LowerBasicConversion(4896:3): %"struct.__gnu_cxx::__aligned_membuf"* ^4 -> i8* ^5
	movq %rax, %rbx
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10filesystem7__cxx114path5_ListD2Ev
.p2align 4, 0x90
_ZNSt10filesystem7__cxx114path5_ListD2Ev:
	.___ZNSt10filesystem7__cxx114path5_ListD2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(4027:3): size = 8, type = %"struct.std::filesystem::__cxx11::path::_List"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(4028:3).9: mov %"struct.std::filesystem::__cxx11::path::_List"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(4029:3).2: (^2) into %"struct.std::filesystem::__cxx11::path::_List"* ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"struct.std::filesystem::__cxx11::path::_List"
	# LowerGetelementptr(4030:3): struct-type: %"struct.std::filesystem::__cxx11::path::_List"* ^3 -> ^4, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(4030:3): type of ^4 is %"class.std::unique_ptr"*
	# Clobber %rax
	movq %rax, -16(%rbp)
	# SetupCalls(4031:3): move argument %"class.std::unique_ptr"* nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt10unique_ptrINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEED2Ev
	# Unclobber %rax
	movq -16(%rbp), %rax
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE17_M_realloc_insertIJS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_
.p2align 4, 0x90
_ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE17_M_realloc_insertIJS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_:
	.___ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE17_M_realloc_insertIJS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(640 + 0, 16)
	subq $640, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -272(%rbp)
	movq %r12, -304(%rbp)
	movq %r13, -336(%rbp)
	movq %r14, -344(%rbp)
	movq %r15, -248(%rbp)
	# LowerAlloca(5556:3): size = 8, type = %"class.std::__new_allocator"**, var = ^4
	# Fixing source-to-dest leaq -8(%rbp), -200(%rbp)
	leaq -8(%rbp), %r15
	movq %r15, -200(%rbp)
	# LowerAlloca(5557:3): size = 8, type = %"class.std::basic_string_view"**, var = ^5
	# Fixing source-to-dest leaq -16(%rbp), -208(%rbp)
	leaq -16(%rbp), %r15
	movq %r15, -208(%rbp)
	# LowerAlloca(5558:3): size = 8, type = %"class.std::basic_string_view"**, var = ^6
	# Fixing source-to-dest leaq -24(%rbp), -192(%rbp)
	leaq -24(%rbp), %r15
	movq %r15, -192(%rbp)
	# LowerAlloca(5559:3): size = 8, type = %"class.std::allocator"**, var = ^7
	leaq -32(%rbp), %rbx
	# LowerAlloca(5560:3): size = 8, type = %"class.std::basic_string_view"**, var = ^8
	# Fixing source-to-dest leaq -40(%rbp), -216(%rbp)
	leaq -40(%rbp), %r15
	movq %r15, -216(%rbp)
	# LowerAlloca(5561:3): size = 8, type = %"class.std::basic_string_view"**, var = ^9
	# Fixing source-to-dest leaq -48(%rbp), -224(%rbp)
	leaq -48(%rbp), %r15
	movq %r15, -224(%rbp)
	# LowerAlloca(5562:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator.19"*, var = ^10
	# Fixing source-to-dest leaq -56(%rbp), -184(%rbp)
	leaq -56(%rbp), %r15
	movq %r15, -184(%rbp)
	# LowerAlloca(5563:3): size = 8, type = %"class.std::vector"**, var = ^11
	leaq -64(%rbp), %rcx
	# LowerAlloca(5564:3): size = 8, type = %"class.std::basic_string_view"**, var = ^12
	leaq -72(%rbp), %r12
	# LowerAlloca(5565:3): size = 8, type = i64*, var = ^13
	# Fixing source-to-dest leaq -80(%rbp), -136(%rbp)
	leaq -80(%rbp), %r15
	movq %r15, -136(%rbp)
	# LowerAlloca(5566:3): size = 8, type = %"class.std::basic_string_view"**, var = ^14
	# Fixing source-to-dest leaq -88(%rbp), -168(%rbp)
	leaq -88(%rbp), %r15
	movq %r15, -168(%rbp)
	# LowerAlloca(5567:3): size = 8, type = %"class.std::basic_string_view"**, var = ^15
	# Fixing source-to-dest leaq -96(%rbp), -176(%rbp)
	leaq -96(%rbp), %r15
	movq %r15, -176(%rbp)
	# LowerAlloca(5568:3): size = 8, type = i64*, var = ^16
	leaq -104(%rbp), %r13
	# LowerAlloca(5569:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator.19"*, var = ^17
	leaq -112(%rbp), %r14
	# LowerAlloca(5570:3): size = 8, type = %"class.std::basic_string_view"**, var = ^18
	# Fixing source-to-dest leaq -120(%rbp), -144(%rbp)
	leaq -120(%rbp), %r15
	movq %r15, -144(%rbp)
	# LowerAlloca(5571:3): size = 8, type = %"class.std::basic_string_view"**, var = ^19
	# Fixing source-to-dest leaq -128(%rbp), -160(%rbp)
	leaq -128(%rbp), %r15
	movq %r15, -160(%rbp)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator.19"
	# LowerGetelementptr(5572:3): struct-type: %"class.__gnu_cxx::__normal_iterator.19"* ^10 -> ^20, indices=0,0
	movq -184(%rbp), %rax
	# LowerGetelementptr(5572:3): type of ^20 is %"class.std::basic_string_view"**
	# LowerStore(5573:3).9: mov %"class.std::basic_string_view"* %rsi, (^20)
	movq %rsi, (%rax)
	# LowerStore(5574:3).9: mov %"class.std::vector"* %rdi, (^11)
	movq %rdi, (%rcx)
	# LowerStore(5575:3).9: mov %"class.std::basic_string_view"* %rdx, (^12)
	movq %rdx, (%r12)
	# LowerLoad(5576:3).2: (^11) into %"class.std::vector"* ^21
	# Fixing source-to-dest movq (%rcx), -152(%rbp)
	movq (%rcx), %r15
	movq %r15, -152(%rbp)
	# SetupCalls(5577:3): move argument %"class.std::vector"* nonnull dereferenceable(24) align 8 ^21
	# Fixed movzx with identical source and destination widths
	movq -152(%rbp), %rdi
	# SetupCalls(5577:3): move argument i64 1
	movq $1, %rsi
	# SetupCalls(5577:3): move argument i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.27, i64 0, i64 0)
	leaq .str.27(%rip), %rdx
	callq _ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12_M_check_lenEmPKc
	# SetupCalls(5577:3): move i64 result from %rax
	movq %rax, %r15
	# LowerStore(5578:3).9: mov i64 ^22, (^13)
	movq -136(%rbp), %rax
	movq %r15, (%rax)
	# LowerBasicConversion(5579:3): %"class.std::vector"* ^21 -> %"struct.std::_Vector_base"* ^23
	movq -152(%rbp), %rax
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(5580:3): struct-type: %"struct.std::_Vector_base"* ^23 -> ^24, indices=0,0
	movq %rax, %rcx
	# LowerGetelementptr(5580:3): type of ^24 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# LowerBasicConversion(5581:3): %"struct.std::_Vector_base"* ^24 -> %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^25
	movq %rcx, %rdx
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(5582:3): struct-type: %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^25 -> ^26, indices=0,0
	movq %rdx, %rax
	# LowerGetelementptr(5582:3): type of ^26 is %"class.std::basic_string_view"**
	# LowerLoad(5583:3).2: (^26) into %"class.std::basic_string_view"* ^27
	movq (%rax), %rcx
	# LowerStore(5584:3).9: mov %"class.std::basic_string_view"* ^27, (^14)
	movq -168(%rbp), %rax
	movq %rcx, (%rax)
	# LowerBasicConversion(5585:3): %"class.std::vector"* ^21 -> %"struct.std::_Vector_base"* ^28
	movq -152(%rbp), %rax
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(5586:3): struct-type: %"struct.std::_Vector_base"* ^28 -> ^29, indices=0,0
	movq %rax, %rcx
	# LowerGetelementptr(5586:3): type of ^29 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# LowerBasicConversion(5587:3): %"struct.std::_Vector_base"* ^29 -> %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^30
	movq %rcx, %rax
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(5588:3): struct-type: %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^30 -> ^31, indices=0,1
	movq %rax, %rcx
	addq $8, %rcx
	# LowerGetelementptr(5588:3): type of ^31 is %"class.std::basic_string_view"**
	# LowerLoad(5589:3).2: (^31) into %"class.std::basic_string_view"* ^32
	movq (%rcx), %rax
	# LowerStore(5590:3).9: mov %"class.std::basic_string_view"* ^32, (^15)
	movq -176(%rbp), %rcx
	movq %rax, (%rcx)
	# SetupCalls(5591:3): move argument %"class.std::vector"* nonnull dereferenceable(24) align 8 ^21
	# Fixed movzx with identical source and destination widths
	movq -152(%rbp), %rdi
	callq _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE5beginEv
	# SetupCalls(5591:3): move %"class.std::basic_string_view"* result from %rax
	movq %rax, %r15
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator.19"
	# LowerGetelementptr(5592:3): struct-type: %"class.__gnu_cxx::__normal_iterator.19"* ^17 -> ^34, indices=0,0
	movq %r14, %rax
	# LowerGetelementptr(5592:3): type of ^34 is %"class.std::basic_string_view"**
	# LowerStore(5593:3).9: mov %"class.std::basic_string_view"* ^33, (^34)
	movq %r15, (%rax)
	# SetupCalls(5594:3): move argument %"class.__gnu_cxx::__normal_iterator.19"* nonnull dereferenceable(8) align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq -184(%rbp), %rdi
	# SetupCalls(5594:3): move argument %"class.__gnu_cxx::__normal_iterator.19"* nonnull dereferenceable(8) align 8 ^17
	# Fixed movzx with identical source and destination widths
	movq %r14, %rsi
	callq _ZN9__gnu_cxxmiIPSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_
	# SetupCalls(5594:3): move i64 result from %rax
	movq %rax, %r14
	# LowerStore(5595:3).9: mov i64 ^35, (^16)
	movq %r14, (%r13)
	# LowerBasicConversion(5596:3): %"class.std::vector"* ^21 -> %"struct.std::_Vector_base"* ^36
	movq -152(%rbp), %rax
	# LowerLoad(5597:3).2: (^13) into i64 ^37
	movq -136(%rbp), %rdx
	movq (%rdx), %rcx
	# Clobber %rcx
	movq %rcx, -232(%rbp)
	# Clobber %rax
	movq %rax, -240(%rbp)
	# SetupCalls(5598:3): move argument %"struct.std::_Vector_base"* nonnull dereferenceable(24) align 8 ^36
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(5598:3): move argument i64 ^37
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	callq _ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE11_M_allocateEm
	# SetupCalls(5598:3): move %"class.std::basic_string_view"* result from %rax
	movq %rax, %r14
	# Unclobber %rax
	movq -240(%rbp), %rax
	# Unclobber %rcx
	movq -232(%rbp), %rcx
	# LowerStore(5599:3).9: mov %"class.std::basic_string_view"* ^38, (^18)
	movq -144(%rbp), %rax
	movq %r14, (%rax)
	# LowerLoad(5600:3).2: (^18) into %"class.std::basic_string_view"* ^39
	movq -144(%rbp), %rcx
	movq (%rcx), %rax
	# LowerStore(5601:3).9: mov %"class.std::basic_string_view"* ^39, (^19)
	movq -160(%rbp), %rcx
	movq %rax, (%rcx)
	# LowerBasicConversion(5602:3): %"class.std::vector"* ^21 -> %"struct.std::_Vector_base"* ^40
	movq -152(%rbp), %rax
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(5603:3): struct-type: %"struct.std::_Vector_base"* ^40 -> ^41, indices=0,0
	movq %rax, %rcx
	# LowerGetelementptr(5603:3): type of ^41 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# LowerBasicConversion(5604:3): %"struct.std::_Vector_base"* ^41 -> %"class.std::allocator"* ^42
	movq %rcx, %rdx
	# LowerLoad(5605:3).2: (^18) into %"class.std::basic_string_view"* ^43
	movq -144(%rbp), %rcx
	movq (%rcx), %rax
	# LowerLoad(5606:3).2: (^16) into i64 ^44
	movq (%r13), %rcx
	# tt = Pointer, type = %"class.std::basic_string_view"
	# LowerGetelementptr(5607:3): pointer-type -> ^45
	movq %rcx, %rsi
	shlq $4, %rsi
	addq %rax, %rsi
	# LowerLoad(5608:3).2: (^12) into %"class.std::basic_string_view"* ^46
	movq (%r12), %rax
	# LowerStore(5609:3).9: mov %"class.std::allocator"* ^42, (^7)
	movq %rdx, (%rbx)
	# LowerStore(5610:3).9: mov %"class.std::basic_string_view"* ^45, (^8)
	movq -216(%rbp), %rcx
	movq %rsi, (%rcx)
	# LowerStore(5611:3).9: mov %"class.std::basic_string_view"* ^46, (^9)
	movq -224(%rbp), %rcx
	movq %rax, (%rcx)
	# LowerLoad(5612:3).2: (^7) into %"class.std::allocator"* ^47
	movq (%rbx), %rax
	# LowerBasicConversion(5613:3): %"class.std::allocator"* ^47 -> %"class.std::__new_allocator"* ^48
	movq %rax, %rcx
	# LowerLoad(5614:3).2: (^8) into %"class.std::basic_string_view"* ^49
	movq -216(%rbp), %rbx
	movq (%rbx), %rax
	# LowerLoad(5615:3).2: (^9) into %"class.std::basic_string_view"* ^50
	movq -224(%rbp), %rdx
	movq (%rdx), %rbx
	# LowerStore(5616:3).9: mov %"class.std::__new_allocator"* ^48, (^4)
	movq -200(%rbp), %rdx
	movq %rcx, (%rdx)
	# LowerStore(5617:3).9: mov %"class.std::basic_string_view"* ^49, (^5)
	movq -208(%rbp), %rcx
	movq %rax, (%rcx)
	# LowerStore(5618:3).9: mov %"class.std::basic_string_view"* ^50, (^6)
	movq -192(%rbp), %rax
	movq %rbx, (%rax)
	# LowerLoad(5619:3).2: (^4) into %"class.std::__new_allocator"* ^51
	movq -200(%rbp), %rbx
	movq (%rbx), %rax
	# LowerLoad(5620:3).2: (^5) into %"class.std::basic_string_view"* ^52
	movq -208(%rbp), %rbx
	movq (%rbx), %rax
	# LowerBasicConversion(5621:3): %"class.std::basic_string_view"* ^52 -> i8* ^53
	movq %rax, %rbx
	# LowerLoad(5622:3).2: (^6) into %"class.std::basic_string_view"* ^54
	movq -192(%rbp), %rbx
	movq (%rbx), %rcx
	# LowerBasicConversion(5623:3): %"class.std::basic_string_view"* ^52 -> i8* ^55
	movq %rax, %rbx
	# LowerBasicConversion(5624:3): %"class.std::basic_string_view"* ^54 -> i8* ^56
	movq %rcx, %rax
	# Clobber %rax
	movq %rax, -240(%rbp)
	# SetupCalls(5625:3): move argument i8* align 8 ^55
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(5625:3): move argument i8* align 8 ^56
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(5625:3): move argument i64 16
	movq $16, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -240(%rbp), %rax
	# LowerStore(5626:3).3: mov $imm, (^19)
	movq -160(%rbp), %rax
	movq $0, (%rax)
	# LowerLoad(5627:3).2: (^14) into %"class.std::basic_string_view"* ^57
	movq -168(%rbp), %rax
	movq (%rax), %r12
	# SetupCalls(5628:3): move argument %"class.__gnu_cxx::__normal_iterator.19"* nonnull dereferenceable(8) align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq -184(%rbp), %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIPSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEE4baseEv
	# SetupCalls(5628:3): move %"class.std::basic_string_view"** result from %rax
	movq %rax, %rbx
	# LowerLoad(5629:3).2: (^58) into %"class.std::basic_string_view"* ^59
	movq (%rbx), %r13
	# LowerLoad(5630:3).2: (^18) into %"class.std::basic_string_view"* ^60
	movq -144(%rbp), %rax
	movq (%rax), %r14
	# LowerBasicConversion(5631:3): %"class.std::vector"* ^21 -> %"struct.std::_Vector_base"* ^61
	movq -152(%rbp), %rax
	# Clobber %rax
	movq %rax, -240(%rbp)
	# SetupCalls(5632:3): move argument %"struct.std::_Vector_base"* nonnull dereferenceable(24) align 8 ^61
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE19_M_get_Tp_allocatorEv
	# SetupCalls(5632:3): move %"class.std::allocator"* result from %rax
	movq %rax, %rbx
	# Unclobber %rax
	movq -240(%rbp), %rax
	# SetupCalls(5633:3): move argument %"class.std::basic_string_view"* ^57
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(5633:3): move argument %"class.std::basic_string_view"* ^59
	# Fixed movzx with identical source and destination widths
	movq %r13, %rsi
	# SetupCalls(5633:3): move argument %"class.std::basic_string_view"* ^60
	# Fixed movzx with identical source and destination widths
	movq %r14, %rdx
	# SetupCalls(5633:3): move argument %"class.std::allocator"* nonnull dereferenceable(1) align 1 ^62
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rcx
	callq _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE11_S_relocateEPS3_S6_S6_RS4_
	# SetupCalls(5633:3): move %"class.std::basic_string_view"* result from %rax
	movq %rax, %rbx
	# LowerStore(5634:3).9: mov %"class.std::basic_string_view"* ^63, (^19)
	movq -160(%rbp), %rax
	movq %rbx, (%rax)
	# LowerLoad(5635:3).2: (^19) into %"class.std::basic_string_view"* ^64
	movq -160(%rbp), %rbx
	movq (%rbx), %rax
	# tt = Pointer, type = %"class.std::basic_string_view"
	# LowerGetelementptr(5636:3): struct-type: %"class.std::basic_string_view"* ^64 -> ^65, indices=1
	movq %rax, %rbx
	addq $16, %rbx
	# LowerGetelementptr(5636:3): type of ^65 is %"class.std::basic_string_view"*
	# LowerStore(5637:3).9: mov %"class.std::basic_string_view"* ^65, (^19)
	movq -160(%rbp), %rax
	movq %rbx, (%rax)
	# SetupCalls(5638:3): move argument %"class.__gnu_cxx::__normal_iterator.19"* nonnull dereferenceable(8) align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq -184(%rbp), %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIPSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEE4baseEv
	# SetupCalls(5638:3): move %"class.std::basic_string_view"** result from %rax
	movq %rax, %r12
	# LowerLoad(5639:3).2: (^66) into %"class.std::basic_string_view"* ^67
	movq (%r12), %rbx
	# LowerLoad(5640:3).2: (^15) into %"class.std::basic_string_view"* ^68
	movq -176(%rbp), %rax
	movq (%rax), %r12
	# LowerLoad(5641:3).2: (^19) into %"class.std::basic_string_view"* ^69
	movq -160(%rbp), %rax
	movq (%rax), %r13
	# LowerBasicConversion(5642:3): %"class.std::vector"* ^21 -> %"struct.std::_Vector_base"* ^70
	movq -152(%rbp), %rax
	# Clobber %rax
	movq %rax, -240(%rbp)
	# SetupCalls(5643:3): move argument %"struct.std::_Vector_base"* nonnull dereferenceable(24) align 8 ^70
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE19_M_get_Tp_allocatorEv
	# SetupCalls(5643:3): move %"class.std::allocator"* result from %rax
	movq %rax, %r14
	# Unclobber %rax
	movq -240(%rbp), %rax
	# SetupCalls(5644:3): move argument %"class.std::basic_string_view"* ^67
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(5644:3): move argument %"class.std::basic_string_view"* ^68
	# Fixed movzx with identical source and destination widths
	movq %r12, %rsi
	# SetupCalls(5644:3): move argument %"class.std::basic_string_view"* ^69
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdx
	# SetupCalls(5644:3): move argument %"class.std::allocator"* nonnull dereferenceable(1) align 1 ^71
	# Fixed movzx with identical source and destination widths
	movq %r14, %rcx
	callq _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE11_S_relocateEPS3_S6_S6_RS4_
	# SetupCalls(5644:3): move %"class.std::basic_string_view"* result from %rax
	movq %rax, %rbx
	# LowerStore(5645:3).9: mov %"class.std::basic_string_view"* ^72, (^19)
	movq -160(%rbp), %rax
	movq %rbx, (%rax)
	# LowerBasicConversion(5646:3): %"class.std::vector"* ^21 -> %"struct.std::_Vector_base"* ^73
	movq -152(%rbp), %rax
	# LowerLoad(5647:3).2: (^14) into %"class.std::basic_string_view"* ^74
	movq -168(%rbp), %rcx
	movq (%rcx), %rbx
	# LowerBasicConversion(5648:3): %"class.std::vector"* ^21 -> %"struct.std::_Vector_base"* ^75
	movq -152(%rbp), %rcx
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(5649:3): struct-type: %"struct.std::_Vector_base"* ^75 -> ^76, indices=0,0
	movq %rcx, %rdx
	# LowerGetelementptr(5649:3): type of ^76 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# LowerBasicConversion(5650:3): %"struct.std::_Vector_base"* ^76 -> %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^77
	movq %rdx, %rcx
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(5651:3): struct-type: %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^77 -> ^78, indices=0,2
	movq %rcx, %rdx
	addq $16, %rdx
	# LowerGetelementptr(5651:3): type of ^78 is %"class.std::basic_string_view"**
	# LowerLoad(5652:3).2: (^78) into %"class.std::basic_string_view"* ^79
	movq (%rdx), %rcx
	# LowerLoad(5653:3).2: (^14) into %"class.std::basic_string_view"* ^80
	movq -168(%rbp), %rsi
	movq (%rsi), %rdx
	# LowerBasicConversion(5654:3): %"class.std::basic_string_view"* ^79 -> i64 ^81
	movq %rcx, %rsi
	# LowerBasicConversion(5655:3): %"class.std::basic_string_view"* ^80 -> i64 ^82
	movq %rdx, %rcx
	# LowerMath(5656:3): ^81, ^82 into i64 ^83
	movq %rsi, %rdx
	subq %rcx, %rdx
	# LowerSdiv(5657:3): ^83, 16 into i64 ^84
	movq %rdx, %rcx
	sarq $4, %rcx
	# Clobber %rcx
	movq %rcx, -232(%rbp)
	# Clobber %rax
	movq %rax, -240(%rbp)
	# SetupCalls(5658:3): move argument %"struct.std::_Vector_base"* nonnull dereferenceable(24) align 8 ^73
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(5658:3): move argument %"class.std::basic_string_view"* ^74
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(5658:3): move argument i64 ^84
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdx
	callq _ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE13_M_deallocateEPS3_m
	# Unclobber %rax
	movq -240(%rbp), %rax
	# Unclobber %rcx
	movq -232(%rbp), %rcx
	# LowerLoad(5659:3).2: (^18) into %"class.std::basic_string_view"* ^85
	movq -144(%rbp), %rax
	movq (%rax), %rbx
	# LowerBasicConversion(5660:3): %"class.std::vector"* ^21 -> %"struct.std::_Vector_base"* ^86
	movq -152(%rbp), %rax
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(5661:3): struct-type: %"struct.std::_Vector_base"* ^86 -> ^87, indices=0,0
	movq %rax, %rcx
	# LowerGetelementptr(5661:3): type of ^87 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# LowerBasicConversion(5662:3): %"struct.std::_Vector_base"* ^87 -> %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^88
	movq %rcx, %rax
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(5663:3): struct-type: %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^88 -> ^89, indices=0,0
	movq %rax, %rcx
	# LowerGetelementptr(5663:3): type of ^89 is %"class.std::basic_string_view"**
	# LowerStore(5664:3).9: mov %"class.std::basic_string_view"* ^85, (^89)
	movq %rbx, (%rcx)
	# LowerLoad(5665:3).2: (^19) into %"class.std::basic_string_view"* ^90
	movq -160(%rbp), %rbx
	movq (%rbx), %rax
	# LowerBasicConversion(5666:3): %"class.std::vector"* ^21 -> %"struct.std::_Vector_base"* ^91
	movq -152(%rbp), %rbx
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(5667:3): struct-type: %"struct.std::_Vector_base"* ^91 -> ^92, indices=0,0
	movq %rbx, %rcx
	# LowerGetelementptr(5667:3): type of ^92 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# LowerBasicConversion(5668:3): %"struct.std::_Vector_base"* ^92 -> %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^93
	movq %rcx, %rbx
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(5669:3): struct-type: %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^93 -> ^94, indices=0,1
	movq %rbx, %rcx
	addq $8, %rcx
	# LowerGetelementptr(5669:3): type of ^94 is %"class.std::basic_string_view"**
	# LowerStore(5670:3).9: mov %"class.std::basic_string_view"* ^90, (^94)
	movq %rax, (%rcx)
	# LowerLoad(5671:3).2: (^18) into %"class.std::basic_string_view"* ^95
	movq -144(%rbp), %rbx
	movq (%rbx), %rax
	# LowerLoad(5672:3).2: (^13) into i64 ^96
	movq -136(%rbp), %rcx
	movq (%rcx), %rbx
	# tt = Pointer, type = %"class.std::basic_string_view"
	# LowerGetelementptr(5673:3): pointer-type -> ^97
	movq %rbx, %rcx
	shlq $4, %rcx
	addq %rax, %rcx
	# LowerBasicConversion(5674:3): %"class.std::vector"* ^21 -> %"struct.std::_Vector_base"* ^98
	movq -152(%rbp), %rax
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(5675:3): struct-type: %"struct.std::_Vector_base"* ^98 -> ^99, indices=0,0
	movq %rax, %rbx
	# LowerGetelementptr(5675:3): type of ^99 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# LowerBasicConversion(5676:3): %"struct.std::_Vector_base"* ^99 -> %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^100
	movq %rbx, %rax
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(5677:3): struct-type: %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^100 -> ^101, indices=0,2
	movq %rax, %rbx
	addq $16, %rbx
	# LowerGetelementptr(5677:3): type of ^101 is %"class.std::basic_string_view"**
	# LowerStore(5678:3).9: mov %"class.std::basic_string_view"* ^97, (^101)
	movq %rcx, (%rbx)
	movq -248(%rbp), %r15
	movq -344(%rbp), %r14
	movq -336(%rbp), %r13
	movq -304(%rbp), %r12
	movq -272(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE3endEv
.p2align 4, 0x90
_ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE3endEv:
	.___ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE3endEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(64 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -40(%rbp)
	movq %r12, -32(%rbp)
	# LowerAlloca(5684:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator.19"*, var = ^2
	leaq -8(%rbp), %r12
	# LowerAlloca(5685:3): size = 8, type = %"class.std::vector"**, var = ^3
	leaq -16(%rbp), %rbx
	# LowerStore(5686:3).9: mov %"class.std::vector"* %rdi, (^3)
	movq %rdi, (%rbx)
	# LowerLoad(5687:3).2: (^3) into %"class.std::vector"* ^4
	movq (%rbx), %rax
	# LowerBasicConversion(5688:3): %"class.std::vector"* ^4 -> %"struct.std::_Vector_base"* ^5
	movq %rax, %rbx
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(5689:3): struct-type: %"struct.std::_Vector_base"* ^5 -> ^6, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(5689:3): type of ^6 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# LowerBasicConversion(5690:3): %"struct.std::_Vector_base"* ^6 -> %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^7
	movq %rax, %rbx
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(5691:3): struct-type: %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^7 -> ^8, indices=0,1
	movq %rbx, %rax
	addq $8, %rax
	# LowerGetelementptr(5691:3): type of ^8 is %"class.std::basic_string_view"**
	# Clobber %rax
	movq %rax, -24(%rbp)
	# SetupCalls(5692:3): move argument %"class.__gnu_cxx::__normal_iterator.19"* nonnull dereferenceable(8) align 8 ^2
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(5692:3): move argument %"class.std::basic_string_view"** nonnull dereferenceable(8) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZN9__gnu_cxx17__normal_iteratorIPSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEEC2ERKS5_
	# Unclobber %rax
	movq -24(%rbp), %rax
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator.19"
	# LowerGetelementptr(5693:3): struct-type: %"class.__gnu_cxx::__normal_iterator.19"* ^2 -> ^9, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(5693:3): type of ^9 is %"class.std::basic_string_view"**
	# LowerLoad(5694:3).2: (^9) into %"class.std::basic_string_view"* ^10
	movq (%rax), %rbx
	movq %rbx, %rax
	movq -32(%rbp), %r12
	movq -40(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNK9__gnu_cxx17__normal_iteratorIPSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEE4baseEv
.p2align 4, 0x90
_ZNK9__gnu_cxx17__normal_iteratorIPSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEE4baseEv:
	.___ZNK9__gnu_cxx17__normal_iteratorIPSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEE4baseEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(5825:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator.19"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(5826:3).9: mov %"class.__gnu_cxx::__normal_iterator.19"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(5827:3).2: (^2) into %"class.__gnu_cxx::__normal_iterator.19"* ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator.19"
	# LowerGetelementptr(5828:3): struct-type: %"class.__gnu_cxx::__normal_iterator.19"* ^3 -> ^4, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(5828:3): type of ^4 is %"class.std::basic_string_view"**
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt10filesystem7__cxx1115directory_entry6statusEv
.p2align 4, 0x90
_ZNKSt10filesystem7__cxx1115directory_entry6statusEv:
	.___ZNKSt10filesystem7__cxx1115directory_entry6statusEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(56 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	movq %r12, -24(%rbp)
	# LowerAlloca(4012:3): size = 8, type = %"class.std::filesystem::file_status"*, var = ^2
	leaq -8(%rbp), %r12
	# LowerAlloca(4013:3): size = 8, type = %"class.std::filesystem::__cxx11::directory_entry"**, var = ^3
	leaq -16(%rbp), %rbx
	# LowerStore(4014:3).9: mov %"class.std::filesystem::__cxx11::directory_entry"* %rdi, (^3)
	movq %rdi, (%rbx)
	# LowerLoad(4015:3).2: (^3) into %"class.std::filesystem::__cxx11::directory_entry"* ^4
	movq (%rbx), %rax
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::directory_entry"
	# LowerGetelementptr(4016:3): struct-type: %"class.std::filesystem::__cxx11::directory_entry"* ^4 -> ^5, indices=0,0
	movq %rax, %rbx
	# LowerGetelementptr(4016:3): type of ^5 is %"class.std::filesystem::__cxx11::path"*
	# SetupCalls(4017:3): move argument %"class.std::filesystem::__cxx11::path"* nonnull dereferenceable(40) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt10filesystem6statusERKNS_7__cxx114pathE@PLT
	# SetupCalls(4017:3): move i64 result from %rax
	movq %rax, %rbx
	# LowerBasicConversion(4018:3): %"class.std::filesystem::file_status"* ^2 -> i64* ^7
	movq %r12, %rax
	# LowerStore(4019:3).9: mov i64 ^6, (^7)
	movq %rbx, (%rax)
	# LowerBasicConversion(4020:3): %"class.std::filesystem::file_status"* ^2 -> i64* ^8
	movq %r12, %rax
	# LowerLoad(4021:3).2: (^8) into i64 ^9
	movq (%rax), %rbx
	movq %rbx, %rax
	movq -24(%rbp), %r12
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt10filesystem7__cxx1115directory_entry12_M_file_typeEv
.p2align 4, 0x90
_ZNKSt10filesystem7__cxx1115directory_entry12_M_file_typeEv:
	.___ZNKSt10filesystem7__cxx1115directory_entry12_M_file_typeEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(72 + 0, 16)
	subq $80, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -48(%rbp)
	movq %r12, -40(%rbp)
	movq %r13, -64(%rbp)
	# LowerAlloca(3975:3): size = 1, type = i8*, var = ^2
	leaq -1(%rbp), %r12
	# LowerAlloca(3976:3): size = 8, type = %"class.std::filesystem::__cxx11::directory_entry"**, var = ^3
	leaq -16(%rbp), %rax
	# LowerAlloca(3977:3): size = 8, type = %"class.std::filesystem::file_status"*, var = ^4
	leaq -24(%rbp), %rbx
	# LowerStore(3978:3).9: mov %"class.std::filesystem::__cxx11::directory_entry"* %rdi, (^3)
	movq %rdi, (%rax)
	# LowerLoad(3979:3).2: (^3) into %"class.std::filesystem::__cxx11::directory_entry"* ^5
	movq (%rax), %rdx
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::directory_entry"
	# LowerGetelementptr(3980:3): struct-type: %"class.std::filesystem::__cxx11::directory_entry"* ^5 -> ^6, indices=0,1
	movq %rdx, %rcx
	addq $40, %rcx
	# LowerGetelementptr(3980:3): type of ^6 is i8*
	# LowerLoad(3981:3).2: (^6) into i8 ^7
	movb (%rcx), %al
	# LowerIcmp(3982:3): i8 ^7 vs. intlike 0
	cmpb $0, %al
	setne %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNKSt10filesystem7__cxx1115directory_entry12_M_file_typeEv__M22
	jmp .___ZNKSt10filesystem7__cxx1115directory_entry12_M_file_typeEv__M44
	.___ZNKSt10filesystem7__cxx1115directory_entry12_M_file_typeEv__M22:
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::directory_entry"
	# LowerGetelementptr(3986:3): struct-type: %"class.std::filesystem::__cxx11::directory_entry"* ^5 -> ^10, indices=0,1
	movq %rdx, %rax
	addq $40, %rax
	# LowerGetelementptr(3986:3): type of ^10 is i8*
	# LowerLoad(3987:3).2: (^10) into i8 ^11
	movb (%rax), %cl
	# LowerIcmp(3988:3): i8 ^11 vs. intlike 3
	cmpb $3, %cl
	setne %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNKSt10filesystem7__cxx1115directory_entry12_M_file_typeEv__M34
	jmp .___ZNKSt10filesystem7__cxx1115directory_entry12_M_file_typeEv__M44
	.___ZNKSt10filesystem7__cxx1115directory_entry12_M_file_typeEv__M34:
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::directory_entry"
	# LowerGetelementptr(3992:3): struct-type: %"class.std::filesystem::__cxx11::directory_entry"* ^5 -> ^14, indices=0,1
	movq %rdx, %rax
	addq $40, %rax
	# LowerGetelementptr(3992:3): type of ^14 is i8*
	# LowerLoad(3993:3).2: (^14) into i8 ^15
	movb (%rax), %bl
	# LowerStore(3994:3).9: mov i8 ^15, (^2)
	movb %bl, (%r12)
	jmp .___ZNKSt10filesystem7__cxx1115directory_entry12_M_file_typeEv__M97
	.___ZNKSt10filesystem7__cxx1115directory_entry12_M_file_typeEv__M44:
	# Clobber %rdx
	movq %rdx, -32(%rbp)
	# SetupCalls(3998:3): move argument %"class.std::filesystem::__cxx11::directory_entry"* nonnull dereferenceable(41) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %rdx, %rdi
	callq _ZNKSt10filesystem7__cxx1115directory_entry6statusEv
	# SetupCalls(3998:3): move i64 result from %rax
	movq %rax, %r13
	# Unclobber %rdx
	movq -32(%rbp), %rdx
	# LowerBasicConversion(3999:3): %"class.std::filesystem::file_status"* ^4 -> i64* ^18
	movq %rbx, %rax
	# LowerStore(4000:3).9: mov i64 ^17, (^18)
	movq %r13, (%rax)
	# SetupCalls(4001:3): move argument %"class.std::filesystem::file_status"* nonnull dereferenceable(8) align 4 ^4
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNKSt10filesystem11file_status4typeEv
	# SetupCalls(4001:3): move i8 result from %rax
	movb %al, %bl
	# LowerStore(4002:3).9: mov i8 ^19, (^2)
	movb %bl, (%r12)
	.___ZNKSt10filesystem7__cxx1115directory_entry12_M_file_typeEv__M97:
	# LowerLoad(4006:3).2: (^2) into i8 ^21
	movb (%r12), %al
	movq -64(%rbp), %r13
	movq -40(%rbp), %r12
	movq -48(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10filesystem7__cxx114path8iteratorC2EPKS1_PKNS1_5_CmptE
.p2align 4, 0x90
_ZNSt10filesystem7__cxx114path8iteratorC2EPKS1_PKNS1_5_CmptE:
	.___ZNSt10filesystem7__cxx114path8iteratorC2EPKS1_PKNS1_5_CmptE__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	# LowerAlloca(3893:3): size = 8, type = %"class.std::filesystem::__cxx11::path::iterator"**, var = ^4
	leaq -8(%rbp), %rax
	# LowerAlloca(3894:3): size = 8, type = %"class.std::filesystem::__cxx11::path"**, var = ^5
	leaq -16(%rbp), %r8
	# LowerAlloca(3895:3): size = 8, type = %"struct.std::filesystem::__cxx11::path::_Cmpt"**, var = ^6
	leaq -24(%rbp), %rcx
	# LowerStore(3896:3).9: mov %"class.std::filesystem::__cxx11::path::iterator"* %rdi, (^4)
	movq %rdi, (%rax)
	# LowerStore(3897:3).9: mov %"class.std::filesystem::__cxx11::path"* %rsi, (^5)
	movq %rsi, (%r8)
	# LowerStore(3898:3).9: mov %"struct.std::filesystem::__cxx11::path::_Cmpt"* %rdx, (^6)
	movq %rdx, (%rcx)
	# LowerLoad(3899:3).2: (^4) into %"class.std::filesystem::__cxx11::path::iterator"* ^7
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path::iterator"
	# LowerGetelementptr(3900:3): struct-type: %"class.std::filesystem::__cxx11::path::iterator"* ^7 -> ^8, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(3900:3): type of ^8 is %"class.std::filesystem::__cxx11::path"**
	# LowerLoad(3901:3).2: (^5) into %"class.std::filesystem::__cxx11::path"* ^9
	movq (%r8), %rdx
	# LowerStore(3902:3).9: mov %"class.std::filesystem::__cxx11::path"* ^9, (^8)
	movq %rdx, (%rax)
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path::iterator"
	# LowerGetelementptr(3903:3): struct-type: %"class.std::filesystem::__cxx11::path::iterator"* ^7 -> ^10, indices=0,1
	movq %rbx, %rax
	addq $8, %rax
	# LowerGetelementptr(3903:3): type of ^10 is %"struct.std::filesystem::__cxx11::path::_Cmpt"**
	# LowerLoad(3904:3).2: (^6) into %"struct.std::filesystem::__cxx11::path::_Cmpt"* ^11
	movq (%rcx), %rdx
	# LowerStore(3905:3).9: mov %"struct.std::filesystem::__cxx11::path::_Cmpt"* ^11, (^10)
	movq %rdx, (%rax)
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path::iterator"
	# LowerGetelementptr(3906:3): struct-type: %"class.std::filesystem::__cxx11::path::iterator"* ^7 -> ^12, indices=0,2
	movq %rbx, %rax
	addq $16, %rax
	# LowerGetelementptr(3906:3): type of ^12 is i8*
	# LowerStore(3907:3).3: mov $imm, (^12)
	movb $0, (%rax)
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEEppEv
.p2align 4, 0x90
_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEEppEv:
	.___ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEEppEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	movq %r12, -16(%rbp)
	# LowerAlloca(10242:3): size = 8, type = %"struct.std::_Rb_tree_iterator"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(10243:3).9: mov %"struct.std::_Rb_tree_iterator"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(10244:3).2: (^2) into %"struct.std::_Rb_tree_iterator"* ^3
	movq (%rax), %r12
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(10245:3): struct-type: %"struct.std::_Rb_tree_iterator"* ^3 -> ^4, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(10245:3): type of ^4 is %"struct.std::_Rb_tree_node_base"**
	# LowerLoad(10246:3).2: (^4) into %"struct.std::_Rb_tree_node_base"* ^5
	movq (%rax), %rbx
	# SetupCalls(10247:3): move argument %"struct.std::_Rb_tree_node_base"* ^5
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base@PLT
	# SetupCalls(10247:3): move %"struct.std::_Rb_tree_node_base"* result from %rax
	movq %rax, %rbx
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(10248:3): struct-type: %"struct.std::_Rb_tree_iterator"* ^3 -> ^7, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(10248:3): type of ^7 is %"struct.std::_Rb_tree_node_base"**
	# LowerStore(10249:3).9: mov %"struct.std::_Rb_tree_node_base"* ^6, (^7)
	movq %rbx, (%rax)
	movq %r12, %rax
	movq -16(%rbp), %r12
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt11_Tuple_implILm0EJPNSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEEE7_M_headERKS7_
.p2align 4, 0x90
_ZNSt11_Tuple_implILm0EJPNSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEEE7_M_headERKS7_:
	.___ZNSt11_Tuple_implILm0EJPNSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEEE7_M_headERKS7___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(3867:3): size = 8, type = %"struct.std::_Tuple_impl"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(3868:3).9: mov %"struct.std::_Tuple_impl"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(3869:3).2: (^2) into %"struct.std::_Tuple_impl"* ^3
	movq (%rax), %rbx
	# LowerBasicConversion(3870:3): %"struct.std::_Tuple_impl"* ^3 -> %"struct.std::_Head_base.4"* ^4
	movq %rbx, %rax
	# Clobber %rax
	movq %rax, -16(%rbp)
	# SetupCalls(3871:3): move argument %"struct.std::_Head_base.4"* nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt10_Head_baseILm0EPNSt10filesystem7__cxx114path5_List5_ImplELb0EE7_M_headERKS6_
	# SetupCalls(3871:3): move %"struct.std::filesystem::__cxx11::path::_List::_Impl"** result from %rax
	movq %rax, %rbx
	# Unclobber %rax
	movq -16(%rbp), %rax
	movq %rbx, %rax
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10filesystem7__cxx1118directory_iteratorC2ERKS1_
.p2align 4, 0x90
_ZNSt10filesystem7__cxx1118directory_iteratorC2ERKS1_:
	.___ZNSt10filesystem7__cxx1118directory_iteratorC2ERKS1___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(48 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -40(%rbp)
	# LowerAlloca(1596:3): size = 8, type = %"class.std::filesystem::__cxx11::directory_iterator"**, var = ^3
	leaq -8(%rbp), %rcx
	# LowerAlloca(1597:3): size = 8, type = %"class.std::filesystem::__cxx11::directory_iterator"**, var = ^4
	leaq -16(%rbp), %rax
	# LowerStore(1598:3).9: mov %"class.std::filesystem::__cxx11::directory_iterator"* %rdi, (^3)
	movq %rdi, (%rcx)
	# LowerStore(1599:3).9: mov %"class.std::filesystem::__cxx11::directory_iterator"* %rsi, (^4)
	movq %rsi, (%rax)
	# LowerLoad(1600:3).2: (^3) into %"class.std::filesystem::__cxx11::directory_iterator"* ^5
	movq (%rcx), %rbx
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::directory_iterator"
	# LowerGetelementptr(1601:3): struct-type: %"class.std::filesystem::__cxx11::directory_iterator"* ^5 -> ^6, indices=0,0
	movq %rbx, %rcx
	# LowerGetelementptr(1601:3): type of ^6 is %"class.std::__shared_ptr"*
	# LowerLoad(1602:3).2: (^4) into %"class.std::filesystem::__cxx11::directory_iterator"* ^7
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::directory_iterator"
	# LowerGetelementptr(1603:3): struct-type: %"class.std::filesystem::__cxx11::directory_iterator"* ^7 -> ^8, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(1603:3): type of ^8 is %"class.std::__shared_ptr"*
	# Clobber %rcx
	movq %rcx, -24(%rbp)
	# Clobber %rax
	movq %rax, -32(%rbp)
	# SetupCalls(1604:3): move argument %"class.std::__shared_ptr"* nonnull dereferenceable(16) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(1604:3): move argument %"class.std::__shared_ptr"* nonnull dereferenceable(16) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNSt12__shared_ptrINSt10filesystem7__cxx114_DirELN9__gnu_cxx12_Lock_policyE2EEC2ERKS5_
	# Unclobber %rax
	movq -32(%rbp), %rax
	# Unclobber %rcx
	movq -24(%rbp), %rcx
	movq -40(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE6_M_ptrEv
.p2align 4, 0x90
_ZNKSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE6_M_ptrEv:
	.___ZNKSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE6_M_ptrEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(3837:3): size = 8, type = %"class.std::__uniq_ptr_impl"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(3838:3).9: mov %"class.std::__uniq_ptr_impl"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(3839:3).2: (^2) into %"class.std::__uniq_ptr_impl"* ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::__uniq_ptr_impl"
	# LowerGetelementptr(3840:3): struct-type: %"class.std::__uniq_ptr_impl"* ^3 -> ^4, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(3840:3): type of ^4 is %"class.std::tuple"*
	# Clobber %rax
	movq %rax, -16(%rbp)
	# SetupCalls(3841:3): move argument %"class.std::tuple"* nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZSt3getILm0EJPNSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSB_
	# SetupCalls(3841:3): move %"struct.std::filesystem::__cxx11::path::_List::_Impl"** result from %rax
	movq %rax, %rbx
	# Unclobber %rax
	movq -16(%rbp), %rax
	# LowerLoad(3842:3).2: (^5) into %"struct.std::filesystem::__cxx11::path::_List::_Impl"* ^6
	movq (%rbx), %rax
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt10unique_ptrINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE3getEv
.p2align 4, 0x90
_ZNKSt10unique_ptrINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE3getEv:
	.___ZNKSt10unique_ptrINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE3getEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(3826:3): size = 8, type = %"class.std::unique_ptr"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(3827:3).9: mov %"class.std::unique_ptr"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(3828:3).2: (^2) into %"class.std::unique_ptr"* ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::unique_ptr"
	# LowerGetelementptr(3829:3): struct-type: %"class.std::unique_ptr"* ^3 -> ^4, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(3829:3): type of ^4 is %"struct.std::__uniq_ptr_data"*
	# LowerBasicConversion(3830:3): %"class.std::unique_ptr"* ^4 -> %"class.std::__uniq_ptr_impl"* ^5
	movq %rax, %rbx
	# SetupCalls(3831:3): move argument %"class.std::__uniq_ptr_impl"* nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNKSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE6_M_ptrEv
	# SetupCalls(3831:3): move %"struct.std::filesystem::__cxx11::path::_List::_Impl"* result from %rax
	movq %rax, %rbx
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10filesystem7__cxx11eqERKNS0_18directory_iteratorES3_
.p2align 4, 0x90
_ZNSt10filesystem7__cxx11eqERKNS0_18directory_iteratorES3_:
	.___ZNSt10filesystem7__cxx11eqERKNS0_18directory_iteratorES3___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(88 + 0, 16)
	subq $96, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -56(%rbp)
	movq %r12, -48(%rbp)
	movq %r13, -64(%rbp)
	movq %r14, -72(%rbp)
	# LowerAlloca(3581:3): size = 8, type = %"class.std::filesystem::__cxx11::directory_iterator"**, var = ^3
	leaq -8(%rbp), %r12
	# LowerAlloca(3582:3): size = 8, type = %"class.std::filesystem::__cxx11::directory_iterator"**, var = ^4
	leaq -16(%rbp), %rbx
	# LowerStore(3583:3).9: mov %"class.std::filesystem::__cxx11::directory_iterator"* %rdi, (^3)
	movq %rdi, (%r12)
	# LowerStore(3584:3).9: mov %"class.std::filesystem::__cxx11::directory_iterator"* %rsi, (^4)
	movq %rsi, (%rbx)
	# LowerLoad(3585:3).2: (^4) into %"class.std::filesystem::__cxx11::directory_iterator"* ^5
	movq (%rbx), %rax
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::directory_iterator"
	# LowerGetelementptr(3586:3): struct-type: %"class.std::filesystem::__cxx11::directory_iterator"* ^5 -> ^6, indices=0,0
	movq %rax, %rdx
	# LowerGetelementptr(3586:3): type of ^6 is %"class.std::__shared_ptr"*
	# LowerLoad(3587:3).2: (^3) into %"class.std::filesystem::__cxx11::directory_iterator"* ^7
	movq (%r12), %rcx
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::directory_iterator"
	# LowerGetelementptr(3588:3): struct-type: %"class.std::filesystem::__cxx11::directory_iterator"* ^7 -> ^8, indices=0,0
	movq %rcx, %rax
	# LowerGetelementptr(3588:3): type of ^8 is %"class.std::__shared_ptr"*
	# Clobber %rdx
	movq %rdx, -24(%rbp)
	# Clobber %rax
	movq %rax, -32(%rbp)
	# SetupCalls(3589:3): move argument %"class.std::__shared_ptr"* nonnull dereferenceable(16) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rdx, %rdi
	# SetupCalls(3589:3): move argument %"class.std::__shared_ptr"* nonnull dereferenceable(16) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNKSt12__shared_ptrINSt10filesystem7__cxx114_DirELN9__gnu_cxx12_Lock_policyE2EE12owner_beforeIS2_EEbRKS_IT_LS4_2EE
	# SetupCalls(3589:3): move i1 result from %rax
	movb %al, %r13b
	# Unclobber %rax
	movq -32(%rbp), %rax
	# Unclobber %rdx
	movq -24(%rbp), %rdx
	cmpb $0, %r13b
	jne .___ZNSt10filesystem7__cxx11eqERKNS0_18directory_iteratorES3___M46
	jmp .___ZNSt10filesystem7__cxx11eqERKNS0_18directory_iteratorES3___M49
	.___ZNSt10filesystem7__cxx11eqERKNS0_18directory_iteratorES3___M46:
	# MovePhi: intlike -> ^18 (in new block 19 whose parent is 2)
	movb $0, %r14b
	jmp .___ZNSt10filesystem7__cxx11eqERKNS0_18directory_iteratorES3___M92
	.___ZNSt10filesystem7__cxx11eqERKNS0_18directory_iteratorES3___M49:
	# LowerLoad(3593:3).2: (^3) into %"class.std::filesystem::__cxx11::directory_iterator"* ^11
	movq (%r12), %rax
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::directory_iterator"
	# LowerGetelementptr(3594:3): struct-type: %"class.std::filesystem::__cxx11::directory_iterator"* ^11 -> ^12, indices=0,0
	movq %rax, %rcx
	# LowerGetelementptr(3594:3): type of ^12 is %"class.std::__shared_ptr"*
	# LowerLoad(3595:3).2: (^4) into %"class.std::filesystem::__cxx11::directory_iterator"* ^13
	movq (%rbx), %rax
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::directory_iterator"
	# LowerGetelementptr(3596:3): struct-type: %"class.std::filesystem::__cxx11::directory_iterator"* ^13 -> ^14, indices=0,0
	movq %rax, %rbx
	# LowerGetelementptr(3596:3): type of ^14 is %"class.std::__shared_ptr"*
	# Clobber %rcx
	movq %rcx, -40(%rbp)
	# SetupCalls(3597:3): move argument %"class.std::__shared_ptr"* nonnull dereferenceable(16) align 8 ^12
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(3597:3): move argument %"class.std::__shared_ptr"* nonnull dereferenceable(16) align 8 ^14
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZNKSt12__shared_ptrINSt10filesystem7__cxx114_DirELN9__gnu_cxx12_Lock_policyE2EE12owner_beforeIS2_EEbRKS_IT_LS4_2EE
	# SetupCalls(3597:3): move i1 result from %rax
	movb %al, %bl
	# Unclobber %rcx
	movq -40(%rbp), %rcx
	# LowerLogic(3599:3): ^15, true into i1 ^16
	movb %bl, %al
	xorb $1, %al
	# MovePhi: ^16 -> ^18
	movb %al, %r14b
	.___ZNSt10filesystem7__cxx11eqERKNS0_18directory_iteratorES3___M92:
	movb %r14b, %al
	movq -72(%rbp), %r14
	movq -64(%rbp), %r13
	movq -48(%rbp), %r12
	movq -56(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt10filesystem7__cxx114path5emptyEv
.p2align 4, 0x90
_ZNKSt10filesystem7__cxx114path5emptyEv:
	.___ZNKSt10filesystem7__cxx114path5emptyEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(3656:3): size = 8, type = %"class.std::filesystem::__cxx11::path"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(3657:3).9: mov %"class.std::filesystem::__cxx11::path"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(3658:3).2: (^2) into %"class.std::filesystem::__cxx11::path"* ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path"
	# LowerGetelementptr(3659:3): struct-type: %"class.std::filesystem::__cxx11::path"* ^3 -> ^4, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(3659:3): type of ^4 is %"class.std::__cxx11::basic_string"*
	# Clobber %rax
	movq %rax, -16(%rbp)
	# SetupCalls(3660:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv@PLT
	# SetupCalls(3660:3): move i1 result from %rax
	movb %al, %bl
	# Unclobber %rax
	movq -16(%rbp), %rax
	movb %bl, %al
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE15_M_add_ref_copyEv
.p2align 4, 0x90
_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE15_M_add_ref_copyEv:
	.___ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE15_M_add_ref_copyEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(96 + 0, 16)
	subq $96, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -72(%rbp)
	# LowerAlloca(3294:3): size = 8, type = i32**, var = ^2
	leaq -8(%rbp), %r8
	# LowerAlloca(3295:3): size = 4, type = i32*, var = ^3
	leaq -12(%rbp), %r10
	# LowerAlloca(3296:3): size = 4, type = i32*, var = ^4
	leaq -16(%rbp), %rbx
	# LowerAlloca(3297:3): size = 4, type = i32*, var = ^5
	leaq -20(%rbp), %r9
	# LowerAlloca(3298:3): size = 8, type = i32**, var = ^6
	leaq -32(%rbp), %rdx
	# LowerAlloca(3299:3): size = 4, type = i32*, var = ^7
	leaq -36(%rbp), %rcx
	# LowerAlloca(3300:3): size = 8, type = i32**, var = ^8
	leaq -48(%rbp), %rax
	# LowerAlloca(3301:3): size = 4, type = i32*, var = ^9
	leaq -52(%rbp), %r11
	# LowerAlloca(3302:3): size = 8, type = %"class.std::_Sp_counted_base"**, var = ^10
	leaq -64(%rbp), %rsi
	# LowerStore(3303:3).9: mov %"class.std::_Sp_counted_base"* %rdi, (^10)
	movq %rdi, (%rsi)
	# LowerLoad(3304:3).2: (^10) into %"class.std::_Sp_counted_base"* ^11
	movq (%rsi), %rdi
	# tt = Pointer, type = %"class.std::_Sp_counted_base"
	# LowerGetelementptr(3305:3): struct-type: %"class.std::_Sp_counted_base"* ^11 -> ^12, indices=0,1
	movq %rdi, %rsi
	addq $8, %rsi
	# LowerGetelementptr(3305:3): type of ^12 is i32*
	# LowerStore(3306:3).9: mov %"class.std::_Sp_counted_base"* ^12, (^8)
	movq %rsi, (%rax)
	# LowerStore(3307:3).3: mov $imm, (^9)
	movl $1, (%r11)
	# LowerLoad(3308:3).4: __libc_single_threaded into ^13
	movq __libc_single_threaded(%rip), %rsi
	# LowerIcmp(3309:3): i8 ^13 vs. intlike 0
	cmpb $0, %sil
	setne %sil
	andq $1, %rsi
	cmpb $0, %sil
	jne .___ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE15_M_add_ref_copyEv__M38
	jmp .___ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE15_M_add_ref_copyEv__M58
	.___ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE15_M_add_ref_copyEv__M38:
	# LowerLoad(3313:3).2: (^8) into i32* ^16
	movq (%rax), %rbx
	# LowerLoad(3314:3).2: (^9) into i32 ^17
	movl (%r11), %eax
	# LowerStore(3315:3).9: mov i32* ^16, (^6)
	movq %rbx, (%rdx)
	# LowerStore(3316:3).9: mov i32 ^17, (^7)
	movl %eax, (%rcx)
	# LowerLoad(3317:3).2: (^7) into i32 ^18
	movl (%rcx), %esi
	# LowerLoad(3318:3).2: (^6) into i32* ^19
	movq (%rdx), %rbx
	# LowerLoad(3319:3).2: (^19) into i32 ^20
	movl (%rbx), %eax
	# LowerMath(3320:3): ^20, ^18 into i32 ^21
	movl %eax, %ecx
	addl %esi, %ecx
	# LowerStore(3321:3).9: mov i32 ^21, (^19)
	movl %ecx, (%rbx)
	jmp .___ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE15_M_add_ref_copyEv__M81
	.___ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE15_M_add_ref_copyEv__M58:
	# LowerLoad(3325:3).2: (^8) into i32* ^23
	movq (%rax), %rcx
	# LowerLoad(3326:3).2: (^9) into i32 ^24
	movl (%r11), %eax
	# LowerStore(3327:3).9: mov i32* ^23, (^2)
	movq %rcx, (%r8)
	# LowerStore(3328:3).9: mov i32 ^24, (^3)
	movl %eax, (%r10)
	# LowerLoad(3329:3).2: (^2) into i32* ^25
	movq (%r8), %rcx
	# LowerLoad(3330:3).2: (^3) into i32 ^26
	movl (%r10), %eax
	# LowerStore(3331:3).9: mov i32 ^26, (^4)
	movl %eax, (%rbx)
	# LowerLoad(3332:3).2: (^4) into i32 ^27
	movl (%rbx), %eax
	movl %eax, %ebx
	lock addl %ebx, (%rcx)
	# LowerStore(3334:3).9: mov i32 ^28, (^5)
	movl %ebx, (%r9)
	# LowerLoad(3335:3).2: (^5) into i32 ^29
	movl (%r9), %eax
	.___ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE15_M_add_ref_copyEv__M81:
	movq -72(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt12_Vector_baseI6LsItemSaIS0_EE19_M_get_Tp_allocatorEv
.p2align 4, 0x90
_ZNKSt12_Vector_baseI6LsItemSaIS0_EE19_M_get_Tp_allocatorEv:
	.___ZNKSt12_Vector_baseI6LsItemSaIS0_EE19_M_get_Tp_allocatorEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(7217:3): size = 8, type = %"struct.std::_Vector_base.6"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(7218:3).9: mov %"struct.std::_Vector_base.6"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(7219:3).2: (^2) into %"struct.std::_Vector_base.6"* ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"struct.std::_Vector_base.6"
	# LowerGetelementptr(7220:3): struct-type: %"struct.std::_Vector_base.6"* ^3 -> ^4, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(7220:3): type of ^4 is %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl"*
	# LowerBasicConversion(7221:3): %"struct.std::_Vector_base.6"* ^4 -> %"class.std::allocator.7"* ^5
	movq %rax, %rbx
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC2ERKS2_
.p2align 4, 0x90
_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC2ERKS2_:
	.___ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC2ERKS2___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(56 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(3267:3): size = 8, type = %"class.std::__shared_count"**, var = ^3
	leaq -8(%rbp), %rbx
	# LowerAlloca(3268:3): size = 8, type = %"class.std::__shared_count"**, var = ^4
	leaq -16(%rbp), %rax
	# LowerStore(3269:3).9: mov %"class.std::__shared_count"* %rdi, (^3)
	movq %rdi, (%rbx)
	# LowerStore(3270:3).9: mov %"class.std::__shared_count"* %rsi, (^4)
	movq %rsi, (%rax)
	# LowerLoad(3271:3).2: (^3) into %"class.std::__shared_count"* ^5
	movq (%rbx), %rdx
	# tt = Pointer, type = %"class.std::__shared_count"
	# LowerGetelementptr(3272:3): struct-type: %"class.std::__shared_count"* ^5 -> ^6, indices=0,0
	movq %rdx, %rcx
	# LowerGetelementptr(3272:3): type of ^6 is %"class.std::_Sp_counted_base"**
	# LowerLoad(3273:3).2: (^4) into %"class.std::__shared_count"* ^7
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::__shared_count"
	# LowerGetelementptr(3274:3): struct-type: %"class.std::__shared_count"* ^7 -> ^8, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(3274:3): type of ^8 is %"class.std::_Sp_counted_base"**
	# LowerLoad(3275:3).2: (^8) into %"class.std::_Sp_counted_base"* ^9
	movq (%rax), %rbx
	# LowerStore(3276:3).9: mov %"class.std::_Sp_counted_base"* ^9, (^6)
	movq %rbx, (%rcx)
	# tt = Pointer, type = %"class.std::__shared_count"
	# LowerGetelementptr(3277:3): struct-type: %"class.std::__shared_count"* ^5 -> ^10, indices=0,0
	movq %rdx, %rax
	# LowerGetelementptr(3277:3): type of ^10 is %"class.std::_Sp_counted_base"**
	# LowerLoad(3278:3).2: (^10) into %"class.std::_Sp_counted_base"* ^11
	movq (%rax), %rbx
	# LowerIcmp(3279:3): %"class.std::_Sp_counted_base"* ^11 vs. intlike 0
	cmpq $0, %rbx
	setne %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC2ERKS2___M35
	jmp .___ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC2ERKS2___M63
	.___ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC2ERKS2___M35:
	# tt = Pointer, type = %"class.std::__shared_count"
	# LowerGetelementptr(3283:3): struct-type: %"class.std::__shared_count"* ^5 -> ^14, indices=0,0
	movq %rdx, %rax
	# LowerGetelementptr(3283:3): type of ^14 is %"class.std::_Sp_counted_base"**
	# LowerLoad(3284:3).2: (^14) into %"class.std::_Sp_counted_base"* ^15
	movq (%rax), %rbx
	# SetupCalls(3285:3): move argument %"class.std::_Sp_counted_base"* nonnull dereferenceable(16) align 8 ^15
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE15_M_add_ref_copyEv
	.___ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC2ERKS2___M63:
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt12__get_helperILm0EPNSt10filesystem7__cxx114path5_List5_ImplEJNS3_13_Impl_deleterEEERKT0_RKSt11_Tuple_implIXT_EJS7_DpT1_EE
.p2align 4, 0x90
_ZSt12__get_helperILm0EPNSt10filesystem7__cxx114path5_List5_ImplEJNS3_13_Impl_deleterEEERKT0_RKSt11_Tuple_implIXT_EJS7_DpT1_EE:
	.___ZSt12__get_helperILm0EPNSt10filesystem7__cxx114path5_List5_ImplEJNS3_13_Impl_deleterEEERKT0_RKSt11_Tuple_implIXT_EJS7_DpT1_EE__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(3858:3): size = 8, type = %"struct.std::_Tuple_impl"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(3859:3).9: mov %"struct.std::_Tuple_impl"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(3860:3).2: (^2) into %"struct.std::_Tuple_impl"* ^3
	movq (%rax), %rbx
	# SetupCalls(3861:3): move argument %"struct.std::_Tuple_impl"* nonnull dereferenceable(8) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt11_Tuple_implILm0EJPNSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEEE7_M_headERKS7_
	# SetupCalls(3861:3): move %"struct.std::filesystem::__cxx11::path::_List::_Impl"** result from %rax
	movq %rax, %rbx
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE24_M_release_last_use_coldEv
.p2align 4, 0x90
_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE24_M_release_last_use_coldEv:
	.___ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE24_M_release_last_use_coldEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(3483:3): size = 8, type = %"class.std::_Sp_counted_base"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(3484:3).9: mov %"class.std::_Sp_counted_base"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(3485:3).2: (^2) into %"class.std::_Sp_counted_base"* ^3
	movq (%rax), %rbx
	# SetupCalls(3486:3): move argument %"class.std::_Sp_counted_base"* nonnull dereferenceable(16) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE19_M_release_last_useEv
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE6_S_keyEPKSt13_Rb_tree_nodeISI_E
.p2align 4, 0x90
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE6_S_keyEPKSt13_Rb_tree_nodeISI_E:
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE6_S_keyEPKSt13_Rb_tree_nodeISI_E__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(56 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	movq %r12, -40(%rbp)
	# LowerAlloca(10255:3): size = 8, type = %"struct.std::_Rb_tree_node"**, var = ^2
	leaq -8(%rbp), %rbx
	# LowerAlloca(10256:3): size = 1, type = %"struct.std::_Select1st"*, var = ^3
	leaq -9(%rbp), %r12
	# LowerStore(10257:3).9: mov %"struct.std::_Rb_tree_node"* %rdi, (^2)
	movq %rdi, (%rbx)
	# LowerLoad(10258:3).2: (^2) into %"struct.std::_Rb_tree_node"* ^4
	movq (%rbx), %rax
	# Clobber %rax
	movq %rax, -24(%rbp)
	# SetupCalls(10259:3): move argument %"struct.std::_Rb_tree_node"* nonnull dereferenceable(96) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEE9_M_valptrEv
	# SetupCalls(10259:3): move %"struct.std::pair"* result from %rax
	movq %rax, %rbx
	# Unclobber %rax
	movq -24(%rbp), %rax
	# SetupCalls(10260:3): move argument %"struct.std::_Select1st"* nonnull dereferenceable(1) align 1 ^3
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(10260:3): move argument %"struct.std::pair"* nonnull dereferenceable(64) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEEclERKSI_
	# SetupCalls(10260:3): move %"class.std::__cxx11::basic_string"* result from %rax
	movq %rax, %rbx
	movq %rbx, %rax
	movq -40(%rbp), %r12
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEixEm
.p2align 4, 0x90
_ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEixEm:
	.___ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEixEm__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(1474:3): size = 8, type = %"class.std::vector"**, var = ^3
	leaq -8(%rbp), %rax
	# LowerAlloca(1475:3): size = 8, type = i64*, var = ^4
	leaq -16(%rbp), %rbx
	# LowerStore(1476:3).9: mov %"class.std::vector"* %rdi, (^3)
	movq %rdi, (%rax)
	# LowerStore(1477:3).9: mov i64 %rsi, (^4)
	movq %rsi, (%rbx)
	# LowerLoad(1478:3).2: (^3) into %"class.std::vector"* ^5
	movq (%rax), %rcx
	# LowerBasicConversion(1479:3): %"class.std::vector"* ^5 -> %"struct.std::_Vector_base"* ^6
	movq %rcx, %rax
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(1480:3): struct-type: %"struct.std::_Vector_base"* ^6 -> ^7, indices=0,0
	movq %rax, %rcx
	# LowerGetelementptr(1480:3): type of ^7 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# LowerBasicConversion(1481:3): %"struct.std::_Vector_base"* ^7 -> %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^8
	movq %rcx, %rax
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(1482:3): struct-type: %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^8 -> ^9, indices=0,0
	movq %rax, %rcx
	# LowerGetelementptr(1482:3): type of ^9 is %"class.std::basic_string_view"**
	# LowerLoad(1483:3).2: (^9) into %"class.std::basic_string_view"* ^10
	movq (%rcx), %rdx
	# LowerLoad(1484:3).2: (^4) into i64 ^11
	movq (%rbx), %rcx
	# tt = Pointer, type = %"class.std::basic_string_view"
	# LowerGetelementptr(1485:3): pointer-type -> ^12
	movq %rcx, %rax
	shlq $4, %rax
	addq %rdx, %rax
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10filesystem7__cxx114pathaSIPKcEERNSt9enable_ifIX13__is_path_srcIT_EES1_E4typeERKS6_
.p2align 4, 0x90
_ZNSt10filesystem7__cxx114pathaSIPKcEERNSt9enable_ifIX13__is_path_srcIT_EES1_E4typeERKS6_:
	.___ZNSt10filesystem7__cxx114pathaSIPKcEERNSt9enable_ifIX13__is_path_srcIT_EES1_E4typeERKS6___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(96 + 0, 16)
	subq $96, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -64(%rbp)
	movq %r12, -80(%rbp)
	movq %r13, -72(%rbp)
	# LowerAlloca(2155:3): size = 8, type = %"class.std::filesystem::__cxx11::path"**, var = ^3
	leaq -8(%rbp), %rbx
	# LowerAlloca(2156:3): size = 8, type = i8***, var = ^4
	leaq -16(%rbp), %rax
	# LowerAlloca(2157:3): size = 40, type = %"class.std::filesystem::__cxx11::path"*, var = ^5
	leaq -56(%rbp), %r13
	# LowerStore(2158:3).9: mov %"class.std::filesystem::__cxx11::path"* %rdi, (^3)
	movq %rdi, (%rbx)
	# LowerStore(2159:3).9: mov i8** %rsi, (^4)
	movq %rsi, (%rax)
	# LowerLoad(2160:3).2: (^3) into %"class.std::filesystem::__cxx11::path"* ^6
	movq (%rbx), %r12
	# LowerLoad(2161:3).2: (^4) into i8** ^7
	movq (%rax), %rbx
	# SetupCalls(2162:3): move argument %"class.std::filesystem::__cxx11::path"* nonnull dereferenceable(40) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	# SetupCalls(2162:3): move argument i8** nonnull dereferenceable(8) align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(2162:3): move argument i8 zeroext 2
	movq $2, %rdx
	andq $255, %rdx
	callq _ZNSt10filesystem7__cxx114pathC2IPKcS1_EERKT_NS1_6formatE
	# SetupCalls(2163:3): move argument %"class.std::filesystem::__cxx11::path"* nonnull dereferenceable(40) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(2163:3): move argument %"class.std::filesystem::__cxx11::path"* nonnull dereferenceable(40) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r13, %rsi
	callq _ZNSt10filesystem7__cxx114pathaSEOS1_
	# SetupCalls(2163:3): move %"class.std::filesystem::__cxx11::path"* result from %rax
	movq %rax, %rbx
	# SetupCalls(2164:3): move argument %"class.std::filesystem::__cxx11::path"* nonnull dereferenceable(40) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	callq _ZNSt10filesystem7__cxx114pathD2Ev
	movq %rbx, %rax
	movq -72(%rbp), %r13
	movq -80(%rbp), %r12
	movq -64(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZN6LsItemaSEOS_
.p2align 4, 0x90
_ZN6LsItemaSEOS_:
	.___ZN6LsItemaSEOS___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(64 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -40(%rbp)
	movq %r12, -48(%rbp)
	# LowerAlloca(8257:3): size = 8, type = %struct.LsItem**, var = ^3
	leaq -8(%rbp), %rax
	# LowerAlloca(8258:3): size = 8, type = %struct.LsItem**, var = ^4
	leaq -16(%rbp), %rbx
	# LowerStore(8259:3).9: mov %struct.LsItem* %rdi, (^3)
	movq %rdi, (%rax)
	# LowerStore(8260:3).9: mov %struct.LsItem* %rsi, (^4)
	movq %rsi, (%rbx)
	# LowerLoad(8261:3).2: (^3) into %struct.LsItem* ^5
	movq (%rax), %r12
	# tt = Pointer, type = %struct.LsItem
	# LowerGetelementptr(8262:3): struct-type: %struct.LsItem* ^5 -> ^6, indices=0,0
	movq %r12, %rdx
	# LowerGetelementptr(8262:3): type of ^6 is %"class.std::__cxx11::basic_string"*
	# LowerLoad(8263:3).2: (^4) into %struct.LsItem* ^7
	movq (%rbx), %rcx
	# tt = Pointer, type = %struct.LsItem
	# LowerGetelementptr(8264:3): struct-type: %struct.LsItem* ^7 -> ^8, indices=0,0
	movq %rcx, %rax
	# LowerGetelementptr(8264:3): type of ^8 is %"class.std::__cxx11::basic_string"*
	# Clobber %rdx
	movq %rdx, -24(%rbp)
	# Clobber %rax
	movq %rax, -32(%rbp)
	# SetupCalls(8265:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rdx, %rdi
	# SetupCalls(8265:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_@PLT
	# SetupCalls(8265:3): move %"class.std::__cxx11::basic_string"* result from %rax
	movq %rax, %rax
	# Unclobber %rax
	movq -32(%rbp), %rax
	# Unclobber %rdx
	movq -24(%rbp), %rdx
	# LowerLoad(8266:3).2: (^4) into %struct.LsItem* ^10
	movq (%rbx), %rax
	# tt = Pointer, type = %struct.LsItem
	# LowerGetelementptr(8267:3): struct-type: %struct.LsItem* ^10 -> ^11, indices=0,1
	movq %rax, %rcx
	addq $32, %rcx
	# LowerGetelementptr(8267:3): type of ^11 is i8*
	# LowerLoad(8268:3).2: (^11) into i8 ^12
	movb (%rcx), %bl
	# LowerTrunc(8269:3): 8 to 1, move
	movb %bl, %al
	# LowerTrunc(8269:3): 8 to 1, apply mask
	andq $1, %rax
	# tt = Pointer, type = %struct.LsItem
	# LowerGetelementptr(8270:3): struct-type: %struct.LsItem* ^5 -> ^14, indices=0,1
	movq %r12, %rbx
	addq $32, %rbx
	# LowerGetelementptr(8270:3): type of ^14 is i8*
	# LowerBasicConversion(8271:3): i1 ^13 -> i8 ^15
	movb %al, %cl
	# LowerStore(8272:3).9: mov i8 ^15, (^14)
	movb %cl, (%rbx)
	movq %r12, %rax
	movq -48(%rbp), %r12
	movq -40(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt4lessIPSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EEEclES4_S4_
.p2align 4, 0x90
_ZNKSt4lessIPSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EEEclES4_S4_:
	.___ZNKSt4lessIPSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EEEclES4_S4___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(40 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	# LowerAlloca(3639:3): size = 8, type = %"struct.std::less.17"**, var = ^4
	leaq -8(%rbp), %rax
	# LowerAlloca(3640:3): size = 8, type = %"class.std::_Sp_counted_base"**, var = ^5
	leaq -16(%rbp), %r8
	# LowerAlloca(3641:3): size = 8, type = %"class.std::_Sp_counted_base"**, var = ^6
	leaq -24(%rbp), %rcx
	# LowerStore(3642:3).9: mov %"struct.std::less.17"* %rdi, (^4)
	movq %rdi, (%rax)
	# LowerStore(3643:3).9: mov %"class.std::_Sp_counted_base"* %rsi, (^5)
	movq %rsi, (%r8)
	# LowerStore(3644:3).9: mov %"class.std::_Sp_counted_base"* %rdx, (^6)
	movq %rdx, (%rcx)
	# LowerLoad(3645:3).2: (^4) into %"struct.std::less.17"* ^7
	movq (%rax), %rbx
	# LowerLoad(3646:3).2: (^5) into %"class.std::_Sp_counted_base"* ^8
	movq (%r8), %rax
	# LowerBasicConversion(3647:3): %"class.std::_Sp_counted_base"* ^8 -> i64 ^9
	movq %rax, %rbx
	# LowerLoad(3648:3).2: (^6) into %"class.std::_Sp_counted_base"* ^10
	movq (%rcx), %rax
	# LowerBasicConversion(3649:3): %"class.std::_Sp_counted_base"* ^10 -> i64 ^11
	movq %rax, %rcx
	# LowerIcmp(3650:3): i64 ^9 vs. operand i64 ^11
	cmpq %rcx, %rbx
	setb %al
	andq $1, %rax
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EED2Ev
.p2align 4, 0x90
_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EED2Ev:
	.___ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EED2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(3354:3): size = 8, type = %"class.std::__shared_count"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(3355:3).9: mov %"class.std::__shared_count"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(3356:3).2: (^2) into %"class.std::__shared_count"* ^3
	movq (%rax), %rcx
	# tt = Pointer, type = %"class.std::__shared_count"
	# LowerGetelementptr(3357:3): struct-type: %"class.std::__shared_count"* ^3 -> ^4, indices=0,0
	movq %rcx, %rax
	# LowerGetelementptr(3357:3): type of ^4 is %"class.std::_Sp_counted_base"**
	# LowerLoad(3358:3).2: (^4) into %"class.std::_Sp_counted_base"* ^5
	movq (%rax), %rbx
	# LowerIcmp(3359:3): %"class.std::_Sp_counted_base"* ^5 vs. intlike 0
	cmpq $0, %rbx
	setne %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EED2Ev__M17
	jmp .___ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EED2Ev__M45
	.___ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EED2Ev__M17:
	# tt = Pointer, type = %"class.std::__shared_count"
	# LowerGetelementptr(3363:3): struct-type: %"class.std::__shared_count"* ^3 -> ^8, indices=0,0
	movq %rcx, %rax
	# LowerGetelementptr(3363:3): type of ^8 is %"class.std::_Sp_counted_base"**
	# LowerLoad(3364:3).2: (^8) into %"class.std::_Sp_counted_base"* ^9
	movq (%rax), %rbx
	# SetupCalls(3365:3): move argument %"class.std::_Sp_counted_base"* nonnull dereferenceable(16) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv
	.___ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EED2Ev__M45:
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEC2Ev
.p2align 4, 0x90
_ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEC2Ev:
	.___ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEC2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(1013:3): size = 8, type = %"class.std::vector"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(1014:3).9: mov %"class.std::vector"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(1015:3).2: (^2) into %"class.std::vector"* ^3
	movq (%rax), %rbx
	# LowerBasicConversion(1016:3): %"class.std::vector"* ^3 -> %"struct.std::_Vector_base"* ^4
	movq %rbx, %rax
	# Clobber %rax
	movq %rax, -16(%rbp)
	# SetupCalls(1017:3): move argument %"struct.std::_Vector_base"* nonnull dereferenceable(24) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEC2Ev
	# Unclobber %rax
	movq -16(%rbp), %rax
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt10filesystem7__cxx114path8iteratorptEv
.p2align 4, 0x90
_ZNKSt10filesystem7__cxx114path8iteratorptEv:
	.___ZNKSt10filesystem7__cxx114path8iteratorptEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(3762:3): size = 8, type = %"class.std::filesystem::__cxx11::path::iterator"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(3763:3).9: mov %"class.std::filesystem::__cxx11::path::iterator"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(3764:3).2: (^2) into %"class.std::filesystem::__cxx11::path::iterator"* ^3
	movq (%rax), %rbx
	# SetupCalls(3765:3): move argument %"class.std::filesystem::__cxx11::path::iterator"* nonnull dereferenceable(17) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNKSt10filesystem7__cxx114path8iteratordeEv
	# SetupCalls(3765:3): move %"class.std::filesystem::__cxx11::path"* result from %rax
	movq %rax, %rbx
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_
.p2align 4, 0x90
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_:
	.___ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(160 + 0, 16)
	subq $160, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -64(%rbp)
	movq %r12, -88(%rbp)
	movq %r13, -80(%rbp)
	movq %r14, -96(%rbp)
	movq %r15, -72(%rbp)
	# LowerAlloca(4185:3): size = 8, type = %"class.std::__cxx11::basic_string"**, var = ^4
	leaq -8(%rbp), %rbx
	# LowerAlloca(4186:3): size = 8, type = i8**, var = ^5
	# Fixing source-to-dest leaq -16(%rbp), -48(%rbp)
	leaq -16(%rbp), %r15
	movq %r15, -48(%rbp)
	# LowerAlloca(4187:3): size = 8, type = %"class.std::allocator.0"**, var = ^6
	leaq -24(%rbp), %r13
	# LowerAlloca(4188:3): size = 8, type = i8**, var = ^7
	leaq -32(%rbp), %r12
	# LowerAlloca(4189:3): size = 1, type = %"struct.std::forward_iterator_tag"*, var = ^8
	leaq -33(%rbp), %rax
	# LowerStore(4190:3).9: mov %"class.std::__cxx11::basic_string"* %rdi, (^4)
	movq %rdi, (%rbx)
	# LowerStore(4191:3).9: mov i8* %rsi, (^5)
	movq -48(%rbp), %rax
	movq %rsi, (%rax)
	# LowerStore(4192:3).9: mov %"class.std::allocator.0"* %rdx, (^6)
	movq %rdx, (%r13)
	# LowerLoad(4193:3).2: (^4) into %"class.std::__cxx11::basic_string"* ^9
	movq (%rbx), %r14
	# tt = Pointer, type = %"class.std::__cxx11::basic_string"
	# LowerGetelementptr(4194:3): struct-type: %"class.std::__cxx11::basic_string"* ^9 -> ^10, indices=0,0
	movq %r14, %rbx
	# LowerGetelementptr(4194:3): type of ^10 is %"struct.std::__cxx11::basic_string<char>::_Alloc_hider"*
	# SetupCalls(4195:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq %r14, %rdi
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv@PLT
	# SetupCalls(4195:3): move i8* result from %rax
	movq %rax, %r15
	# LowerLoad(4196:3).2: (^6) into %"class.std::allocator.0"* ^12
	movq (%r13), %rax
	# Clobber %rax
	movq %rax, -56(%rbp)
	# SetupCalls(4197:3): move argument %"struct.std::__cxx11::basic_string<char>::_Alloc_hider"* nonnull dereferenceable(8) align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(4197:3): move argument i8* ^11
	# Fixed movzx with identical source and destination widths
	movq %r15, %rsi
	# SetupCalls(4197:3): move argument %"class.std::allocator.0"* nonnull dereferenceable(1) align 1 ^12
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdx
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_@PLT
	# Unclobber %rax
	movq -56(%rbp), %rax
	# LowerLoad(4198:3).2: (^5) into i8* ^13
	movq -48(%rbp), %rbx
	movq (%rbx), %rax
	# LowerIcmp(4199:3): i8* ^13 vs. intlike 0
	cmpq $0, %rax
	sete %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3___M79
	jmp .___ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3___M101
	.___ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3___M79:
	# SetupCalls(4203:3): move argument i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.25, i64 0, i64 0)
	leaq .str.25(%rip), %rdi
	callq _ZSt19__throw_logic_errorPKc@PLT
	.___ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3___M101:
	# LowerLoad(4207:3).2: (^5) into i8* ^17
	movq -48(%rbp), %rax
	movq (%rax), %r13
	# LowerLoad(4208:3).2: (^5) into i8* ^18
	movq -48(%rbp), %rbx
	movq (%rbx), %rax
	# Clobber %rax
	movq %rax, -56(%rbp)
	# SetupCalls(4209:3): move argument i8* ^18
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt11char_traitsIcE6lengthEPKc
	# SetupCalls(4209:3): move i64 result from %rax
	movq %rax, %rbx
	# Unclobber %rax
	movq -56(%rbp), %rax
	# tt = Pointer, type = i8
	# LowerGetelementptr(4210:3): pointer-type -> ^20
	movq %rbx, %rax
	addq %r13, %rax
	# LowerStore(4211:3).9: mov i8* ^20, (^7)
	movq %rax, (%r12)
	# LowerLoad(4212:3).2: (^5) into i8* ^21
	movq -48(%rbp), %rbx
	movq (%rbx), %rax
	# LowerLoad(4213:3).2: (^7) into i8* ^22
	movq (%r12), %rbx
	# Clobber %rax
	movq %rax, -56(%rbp)
	# SetupCalls(4214:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq %r14, %rdi
	# SetupCalls(4214:3): move argument i8* ^21
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(4214:3): move argument i8* ^22
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdx
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag
	# Unclobber %rax
	movq -56(%rbp), %rax
	movq -72(%rbp), %r15
	movq -96(%rbp), %r14
	movq -80(%rbp), %r13
	movq -88(%rbp), %r12
	movq -64(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt12__shared_ptrINSt10filesystem7__cxx114_DirELN9__gnu_cxx12_Lock_policyE2EED2Ev
.p2align 4, 0x90
_ZNSt12__shared_ptrINSt10filesystem7__cxx114_DirELN9__gnu_cxx12_Lock_policyE2EED2Ev:
	.___ZNSt12__shared_ptrINSt10filesystem7__cxx114_DirELN9__gnu_cxx12_Lock_policyE2EED2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(3344:3): size = 8, type = %"class.std::__shared_ptr"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(3345:3).9: mov %"class.std::__shared_ptr"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(3346:3).2: (^2) into %"class.std::__shared_ptr"* ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::__shared_ptr"
	# LowerGetelementptr(3347:3): struct-type: %"class.std::__shared_ptr"* ^3 -> ^4, indices=0,1
	movq %rbx, %rax
	addq $8, %rax
	# LowerGetelementptr(3347:3): type of ^4 is %"class.std::__shared_count"*
	# Clobber %rax
	movq %rax, -16(%rbp)
	# SetupCalls(3348:3): move argument %"class.std::__shared_count"* nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EED2Ev
	# Unclobber %rax
	movq -16(%rbp), %rax
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv
.p2align 4, 0x90
_ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv:
	.___ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(6630:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator.20"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(6631:3).9: mov %"class.__gnu_cxx::__normal_iterator.20"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(6632:3).2: (^2) into %"class.__gnu_cxx::__normal_iterator.20"* ^3
	movq (%rax), %rdx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator.20"
	# LowerGetelementptr(6633:3): struct-type: %"class.__gnu_cxx::__normal_iterator.20"* ^3 -> ^4, indices=0,0
	movq %rdx, %rax
	# LowerGetelementptr(6633:3): type of ^4 is i8**
	# LowerLoad(6634:3).2: (^4) into i8* ^5
	movq (%rax), %rcx
	# tt = Pointer, type = i8
	# LowerGetelementptr(6635:3): struct-type: i8* ^5 -> ^6, indices=1
	movq %rcx, %rbx
	addq $1, %rbx
	# LowerGetelementptr(6635:3): type of ^6 is i8*
	# LowerStore(6636:3).9: mov i8* ^6, (^4)
	movq %rbx, (%rax)
	movq %rdx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt12__shared_ptrINSt10filesystem7__cxx114_DirELN9__gnu_cxx12_Lock_policyE2EEC2ERKS5_
.p2align 4, 0x90
_ZNSt12__shared_ptrINSt10filesystem7__cxx114_DirELN9__gnu_cxx12_Lock_policyE2EEC2ERKS5_:
	.___ZNSt12__shared_ptrINSt10filesystem7__cxx114_DirELN9__gnu_cxx12_Lock_policyE2EEC2ERKS5___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(40 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	# LowerAlloca(3245:3): size = 8, type = %"class.std::__shared_ptr"**, var = ^3
	leaq -8(%rbp), %rax
	# LowerAlloca(3246:3): size = 8, type = %"class.std::__shared_ptr"**, var = ^4
	leaq -16(%rbp), %rbx
	# LowerStore(3247:3).9: mov %"class.std::__shared_ptr"* %rdi, (^3)
	movq %rdi, (%rax)
	# LowerStore(3248:3).9: mov %"class.std::__shared_ptr"* %rsi, (^4)
	movq %rsi, (%rbx)
	# LowerLoad(3249:3).2: (^3) into %"class.std::__shared_ptr"* ^5
	movq (%rax), %rdx
	# LowerBasicConversion(3250:3): %"class.std::__shared_ptr"* ^5 -> %"class.std::__shared_ptr_access"* ^6
	movq %rdx, %rax
	# LowerLoad(3251:3).2: (^4) into %"class.std::__shared_ptr"* ^7
	movq (%rbx), %rcx
	# LowerBasicConversion(3252:3): %"class.std::__shared_ptr"* ^7 -> %"class.std::__shared_ptr_access"* ^8
	movq %rcx, %rax
	# tt = Pointer, type = %"class.std::__shared_ptr"
	# LowerGetelementptr(3253:3): struct-type: %"class.std::__shared_ptr"* ^5 -> ^9, indices=0,0
	movq %rdx, %rcx
	# LowerGetelementptr(3253:3): type of ^9 is %"struct.std::filesystem::__cxx11::_Dir"**
	# LowerLoad(3254:3).2: (^4) into %"class.std::__shared_ptr"* ^10
	movq (%rbx), %rax
	# tt = Pointer, type = %"class.std::__shared_ptr"
	# LowerGetelementptr(3255:3): struct-type: %"class.std::__shared_ptr"* ^10 -> ^11, indices=0,0
	movq %rax, %rsi
	# LowerGetelementptr(3255:3): type of ^11 is %"struct.std::filesystem::__cxx11::_Dir"**
	# LowerLoad(3256:3).2: (^11) into %"struct.std::filesystem::__cxx11::_Dir"* ^12
	movq (%rsi), %rax
	# LowerStore(3257:3).9: mov %"struct.std::filesystem::__cxx11::_Dir"* ^12, (^9)
	movq %rax, (%rcx)
	# tt = Pointer, type = %"class.std::__shared_ptr"
	# LowerGetelementptr(3258:3): struct-type: %"class.std::__shared_ptr"* ^5 -> ^13, indices=0,1
	movq %rdx, %rax
	addq $8, %rax
	# LowerGetelementptr(3258:3): type of ^13 is %"class.std::__shared_count"*
	# LowerLoad(3259:3).2: (^4) into %"class.std::__shared_ptr"* ^14
	movq (%rbx), %rcx
	# tt = Pointer, type = %"class.std::__shared_ptr"
	# LowerGetelementptr(3260:3): struct-type: %"class.std::__shared_ptr"* ^14 -> ^15, indices=0,1
	movq %rcx, %rbx
	addq $8, %rbx
	# LowerGetelementptr(3260:3): type of ^15 is %"class.std::__shared_count"*
	# Clobber %rax
	movq %rax, -24(%rbp)
	# SetupCalls(3261:3): move argument %"class.std::__shared_count"* nonnull dereferenceable(8) align 8 ^13
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(3261:3): move argument %"class.std::__shared_count"* nonnull dereferenceable(8) align 8 ^15
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC2ERKS2_
	# Unclobber %rax
	movq -24(%rbp), %rax
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10filesystem7__cxx1118directory_iteratorC2EOS1_
.p2align 4, 0x90
_ZNSt10filesystem7__cxx1118directory_iteratorC2EOS1_:
	.___ZNSt10filesystem7__cxx1118directory_iteratorC2EOS1___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(48 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -40(%rbp)
	# LowerAlloca(3228:3): size = 8, type = %"class.std::filesystem::__cxx11::directory_iterator"**, var = ^3
	leaq -8(%rbp), %rcx
	# LowerAlloca(3229:3): size = 8, type = %"class.std::filesystem::__cxx11::directory_iterator"**, var = ^4
	leaq -16(%rbp), %rax
	# LowerStore(3230:3).9: mov %"class.std::filesystem::__cxx11::directory_iterator"* %rdi, (^3)
	movq %rdi, (%rcx)
	# LowerStore(3231:3).9: mov %"class.std::filesystem::__cxx11::directory_iterator"* %rsi, (^4)
	movq %rsi, (%rax)
	# LowerLoad(3232:3).2: (^3) into %"class.std::filesystem::__cxx11::directory_iterator"* ^5
	movq (%rcx), %rbx
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::directory_iterator"
	# LowerGetelementptr(3233:3): struct-type: %"class.std::filesystem::__cxx11::directory_iterator"* ^5 -> ^6, indices=0,0
	movq %rbx, %rcx
	# LowerGetelementptr(3233:3): type of ^6 is %"class.std::__shared_ptr"*
	# LowerLoad(3234:3).2: (^4) into %"class.std::filesystem::__cxx11::directory_iterator"* ^7
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::directory_iterator"
	# LowerGetelementptr(3235:3): struct-type: %"class.std::filesystem::__cxx11::directory_iterator"* ^7 -> ^8, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(3235:3): type of ^8 is %"class.std::__shared_ptr"*
	# Clobber %rcx
	movq %rcx, -24(%rbp)
	# Clobber %rax
	movq %rax, -32(%rbp)
	# SetupCalls(3236:3): move argument %"class.std::__shared_ptr"* nonnull dereferenceable(16) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(3236:3): move argument %"class.std::__shared_ptr"* nonnull dereferenceable(16) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNSt12__shared_ptrINSt10filesystem7__cxx114_DirELN9__gnu_cxx12_Lock_policyE2EEC1EOS5_@PLT
	# Unclobber %rax
	movq -32(%rbp), %rax
	# Unclobber %rcx
	movq -24(%rbp), %rcx
	movq -40(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt10filesystem11file_status4typeEv
.p2align 4, 0x90
_ZNKSt10filesystem11file_status4typeEv:
	.___ZNKSt10filesystem11file_status4typeEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(3174:3): size = 8, type = %"class.std::filesystem::file_status"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(3175:3).9: mov %"class.std::filesystem::file_status"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(3176:3).2: (^2) into %"class.std::filesystem::file_status"* ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::filesystem::file_status"
	# LowerGetelementptr(3177:3): struct-type: %"class.std::filesystem::file_status"* ^3 -> ^4, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(3177:3): type of ^4 is i8*
	# LowerLoad(3178:3).2: (^4) into i8 ^5
	movb (%rax), %bl
	movb %bl, %al
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEE6_M_ptrEv
.p2align 4, 0x90
_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEE6_M_ptrEv:
	.___ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEE6_M_ptrEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(4882:3): size = 8, type = %"struct.__gnu_cxx::__aligned_membuf"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(4883:3).9: mov %"struct.__gnu_cxx::__aligned_membuf"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(4884:3).2: (^2) into %"struct.__gnu_cxx::__aligned_membuf"* ^3
	movq (%rax), %rbx
	# SetupCalls(4885:3): move argument %"struct.__gnu_cxx::__aligned_membuf"* nonnull dereferenceable(64) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEE7_M_addrEv
	# SetupCalls(4885:3): move i8* result from %rax
	movq %rax, %rbx
	# LowerBasicConversion(4886:3): i8* ^4 -> %"struct.std::pair"* ^5
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE17_M_construct_nodeIJRKSI_EEEvPSt13_Rb_tree_nodeISI_EDpOT_
.p2align 4, 0x90
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE17_M_construct_nodeIJRKSI_EEEvPSt13_Rb_tree_nodeISI_EDpOT_:
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE17_M_construct_nodeIJRKSI_EEEvPSt13_Rb_tree_nodeISI_EDpOT___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(232 + 0, 16)
	subq $240, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -144(%rbp)
	movq %r12, -176(%rbp)
	movq %r13, -168(%rbp)
	movq %r14, -160(%rbp)
	movq %r15, -120(%rbp)
	# LowerAlloca(10410:3): size = 8, type = %"class.std::__new_allocator.11"**, var = ^4
	# Fixing source-to-dest leaq -8(%rbp), -88(%rbp)
	leaq -8(%rbp), %r15
	movq %r15, -88(%rbp)
	# LowerAlloca(10411:3): size = 8, type = %"struct.std::pair"**, var = ^5
	# Fixing source-to-dest leaq -16(%rbp), -96(%rbp)
	leaq -16(%rbp), %r15
	movq %r15, -96(%rbp)
	# LowerAlloca(10412:3): size = 8, type = %"struct.std::pair"**, var = ^6
	# Fixing source-to-dest leaq -24(%rbp), -80(%rbp)
	leaq -24(%rbp), %r15
	movq %r15, -80(%rbp)
	# LowerAlloca(10413:3): size = 8, type = %"class.std::allocator.10"**, var = ^7
	leaq -32(%rbp), %rbx
	# LowerAlloca(10414:3): size = 8, type = %"struct.std::pair"**, var = ^8
	# Fixing source-to-dest leaq -40(%rbp), -104(%rbp)
	leaq -40(%rbp), %r15
	movq %r15, -104(%rbp)
	# LowerAlloca(10415:3): size = 8, type = %"struct.std::pair"**, var = ^9
	leaq -48(%rbp), %r14
	# LowerAlloca(10416:3): size = 8, type = %"class.std::_Rb_tree"**, var = ^10
	leaq -56(%rbp), %rcx
	# LowerAlloca(10417:3): size = 8, type = %"struct.std::_Rb_tree_node"**, var = ^11
	leaq -64(%rbp), %r13
	# LowerAlloca(10418:3): size = 8, type = %"struct.std::pair"**, var = ^12
	leaq -72(%rbp), %r12
	# LowerStore(10419:3).9: mov %"class.std::_Rb_tree"* %rdi, (^10)
	movq %rdi, (%rcx)
	# LowerStore(10420:3).9: mov %"struct.std::_Rb_tree_node"* %rsi, (^11)
	movq %rsi, (%r13)
	# LowerStore(10421:3).9: mov %"struct.std::pair"* %rdx, (^12)
	movq %rdx, (%r12)
	# LowerLoad(10422:3).2: (^10) into %"class.std::_Rb_tree"* ^13
	movq (%rcx), %rax
	# LowerLoad(10423:3).2: (^11) into %"struct.std::_Rb_tree_node"* ^14
	movq (%r13), %rcx
	# LowerBasicConversion(10424:3): %"struct.std::_Rb_tree_node"* ^14 -> i8* ^15
	movq %rcx, %rdx
	# LowerBasicConversion(10425:3): i8* ^15 -> %"struct.std::_Rb_tree_node"* ^16
	movq %rdx, %rcx
	# Clobber %rax
	movq %rax, -112(%rbp)
	# SetupCalls(10426:3): move argument %"class.std::_Rb_tree"* nonnull dereferenceable(48) align 8 ^13
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE21_M_get_Node_allocatorEv
	# SetupCalls(10426:3): move %"class.std::allocator.10"* result from %rax
	movq %rax, %r15
	# Unclobber %rax
	movq -112(%rbp), %rax
	# LowerLoad(10427:3).2: (^11) into %"struct.std::_Rb_tree_node"* ^18
	movq (%r13), %rax
	# Clobber %rax
	movq %rax, -112(%rbp)
	# SetupCalls(10428:3): move argument %"struct.std::_Rb_tree_node"* nonnull dereferenceable(96) align 8 ^18
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEE9_M_valptrEv
	# SetupCalls(10428:3): move %"struct.std::pair"* result from %rax
	movq %rax, %r13
	# Unclobber %rax
	movq -112(%rbp), %rax
	# LowerLoad(10429:3).2: (^12) into %"struct.std::pair"* ^20
	movq (%r12), %rax
	# LowerStore(10430:3).9: mov %"class.std::allocator.10"* ^17, (^7)
	movq %r15, (%rbx)
	# LowerStore(10431:3).9: mov %"struct.std::pair"* ^19, (^8)
	movq -104(%rbp), %rcx
	movq %r13, (%rcx)
	# LowerStore(10432:3).9: mov %"struct.std::pair"* ^20, (^9)
	movq %rax, (%r14)
	# LowerLoad(10433:3).2: (^7) into %"class.std::allocator.10"* ^21
	movq (%rbx), %rax
	# LowerBasicConversion(10434:3): %"class.std::allocator.10"* ^21 -> %"class.std::__new_allocator.11"* ^22
	movq %rax, %rbx
	# LowerLoad(10435:3).2: (^8) into %"struct.std::pair"* ^23
	movq -104(%rbp), %rax
	movq (%rax), %rcx
	# LowerLoad(10436:3).2: (^9) into %"struct.std::pair"* ^24
	movq (%r14), %rdx
	# LowerStore(10437:3).9: mov %"class.std::__new_allocator.11"* ^22, (^4)
	movq -88(%rbp), %rax
	movq %rbx, (%rax)
	# LowerStore(10438:3).9: mov %"struct.std::pair"* ^23, (^5)
	movq -96(%rbp), %rax
	movq %rcx, (%rax)
	# LowerStore(10439:3).9: mov %"struct.std::pair"* ^24, (^6)
	movq -80(%rbp), %rax
	movq %rdx, (%rax)
	# LowerLoad(10440:3).2: (^4) into %"class.std::__new_allocator.11"* ^25
	movq -88(%rbp), %rbx
	movq (%rbx), %rax
	# LowerLoad(10441:3).2: (^5) into %"struct.std::pair"* ^26
	movq -96(%rbp), %rbx
	movq (%rbx), %rax
	# LowerBasicConversion(10442:3): %"struct.std::pair"* ^26 -> i8* ^27
	movq %rax, %rbx
	# LowerLoad(10443:3).2: (^6) into %"struct.std::pair"* ^28
	movq -80(%rbp), %rcx
	movq (%rcx), %rbx
	# Clobber %rax
	movq %rax, -112(%rbp)
	# SetupCalls(10444:3): move argument %"struct.std::pair"* nonnull dereferenceable(64) align 8 ^26
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(10444:3): move argument %"struct.std::pair"* nonnull dereferenceable(64) align 8 ^28
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISA_EEEEEC2ERKSH_
	# Unclobber %rax
	movq -112(%rbp), %rax
	movq -120(%rbp), %r15
	movq -160(%rbp), %r14
	movq -168(%rbp), %r13
	movq -176(%rbp), %r12
	movq -144(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE10_M_managerERSt9_Any_dataRKSD_St18_Manager_operation
.p2align 4, 0x90
_ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE10_M_managerERSt9_Any_dataRKSD_St18_Manager_operation:
	.___ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE10_M_managerERSt9_Any_dataRKSD_St18_Manager_operation__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(80 + 0, 16)
	subq $80, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -40(%rbp)
	movq %r12, -56(%rbp)
	# LowerAlloca(4578:3): size = 8, type = %"union.std::_Any_data"**, var = ^4
	leaq -8(%rbp), %rbx
	# LowerAlloca(4579:3): size = 8, type = %"union.std::_Any_data"**, var = ^5
	leaq -16(%rbp), %r8
	# LowerAlloca(4580:3): size = 4, type = i32*, var = ^6
	leaq -20(%rbp), %rcx
	# LowerAlloca(4581:3): size = 1, type = %"struct.std::integral_constant"*, var = ^7
	leaq -21(%rbp), %rax
	# LowerStore(4582:3).9: mov %"union.std::_Any_data"* %rdi, (^4)
	movq %rdi, (%rbx)
	# LowerStore(4583:3).9: mov %"union.std::_Any_data"* %rsi, (^5)
	movq %rsi, (%r8)
	# LowerStore(4584:3).9: mov i32 %edx, (^6)
	movl %edx, (%rcx)
	# LowerLoad(4585:3).2: (^6) into i32 ^8
	movl (%rcx), %eax
	# LowerSwitch(4586:3): begin conditions
	cmpl $0, %eax
	je .___ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE10_M_managerERSt9_Any_dataRKSD_St18_Manager_operation__M27
	cmpl $1, %eax
	je .___ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE10_M_managerERSt9_Any_dataRKSD_St18_Manager_operation__M57
	cmpl $2, %eax
	je .___ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE10_M_managerERSt9_Any_dataRKSD_St18_Manager_operation__M110
	cmpl $3, %eax
	je .___ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE10_M_managerERSt9_Any_dataRKSD_St18_Manager_operation__M161
	# LowerSwitch(4586:3): default
	jmp .___ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE10_M_managerERSt9_Any_dataRKSD_St18_Manager_operation__M185
	.___ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE10_M_managerERSt9_Any_dataRKSD_St18_Manager_operation__M27:
	# LowerLoad(4594:3).2: (^4) into %"union.std::_Any_data"* ^10
	movq (%rbx), %rax
	# Clobber %rax
	movq %rax, -32(%rbp)
	# SetupCalls(4595:3): move argument %"union.std::_Any_data"* nonnull dereferenceable(16) align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v
	# SetupCalls(4595:3): move %"class.std::type_info"** result from %rax
	movq %rax, %rbx
	# Unclobber %rax
	movq -32(%rbp), %rax
	# LowerStore(4596:3).6: load global
	leaq _ZTIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEE(%rip), %rax
	# LowerStore(4596:3).9: mov %"class.std::type_info"* ^24, (^11)
	movq %rax, (%rbx)
	jmp .___ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE10_M_managerERSt9_Any_dataRKSD_St18_Manager_operation__M185
	.___ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE10_M_managerERSt9_Any_dataRKSD_St18_Manager_operation__M57:
	# LowerLoad(4600:3).2: (^5) into %"union.std::_Any_data"* ^13
	movq (%r8), %rax
	# Clobber %rax
	movq %rax, -32(%rbp)
	# SetupCalls(4601:3): move argument %"union.std::_Any_data"* nonnull dereferenceable(16) align 8 ^13
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE14_M_get_pointerERKSt9_Any_data
	# SetupCalls(4601:3): move i32 (%"class.std::vector"*) *** result from %rax
	movq %rax, %r12
	# Unclobber %rax
	movq -32(%rbp), %rax
	# LowerLoad(4602:3).2: (^4) into %"union.std::_Any_data"* ^15
	movq (%rbx), %rax
	# Clobber %rax
	movq %rax, -32(%rbp)
	# SetupCalls(4603:3): move argument %"union.std::_Any_data"* nonnull dereferenceable(16) align 8 ^15
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt9_Any_data9_M_accessIPPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEEERT_v
	# SetupCalls(4603:3): move i32 (%"class.std::vector"*) **** result from %rax
	movq %rax, %rbx
	# Unclobber %rax
	movq -32(%rbp), %rax
	# LowerStore(4604:3).9: mov i32 (%"class.std::vector"*) *** ^14, (^16)
	movq %r12, (%rbx)
	jmp .___ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE10_M_managerERSt9_Any_dataRKSD_St18_Manager_operation__M185
	.___ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE10_M_managerERSt9_Any_dataRKSD_St18_Manager_operation__M110:
	# LowerLoad(4608:3).2: (^4) into %"union.std::_Any_data"* ^18
	movq (%rbx), %r12
	# LowerLoad(4609:3).2: (^5) into %"union.std::_Any_data"* ^19
	movq (%r8), %rax
	# Clobber %rax
	movq %rax, -32(%rbp)
	# SetupCalls(4610:3): move argument %"union.std::_Any_data"* nonnull dereferenceable(16) align 8 ^19
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE14_M_get_pointerERKSt9_Any_data
	# SetupCalls(4610:3): move i32 (%"class.std::vector"*) *** result from %rax
	movq %rax, %rbx
	# Unclobber %rax
	movq -32(%rbp), %rax
	# SetupCalls(4611:3): move argument %"union.std::_Any_data"* nonnull dereferenceable(16) align 8 ^18
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(4611:3): move argument i32 (%"class.std::vector"*) *** nonnull dereferenceable(8) align 8 ^20
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE15_M_init_functorIRKSB_EEvRSt9_Any_dataOT_
	jmp .___ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE10_M_managerERSt9_Any_dataRKSD_St18_Manager_operation__M185
	.___ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE10_M_managerERSt9_Any_dataRKSD_St18_Manager_operation__M161:
	# LowerLoad(4615:3).2: (^4) into %"union.std::_Any_data"* ^22
	movq (%rbx), %rax
	# Clobber %rax
	movq %rax, -32(%rbp)
	# SetupCalls(4616:3): move argument %"union.std::_Any_data"* nonnull dereferenceable(16) align 8 ^22
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE
	# Unclobber %rax
	movq -32(%rbp), %rax
	.___ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE10_M_managerERSt9_Any_dataRKSD_St18_Manager_operation__M185:
	movq $0, %rax
	movq -56(%rbp), %r12
	movq -40(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEENK3$_0clERK6LsItemSB_
.p2align 4, 0x90
_ZZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEENK3$_0clERK6LsItemSB_:
	.___ZZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEENK3$_0clERK6LsItemSB___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(64 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -56(%rbp)
	movq %r12, -64(%rbp)
	# LowerAlloca(8381:3): size = 1, type = i1*, var = ^4
	leaq -1(%rbp), %rbx
	# LowerAlloca(8382:3): size = 8, type = %class.anon**, var = ^5
	leaq -16(%rbp), %r9
	# LowerAlloca(8383:3): size = 8, type = %struct.LsItem**, var = ^6
	leaq -24(%rbp), %r8
	# LowerAlloca(8384:3): size = 8, type = %struct.LsItem**, var = ^7
	leaq -32(%rbp), %rcx
	# LowerStore(8385:3).9: mov %class.anon* %rdi, (^5)
	movq %rdi, (%r9)
	# LowerStore(8386:3).9: mov %struct.LsItem* %rsi, (^6)
	movq %rsi, (%r8)
	# LowerStore(8387:3).9: mov %struct.LsItem* %rdx, (^7)
	movq %rdx, (%rcx)
	# LowerLoad(8388:3).2: (^5) into %class.anon* ^8
	movq (%r9), %rax
	# LowerLoad(8389:3).2: (^6) into %struct.LsItem* ^9
	movq (%r8), %rax
	# tt = Pointer, type = %struct.LsItem
	# LowerGetelementptr(8390:3): struct-type: %struct.LsItem* ^9 -> ^10, indices=0,1
	movq %rax, %rdx
	addq $32, %rdx
	# LowerGetelementptr(8390:3): type of ^10 is i8*
	# LowerLoad(8391:3).2: (^10) into i8 ^11
	movb (%rdx), %al
	# LowerTrunc(8392:3): 8 to 1, move
	movb %al, %dl
	# LowerTrunc(8392:3): 8 to 1, apply mask
	andq $1, %rdx
	# LowerBasicConversion(8393:3): i1 ^12 -> i32 ^13
	movl %edx, %eax
	# Truncate value to 8 bits
	andl $255, %eax
	# LowerLoad(8394:3).2: (^7) into %struct.LsItem* ^14
	movq (%rcx), %rdx
	# tt = Pointer, type = %struct.LsItem
	# LowerGetelementptr(8395:3): struct-type: %struct.LsItem* ^14 -> ^15, indices=0,1
	movq %rdx, %rsi
	addq $32, %rsi
	# LowerGetelementptr(8395:3): type of ^15 is i8*
	# LowerLoad(8396:3).2: (^15) into i8 ^16
	movb (%rsi), %dl
	# LowerTrunc(8397:3): 8 to 1, move
	movb %dl, %sil
	# LowerTrunc(8397:3): 8 to 1, apply mask
	andq $1, %rsi
	# LowerBasicConversion(8398:3): i1 ^17 -> i32 ^18
	movl %esi, %edx
	# Truncate value to 8 bits
	andl $255, %edx
	# LowerIcmp(8399:3): i32 ^13 vs. operand i32 ^18
	cmpl %edx, %eax
	setne %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEENK3$_0clERK6LsItemSB___M56
	jmp .___ZZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEENK3$_0clERK6LsItemSB___M72
	.___ZZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEENK3$_0clERK6LsItemSB___M56:
	# LowerLoad(8403:3).2: (^6) into %struct.LsItem* ^21
	movq (%r8), %rax
	# tt = Pointer, type = %struct.LsItem
	# LowerGetelementptr(8404:3): struct-type: %struct.LsItem* ^21 -> ^22, indices=0,1
	movq %rax, %rcx
	addq $32, %rcx
	# LowerGetelementptr(8404:3): type of ^22 is i8*
	# LowerLoad(8405:3).2: (^22) into i8 ^23
	movb (%rcx), %al
	# LowerTrunc(8406:3): 8 to 1, move
	movb %al, %cl
	# LowerTrunc(8406:3): 8 to 1, apply mask
	andq $1, %rcx
	# LowerStore(8407:3).9: mov i1 ^24, (^4)
	movb %cl, (%rbx)
	jmp .___ZZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEENK3$_0clERK6LsItemSB___M112
	.___ZZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEENK3$_0clERK6LsItemSB___M72:
	# LowerLoad(8411:3).2: (^6) into %struct.LsItem* ^26
	movq (%r8), %rax
	# tt = Pointer, type = %struct.LsItem
	# LowerGetelementptr(8412:3): struct-type: %struct.LsItem* ^26 -> ^27, indices=0,0
	movq %rax, %rdx
	# LowerGetelementptr(8412:3): type of ^27 is %"class.std::__cxx11::basic_string"*
	# LowerLoad(8413:3).2: (^7) into %struct.LsItem* ^28
	movq (%rcx), %rax
	# tt = Pointer, type = %struct.LsItem
	# LowerGetelementptr(8414:3): struct-type: %struct.LsItem* ^28 -> ^29, indices=0,0
	movq %rax, %rcx
	# LowerGetelementptr(8414:3): type of ^29 is %"class.std::__cxx11::basic_string"*
	# Clobber %rdx
	movq %rdx, -40(%rbp)
	# Clobber %rcx
	movq %rcx, -48(%rbp)
	# SetupCalls(8415:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^27
	# Fixed movzx with identical source and destination widths
	movq %rdx, %rdi
	# SetupCalls(8415:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^29
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	callq _ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_
	# SetupCalls(8415:3): move i1 result from %rax
	movb %al, %r12b
	# Unclobber %rcx
	movq -48(%rbp), %rcx
	# Unclobber %rdx
	movq -40(%rbp), %rdx
	# LowerStore(8416:3).9: mov i1 ^30, (^4)
	movb %r12b, (%rbx)
	.___ZZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEENK3$_0clERK6LsItemSB___M112:
	# LowerLoad(8420:3).2: (^4) into i1 ^32
	movb (%rbx), %al
	movq -64(%rbp), %r12
	movq -56(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt17basic_string_viewIcSt11char_traitsIcEEC2EPKcm
.p2align 4, 0x90
_ZNSt17basic_string_viewIcSt11char_traitsIcEEC2EPKcm:
	.___ZNSt17basic_string_viewIcSt11char_traitsIcEEC2EPKcm__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(40 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	# LowerAlloca(3115:3): size = 8, type = %"class.std::basic_string_view"**, var = ^4
	leaq -8(%rbp), %rax
	# LowerAlloca(3116:3): size = 8, type = i8**, var = ^5
	leaq -16(%rbp), %r8
	# LowerAlloca(3117:3): size = 8, type = i64*, var = ^6
	leaq -24(%rbp), %rcx
	# LowerStore(3118:3).9: mov %"class.std::basic_string_view"* %rdi, (^4)
	movq %rdi, (%rax)
	# LowerStore(3119:3).9: mov i8* %rsi, (^5)
	movq %rsi, (%r8)
	# LowerStore(3120:3).9: mov i64 %rdx, (^6)
	movq %rdx, (%rcx)
	# LowerLoad(3121:3).2: (^4) into %"class.std::basic_string_view"* ^7
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::basic_string_view"
	# LowerGetelementptr(3122:3): struct-type: %"class.std::basic_string_view"* ^7 -> ^8, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(3122:3): type of ^8 is i64*
	# LowerLoad(3123:3).2: (^6) into i64 ^9
	movq (%rcx), %rdx
	# LowerStore(3124:3).9: mov i64 ^9, (^8)
	movq %rdx, (%rax)
	# tt = Pointer, type = %"class.std::basic_string_view"
	# LowerGetelementptr(3125:3): struct-type: %"class.std::basic_string_view"* ^7 -> ^10, indices=0,1
	movq %rbx, %rax
	addq $8, %rax
	# LowerGetelementptr(3125:3): type of ^10 is i8**
	# LowerLoad(3126:3).2: (^5) into i8* ^11
	movq (%r8), %rbx
	# LowerStore(3127:3).9: mov i8* ^11, (^10)
	movq %rbx, (%rax)
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt12_Vector_baseI6LsItemSaIS0_EE17_Vector_impl_dataC2Ev
.p2align 4, 0x90
_ZNSt12_Vector_baseI6LsItemSaIS0_EE17_Vector_impl_dataC2Ev:
	.___ZNSt12_Vector_baseI6LsItemSaIS0_EE17_Vector_impl_dataC2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(3212:3): size = 8, type = %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(3213:3).9: mov %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(3214:3).2: (^2) into %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"* ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"
	# LowerGetelementptr(3215:3): struct-type: %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"* ^3 -> ^4, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(3215:3): type of ^4 is %struct.LsItem**
	# LowerStore(3216:3).3: mov $imm, (^4)
	movq $0, (%rax)
	# tt = Pointer, type = %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"
	# LowerGetelementptr(3217:3): struct-type: %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"* ^3 -> ^5, indices=0,1
	movq %rbx, %rax
	addq $8, %rax
	# LowerGetelementptr(3217:3): type of ^5 is %struct.LsItem**
	# LowerStore(3218:3).3: mov $imm, (^5)
	movq $0, (%rax)
	# tt = Pointer, type = %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"
	# LowerGetelementptr(3219:3): struct-type: %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"* ^3 -> ^6, indices=0,2
	movq %rbx, %rax
	addq $16, %rax
	# LowerGetelementptr(3219:3): type of ^6 is %struct.LsItem**
	# LowerStore(3220:3).3: mov $imm, (^6)
	movq $0, (%rax)
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE4backEv
.p2align 4, 0x90
_ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE4backEv:
	.___ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE4backEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(72 + 0, 16)
	subq $80, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -48(%rbp)
	movq %r12, -56(%rbp)
	movq %r13, -40(%rbp)
	# LowerAlloca(5700:3): size = 8, type = %"class.std::vector"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerAlloca(5701:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator.19"*, var = ^3
	leaq -16(%rbp), %r13
	# LowerAlloca(5702:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator.19"*, var = ^4
	leaq -24(%rbp), %rbx
	# LowerStore(5703:3).9: mov %"class.std::vector"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(5704:3).2: (^2) into %"class.std::vector"* ^5
	movq (%rax), %rcx
	# Clobber %rcx
	movq %rcx, -32(%rbp)
	# SetupCalls(5705:3): move argument %"class.std::vector"* nonnull dereferenceable(24) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	callq _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE3endEv
	# SetupCalls(5705:3): move %"class.std::basic_string_view"* result from %rax
	movq %rax, %r12
	# Unclobber %rcx
	movq -32(%rbp), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator.19"
	# LowerGetelementptr(5706:3): struct-type: %"class.__gnu_cxx::__normal_iterator.19"* ^4 -> ^7, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(5706:3): type of ^7 is %"class.std::basic_string_view"**
	# LowerStore(5707:3).9: mov %"class.std::basic_string_view"* ^6, (^7)
	movq %r12, (%rax)
	# SetupCalls(5708:3): move argument %"class.__gnu_cxx::__normal_iterator.19"* nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(5708:3): move argument i64 1
	movq $1, %rsi
	callq _ZNK9__gnu_cxx17__normal_iteratorIPSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEEmiEl
	# SetupCalls(5708:3): move %"class.std::basic_string_view"* result from %rax
	movq %rax, %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator.19"
	# LowerGetelementptr(5709:3): struct-type: %"class.__gnu_cxx::__normal_iterator.19"* ^3 -> ^9, indices=0,0
	movq %r13, %rax
	# LowerGetelementptr(5709:3): type of ^9 is %"class.std::basic_string_view"**
	# LowerStore(5710:3).9: mov %"class.std::basic_string_view"* ^8, (^9)
	movq %rbx, (%rax)
	# SetupCalls(5711:3): move argument %"class.__gnu_cxx::__normal_iterator.19"* nonnull dereferenceable(8) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIPSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEEdeEv
	# SetupCalls(5711:3): move %"class.std::basic_string_view"* result from %rax
	movq %rax, %rbx
	movq %rbx, %rax
	movq -40(%rbp), %r13
	movq -56(%rbp), %r12
	movq -48(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEC2Ev
.p2align 4, 0x90
_ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEC2Ev:
	.___ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEC2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(2818:3): size = 8, type = %"struct.std::_Vector_base"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(2819:3).9: mov %"struct.std::_Vector_base"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(2820:3).2: (^2) into %"struct.std::_Vector_base"* ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(2821:3): struct-type: %"struct.std::_Vector_base"* ^3 -> ^4, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(2821:3): type of ^4 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# Clobber %rax
	movq %rax, -16(%rbp)
	# SetupCalls(2822:3): move argument %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"* nonnull dereferenceable(24) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12_Vector_implC2Ev
	# Unclobber %rax
	movq -16(%rbp), %rax
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global pr
.p2align 4, 0x90
pr:
	.__pr__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(48 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -40(%rbp)
	# LowerAlloca(2803:3): size = 8, type = i8**, var = ^3
	leaq -8(%rbp), %rbx
	# LowerAlloca(2804:3): size = 8, type = i8**, var = ^4
	leaq -16(%rbp), %rax
	# LowerStore(2805:3).9: mov i8* %rdi, (^3)
	movq %rdi, (%rbx)
	# LowerStore(2806:3).9: mov i8* %rsi, (^4)
	movq %rsi, (%rax)
	# LowerLoad(2807:3).4: stderr into ^5
	movq stderr(%rip), %rdx
	# LowerLoad(2808:3).2: (^3) into i8* ^6
	movq (%rbx), %rcx
	# LowerLoad(2809:3).2: (^4) into i8* ^7
	movq (%rax), %rbx
	# Clobber %rdx
	movq %rdx, -24(%rbp)
	# Clobber %rcx
	movq %rcx, -32(%rbp)
	# SetupCalls(2810:3): move argument %struct._IO_FILE* ^5
	# Fixed movzx with identical source and destination widths
	movq %rdx, %rdi
	# SetupCalls(2810:3): move argument i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.22, i64 0, i64 0)
	leaq .str.22(%rip), %rsi
	# SetupCalls(2810:3): move argument i8* ^6
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdx
	# SetupCalls(2810:3): move argument i8* ^7
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rcx
	movq $0, %rax
	callq fprintf@PLT
	# SetupCalls(2810:3): move i32 result from %rax
	movl %eax, %eax
	# Unclobber %rcx
	movq -32(%rbp), %rcx
	# Unclobber %rdx
	movq -24(%rbp), %rdx
	movq -40(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEdeEv
.p2align 4, 0x90
_ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEdeEv:
	.___ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEdeEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(1952:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(1953:3).9: mov %"class.__gnu_cxx::__normal_iterator"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(1954:3).2: (^2) into %"class.__gnu_cxx::__normal_iterator"* ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(1955:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^3 -> ^4, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(1955:3): type of ^4 is %struct.LsItem**
	# LowerLoad(1956:3).2: (^4) into %struct.LsItem* ^5
	movq (%rax), %rbx
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZN9__gnu_cxxneIP6LsItemSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_
.p2align 4, 0x90
_ZN9__gnu_cxxneIP6LsItemSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_:
	.___ZN9__gnu_cxxneIP6LsItemSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(56 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	movq %r12, -48(%rbp)
	movq %r13, -40(%rbp)
	# LowerAlloca(1936:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"**, var = ^3
	leaq -8(%rbp), %rcx
	# LowerAlloca(1937:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"**, var = ^4
	leaq -16(%rbp), %rbx
	# LowerStore(1938:3).9: mov %"class.__gnu_cxx::__normal_iterator"* %rdi, (^3)
	movq %rdi, (%rcx)
	# LowerStore(1939:3).9: mov %"class.__gnu_cxx::__normal_iterator"* %rsi, (^4)
	movq %rsi, (%rbx)
	# LowerLoad(1940:3).2: (^3) into %"class.__gnu_cxx::__normal_iterator"* ^5
	movq (%rcx), %rax
	# Clobber %rax
	movq %rax, -24(%rbp)
	# SetupCalls(1941:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEE4baseEv
	# SetupCalls(1941:3): move %struct.LsItem** result from %rax
	movq %rax, %r13
	# Unclobber %rax
	movq -24(%rbp), %rax
	# LowerLoad(1942:3).2: (^6) into %struct.LsItem* ^7
	movq (%r13), %r12
	# LowerLoad(1943:3).2: (^4) into %"class.__gnu_cxx::__normal_iterator"* ^8
	movq (%rbx), %rax
	# Clobber %rax
	movq %rax, -24(%rbp)
	# SetupCalls(1944:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEE4baseEv
	# SetupCalls(1944:3): move %struct.LsItem** result from %rax
	movq %rax, %rbx
	# Unclobber %rax
	movq -24(%rbp), %rax
	# LowerLoad(1945:3).2: (^9) into %struct.LsItem* ^10
	movq (%rbx), %rax
	# LowerIcmp(1946:3): %struct.LsItem* ^7 vs. operand %struct.LsItem* ^10
	cmpq %rax, %r12
	setne %al
	andq $1, %rax
	movq -40(%rbp), %r13
	movq -48(%rbp), %r12
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE
.p2align 4, 0x90
_Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE:
	.___Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(336 + 0, 16)
	subq $336, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -224(%rbp)
	movq %r12, -216(%rbp)
	movq %r13, -232(%rbp)
	movq %r14, -200(%rbp)
	movq %r15, -176(%rbp)
	# LowerAlloca(2045:3): size = 4, type = i32*, var = ^2
	# Fixing source-to-dest leaq -4(%rbp), -144(%rbp)
	leaq -4(%rbp), %r15
	movq %r15, -144(%rbp)
	# LowerAlloca(2046:3): size = 8, type = %"class.std::vector"**, var = ^3
	leaq -16(%rbp), %r15
	# LowerAlloca(2047:3): size = 40, type = %"class.std::filesystem::__cxx11::path"*, var = ^4
	# Fixing source-to-dest leaq -56(%rbp), -152(%rbp)
	pushq %r15
	leaq -56(%rbp), %r15
	movq %r15, -152(%rbp)
	popq %r15
	# LowerAlloca(2048:3): size = 8, type = i8**, var = ^5
	leaq -64(%rbp), %r14
	# LowerAlloca(2049:3): size = 4, type = i32*, var = ^6
	# Fixing source-to-dest leaq -68(%rbp), -160(%rbp)
	pushq %r15
	leaq -68(%rbp), %r15
	movq %r15, -160(%rbp)
	popq %r15
	# LowerAlloca(2050:3): size = 32, type = %"class.std::__cxx11::basic_string"*, var = ^7
	leaq -104(%rbp), %r12
	# LowerAlloca(2051:3): size = 32, type = %"class.std::__cxx11::basic_string"*, var = ^8
	leaq -136(%rbp), %rbx
	# LowerStore(2052:3).9: mov %"class.std::vector"* %rdi, (^3)
	movq %rdi, (%r15)
	# LowerLoad(2053:3).2: (^3) into %"class.std::vector"* ^9
	movq (%r15), %rax
	# Clobber %rax
	movq %rax, -168(%rbp)
	# SetupCalls(2054:3): move argument %"class.std::vector"* nonnull dereferenceable(24) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE4sizeEv
	# SetupCalls(2054:3): move i64 result from %rax
	movq %rax, %r13
	# Unclobber %rax
	movq -168(%rbp), %rax
	movq $2, %rax
	# LowerIcmp(2055:3): i64 ^56 vs. operand i64 ^10
	cmpq %r13, %rax
	setb %al
	andq $1, %rax
	cmpb $0, %al
	jne .___Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M47
	jmp .___Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M151
	.___Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M47:
	# SetupCalls(2059:3): move argument %"class.std::basic_ostream"* nonnull dereferenceable(8) align 8 @_ZSt4cerr
	leaq _ZSt4cerr(%rip), %rdi
	# SetupCalls(2059:3): move argument i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1, i64 0, i64 0)
	leaq .str.1(%rip), %rsi
	callq _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
	# SetupCalls(2059:3): move %"class.std::basic_ostream"* result from %rax
	movq %rax, %rbx
	# LowerLoad(2060:3).2: (^3) into %"class.std::vector"* ^14
	movq (%r15), %rax
	# Clobber %rax
	movq %rax, -168(%rbp)
	# SetupCalls(2061:3): move argument %"class.std::vector"* nonnull dereferenceable(24) align 8 ^14
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE4sizeEv
	# SetupCalls(2061:3): move i64 result from %rax
	movq %rax, %r12
	# Unclobber %rax
	movq -168(%rbp), %rax
	# SetupCalls(2062:3): move argument %"class.std::basic_ostream"* nonnull dereferenceable(8) align 8 ^13
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(2062:3): move argument i64 ^15
	# Fixed movzx with identical source and destination widths
	movq %r12, %rsi
	callq _ZNSolsEm@PLT
	# SetupCalls(2062:3): move %"class.std::basic_ostream"* result from %rax
	movq %rax, %rbx
	# SetupCalls(2063:3): move argument %"class.std::basic_ostream"* nonnull dereferenceable(8) align 8 ^16
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(2063:3): move argument i8 signext 10
	movq $10, %rsi
	movsbq %sil, %rsi
	callq _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@PLT
	# SetupCalls(2063:3): move %"class.std::basic_ostream"* result from %rax
	movq %rax, %rax
	# LowerStore(2064:3).3: mov $imm, (^2)
	movq -144(%rbp), %rax
	movl $1, (%rax)
	jmp .___Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M701
	.___Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M151:
	# SetupCalls(2068:3): move argument %"class.std::filesystem::__cxx11::path"* nonnull dereferenceable(40) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -152(%rbp), %rdi
	callq _ZNSt10filesystem7__cxx114pathC2Ev
	# LowerLoad(2069:3).2: (^3) into %"class.std::vector"* ^19
	movq (%r15), %rax
	# Clobber %rax
	movq %rax, -168(%rbp)
	# SetupCalls(2070:3): move argument %"class.std::vector"* nonnull dereferenceable(24) align 8 ^19
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE4sizeEv
	# SetupCalls(2070:3): move i64 result from %rax
	movq %rax, %r13
	# Unclobber %rax
	movq -168(%rbp), %rax
	# LowerIcmp(2071:3): i64 ^20 vs. intlike 2
	cmpq $2, %r13
	sete %al
	andq $1, %rax
	cmpb $0, %al
	jne .___Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M202
	jmp .___Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M255
	.___Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M202:
	# LowerLoad(2075:3).2: (^3) into %"class.std::vector"* ^23
	movq (%r15), %rax
	# Clobber %rax
	movq %rax, -168(%rbp)
	# SetupCalls(2076:3): move argument %"class.std::vector"* nonnull dereferenceable(24) align 8 ^23
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(2076:3): move argument i64 1
	movq $1, %rsi
	callq _ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEixEm
	# SetupCalls(2076:3): move %"class.std::basic_string_view"* result from %rax
	movq %rax, %r13
	# Unclobber %rax
	movq -168(%rbp), %rax
	# SetupCalls(2077:3): move argument %"class.std::filesystem::__cxx11::path"* nonnull dereferenceable(40) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -152(%rbp), %rdi
	# SetupCalls(2077:3): move argument %"class.std::basic_string_view"* nonnull dereferenceable(16) align 8 ^24
	# Fixed movzx with identical source and destination widths
	movq %r13, %rsi
	callq _ZNSt10filesystem7__cxx114pathaSISt17basic_string_viewIcSt11char_traitsIcEEEERNSt9enable_ifIX13__is_path_srcIT_EES1_E4typeERKS8_
	# SetupCalls(2077:3): move %"class.std::filesystem::__cxx11::path"* result from %rax
	movq %rax, %rax
	jmp .___Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M357
	.___Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M255:
	# SetupCalls(2081:3): move argument i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i64 0, i64 0)
	leaq .str.5(%rip), %rdi
	callq getenv@PLT
	# SetupCalls(2081:3): move i8* result from %rax
	movq %rax, %r13
	# LowerStore(2082:3).9: mov i8* ^27, (^5)
	movq %r13, (%r14)
	# LowerLoad(2083:3).2: (^5) into i8* ^28
	movq (%r14), %rax
	# LowerIcmp(2084:3): i8* ^28 vs. intlike 0
	cmpq $0, %rax
	setne %al
	andq $1, %rax
	cmpb $0, %al
	jne .___Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M287
	jmp .___Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M326
	.___Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M287:
	# LowerLoad(2088:3).2: (^5) into i8* ^31
	movq (%r14), %rax
	# tt = Pointer, type = i8
	# LowerGetelementptr(2089:3): struct-type: i8* ^31 -> ^32, indices=0
	movq %rax, %rcx
	# LowerGetelementptr(2089:3): type of ^32 is i8*
	# LowerLoad(2090:3).2: (^32) into i8 ^33
	movb (%rcx), %al
	# LowerIcmp(2091:3): i8 ^33 vs. intlike 0
	cmpb $0, %al
	setne %al
	andq $1, %rax
	cmpb $0, %al
	jne .___Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M300
	jmp .___Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M326
	.___Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M300:
	# SetupCalls(2095:3): move argument %"class.std::filesystem::__cxx11::path"* nonnull dereferenceable(40) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -152(%rbp), %rdi
	# SetupCalls(2095:3): move argument i8** nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r14, %rsi
	callq _ZNSt10filesystem7__cxx114pathaSIPKcEERNSt9enable_ifIX13__is_path_srcIT_EES1_E4typeERKS6_
	# SetupCalls(2095:3): move %"class.std::filesystem::__cxx11::path"* result from %rax
	movq %rax, %rax
	jmp .___Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M356
	.___Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M326:
	# SetupCalls(2099:3): move argument %"class.std::basic_ostream"* nonnull dereferenceable(8) align 8 @_ZSt4cerr
	leaq _ZSt4cerr(%rip), %rdi
	# SetupCalls(2099:3): move argument i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.6, i64 0, i64 0)
	leaq .str.6(%rip), %rsi
	callq _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
	# SetupCalls(2099:3): move %"class.std::basic_ostream"* result from %rax
	movq %rax, %rax
	# LowerStore(2100:3).3: mov $imm, (^2)
	movq -144(%rbp), %rax
	movl $2, (%rax)
	# LowerStore(2101:3).3: mov $imm, (^6)
	movq -160(%rbp), %rax
	movl $1, (%rax)
	jmp .___Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M679
	.___Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M356:
	.___Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M357:
	# SetupCalls(2108:3): move argument %"class.std::filesystem::__cxx11::path"* nonnull dereferenceable(40) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -152(%rbp), %rdi
	callq _ZNSt10filesystem6existsERKNS_7__cxx114pathE
	# SetupCalls(2108:3): move i1 result from %rax
	movb %al, %r13b
	cmpb $0, %r13b
	jne .___Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M505
	.___Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M381:
	# SetupCalls(2112:3): move argument %"class.std::basic_ostream"* nonnull dereferenceable(8) align 8 @_ZSt4cerr
	leaq _ZSt4cerr(%rip), %rdi
	# SetupCalls(2112:3): move argument i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.7, i64 0, i64 0)
	leaq .str.7(%rip), %rsi
	callq _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
	# SetupCalls(2112:3): move %"class.std::basic_ostream"* result from %rax
	movq %rax, %rbx
	# SetupCalls(2113:3): move argument %"class.std::__cxx11::basic_string"* sret align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(2113:3): move argument %"class.std::filesystem::__cxx11::path"* nonnull dereferenceable(40) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -152(%rbp), %rsi
	callq _ZNKSt10filesystem7__cxx114path6stringEv
	# SetupCalls(2114:3): move argument %"class.std::basic_ostream"* nonnull dereferenceable(8) align 8 ^43
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(2114:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq %r12, %rsi
	callq _ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKNSt7__cxx1112basic_stringIS4_S5_T1_EE@PLT
	# SetupCalls(2114:3): move %"class.std::basic_ostream"* result from %rax
	movq %rax, %rbx
	# SetupCalls(2115:3): move argument %"class.std::basic_ostream"* nonnull dereferenceable(8) align 8 ^44
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(2115:3): move argument i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.8, i64 0, i64 0)
	leaq .str.8(%rip), %rsi
	callq _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
	# SetupCalls(2115:3): move %"class.std::basic_ostream"* result from %rax
	movq %rax, %rax
	# SetupCalls(2116:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
	# LowerStore(2117:3).3: mov $imm, (^2)
	movq -144(%rbp), %rax
	movl $3, (%rax)
	# LowerStore(2118:3).3: mov $imm, (^6)
	movq -160(%rbp), %rax
	movl $1, (%rax)
	jmp .___Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M679
	.___Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M505:
	# SetupCalls(2122:3): move argument %"class.std::filesystem::__cxx11::path"* nonnull dereferenceable(40) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -152(%rbp), %rdi
	callq _ZNSt10filesystem12is_directoryERKNS_7__cxx114pathE
	# SetupCalls(2122:3): move i1 result from %rax
	movb %al, %r12b
	cmpb $0, %r12b
	jne .___Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M653
	.___Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M529:
	# SetupCalls(2126:3): move argument %"class.std::basic_ostream"* nonnull dereferenceable(8) align 8 @_ZSt4cerr
	leaq _ZSt4cerr(%rip), %rdi
	# SetupCalls(2126:3): move argument i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.7, i64 0, i64 0)
	leaq .str.7(%rip), %rsi
	callq _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
	# SetupCalls(2126:3): move %"class.std::basic_ostream"* result from %rax
	movq %rax, %r12
	# SetupCalls(2127:3): move argument %"class.std::__cxx11::basic_string"* sret align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(2127:3): move argument %"class.std::filesystem::__cxx11::path"* nonnull dereferenceable(40) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -152(%rbp), %rsi
	callq _ZNKSt10filesystem7__cxx114path6stringEv
	# SetupCalls(2128:3): move argument %"class.std::basic_ostream"* nonnull dereferenceable(8) align 8 ^49
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(2128:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKNSt7__cxx1112basic_stringIS4_S5_T1_EE@PLT
	# SetupCalls(2128:3): move %"class.std::basic_ostream"* result from %rax
	movq %rax, %r12
	# SetupCalls(2129:3): move argument %"class.std::basic_ostream"* nonnull dereferenceable(8) align 8 ^50
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(2129:3): move argument i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.9, i64 0, i64 0)
	leaq .str.9(%rip), %rsi
	callq _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
	# SetupCalls(2129:3): move %"class.std::basic_ostream"* result from %rax
	movq %rax, %rax
	# SetupCalls(2130:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
	# LowerStore(2131:3).3: mov $imm, (^2)
	movq -144(%rbp), %rax
	movl $4, (%rax)
	# LowerStore(2132:3).3: mov $imm, (^6)
	movq -160(%rbp), %rax
	movl $1, (%rax)
	jmp .___Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M679
	.___Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M653:
	# SetupCalls(2136:3): move argument %"class.std::filesystem::__cxx11::path"* nonnull dereferenceable(40) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -152(%rbp), %rdi
	callq _ZNSt10filesystem12current_pathERKNS_7__cxx114pathE@PLT
	# LowerStore(2137:3).3: mov $imm, (^2)
	movq -144(%rbp), %rax
	movl $0, (%rax)
	# LowerStore(2138:3).3: mov $imm, (^6)
	movq -160(%rbp), %rax
	movl $1, (%rax)
	.___Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M679:
	# SetupCalls(2142:3): move argument %"class.std::filesystem::__cxx11::path"* nonnull dereferenceable(40) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -152(%rbp), %rdi
	callq _ZNSt10filesystem7__cxx114pathD2Ev
	.___Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M701:
	# LowerLoad(2146:3).2: (^2) into i32 ^55
	movq -144(%rbp), %rax
	movl (%rax), %ebx
	movl %ebx, %eax
	movq -176(%rbp), %r15
	movq -200(%rbp), %r14
	movq -232(%rbp), %r13
	movq -216(%rbp), %r12
	movq -224(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEC2ESt16initializer_listIS3_ERKS4_
.p2align 4, 0x90
_ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEC2ESt16initializer_listIS3_ERKS4_:
	.___ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEC2ESt16initializer_listIS3_ERKS4___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(104 + 0, 16)
	subq $112, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -72(%rbp)
	movq %r12, -88(%rbp)
	movq %r13, -64(%rbp)
	movq %r14, -80(%rbp)
	# LowerAlloca(1048:3): size = 16, type = %"class.std::initializer_list"*, var = ^5
	leaq -16(%rbp), %r13
	# LowerAlloca(1049:3): size = 8, type = %"class.std::vector"**, var = ^6
	leaq -24(%rbp), %r8
	# LowerAlloca(1050:3): size = 8, type = %"class.std::allocator"**, var = ^7
	leaq -32(%rbp), %rbx
	# LowerAlloca(1051:3): size = 1, type = %"struct.std::forward_iterator_tag"*, var = ^8
	leaq -33(%rbp), %rax
	# LowerAlloca(1052:3): size = 1, type = %"struct.std::random_access_iterator_tag"*, var = ^9
	leaq -34(%rbp), %r14
	# LowerBasicConversion(1053:3): %"class.std::initializer_list"* ^5 -> {%"class.std::basic_string_view"*, i64}* ^10
	movq %r13, %r9
	# tt = Pointer, type = {%"class.std::basic_string_view"*, i64}
	# LowerGetelementptr(1054:3): struct-type: {%"class.std::basic_string_view"*, i64}* ^10 -> ^11, indices=0,0
	movq %r9, %rax
	# LowerGetelementptr(1054:3): type of ^11 is %"class.std::basic_string_view"**
	# LowerStore(1055:3).9: mov %"class.std::basic_string_view"* %rsi, (^11)
	movq %rsi, (%rax)
	# tt = Pointer, type = {%"class.std::basic_string_view"*, i64}
	# LowerGetelementptr(1056:3): struct-type: {%"class.std::basic_string_view"*, i64}* ^10 -> ^12, indices=0,1
	movq %r9, %rax
	addq $8, %rax
	# LowerGetelementptr(1056:3): type of ^12 is i64*
	# LowerStore(1057:3).9: mov i64 %rdx, (^12)
	movq %rdx, (%rax)
	# LowerStore(1058:3).9: mov %"class.std::vector"* %rdi, (^6)
	movq %rdi, (%r8)
	# LowerStore(1059:3).9: mov %"class.std::allocator"* %rcx, (^7)
	movq %rcx, (%rbx)
	# LowerLoad(1060:3).2: (^6) into %"class.std::vector"* ^13
	movq (%r8), %r12
	# LowerBasicConversion(1061:3): %"class.std::vector"* ^13 -> %"struct.std::_Vector_base"* ^14
	movq %r12, %rax
	# LowerLoad(1062:3).2: (^7) into %"class.std::allocator"* ^15
	movq (%rbx), %rcx
	# Clobber %rcx
	movq %rcx, -48(%rbp)
	# Clobber %rax
	movq %rax, -56(%rbp)
	# SetupCalls(1063:3): move argument %"struct.std::_Vector_base"* nonnull dereferenceable(24) align 8 ^14
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(1063:3): move argument %"class.std::allocator"* nonnull dereferenceable(1) align 1 ^15
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	callq _ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEC2ERKS4_
	# Unclobber %rax
	movq -56(%rbp), %rax
	# Unclobber %rcx
	movq -48(%rbp), %rcx
	# SetupCalls(1064:3): move argument %"class.std::initializer_list"* nonnull dereferenceable(16) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	callq _ZNKSt16initializer_listISt17basic_string_viewIcSt11char_traitsIcEEE5beginEv
	# SetupCalls(1064:3): move %"class.std::basic_string_view"* result from %rax
	movq %rax, %rbx
	# SetupCalls(1065:3): move argument %"class.std::initializer_list"* nonnull dereferenceable(16) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	callq _ZNKSt16initializer_listISt17basic_string_viewIcSt11char_traitsIcEEE3endEv
	# SetupCalls(1065:3): move %"class.std::basic_string_view"* result from %rax
	movq %rax, %r13
	# LowerBasicConversion(1066:3): %"struct.std::random_access_iterator_tag"* ^9 -> %"struct.std::forward_iterator_tag"* ^18
	movq %r14, %rax
	# SetupCalls(1067:3): move argument %"class.std::vector"* nonnull dereferenceable(24) align 8 ^13
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(1067:3): move argument %"class.std::basic_string_view"* ^16
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(1067:3): move argument %"class.std::basic_string_view"* ^17
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdx
	callq _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE19_M_range_initializeIPKS3_EEvT_S9_St20forward_iterator_tag
	movq -80(%rbp), %r14
	movq -64(%rbp), %r13
	movq -88(%rbp), %r12
	movq -72(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10filesystem7__cxx114pathC2IA2_cS1_EERKT_NS1_6formatE
.p2align 4, 0x90
_ZNSt10filesystem7__cxx114pathC2IA2_cS1_EERKT_NS1_6formatE:
	.___ZNSt10filesystem7__cxx114pathC2IA2_cS1_EERKT_NS1_6formatE__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(336 + 0, 16)
	subq $336, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -176(%rbp)
	movq %r12, -168(%rbp)
	movq %r13, -192(%rbp)
	movq %r14, -216(%rbp)
	movq %r15, -152(%rbp)
	# LowerAlloca(6180:3): size = 8, type = %"class.std::__new_allocator.1"**, var = ^4
	# Fixing source-to-dest leaq -8(%rbp), -128(%rbp)
	leaq -8(%rbp), %r15
	movq %r15, -128(%rbp)
	# LowerAlloca(6181:3): size = 8, type = %"class.std::allocator.0"**, var = ^5
	# Fixing source-to-dest leaq -16(%rbp), -104(%rbp)
	leaq -16(%rbp), %r15
	movq %r15, -104(%rbp)
	# LowerAlloca(6182:3): size = 8, type = %"class.std::allocator.0"**, var = ^6
	leaq -24(%rbp), %r12
	# LowerAlloca(6183:3): size = 8, type = %"class.std::filesystem::__cxx11::path"**, var = ^7
	leaq -32(%rbp), %rbx
	# LowerAlloca(6184:3): size = 8, type = [2 x i8]**, var = ^8
	leaq -40(%rbp), %rax
	# LowerAlloca(6185:3): size = 1, type = i8*, var = ^9
	leaq -41(%rbp), %r8
	# LowerAlloca(6186:3): size = 16, type = %"class.std::basic_string_view"*, var = ^10
	# Fixing source-to-dest leaq -64(%rbp), -120(%rbp)
	leaq -64(%rbp), %r15
	movq %r15, -120(%rbp)
	# LowerAlloca(6187:3): size = 16, type = %"class.std::basic_string_view"*, var = ^11
	leaq -80(%rbp), %r13
	# LowerAlloca(6188:3): size = 1, type = %"class.std::allocator.0"*, var = ^12
	# Fixing source-to-dest leaq -81(%rbp), -112(%rbp)
	leaq -81(%rbp), %r15
	movq %r15, -112(%rbp)
	# LowerStore(6189:3).9: mov %"class.std::filesystem::__cxx11::path"* %rdi, (^7)
	movq %rdi, (%rbx)
	# LowerStore(6190:3).9: mov [2 x i8]* %rsi, (^8)
	movq %rsi, (%rax)
	# LowerStore(6191:3).9: mov i8 %dl, (^9)
	movb %dl, (%r8)
	# LowerLoad(6192:3).2: (^7) into %"class.std::filesystem::__cxx11::path"* ^13
	# Fixing source-to-dest movq (%rbx), -96(%rbp)
	movq (%rbx), %r15
	movq %r15, -96(%rbp)
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path"
	# LowerGetelementptr(6193:3): struct-type: %"class.std::filesystem::__cxx11::path"* ^13 -> ^14, indices=0,0
	movq -96(%rbp), %r14
	# LowerGetelementptr(6193:3): type of ^14 is %"class.std::__cxx11::basic_string"*
	# LowerLoad(6194:3).2: (^8) into [2 x i8]* ^15
	movq (%rax), %rbx
	# SetupCalls(6195:3): move argument [2 x i8]* nonnull dereferenceable(2) align 1 ^15
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt10filesystem7__cxx118__detail17__effective_rangeIA2_cEEDaRKT_
	# SetupCalls(6195:3): move 128-bit result from %rax and %rdx
	# Multireg move: <%hax %hdx> -> <%hbx %hr15>
	movq %rax, %rbx
	movq %rdx, %r15
	# LowerBasicConversion(6196:3): %"class.std::basic_string_view"* ^11 -> {i64, i8*}* ^17
	movq %r13, %rcx
	# tt = Pointer, type = {i64, i8*}
	# LowerGetelementptr(6197:3): struct-type: {i64, i8*}* ^17 -> ^18, indices=0,0
	movq %rcx, %rdx
	# LowerGetelementptr(6197:3): type of ^18 is i64*
	# LowerExtractvalue(6199:3)
	# PaddedStructs({i64, i8*} -> i64): move from pack ^16 ({i64, i8*}) to ^41 (opaque), index = 0
	movq %rbx, %rsi
	movq %rsi, %rax
	# LowerStore(6199:3).9: mov i64 ^19, (^18)
	movq %rax, (%rdx)
	# tt = Pointer, type = {i64, i8*}
	# LowerGetelementptr(6200:3): struct-type: {i64, i8*}* ^17 -> ^20, indices=0,1
	movq %rcx, %rax
	addq $8, %rax
	# LowerGetelementptr(6200:3): type of ^20 is i8**
	# LowerExtractvalue(6202:3)
	# PaddedStructs({i64, i8*} -> i8*): move from pack ^16 ({i64, i8*}) to ^42 (opaque), index = 1
	movq %r15, %rcx
	movq %rcx, %rbx
	# LowerStore(6202:3).9: mov i8* ^21, (^20)
	movq %rbx, (%rax)
	# LowerBasicConversion(6203:3): %"class.std::basic_string_view"* ^11 -> {i64, i8*}* ^22
	movq %r13, %rax
	# tt = Pointer, type = {i64, i8*}
	# LowerGetelementptr(6204:3): struct-type: {i64, i8*}* ^22 -> ^23, indices=0,0
	movq %rax, %rbx
	# LowerGetelementptr(6204:3): type of ^23 is i64*
	# LowerLoad(6205:3).2: (^23) into i64 ^24
	movq (%rbx), %rcx
	# tt = Pointer, type = {i64, i8*}
	# LowerGetelementptr(6206:3): struct-type: {i64, i8*}* ^22 -> ^25, indices=0,1
	movq %rax, %rbx
	addq $8, %rbx
	# LowerGetelementptr(6206:3): type of ^25 is i8**
	# LowerLoad(6207:3).2: (^25) into i8* ^26
	movq (%rbx), %rax
	# Clobber %rcx
	movq %rcx, -136(%rbp)
	# Clobber %rax
	movq %rax, -144(%rbp)
	# SetupCalls(6208:3): move argument i64 ^24
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(6208:3): move argument i8* ^26
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNSt10filesystem7__cxx114path10_S_convertISt17basic_string_viewIcSt11char_traitsIcEEEEDaT_
	# SetupCalls(6208:3): move 128-bit result from %rax and %rdx
	# Multireg move: <%hax %hdx> -> <%hbx %hr13>
	movq %rax, %rbx
	movq %rdx, %r13
	# Unclobber %rax
	movq -144(%rbp), %rax
	# Unclobber %rcx
	movq -136(%rbp), %rcx
	# LowerBasicConversion(6209:3): %"class.std::basic_string_view"* ^10 -> {i64, i8*}* ^28
	movq -120(%rbp), %rcx
	# tt = Pointer, type = {i64, i8*}
	# LowerGetelementptr(6210:3): struct-type: {i64, i8*}* ^28 -> ^29, indices=0,0
	movq %rcx, %rdx
	# LowerGetelementptr(6210:3): type of ^29 is i64*
	# LowerExtractvalue(6212:3)
	# PaddedStructs({i64, i8*} -> i64): move from pack ^27 ({i64, i8*}) to ^43 (opaque), index = 0
	movq %rbx, %rsi
	movq %rsi, %rax
	# LowerStore(6212:3).9: mov i64 ^30, (^29)
	movq %rax, (%rdx)
	# tt = Pointer, type = {i64, i8*}
	# LowerGetelementptr(6213:3): struct-type: {i64, i8*}* ^28 -> ^31, indices=0,1
	movq %rcx, %rax
	addq $8, %rax
	# LowerGetelementptr(6213:3): type of ^31 is i8**
	# LowerExtractvalue(6215:3)
	# PaddedStructs({i64, i8*} -> i8*): move from pack ^27 ({i64, i8*}) to ^44 (opaque), index = 1
	movq %r13, %rcx
	movq %rcx, %rbx
	# LowerStore(6215:3).9: mov i8* ^32, (^31)
	movq %rbx, (%rax)
	# LowerStore(6216:3).9: mov %"class.std::allocator.0"* ^12, (^6)
	# Fixing source-to-dest movq -112(%rbp), (%r12)
	movq -112(%rbp), %r15
	movq %r15, (%r12)
	# LowerLoad(6217:3).2: (^6) into %"class.std::allocator.0"* ^33
	movq (%r12), %rax
	# LowerBasicConversion(6218:3): %"class.std::allocator.0"* ^33 -> %"class.std::__new_allocator.1"* ^34
	movq %rax, %rbx
	# LowerStore(6219:3).9: mov %"class.std::__new_allocator.1"* ^34, (^4)
	movq -128(%rbp), %rax
	movq %rbx, (%rax)
	# LowerLoad(6220:3).2: (^4) into %"class.std::__new_allocator.1"* ^35
	movq -128(%rbp), %rbx
	movq (%rbx), %rax
	# SetupCalls(6221:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^14
	# Fixed movzx with identical source and destination widths
	movq %r14, %rdi
	# SetupCalls(6221:3): move argument %"class.std::basic_string_view"* nonnull dereferenceable(16) align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq -120(%rbp), %rsi
	# SetupCalls(6221:3): move argument %"class.std::allocator.0"* nonnull dereferenceable(1) align 1 ^12
	# Fixed movzx with identical source and destination widths
	movq -112(%rbp), %rdx
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ISt17basic_string_viewIcS2_EvEERKT_RKS3_
	# LowerStore(6222:3).9: mov %"class.std::allocator.0"* ^12, (^5)
	movq -104(%rbp), %rax
	# Fixing source-to-dest movq -112(%rbp), (%rax)
	movq -112(%rbp), %r15
	movq %r15, (%rax)
	# LowerLoad(6223:3).2: (^5) into %"class.std::allocator.0"* ^36
	movq -104(%rbp), %rbx
	movq (%rbx), %rax
	# LowerBasicConversion(6224:3): %"class.std::allocator.0"* ^36 -> %"class.std::__new_allocator.1"* ^37
	movq %rax, %rbx
	# SetupCalls(6225:3): move argument %"class.std::__new_allocator.1"* nonnull dereferenceable(1) align 1 ^37
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt15__new_allocatorIcED2Ev
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path"
	# LowerGetelementptr(6226:3): struct-type: %"class.std::filesystem::__cxx11::path"* ^13 -> ^38, indices=0,1
	movq -96(%rbp), %rax
	addq $32, %rax
	# LowerGetelementptr(6226:3): type of ^38 is %"struct.std::filesystem::__cxx11::path::_List"*
	# Clobber %rax
	movq %rax, -144(%rbp)
	# SetupCalls(6227:3): move argument %"struct.std::filesystem::__cxx11::path::_List"* nonnull dereferenceable(8) align 8 ^38
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt10filesystem7__cxx114path5_ListC1Ev@PLT
	# Unclobber %rax
	movq -144(%rbp), %rax
	# SetupCalls(6228:3): move argument %"class.std::filesystem::__cxx11::path"* nonnull dereferenceable(40) align 8 ^13
	# Fixed movzx with identical source and destination widths
	movq -96(%rbp), %rdi
	callq _ZNSt10filesystem7__cxx114path14_M_split_cmptsEv@PLT
	movq -152(%rbp), %r15
	movq -216(%rbp), %r14
	movq -192(%rbp), %r13
	movq -168(%rbp), %r12
	movq -176(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10filesystem7__cxx115beginENS0_18directory_iteratorE
.p2align 4, 0x90
_ZNSt10filesystem7__cxx115beginENS0_18directory_iteratorE:
	.___ZNSt10filesystem7__cxx115beginENS0_18directory_iteratorE__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	# LowerAlloca(1587:3): size = 8, type = i8**, var = ^3
	leaq -8(%rbp), %rbx
	# LowerBasicConversion(1588:3): %"class.std::filesystem::__cxx11::directory_iterator"* %rdi -> i8* ^4
	movq %rdi, %rax
	# LowerStore(1589:3).9: mov i8* ^4, (^3)
	movq %rax, (%rbx)
	# Clobber %rdi
	movq %rdi, -16(%rbp)
	# Clobber %rsi
	movq %rsi, -24(%rbp)
	# SetupCalls(1590:3): move argument %"class.std::filesystem::__cxx11::directory_iterator"* nonnull dereferenceable(16) align 8 %rdi
	# Semiunclobber live %rdi into %rdi
	movq -16(%rbp), %rdi
	# SetupCalls(1590:3): move argument %"class.std::filesystem::__cxx11::directory_iterator"* nonnull dereferenceable(16) align 8 %rsi
	# Semiunclobber live %rsi into %rsi
	movq -24(%rbp), %rsi
	callq _ZNSt10filesystem7__cxx1118directory_iteratorC2EOS1_
	# Unclobber %rsi
	movq -24(%rbp), %rsi
	# Unclobber %rdi
	movq -16(%rbp), %rdi
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardC2EPS4_
.p2align 4, 0x90
_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardC2EPS4_:
	.___ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardC2EPS4___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(4344:3): size = 8, type = %struct._Guard**, var = ^3
	leaq -8(%rbp), %rcx
	# LowerAlloca(4345:3): size = 8, type = %"class.std::__cxx11::basic_string"**, var = ^4
	leaq -16(%rbp), %rax
	# LowerStore(4346:3).9: mov %struct._Guard* %rdi, (^3)
	movq %rdi, (%rcx)
	# LowerStore(4347:3).9: mov %"class.std::__cxx11::basic_string"* %rsi, (^4)
	movq %rsi, (%rax)
	# LowerLoad(4348:3).2: (^3) into %struct._Guard* ^5
	movq (%rcx), %rbx
	# tt = Pointer, type = %struct._Guard
	# LowerGetelementptr(4349:3): struct-type: %struct._Guard* ^5 -> ^6, indices=0,0
	movq %rbx, %rcx
	# LowerGetelementptr(4349:3): type of ^6 is %"class.std::__cxx11::basic_string"**
	# LowerLoad(4350:3).2: (^4) into %"class.std::__cxx11::basic_string"* ^7
	movq (%rax), %rbx
	# LowerStore(4351:3).9: mov %"class.std::__cxx11::basic_string"* ^7, (^6)
	movq %rbx, (%rcx)
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EED2Ev
.p2align 4, 0x90
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EED2Ev:
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EED2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	movq %r12, -24(%rbp)
	# LowerAlloca(4706:3): size = 8, type = %"class.std::_Rb_tree"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(4707:3).9: mov %"class.std::_Rb_tree"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(4708:3).2: (^2) into %"class.std::_Rb_tree"* ^3
	movq (%rax), %r12
	# SetupCalls(4709:3): move argument %"class.std::_Rb_tree"* nonnull dereferenceable(48) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE8_M_beginEv
	# SetupCalls(4709:3): move %"struct.std::_Rb_tree_node"* result from %rax
	movq %rax, %rbx
	# SetupCalls(4710:3): move argument %"class.std::_Rb_tree"* nonnull dereferenceable(48) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(4710:3): move argument %"struct.std::_Rb_tree_node"* ^4
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE8_M_eraseEPSt13_Rb_tree_nodeISI_E
	# tt = Pointer, type = %"class.std::_Rb_tree"
	# LowerGetelementptr(4711:3): struct-type: %"class.std::_Rb_tree"* ^3 -> ^5, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(4711:3): type of ^5 is %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Rb_tree_impl"*
	# Clobber %rax
	movq %rax, -16(%rbp)
	# SetupCalls(4712:3): move argument %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Rb_tree_impl"* nonnull dereferenceable(48) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE13_Rb_tree_implISM_Lb1EED2Ev
	# Unclobber %rax
	movq -16(%rbp), %rax
	movq -24(%rbp), %r12
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0_
.p2align 4, 0x90
_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0_:
	.___ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(368 + 0, 16)
	subq $368, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -224(%rbp)
	movq %r12, -264(%rbp)
	movq %r13, -256(%rbp)
	movq %r14, -272(%rbp)
	movq %r15, -184(%rbp)
	# LowerAlloca(7618:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^3
	# Fixing source-to-dest leaq -8(%rbp), -144(%rbp)
	leaq -8(%rbp), %r15
	movq %r15, -144(%rbp)
	# LowerAlloca(7619:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^4
	# Fixing source-to-dest leaq -16(%rbp), -128(%rbp)
	leaq -16(%rbp), %r15
	movq %r15, -128(%rbp)
	# LowerAlloca(7620:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, var = ^5
	# Fixing source-to-dest leaq -17(%rbp), -104(%rbp)
	leaq -17(%rbp), %r15
	movq %r15, -104(%rbp)
	# LowerAlloca(7621:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^6
	# Fixing source-to-dest leaq -32(%rbp), -160(%rbp)
	leaq -32(%rbp), %r15
	movq %r15, -160(%rbp)
	# LowerAlloca(7622:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^7
	# Fixing source-to-dest leaq -40(%rbp), -152(%rbp)
	leaq -40(%rbp), %r15
	movq %r15, -152(%rbp)
	# LowerAlloca(7623:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, var = ^8
	leaq -41(%rbp), %rbx
	# LowerAlloca(7624:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^9
	# Fixing source-to-dest leaq -56(%rbp), -120(%rbp)
	leaq -56(%rbp), %r15
	movq %r15, -120(%rbp)
	# LowerAlloca(7625:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^10
	# Fixing source-to-dest leaq -64(%rbp), -112(%rbp)
	leaq -64(%rbp), %r15
	movq %r15, -112(%rbp)
	# LowerAlloca(7626:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, var = ^11
	# Fixing source-to-dest leaq -65(%rbp), -136(%rbp)
	leaq -65(%rbp), %r15
	movq %r15, -136(%rbp)
	# LowerAlloca(7627:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^12
	leaq -80(%rbp), %r13
	# LowerAlloca(7628:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^13
	leaq -88(%rbp), %r12
	# LowerAlloca(7629:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, var = ^14
	leaq -89(%rbp), %r14
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7630:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^3 -> ^15, indices=0,0
	movq -144(%rbp), %rax
	# LowerGetelementptr(7630:3): type of ^15 is %struct.LsItem**
	# LowerStore(7631:3).9: mov %struct.LsItem* %rdi, (^15)
	movq %rdi, (%rax)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7632:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^4 -> ^16, indices=0,0
	movq -128(%rbp), %rax
	# LowerGetelementptr(7632:3): type of ^16 is %struct.LsItem**
	# LowerStore(7633:3).9: mov %struct.LsItem* %rsi, (^16)
	movq %rsi, (%rax)
	# SetupCalls(7634:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -128(%rbp), %rdi
	# SetupCalls(7634:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq -144(%rbp), %rsi
	callq _ZN9__gnu_cxxmiIP6LsItemSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_
	# SetupCalls(7634:3): move i64 result from %rax
	movq %rax, %r15
	# LowerIcmp(7635:3): i64 ^17 vs. intlike 16
	cmpq $16, %r15
	setg %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M67
	jmp .___ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M317
	.___ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M67:
	# LowerBasicConversion(7639:3): %"class.__gnu_cxx::__normal_iterator"* ^6 -> i8* ^20
	movq -160(%rbp), %rax
	# LowerBasicConversion(7640:3): %"class.__gnu_cxx::__normal_iterator"* ^3 -> i8* ^21
	movq -144(%rbp), %rcx
	# Clobber %rcx
	movq %rcx, -168(%rbp)
	# Clobber %rax
	movq %rax, -176(%rbp)
	# SetupCalls(7641:3): move argument i8* align 8 ^20
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(7641:3): move argument i8* align 8 ^21
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(7641:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -176(%rbp), %rax
	# Unclobber %rcx
	movq -168(%rbp), %rcx
	# SetupCalls(7642:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq -144(%rbp), %rdi
	# SetupCalls(7642:3): move argument i64 16
	movq $16, %rsi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEplEl
	# SetupCalls(7642:3): move %struct.LsItem* result from %rax
	movq %rax, %r12
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7643:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^7 -> ^23, indices=0,0
	movq -152(%rbp), %rax
	# LowerGetelementptr(7643:3): type of ^23 is %struct.LsItem**
	# LowerStore(7644:3).9: mov %struct.LsItem* ^22, (^23)
	movq %r12, (%rax)
	# LowerBasicConversion(7645:3): %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* ^8 -> i8* ^24
	movq %rbx, %rax
	# LowerBasicConversion(7646:3): %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* ^5 -> i8* ^25
	movq -104(%rbp), %rbx
	# Clobber %rax
	movq %rax, -176(%rbp)
	# SetupCalls(7647:3): move argument i8* align 1 ^24
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(7647:3): move argument i8* align 1 ^25
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(7647:3): move argument i64 1
	movq $1, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -176(%rbp), %rax
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7648:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^6 -> ^26, indices=0,0
	movq -160(%rbp), %rax
	# LowerGetelementptr(7648:3): type of ^26 is %struct.LsItem**
	# LowerLoad(7649:3).2: (^26) into %struct.LsItem* ^27
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7650:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^7 -> ^28, indices=0,0
	movq -152(%rbp), %rax
	# LowerGetelementptr(7650:3): type of ^28 is %struct.LsItem**
	# LowerLoad(7651:3).2: (^28) into %struct.LsItem* ^29
	movq (%rax), %rcx
	# Clobber %rcx
	movq %rcx, -168(%rbp)
	# SetupCalls(7652:3): move argument %struct.LsItem* ^27
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(7652:3): move argument %struct.LsItem* ^29
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	callq _ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0_
	# Unclobber %rcx
	movq -168(%rbp), %rcx
	# SetupCalls(7653:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq -144(%rbp), %rdi
	# SetupCalls(7653:3): move argument i64 16
	movq $16, %rsi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEplEl
	# SetupCalls(7653:3): move %struct.LsItem* result from %rax
	movq %rax, %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7654:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^9 -> ^31, indices=0,0
	movq -120(%rbp), %rax
	# LowerGetelementptr(7654:3): type of ^31 is %struct.LsItem**
	# LowerStore(7655:3).9: mov %struct.LsItem* ^30, (^31)
	movq %rbx, (%rax)
	# LowerBasicConversion(7656:3): %"class.__gnu_cxx::__normal_iterator"* ^10 -> i8* ^32
	movq -112(%rbp), %rax
	# LowerBasicConversion(7657:3): %"class.__gnu_cxx::__normal_iterator"* ^4 -> i8* ^33
	movq -128(%rbp), %rbx
	# Clobber %rax
	movq %rax, -176(%rbp)
	# SetupCalls(7658:3): move argument i8* align 8 ^32
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(7658:3): move argument i8* align 8 ^33
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(7658:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -176(%rbp), %rax
	# LowerBasicConversion(7659:3): %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* ^11 -> i8* ^34
	movq -136(%rbp), %rax
	# LowerBasicConversion(7660:3): %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* ^5 -> i8* ^35
	movq -104(%rbp), %rbx
	# Clobber %rax
	movq %rax, -176(%rbp)
	# SetupCalls(7661:3): move argument i8* align 1 ^34
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(7661:3): move argument i8* align 1 ^35
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(7661:3): move argument i64 1
	movq $1, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -176(%rbp), %rax
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7662:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^9 -> ^36, indices=0,0
	movq -120(%rbp), %rax
	# LowerGetelementptr(7662:3): type of ^36 is %struct.LsItem**
	# LowerLoad(7663:3).2: (^36) into %struct.LsItem* ^37
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7664:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^10 -> ^38, indices=0,0
	movq -112(%rbp), %rax
	# LowerGetelementptr(7664:3): type of ^38 is %struct.LsItem**
	# LowerLoad(7665:3).2: (^38) into %struct.LsItem* ^39
	movq (%rax), %rcx
	# Clobber %rcx
	movq %rcx, -168(%rbp)
	# SetupCalls(7666:3): move argument %struct.LsItem* ^37
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(7666:3): move argument %struct.LsItem* ^39
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	callq _ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0_
	# Unclobber %rcx
	movq -168(%rbp), %rcx
	jmp .___ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M440
	.___ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M317:
	# LowerBasicConversion(7670:3): %"class.__gnu_cxx::__normal_iterator"* ^12 -> i8* ^41
	movq %r13, %rax
	# LowerBasicConversion(7671:3): %"class.__gnu_cxx::__normal_iterator"* ^3 -> i8* ^42
	movq -144(%rbp), %rbx
	# Clobber %rax
	movq %rax, -176(%rbp)
	# SetupCalls(7672:3): move argument i8* align 8 ^41
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(7672:3): move argument i8* align 8 ^42
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(7672:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -176(%rbp), %rax
	# LowerBasicConversion(7673:3): %"class.__gnu_cxx::__normal_iterator"* ^13 -> i8* ^43
	movq %r12, %rax
	# LowerBasicConversion(7674:3): %"class.__gnu_cxx::__normal_iterator"* ^4 -> i8* ^44
	movq -128(%rbp), %rbx
	# Clobber %rax
	movq %rax, -176(%rbp)
	# SetupCalls(7675:3): move argument i8* align 8 ^43
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(7675:3): move argument i8* align 8 ^44
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(7675:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -176(%rbp), %rax
	# LowerBasicConversion(7676:3): %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* ^14 -> i8* ^45
	movq %r14, %rbx
	# LowerBasicConversion(7677:3): %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* ^5 -> i8* ^46
	movq -104(%rbp), %rax
	# Clobber %rax
	movq %rax, -176(%rbp)
	# SetupCalls(7678:3): move argument i8* align 1 ^45
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(7678:3): move argument i8* align 1 ^46
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(7678:3): move argument i64 1
	movq $1, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -176(%rbp), %rax
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7679:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^12 -> ^47, indices=0,0
	movq %r13, %rax
	# LowerGetelementptr(7679:3): type of ^47 is %struct.LsItem**
	# LowerLoad(7680:3).2: (^47) into %struct.LsItem* ^48
	movq (%rax), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7681:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^13 -> ^49, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(7681:3): type of ^49 is %struct.LsItem**
	# LowerLoad(7682:3).2: (^49) into %struct.LsItem* ^50
	movq (%rax), %rbx
	# Clobber %rcx
	movq %rcx, -168(%rbp)
	# SetupCalls(7683:3): move argument %struct.LsItem* ^48
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(7683:3): move argument %struct.LsItem* ^50
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0_
	# Unclobber %rcx
	movq -168(%rbp), %rcx
	.___ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M440:
	movq -184(%rbp), %r15
	movq -272(%rbp), %r14
	movq -256(%rbp), %r13
	movq -264(%rbp), %r12
	movq -224(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt6vectorI6LsItemSaIS0_EEC2Ev
.p2align 4, 0x90
_ZNSt6vectorI6LsItemSaIS0_EEC2Ev:
	.___ZNSt6vectorI6LsItemSaIS0_EEC2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(1565:3): size = 8, type = %"class.std::vector.5"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(1566:3).9: mov %"class.std::vector.5"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(1567:3).2: (^2) into %"class.std::vector.5"* ^3
	movq (%rax), %rbx
	# LowerBasicConversion(1568:3): %"class.std::vector.5"* ^3 -> %"struct.std::_Vector_base.6"* ^4
	movq %rbx, %rax
	# Clobber %rax
	movq %rax, -16(%rbp)
	# SetupCalls(1569:3): move argument %"struct.std::_Vector_base.6"* nonnull dereferenceable(24) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt12_Vector_baseI6LsItemSaIS0_EEC2Ev
	# Unclobber %rax
	movq -16(%rbp), %rax
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaIS9_EEEESt4lessIS5_ESaISt4pairIKS5_SF_EEED2Ev
.p2align 4, 0x90
_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaIS9_EEEESt4lessIS5_ESaISt4pairIKS5_SF_EEED2Ev:
	.___ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaIS9_EEEESt4lessIS5_ESaISt4pairIKS5_SF_EEED2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(2793:3): size = 8, type = %"class.std::map"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(2794:3).9: mov %"class.std::map"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(2795:3).2: (^2) into %"class.std::map"* ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::map"
	# LowerGetelementptr(2796:3): struct-type: %"class.std::map"* ^3 -> ^4, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(2796:3): type of ^4 is %"class.std::_Rb_tree"*
	# Clobber %rax
	movq %rax, -16(%rbp)
	# SetupCalls(2797:3): move argument %"class.std::_Rb_tree"* nonnull dereferenceable(48) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EED2Ev
	# Unclobber %rax
	movq -16(%rbp), %rax
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10filesystem7__cxx11neERKNS0_18directory_iteratorES3_
.p2align 4, 0x90
_ZNSt10filesystem7__cxx11neERKNS0_18directory_iteratorES3_:
	.___ZNSt10filesystem7__cxx11neERKNS0_18directory_iteratorES3___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(48 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	# LowerAlloca(1631:3): size = 8, type = %"class.std::filesystem::__cxx11::directory_iterator"**, var = ^3
	leaq -8(%rbp), %rbx
	# LowerAlloca(1632:3): size = 8, type = %"class.std::filesystem::__cxx11::directory_iterator"**, var = ^4
	leaq -16(%rbp), %rax
	# LowerStore(1633:3).9: mov %"class.std::filesystem::__cxx11::directory_iterator"* %rdi, (^3)
	movq %rdi, (%rbx)
	# LowerStore(1634:3).9: mov %"class.std::filesystem::__cxx11::directory_iterator"* %rsi, (^4)
	movq %rsi, (%rax)
	# LowerLoad(1635:3).2: (^3) into %"class.std::filesystem::__cxx11::directory_iterator"* ^5
	movq (%rbx), %rcx
	# LowerLoad(1636:3).2: (^4) into %"class.std::filesystem::__cxx11::directory_iterator"* ^6
	movq (%rax), %rbx
	# Clobber %rcx
	movq %rcx, -24(%rbp)
	# SetupCalls(1637:3): move argument %"class.std::filesystem::__cxx11::directory_iterator"* nonnull dereferenceable(16) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(1637:3): move argument %"class.std::filesystem::__cxx11::directory_iterator"* nonnull dereferenceable(16) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZNSt10filesystem7__cxx11eqERKNS0_18directory_iteratorES3_
	# SetupCalls(1637:3): move i1 result from %rax
	movb %al, %bl
	# Unclobber %rcx
	movq -24(%rbp), %rcx
	# LowerLogic(1639:3): ^7, true into i1 ^8
	movb %bl, %al
	xorb $1, %al
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10filesystem7__cxx11lsIcSt11char_traitsIcEEERSt13basic_ostreamIT_T0_ES8_RKNS0_4pathE
.p2align 4, 0x90
_ZNSt10filesystem7__cxx11lsIcSt11char_traitsIcEEERSt13basic_ostreamIT_T0_ES8_RKNS0_4pathE:
	.___ZNSt10filesystem7__cxx11lsIcSt11char_traitsIcEEERSt13basic_ostreamIT_T0_ES8_RKNS0_4pathE__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(232 + 0, 16)
	subq $240, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -152(%rbp)
	movq %r12, -160(%rbp)
	movq %r13, -176(%rbp)
	movq %r14, -192(%rbp)
	movq %r15, -136(%rbp)
	# LowerAlloca(1527:3): size = 8, type = %"class.std::__new_allocator.1"**, var = ^3
	leaq -8(%rbp), %r8
	# LowerAlloca(1528:3): size = 8, type = %"class.std::allocator.0"**, var = ^4
	# Fixing source-to-dest leaq -16(%rbp), -112(%rbp)
	leaq -16(%rbp), %r15
	movq %r15, -112(%rbp)
	# LowerAlloca(1529:3): size = 8, type = %"class.std::allocator.0"**, var = ^5
	leaq -24(%rbp), %rdx
	# LowerAlloca(1530:3): size = 8, type = %"class.std::basic_ostream"**, var = ^6
	# Fixing source-to-dest leaq -32(%rbp), -104(%rbp)
	leaq -32(%rbp), %r15
	movq %r15, -104(%rbp)
	# LowerAlloca(1531:3): size = 8, type = %"class.std::filesystem::__cxx11::path"**, var = ^7
	leaq -40(%rbp), %rax
	# LowerAlloca(1532:3): size = 16, type = %"struct.std::__detail::_Quoted_string"*, var = ^8
	leaq -56(%rbp), %rbx
	# LowerAlloca(1533:3): size = 32, type = %"class.std::__cxx11::basic_string"*, var = ^9
	leaq -88(%rbp), %r12
	# LowerAlloca(1534:3): size = 1, type = %"class.std::allocator.0"*, var = ^10
	# Fixing source-to-dest leaq -89(%rbp), -120(%rbp)
	leaq -89(%rbp), %r15
	movq %r15, -120(%rbp)
	# LowerStore(1535:3).9: mov %"class.std::basic_ostream"* %rdi, (^6)
	movq -104(%rbp), %rcx
	movq %rdi, (%rcx)
	# LowerStore(1536:3).9: mov %"class.std::filesystem::__cxx11::path"* %rsi, (^7)
	movq %rsi, (%rax)
	# LowerLoad(1537:3).2: (^6) into %"class.std::basic_ostream"* ^11
	movq -104(%rbp), %rcx
	movq (%rcx), %r13
	# LowerLoad(1538:3).2: (^7) into %"class.std::filesystem::__cxx11::path"* ^12
	movq (%rax), %rcx
	# LowerStore(1539:3).9: mov %"class.std::allocator.0"* ^10, (^5)
	# Fixing source-to-dest movq -120(%rbp), (%rdx)
	movq -120(%rbp), %r15
	movq %r15, (%rdx)
	# LowerLoad(1540:3).2: (^5) into %"class.std::allocator.0"* ^13
	movq (%rdx), %rax
	# LowerBasicConversion(1541:3): %"class.std::allocator.0"* ^13 -> %"class.std::__new_allocator.1"* ^14
	movq %rax, %rdx
	# LowerStore(1542:3).9: mov %"class.std::__new_allocator.1"* ^14, (^3)
	movq %rdx, (%r8)
	# LowerLoad(1543:3).2: (^3) into %"class.std::__new_allocator.1"* ^15
	movq (%r8), %rax
	# Clobber %rcx
	movq %rcx, -128(%rbp)
	# SetupCalls(1544:3): move argument %"class.std::__cxx11::basic_string"* sret align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(1544:3): move argument %"class.std::filesystem::__cxx11::path"* nonnull dereferenceable(40) align 8 ^12
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(1544:3): move argument %"class.std::allocator.0"* nonnull dereferenceable(1) align 1 ^10
	# Fixed movzx with identical source and destination widths
	movq -120(%rbp), %rdx
	callq _ZNKSt10filesystem7__cxx114path6stringIcSt11char_traitsIcESaIcEEENSt7__cxx1112basic_stringIT_T0_T1_EERKSA_
	# Unclobber %rcx
	movq -128(%rbp), %rcx
	# SetupCalls(1545:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(1545:3): move argument i8 signext 34
	movq $34, %rsi
	movsbq %sil, %rsi
	# SetupCalls(1545:3): move argument i8 signext 92
	movq $92, %rdx
	movsbq %dl, %rdx
	callq _ZSt6quotedIcSt11char_traitsIcESaIcEEDaRKNSt7__cxx1112basic_stringIT_T0_T1_EES5_S5_
	# SetupCalls(1545:3): move 128-bit result from %rax and %rdx
	# Multireg move: <%hax %hdx> -> <%hr14 %hr15>
	movq %rax, %r14
	movq %rdx, %r15
	# LowerBasicConversion(1546:3): %"struct.std::__detail::_Quoted_string"* ^8 -> {%"class.std::__cxx11::basic_string"*, i64}* ^17
	movq %rbx, %rcx
	# tt = Pointer, type = {%"class.std::__cxx11::basic_string"*, i64}
	# LowerGetelementptr(1547:3): struct-type: {%"class.std::__cxx11::basic_string"*, i64}* ^17 -> ^18, indices=0,0
	movq %rcx, %rdx
	# LowerGetelementptr(1547:3): type of ^18 is %"class.std::__cxx11::basic_string"**
	# LowerExtractvalue(1549:3)
	# PaddedStructs({%"class.std::__cxx11::basic_string"*, i64} -> %"class.std::__cxx11::basic_string"*): move from pack ^16 ({%"class.std::__cxx11::basic_string"*, i64}) to ^27 (opaque), index = 0
	movq %r14, %rsi
	movq %rsi, %rax
	# LowerStore(1549:3).9: mov %"class.std::__cxx11::basic_string"* ^19, (^18)
	movq %rax, (%rdx)
	# tt = Pointer, type = {%"class.std::__cxx11::basic_string"*, i64}
	# LowerGetelementptr(1550:3): struct-type: {%"class.std::__cxx11::basic_string"*, i64}* ^17 -> ^20, indices=0,1
	movq %rcx, %rax
	addq $8, %rax
	# LowerGetelementptr(1550:3): type of ^20 is i64*
	# LowerExtractvalue(1552:3)
	# PaddedStructs({%"class.std::__cxx11::basic_string"*, i64} -> i64): move from pack ^16 ({%"class.std::__cxx11::basic_string"*, i64}) to ^28 (opaque), index = 1
	movq %r15, %rdx
	movq %rdx, %rcx
	# LowerStore(1552:3).9: mov i64 ^21, (^20)
	movq %rcx, (%rax)
	# SetupCalls(1553:3): move argument %"class.std::basic_ostream"* nonnull dereferenceable(8) align 8 ^11
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	# SetupCalls(1553:3): move argument %"struct.std::__detail::_Quoted_string"* nonnull dereferenceable(10) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZNSt8__detaillsIcSt11char_traitsIcERKNSt7__cxx1112basic_stringIcS2_SaIcEEEEERSt13basic_ostreamIT_T0_ESD_RKNS_14_Quoted_stringIT1_SA_EE
	# SetupCalls(1553:3): move %"class.std::basic_ostream"* result from %rax
	movq %rax, %rax
	# SetupCalls(1554:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
	# LowerStore(1555:3).9: mov %"class.std::allocator.0"* ^10, (^4)
	movq -112(%rbp), %rax
	# Fixing source-to-dest movq -120(%rbp), (%rax)
	movq -120(%rbp), %r15
	movq %r15, (%rax)
	# LowerLoad(1556:3).2: (^4) into %"class.std::allocator.0"* ^23
	movq -112(%rbp), %rbx
	movq (%rbx), %rax
	# LowerBasicConversion(1557:3): %"class.std::allocator.0"* ^23 -> %"class.std::__new_allocator.1"* ^24
	movq %rax, %rbx
	# SetupCalls(1558:3): move argument %"class.std::__new_allocator.1"* nonnull dereferenceable(1) align 1 ^24
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt15__new_allocatorIcED2Ev
	# LowerLoad(1559:3).2: (^6) into %"class.std::basic_ostream"* ^25
	movq -104(%rbp), %rbx
	movq (%rbx), %rax
	movq -136(%rbp), %r15
	movq -192(%rbp), %r14
	movq -176(%rbp), %r13
	movq -160(%rbp), %r12
	movq -152(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS8_ESaISF_EEEEEERS1_Lb1EEEOT_OT0_
.p2align 4, 0x90
_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS8_ESaISF_EEEEEERS1_Lb1EEEOT_OT0_:
	.___ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS8_ESaISF_EEEEEERS1_Lb1EEEOT_OT0___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(40 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	# LowerAlloca(10331:3): size = 8, type = %"struct.std::pair.21"**, var = ^4
	leaq -8(%rbp), %rax
	# LowerAlloca(10332:3): size = 8, type = %"struct.std::_Rb_tree_node"***, var = ^5
	leaq -16(%rbp), %r8
	# LowerAlloca(10333:3): size = 8, type = %"struct.std::_Rb_tree_node_base"***, var = ^6
	leaq -24(%rbp), %rcx
	# LowerStore(10334:3).9: mov %"struct.std::pair.21"* %rdi, (^4)
	movq %rdi, (%rax)
	# LowerStore(10335:3).9: mov %"struct.std::_Rb_tree_node"** %rsi, (^5)
	movq %rsi, (%r8)
	# LowerStore(10336:3).9: mov %"struct.std::_Rb_tree_node_base"** %rdx, (^6)
	movq %rdx, (%rcx)
	# LowerLoad(10337:3).2: (^4) into %"struct.std::pair.21"* ^7
	movq (%rax), %rbx
	# LowerBasicConversion(10338:3): %"struct.std::pair.21"* ^7 -> %"class.std::__pair_base.22"* ^8
	movq %rbx, %rax
	# tt = Pointer, type = %"struct.std::pair.21"
	# LowerGetelementptr(10339:3): struct-type: %"struct.std::pair.21"* ^7 -> ^9, indices=0,0
	movq %rbx, %rdx
	# LowerGetelementptr(10339:3): type of ^9 is %"struct.std::_Rb_tree_node_base"**
	# LowerLoad(10340:3).2: (^5) into %"struct.std::_Rb_tree_node"** ^10
	movq (%r8), %rax
	# LowerLoad(10341:3).2: (^10) into %"struct.std::_Rb_tree_node"* ^11
	movq (%rax), %rsi
	# LowerBasicConversion(10342:3): %"struct.std::_Rb_tree_node"* ^11 -> %"struct.std::_Rb_tree_node_base"* ^12
	movq %rsi, %rax
	# LowerStore(10343:3).9: mov %"struct.std::_Rb_tree_node_base"* ^12, (^9)
	movq %rax, (%rdx)
	# tt = Pointer, type = %"struct.std::pair.21"
	# LowerGetelementptr(10344:3): struct-type: %"struct.std::pair.21"* ^7 -> ^13, indices=0,1
	movq %rbx, %rax
	addq $8, %rax
	# LowerGetelementptr(10344:3): type of ^13 is %"struct.std::_Rb_tree_node_base"**
	# LowerLoad(10345:3).2: (^6) into %"struct.std::_Rb_tree_node_base"** ^14
	movq (%rcx), %rbx
	# LowerLoad(10346:3).2: (^14) into %"struct.std::_Rb_tree_node_base"* ^15
	movq (%rbx), %rcx
	# LowerStore(10347:3).9: mov %"struct.std::_Rb_tree_node_base"* ^15, (^13)
	movq %rcx, (%rax)
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZN9__gnu_cxxeqIP6LsItemSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_
.p2align 4, 0x90
_ZN9__gnu_cxxeqIP6LsItemSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_:
	.___ZN9__gnu_cxxeqIP6LsItemSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(56 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	movq %r12, -48(%rbp)
	movq %r13, -40(%rbp)
	# LowerAlloca(8979:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"**, var = ^3
	leaq -8(%rbp), %rcx
	# LowerAlloca(8980:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"**, var = ^4
	leaq -16(%rbp), %rbx
	# LowerStore(8981:3).9: mov %"class.__gnu_cxx::__normal_iterator"* %rdi, (^3)
	movq %rdi, (%rcx)
	# LowerStore(8982:3).9: mov %"class.__gnu_cxx::__normal_iterator"* %rsi, (^4)
	movq %rsi, (%rbx)
	# LowerLoad(8983:3).2: (^3) into %"class.__gnu_cxx::__normal_iterator"* ^5
	movq (%rcx), %rax
	# Clobber %rax
	movq %rax, -24(%rbp)
	# SetupCalls(8984:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEE4baseEv
	# SetupCalls(8984:3): move %struct.LsItem** result from %rax
	movq %rax, %r13
	# Unclobber %rax
	movq -24(%rbp), %rax
	# LowerLoad(8985:3).2: (^6) into %struct.LsItem* ^7
	movq (%r13), %r12
	# LowerLoad(8986:3).2: (^4) into %"class.__gnu_cxx::__normal_iterator"* ^8
	movq (%rbx), %rax
	# Clobber %rax
	movq %rax, -24(%rbp)
	# SetupCalls(8987:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEE4baseEv
	# SetupCalls(8987:3): move %struct.LsItem** result from %rax
	movq %rax, %rbx
	# Unclobber %rax
	movq -24(%rbp), %rax
	# LowerLoad(8988:3).2: (^9) into %struct.LsItem* ^10
	movq (%rbx), %rax
	# LowerIcmp(8989:3): %struct.LsItem* ^7 vs. operand %struct.LsItem* ^10
	cmpq %rax, %r12
	sete %al
	andq $1, %rax
	movq -40(%rbp), %r13
	movq -48(%rbp), %r12
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10filesystem7__cxx114pathaSIA2_cEERNSt9enable_ifIX13__is_path_srcIT_EES1_E4typeERKS5_
.p2align 4, 0x90
_ZNSt10filesystem7__cxx114pathaSIA2_cEERNSt9enable_ifIX13__is_path_srcIT_EES1_E4typeERKS5_:
	.___ZNSt10filesystem7__cxx114pathaSIA2_cEERNSt9enable_ifIX13__is_path_srcIT_EES1_E4typeERKS5___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(96 + 0, 16)
	subq $96, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -64(%rbp)
	movq %r12, -80(%rbp)
	movq %r13, -72(%rbp)
	# LowerAlloca(1459:3): size = 8, type = %"class.std::filesystem::__cxx11::path"**, var = ^3
	leaq -8(%rbp), %rbx
	# LowerAlloca(1460:3): size = 8, type = [2 x i8]**, var = ^4
	leaq -16(%rbp), %rax
	# LowerAlloca(1461:3): size = 40, type = %"class.std::filesystem::__cxx11::path"*, var = ^5
	leaq -56(%rbp), %r13
	# LowerStore(1462:3).9: mov %"class.std::filesystem::__cxx11::path"* %rdi, (^3)
	movq %rdi, (%rbx)
	# LowerStore(1463:3).9: mov [2 x i8]* %rsi, (^4)
	movq %rsi, (%rax)
	# LowerLoad(1464:3).2: (^3) into %"class.std::filesystem::__cxx11::path"* ^6
	movq (%rbx), %r12
	# LowerLoad(1465:3).2: (^4) into [2 x i8]* ^7
	movq (%rax), %rbx
	# SetupCalls(1466:3): move argument %"class.std::filesystem::__cxx11::path"* nonnull dereferenceable(40) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	# SetupCalls(1466:3): move argument [2 x i8]* nonnull dereferenceable(2) align 1 ^7
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(1466:3): move argument i8 zeroext 2
	movq $2, %rdx
	andq $255, %rdx
	callq _ZNSt10filesystem7__cxx114pathC2IA2_cS1_EERKT_NS1_6formatE
	# SetupCalls(1467:3): move argument %"class.std::filesystem::__cxx11::path"* nonnull dereferenceable(40) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(1467:3): move argument %"class.std::filesystem::__cxx11::path"* nonnull dereferenceable(40) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r13, %rsi
	callq _ZNSt10filesystem7__cxx114pathaSEOS1_
	# SetupCalls(1467:3): move %"class.std::filesystem::__cxx11::path"* result from %rax
	movq %rax, %rbx
	# SetupCalls(1468:3): move argument %"class.std::filesystem::__cxx11::path"* nonnull dereferenceable(40) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	callq _ZNSt10filesystem7__cxx114pathD2Ev
	movq %rbx, %rax
	movq -72(%rbp), %r13
	movq -80(%rbp), %r12
	movq -64(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt15__new_allocatorI6LsItemE10deallocateEPS0_m
.p2align 4, 0x90
_ZNSt15__new_allocatorI6LsItemE10deallocateEPS0_m:
	.___ZNSt15__new_allocatorI6LsItemE10deallocateEPS0_m__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(48 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	# LowerAlloca(6825:3): size = 8, type = %"class.std::__new_allocator.8"**, var = ^4
	leaq -8(%rbp), %rax
	# LowerAlloca(6826:3): size = 8, type = %struct.LsItem**, var = ^5
	leaq -16(%rbp), %rcx
	# LowerAlloca(6827:3): size = 8, type = i64*, var = ^6
	leaq -24(%rbp), %rbx
	# LowerStore(6828:3).9: mov %"class.std::__new_allocator.8"* %rdi, (^4)
	movq %rdi, (%rax)
	# LowerStore(6829:3).9: mov %struct.LsItem* %rsi, (^5)
	movq %rsi, (%rcx)
	# LowerStore(6830:3).9: mov i64 %rdx, (^6)
	movq %rdx, (%rbx)
	# LowerLoad(6831:3).2: (^4) into %"class.std::__new_allocator.8"* ^7
	movq (%rax), %rbx
	# LowerLoad(6832:3).2: (^5) into %struct.LsItem* ^8
	movq (%rcx), %rax
	# LowerBasicConversion(6833:3): %struct.LsItem* ^8 -> i8* ^9
	movq %rax, %rbx
	# SetupCalls(6834:3): move argument i8* ^9
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZdlPv@PLT
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt11_Tuple_implILm0EJPNSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEEE7_M_headERS7_
.p2align 4, 0x90
_ZNSt11_Tuple_implILm0EJPNSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEEE7_M_headERS7_:
	.___ZNSt11_Tuple_implILm0EJPNSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEEE7_M_headERS7___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(4108:3): size = 8, type = %"struct.std::_Tuple_impl"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(4109:3).9: mov %"struct.std::_Tuple_impl"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(4110:3).2: (^2) into %"struct.std::_Tuple_impl"* ^3
	movq (%rax), %rbx
	# LowerBasicConversion(4111:3): %"struct.std::_Tuple_impl"* ^3 -> %"struct.std::_Head_base.4"* ^4
	movq %rbx, %rax
	# Clobber %rax
	movq %rax, -16(%rbp)
	# SetupCalls(4112:3): move argument %"struct.std::_Head_base.4"* nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt10_Head_baseILm0EPNSt10filesystem7__cxx114path5_List5_ImplELb0EE7_M_headERS6_
	# SetupCalls(4112:3): move %"struct.std::filesystem::__cxx11::path::_List::_Impl"** result from %rax
	movq %rax, %rbx
	# Unclobber %rax
	movq -16(%rbp), %rax
	movq %rbx, %rax
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10filesystem7__cxx113endENS0_18directory_iteratorE
.p2align 4, 0x90
_ZNSt10filesystem7__cxx113endENS0_18directory_iteratorE:
	.___ZNSt10filesystem7__cxx113endENS0_18directory_iteratorE__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	# LowerAlloca(1620:3): size = 8, type = i8**, var = ^3
	leaq -8(%rbp), %rbx
	# LowerBasicConversion(1621:3): %"class.std::filesystem::__cxx11::directory_iterator"* %rdi -> i8* ^4
	movq %rdi, %rax
	# LowerStore(1622:3).9: mov i8* ^4, (^3)
	movq %rax, (%rbx)
	# LowerBasicConversion(1623:3): %"class.std::filesystem::__cxx11::directory_iterator"* %rdi -> i8* ^5
	movq %rdi, %rax
	# Clobber %rdi
	movq %rdi, -16(%rbp)
	# Clobber %rax
	movq %rax, -24(%rbp)
	# SetupCalls(1624:3): move argument i8* align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(1624:3): move argument i32 0
	movq $0, %rsi
	# SetupCalls(1624:3): move argument i64 16
	movq $16, %rdx
	callq memset@PLT
	# Unclobber %rax
	movq -24(%rbp), %rax
	# Unclobber %rdi
	movq -16(%rbp), %rdi
	# Clobber %rdi
	movq %rdi, -16(%rbp)
	# SetupCalls(1625:3): move argument %"class.std::filesystem::__cxx11::directory_iterator"* nonnull dereferenceable(16) align 8 %rdi
	# Semiunclobber live %rdi into %rdi
	movq -16(%rbp), %rdi
	callq _ZNSt10filesystem7__cxx1118directory_iteratorC2Ev
	# Unclobber %rdi
	movq -16(%rbp), %rdi
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10filesystem6existsENS_11file_statusE
.p2align 4, 0x90
_ZNSt10filesystem6existsENS_11file_statusE:
	.___ZNSt10filesystem6existsENS_11file_statusE__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(80 + 0, 16)
	subq $80, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -48(%rbp)
	movq %r12, -32(%rbp)
	movq %r13, -40(%rbp)
	movq %r14, -72(%rbp)
	# LowerAlloca(3138:3): size = 8, type = %"class.std::filesystem::file_status"*, var = ^2
	leaq -8(%rbp), %r12
	# LowerAlloca(3139:3): size = 8, type = %"class.std::filesystem::file_status"*, var = ^3
	leaq -16(%rbp), %r13
	# LowerBasicConversion(3140:3): %"class.std::filesystem::file_status"* ^2 -> i64* ^4
	movq %r12, %rax
	# LowerStore(3141:3).9: mov i64 %rdi, (^4)
	movq %rdi, (%rax)
	# LowerBasicConversion(3142:3): %"class.std::filesystem::file_status"* ^3 -> i8* ^5
	movq %r13, %rbx
	# LowerBasicConversion(3143:3): %"class.std::filesystem::file_status"* ^2 -> i8* ^6
	movq %r12, %rax
	# Clobber %rax
	movq %rax, -24(%rbp)
	# SetupCalls(3144:3): move argument i8* align 4 ^5
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(3144:3): move argument i8* align 4 ^6
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(3144:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -24(%rbp), %rax
	# LowerBasicConversion(3145:3): %"class.std::filesystem::file_status"* ^3 -> i64* ^7
	movq %r13, %rbx
	# LowerLoad(3146:3).2: (^7) into i64 ^8
	movq (%rbx), %rax
	# Clobber %rax
	movq %rax, -24(%rbp)
	# SetupCalls(3147:3): move argument i64 ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt10filesystem12status_knownENS_11file_statusE
	# SetupCalls(3147:3): move i1 result from %rax
	movb %al, %bl
	# Unclobber %rax
	movq -24(%rbp), %rax
	cmpb $0, %bl
	jne .___ZNSt10filesystem6existsENS_11file_statusE__M68
	.___ZNSt10filesystem6existsENS_11file_statusE__M65:
	# MovePhi: intlike -> ^14 (in new block 15 whose parent is 1)
	movb $0, %r14b
	jmp .___ZNSt10filesystem6existsENS_11file_statusE__M98
	.___ZNSt10filesystem6existsENS_11file_statusE__M68:
	# SetupCalls(3151:3): move argument %"class.std::filesystem::file_status"* nonnull dereferenceable(8) align 4 ^2
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	callq _ZNKSt10filesystem11file_status4typeEv
	# SetupCalls(3151:3): move i8 result from %rax
	movb %al, %bl
	# LowerIcmp(3152:3): i8 ^11 vs. intlike -1
	cmpb $-1, %bl
	setne %al
	andq $1, %rax
	# MovePhi: ^12 -> ^14
	movb %al, %r14b
	.___ZNSt10filesystem6existsENS_11file_statusE__M98:
	movb %r14b, %al
	movq -72(%rbp), %r14
	movq -40(%rbp), %r13
	movq -32(%rbp), %r12
	movq -48(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_T2_
.p2align 4, 0x90
_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_T2_:
	.___ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_T2___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(608 + 0, 16)
	subq $608, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -352(%rbp)
	movq %r12, -408(%rbp)
	movq %r13, -344(%rbp)
	movq %r14, -360(%rbp)
	movq %r15, -288(%rbp)
	# LowerAlloca(8128:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^5
	# Fixing source-to-dest leaq -8(%rbp), -200(%rbp)
	leaq -8(%rbp), %r15
	movq %r15, -200(%rbp)
	# LowerAlloca(8129:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, var = ^6
	# Fixing source-to-dest leaq -9(%rbp), -208(%rbp)
	leaq -9(%rbp), %r15
	movq %r15, -208(%rbp)
	# LowerAlloca(8130:3): size = 8, type = i64*, var = ^7
	# Fixing source-to-dest leaq -24(%rbp), -184(%rbp)
	leaq -24(%rbp), %r15
	movq %r15, -184(%rbp)
	# LowerAlloca(8131:3): size = 8, type = i64*, var = ^8
	# Fixing source-to-dest leaq -32(%rbp), -240(%rbp)
	leaq -32(%rbp), %r15
	movq %r15, -240(%rbp)
	# LowerAlloca(8132:3): size = 8, type = i64*, var = ^9
	# Fixing source-to-dest leaq -40(%rbp), -192(%rbp)
	leaq -40(%rbp), %r15
	movq %r15, -192(%rbp)
	# LowerAlloca(8133:3): size = 8, type = i64*, var = ^10
	# Fixing source-to-dest leaq -48(%rbp), -216(%rbp)
	leaq -48(%rbp), %r15
	movq %r15, -216(%rbp)
	# LowerAlloca(8134:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^11
	# Fixing source-to-dest leaq -56(%rbp), -248(%rbp)
	leaq -56(%rbp), %r15
	movq %r15, -248(%rbp)
	# LowerAlloca(8135:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^12
	leaq -64(%rbp), %r13
	# LowerAlloca(8136:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^13
	leaq -72(%rbp), %rbx
	# LowerAlloca(8137:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^14
	leaq -80(%rbp), %r14
	# LowerAlloca(8138:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^15
	# Fixing source-to-dest leaq -88(%rbp), -232(%rbp)
	leaq -88(%rbp), %r15
	movq %r15, -232(%rbp)
	# LowerAlloca(8139:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^16
	# Fixing source-to-dest leaq -96(%rbp), -224(%rbp)
	leaq -96(%rbp), %r15
	movq %r15, -224(%rbp)
	# LowerAlloca(8140:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Iter_comp_val"*, var = ^17
	# Fixing source-to-dest leaq -97(%rbp), -168(%rbp)
	leaq -97(%rbp), %r15
	movq %r15, -168(%rbp)
	# LowerAlloca(8141:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^18
	# Fixing source-to-dest leaq -112(%rbp), -176(%rbp)
	leaq -112(%rbp), %r15
	movq %r15, -176(%rbp)
	# LowerAlloca(8142:3): size = 40, type = %struct.LsItem*, var = ^19
	# Fixing source-to-dest leaq -152(%rbp), -160(%rbp)
	leaq -152(%rbp), %r15
	movq %r15, -160(%rbp)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8143:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^5 -> ^20, indices=0,0
	movq -200(%rbp), %rax
	# LowerGetelementptr(8143:3): type of ^20 is %struct.LsItem**
	# LowerStore(8144:3).9: mov %struct.LsItem* %rdi, (^20)
	movq %rdi, (%rax)
	# LowerStore(8145:3).9: mov i64 %rsi, (^7)
	movq -184(%rbp), %rax
	movq %rsi, (%rax)
	# LowerStore(8146:3).9: mov i64 %rdx, (^8)
	movq -240(%rbp), %rax
	movq %rdx, (%rax)
	# LowerLoad(8147:3).2: (^7) into i64 ^21
	movq -184(%rbp), %rdx
	movq (%rdx), %rax
	# LowerStore(8148:3).9: mov i64 ^21, (^9)
	movq -192(%rbp), %rdx
	movq %rax, (%rdx)
	# LowerLoad(8149:3).2: (^7) into i64 ^22
	movq -184(%rbp), %rdx
	movq (%rdx), %rax
	# LowerStore(8150:3).9: mov i64 ^22, (^10)
	movq -216(%rbp), %rdx
	movq %rax, (%rdx)
	.___ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_T2___M50:
	# LowerLoad(8154:3).2: (^10) into i64 ^24
	movq -216(%rbp), %rax
	movq (%rax), %rdx
	# LowerLoad(8155:3).2: (^8) into i64 ^25
	movq -240(%rbp), %rax
	movq (%rax), %rsi
	# LowerMath(8156:3): ^25, 1 into i64 ^26
	movq %rsi, %rax
	subq $1, %rax
	# LowerSdiv(8157:3): ^26, 2 into i64 ^27
	movq %rax, %rsi
	sarq $1, %rsi
	# LowerIcmp(8158:3): i64 ^24 vs. operand i64 ^27
	cmpq %rsi, %rdx
	setl %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_T2___M65
	jmp .___ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_T2___M340
	.___ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_T2___M65:
	# LowerLoad(8162:3).2: (^10) into i64 ^30
	movq -216(%rbp), %rdx
	movq (%rdx), %rax
	# LowerMath(8163:3): ^30, 1 into i64 ^31
	movq %rax, %rsi
	addq $1, %rsi
	# LowerMath(8164:3): 2, ^31 into i64 ^32
	movq $2, %rax
	mulq %rsi
	movq %rax, %rsi
	# LowerStore(8165:3).9: mov i64 ^32, (^10)
	movq -216(%rbp), %rax
	movq %rsi, (%rax)
	# LowerLoad(8166:3).2: (^10) into i64 ^33
	movq -216(%rbp), %rdx
	movq (%rdx), %rax
	# Clobber %rcx
	movq %rcx, -256(%rbp)
	# Clobber %rax
	movq %rax, -264(%rbp)
	# SetupCalls(8167:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq -200(%rbp), %rdi
	# SetupCalls(8167:3): move argument i64 ^33
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEplEl
	# SetupCalls(8167:3): move %struct.LsItem* result from %rax
	movq %rax, %r12
	# Unclobber %rax
	movq -264(%rbp), %rax
	# Unclobber %rcx
	movq -256(%rbp), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8168:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^11 -> ^35, indices=0,0
	movq -248(%rbp), %rax
	# LowerGetelementptr(8168:3): type of ^35 is %struct.LsItem**
	# LowerStore(8169:3).9: mov %struct.LsItem* ^34, (^35)
	movq %r12, (%rax)
	# LowerLoad(8170:3).2: (^10) into i64 ^36
	movq -216(%rbp), %rdx
	movq (%rdx), %rax
	# LowerMath(8171:3): ^36, 1 into i64 ^37
	movq %rax, %rdx
	subq $1, %rdx
	# Clobber %rdx
	movq %rdx, -272(%rbp)
	# Clobber %rcx
	movq %rcx, -256(%rbp)
	# SetupCalls(8172:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq -200(%rbp), %rdi
	# SetupCalls(8172:3): move argument i64 ^37
	# Fixed movzx with identical source and destination widths
	movq %rdx, %rsi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEplEl
	# SetupCalls(8172:3): move %struct.LsItem* result from %rax
	movq %rax, %r12
	# Unclobber %rcx
	movq -256(%rbp), %rcx
	# Unclobber %rdx
	movq -272(%rbp), %rdx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8173:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^12 -> ^39, indices=0,0
	movq %r13, %rax
	# LowerGetelementptr(8173:3): type of ^39 is %struct.LsItem**
	# LowerStore(8174:3).9: mov %struct.LsItem* ^38, (^39)
	movq %r12, (%rax)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8175:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^11 -> ^40, indices=0,0
	movq -248(%rbp), %rax
	# LowerGetelementptr(8175:3): type of ^40 is %struct.LsItem**
	# LowerLoad(8176:3).2: (^40) into %struct.LsItem* ^41
	movq (%rax), %rdx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8177:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^12 -> ^42, indices=0,0
	movq %r13, %rax
	# LowerGetelementptr(8177:3): type of ^42 is %struct.LsItem**
	# LowerLoad(8178:3).2: (^42) into %struct.LsItem* ^43
	movq (%rax), %r8
	# Clobber %rdx
	movq %rdx, -272(%rbp)
	# Clobber %rcx
	movq %rcx, -256(%rbp)
	# Clobber %r8
	movq %r8, -280(%rbp)
	# SetupCalls(8179:3): move argument %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* nonnull dereferenceable(1) align 1 ^6
	# Fixed movzx with identical source and destination widths
	movq -208(%rbp), %rdi
	# SetupCalls(8179:3): move argument %struct.LsItem* ^41
	# Fixed movzx with identical source and destination widths
	movq %rdx, %rsi
	# SetupCalls(8179:3): move argument %struct.LsItem* ^43
	# Fixed movzx with identical source and destination widths
	movq %r8, %rdx
	callq _ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EclINS_17__normal_iteratorIP6LsItemS2_ISF_SaISF_EEEESJ_EEbT_T0_
	# SetupCalls(8179:3): move i1 result from %rax
	movb %al, %r12b
	# Unclobber %r8
	movq -280(%rbp), %r8
	# Unclobber %rcx
	movq -256(%rbp), %rcx
	# Unclobber %rdx
	movq -272(%rbp), %rdx
	cmpb $0, %r12b
	jne .___ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_T2___M190
	jmp .___ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_T2___M198
	.___ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_T2___M190:
	# LowerLoad(8183:3).2: (^10) into i64 ^46
	movq -216(%rbp), %rdx
	movq (%rdx), %rax
	# LowerMath(8184:3): ^46, -1 into i64 ^47
	movq %rax, %rdx
	addq $-1, %rdx
	# LowerStore(8185:3).9: mov i64 ^47, (^10)
	movq -216(%rbp), %rax
	movq %rdx, (%rax)
	.___ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_T2___M198:
	# LowerLoad(8189:3).2: (^10) into i64 ^49
	movq -216(%rbp), %rdx
	movq (%rdx), %rax
	# Clobber %rcx
	movq %rcx, -256(%rbp)
	# Clobber %rax
	movq %rax, -264(%rbp)
	# SetupCalls(8190:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq -200(%rbp), %rdi
	# SetupCalls(8190:3): move argument i64 ^49
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEplEl
	# SetupCalls(8190:3): move %struct.LsItem* result from %rax
	movq %rax, %r12
	# Unclobber %rax
	movq -264(%rbp), %rax
	# Unclobber %rcx
	movq -256(%rbp), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8191:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^13 -> ^51, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(8191:3): type of ^51 is %struct.LsItem**
	# LowerStore(8192:3).9: mov %struct.LsItem* ^50, (^51)
	movq %r12, (%rax)
	# Clobber %rcx
	movq %rcx, -256(%rbp)
	# SetupCalls(8193:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^13
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEdeEv
	# SetupCalls(8193:3): move %struct.LsItem* result from %rax
	movq %rax, %r15
	# Unclobber %rcx
	movq -256(%rbp), %rcx
	# LowerLoad(8194:3).2: (^7) into i64 ^53
	movq -184(%rbp), %rax
	movq (%rax), %rdx
	# Clobber %rdx
	movq %rdx, -272(%rbp)
	# Clobber %rcx
	movq %rcx, -256(%rbp)
	# SetupCalls(8195:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq -200(%rbp), %rdi
	# SetupCalls(8195:3): move argument i64 ^53
	# Fixed movzx with identical source and destination widths
	movq %rdx, %rsi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEplEl
	# SetupCalls(8195:3): move %struct.LsItem* result from %rax
	movq %rax, %r12
	# Unclobber %rcx
	movq -256(%rbp), %rcx
	# Unclobber %rdx
	movq -272(%rbp), %rdx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8196:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^14 -> ^55, indices=0,0
	movq %r14, %rax
	# LowerGetelementptr(8196:3): type of ^55 is %struct.LsItem**
	# LowerStore(8197:3).9: mov %struct.LsItem* ^54, (^55)
	movq %r12, (%rax)
	# Clobber %rcx
	movq %rcx, -256(%rbp)
	# SetupCalls(8198:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^14
	# Fixed movzx with identical source and destination widths
	movq %r14, %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEdeEv
	# SetupCalls(8198:3): move %struct.LsItem* result from %rax
	movq %rax, %r12
	# Unclobber %rcx
	movq -256(%rbp), %rcx
	# Clobber %rcx
	movq %rcx, -256(%rbp)
	# SetupCalls(8199:3): move argument %struct.LsItem* nonnull dereferenceable(33) align 8 ^56
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(8199:3): move argument %struct.LsItem* nonnull dereferenceable(33) align 8 ^52
	# Fixed movzx with identical source and destination widths
	movq %r15, %rsi
	callq _ZN6LsItemaSEOS_
	# SetupCalls(8199:3): move %struct.LsItem* result from %rax
	movq %rax, %rax
	# Unclobber %rcx
	movq -256(%rbp), %rcx
	# LowerLoad(8200:3).2: (^10) into i64 ^58
	movq -216(%rbp), %rax
	movq (%rax), %rdx
	# LowerStore(8201:3).9: mov i64 ^58, (^7)
	movq -184(%rbp), %rax
	movq %rdx, (%rax)
	jmp .___ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_T2___M50
	.___ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_T2___M340:
	# LowerLoad(8205:3).2: (^8) into i64 ^60
	movq -240(%rbp), %rbx
	movq (%rbx), %rax
	# LowerLogic(8207:3): ^60, 1 into i64 ^61
	movq %rax, %rbx
	andq $1, %rbx
	# LowerIcmp(8207:3): i64 ^61 vs. intlike 0
	cmpq $0, %rbx
	sete %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_T2___M350
	jmp .___ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_T2___M529
	.___ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_T2___M350:
	# LowerLoad(8211:3).2: (^10) into i64 ^64
	movq -216(%rbp), %rbx
	movq (%rbx), %rax
	# LowerLoad(8212:3).2: (^8) into i64 ^65
	movq -240(%rbp), %rdx
	movq (%rdx), %rbx
	# LowerMath(8213:3): ^65, 2 into i64 ^66
	movq %rbx, %rdx
	subq $2, %rdx
	# LowerSdiv(8214:3): ^66, 2 into i64 ^67
	movq %rdx, %rbx
	sarq $1, %rbx
	# LowerIcmp(8215:3): i64 ^64 vs. operand i64 ^67
	cmpq %rbx, %rax
	sete %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_T2___M365
	jmp .___ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_T2___M529
	.___ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_T2___M365:
	# LowerLoad(8219:3).2: (^10) into i64 ^70
	movq -216(%rbp), %rbx
	movq (%rbx), %rax
	# LowerMath(8220:3): ^70, 1 into i64 ^71
	movq %rax, %rbx
	addq $1, %rbx
	# LowerMath(8221:3): 2, ^71 into i64 ^72
	movq $2, %rax
	mulq %rbx
	movq %rax, %rbx
	# LowerStore(8222:3).9: mov i64 ^72, (^10)
	movq -216(%rbp), %rax
	movq %rbx, (%rax)
	# LowerLoad(8223:3).2: (^10) into i64 ^73
	movq -216(%rbp), %rbx
	movq (%rbx), %rax
	# LowerMath(8224:3): ^73, 1 into i64 ^74
	movq %rax, %rbx
	subq $1, %rbx
	# Clobber %rcx
	movq %rcx, -256(%rbp)
	# SetupCalls(8225:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq -200(%rbp), %rdi
	# SetupCalls(8225:3): move argument i64 ^74
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEplEl
	# SetupCalls(8225:3): move %struct.LsItem* result from %rax
	movq %rax, %rbx
	# Unclobber %rcx
	movq -256(%rbp), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8226:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^15 -> ^76, indices=0,0
	movq -232(%rbp), %rax
	# LowerGetelementptr(8226:3): type of ^76 is %struct.LsItem**
	# LowerStore(8227:3).9: mov %struct.LsItem* ^75, (^76)
	movq %rbx, (%rax)
	# Clobber %rcx
	movq %rcx, -256(%rbp)
	# SetupCalls(8228:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^15
	# Fixed movzx with identical source and destination widths
	movq -232(%rbp), %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEdeEv
	# SetupCalls(8228:3): move %struct.LsItem* result from %rax
	movq %rax, %rbx
	# Unclobber %rcx
	movq -256(%rbp), %rcx
	# LowerLoad(8229:3).2: (^7) into i64 ^78
	movq -184(%rbp), %rax
	movq (%rax), %rdx
	# Clobber %rdx
	movq %rdx, -272(%rbp)
	# Clobber %rcx
	movq %rcx, -256(%rbp)
	# SetupCalls(8230:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq -200(%rbp), %rdi
	# SetupCalls(8230:3): move argument i64 ^78
	# Fixed movzx with identical source and destination widths
	movq %rdx, %rsi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEplEl
	# SetupCalls(8230:3): move %struct.LsItem* result from %rax
	movq %rax, %r12
	# Unclobber %rcx
	movq -256(%rbp), %rcx
	# Unclobber %rdx
	movq -272(%rbp), %rdx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8231:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^16 -> ^80, indices=0,0
	movq -224(%rbp), %rax
	# LowerGetelementptr(8231:3): type of ^80 is %struct.LsItem**
	# LowerStore(8232:3).9: mov %struct.LsItem* ^79, (^80)
	movq %r12, (%rax)
	# Clobber %rcx
	movq %rcx, -256(%rbp)
	# SetupCalls(8233:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^16
	# Fixed movzx with identical source and destination widths
	movq -224(%rbp), %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEdeEv
	# SetupCalls(8233:3): move %struct.LsItem* result from %rax
	movq %rax, %r12
	# Unclobber %rcx
	movq -256(%rbp), %rcx
	# Clobber %rcx
	movq %rcx, -256(%rbp)
	# SetupCalls(8234:3): move argument %struct.LsItem* nonnull dereferenceable(33) align 8 ^81
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(8234:3): move argument %struct.LsItem* nonnull dereferenceable(33) align 8 ^77
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZN6LsItemaSEOS_
	# SetupCalls(8234:3): move %struct.LsItem* result from %rax
	movq %rax, %rax
	# Unclobber %rcx
	movq -256(%rbp), %rcx
	# LowerLoad(8235:3).2: (^10) into i64 ^83
	movq -216(%rbp), %rbx
	movq (%rbx), %rax
	# LowerMath(8236:3): ^83, 1 into i64 ^84
	movq %rax, %rbx
	subq $1, %rbx
	# LowerStore(8237:3).9: mov i64 ^84, (^7)
	movq -184(%rbp), %rax
	movq %rbx, (%rax)
	.___ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_T2___M529:
	# Clobber %rcx
	movq %rcx, -256(%rbp)
	# SetupCalls(8241:3): move argument %"struct.__gnu_cxx::__ops::_Iter_comp_val"* nonnull dereferenceable(1) align 1 ^17
	# Fixed movzx with identical source and destination widths
	movq -168(%rbp), %rdi
	# SetupCalls(8241:3): move argument %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* nonnull dereferenceable(1) align 1 ^6
	# Fixed movzx with identical source and destination widths
	movq -208(%rbp), %rsi
	callq _ZN9__gnu_cxx5__ops14_Iter_comp_valIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EC2EONS0_15_Iter_comp_iterISB_EE
	# Unclobber %rcx
	movq -256(%rbp), %rcx
	# LowerBasicConversion(8242:3): %"class.__gnu_cxx::__normal_iterator"* ^18 -> i8* ^86
	movq -176(%rbp), %rax
	# LowerBasicConversion(8243:3): %"class.__gnu_cxx::__normal_iterator"* ^5 -> i8* ^87
	movq -200(%rbp), %rbx
	# Clobber %rcx
	movq %rcx, -256(%rbp)
	# Clobber %rax
	movq %rax, -264(%rbp)
	# SetupCalls(8244:3): move argument i8* align 8 ^86
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(8244:3): move argument i8* align 8 ^87
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(8244:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -264(%rbp), %rax
	# Unclobber %rcx
	movq -256(%rbp), %rcx
	# LowerLoad(8245:3).2: (^7) into i64 ^88
	movq -184(%rbp), %rax
	movq (%rax), %rbx
	# LowerLoad(8246:3).2: (^9) into i64 ^89
	movq -192(%rbp), %rax
	movq (%rax), %r12
	# Clobber %rcx
	movq %rcx, -256(%rbp)
	# SetupCalls(8247:3): move argument %struct.LsItem* nonnull dereferenceable(33) align 8 ^19
	# Fixed movzx with identical source and destination widths
	movq -160(%rbp), %rdi
	# SetupCalls(8247:3): move argument %struct.LsItem* nonnull dereferenceable(33) align 8 %rcx
	# Semiunclobber live %rcx into %rsi
	movq -256(%rbp), %rsi
	callq _ZN6LsItemC2EOS_
	# Unclobber %rcx
	movq -256(%rbp), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8248:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^18 -> ^90, indices=0,0
	movq -176(%rbp), %rax
	# LowerGetelementptr(8248:3): type of ^90 is %struct.LsItem**
	# LowerLoad(8249:3).2: (^90) into %struct.LsItem* ^91
	movq (%rax), %rcx
	# Clobber %rcx
	movq %rcx, -256(%rbp)
	# SetupCalls(8250:3): move argument %struct.LsItem* ^91
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(8250:3): move argument i64 ^88
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(8250:3): move argument i64 ^89
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdx
	# SetupCalls(8250:3): move argument %struct.LsItem* ^19
	# Fixed movzx with identical source and destination widths
	movq -160(%rbp), %rcx
	# SetupCalls(8250:3): move argument %"struct.__gnu_cxx::__ops::_Iter_comp_val"* nonnull dereferenceable(1) align 1 ^17
	# Fixed movzx with identical source and destination widths
	movq -168(%rbp), %r8
	callq _ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops14_Iter_comp_valIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_RT2_
	# Unclobber %rcx
	movq -256(%rbp), %rcx
	# SetupCalls(8251:3): move argument %struct.LsItem* nonnull dereferenceable(33) align 8 ^19
	# Fixed movzx with identical source and destination widths
	movq -160(%rbp), %rdi
	callq _ZN6LsItemD2Ev
	movq -288(%rbp), %r15
	movq -360(%rbp), %r14
	movq -344(%rbp), %r13
	movq -408(%rbp), %r12
	movq -352(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE9_M_createIRSA_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE
.p2align 4, 0x90
_ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE9_M_createIRSA_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE:
	.___ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE9_M_createIRSA_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(56 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -40(%rbp)
	movq %r12, -32(%rbp)
	# LowerAlloca(4474:3): size = 1, type = %"struct.std::integral_constant"*, var = ^3
	leaq -1(%rbp), %rax
	# LowerAlloca(4475:3): size = 8, type = %"union.std::_Any_data"**, var = ^4
	leaq -16(%rbp), %rax
	# LowerAlloca(4476:3): size = 8, type = i32 (%"class.std::vector"*) ***, var = ^5
	leaq -24(%rbp), %r12
	# LowerStore(4477:3).9: mov %"union.std::_Any_data"* %rdi, (^4)
	movq %rdi, (%rax)
	# LowerStore(4478:3).9: mov i32 (%"class.std::vector"*) ** %rsi, (^5)
	movq %rsi, (%r12)
	# LowerLoad(4479:3).2: (^4) into %"union.std::_Any_data"* ^6
	movq (%rax), %rbx
	# SetupCalls(4480:3): move argument %"union.std::_Any_data"* nonnull dereferenceable(16) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt9_Any_data9_M_accessEv
	# SetupCalls(4480:3): move i8* result from %rax
	movq %rax, %rbx
	# LowerBasicConversion(4481:3): i8* ^7 -> i32 (%"class.std::vector"*) *** ^8
	movq %rbx, %rax
	# LowerLoad(4482:3).2: (^5) into i32 (%"class.std::vector"*) ** ^9
	movq (%r12), %rbx
	# LowerStore(4483:3).9: mov i32 (%"class.std::vector"*) ** ^9, (^8)
	movq %rbx, (%rax)
	movq -32(%rbp), %r12
	movq -40(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10filesystem7__cxx1118directory_iteratorD2Ev
.p2align 4, 0x90
_ZNSt10filesystem7__cxx1118directory_iteratorD2Ev:
	.___ZNSt10filesystem7__cxx1118directory_iteratorD2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(1610:3): size = 8, type = %"class.std::filesystem::__cxx11::directory_iterator"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(1611:3).9: mov %"class.std::filesystem::__cxx11::directory_iterator"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(1612:3).2: (^2) into %"class.std::filesystem::__cxx11::directory_iterator"* ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::directory_iterator"
	# LowerGetelementptr(1613:3): struct-type: %"class.std::filesystem::__cxx11::directory_iterator"* ^3 -> ^4, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(1613:3): type of ^4 is %"class.std::__shared_ptr"*
	# Clobber %rax
	movq %rax, -16(%rbp)
	# SetupCalls(1614:3): move argument %"class.std::__shared_ptr"* nonnull dereferenceable(16) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt12__shared_ptrINSt10filesystem7__cxx114_DirELN9__gnu_cxx12_Lock_policyE2EED2Ev
	# Unclobber %rax
	movq -16(%rbp), %rax
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt15__new_allocatorISt17basic_string_viewIcSt11char_traitsIcEEE8allocateEmPKv
.p2align 4, 0x90
_ZNSt15__new_allocatorISt17basic_string_viewIcSt11char_traitsIcEEE8allocateEmPKv:
	.___ZNSt15__new_allocatorISt17basic_string_viewIcSt11char_traitsIcEEE8allocateEmPKv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(80 + 0, 16)
	subq $80, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -48(%rbp)
	movq %r12, -56(%rbp)
	# LowerAlloca(5194:3): size = 8, type = %"class.std::__new_allocator"**, var = ^4
	leaq -8(%rbp), %rbx
	# LowerAlloca(5195:3): size = 8, type = %"class.std::__new_allocator"**, var = ^5
	leaq -16(%rbp), %rcx
	# LowerAlloca(5196:3): size = 8, type = i64*, var = ^6
	leaq -24(%rbp), %r12
	# LowerAlloca(5197:3): size = 8, type = i8**, var = ^7
	leaq -32(%rbp), %rax
	# LowerStore(5198:3).9: mov %"class.std::__new_allocator"* %rdi, (^5)
	movq %rdi, (%rcx)
	# LowerStore(5199:3).9: mov i64 %rsi, (^6)
	movq %rsi, (%r12)
	# LowerStore(5200:3).9: mov i8* %rdx, (^7)
	movq %rdx, (%rax)
	# LowerLoad(5201:3).2: (^5) into %"class.std::__new_allocator"* ^8
	movq (%rcx), %rax
	# LowerLoad(5202:3).2: (^6) into i64 ^9
	movq (%r12), %rcx
	# LowerStore(5203:3).9: mov %"class.std::__new_allocator"* ^8, (^4)
	movq %rax, (%rbx)
	# LowerLoad(5204:3).2: (^4) into %"class.std::__new_allocator"* ^10
	movq (%rbx), %rax
	# LowerIcmp(5205:3): i64 ^9 vs. intlike 576460752303423487
	movabsq $576460752303423487, %rax
	cmpq %rax, %rcx
	seta %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt15__new_allocatorISt17basic_string_viewIcSt11char_traitsIcEEE8allocateEmPKv__M28
	jmp .___ZNSt15__new_allocatorISt17basic_string_viewIcSt11char_traitsIcEEE8allocateEmPKv__M76
	.___ZNSt15__new_allocatorISt17basic_string_viewIcSt11char_traitsIcEEE8allocateEmPKv__M28:
	# LowerLoad(5209:3).2: (^6) into i64 ^13
	movq (%r12), %rax
	# LowerIcmp(5210:3): i64 ^13 vs. intlike 1152921504606846975
	movabsq $1152921504606846975, %rbx
	cmpq %rbx, %rax
	seta %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt15__new_allocatorISt17basic_string_viewIcSt11char_traitsIcEEE8allocateEmPKv__M36
	jmp .___ZNSt15__new_allocatorISt17basic_string_viewIcSt11char_traitsIcEEE8allocateEmPKv__M56
	.___ZNSt15__new_allocatorISt17basic_string_viewIcSt11char_traitsIcEEE8allocateEmPKv__M36:
	callq _ZSt28__throw_bad_array_new_lengthv@PLT
	.___ZNSt15__new_allocatorISt17basic_string_viewIcSt11char_traitsIcEEE8allocateEmPKv__M56:
	callq _ZSt17__throw_bad_allocv@PLT
	.___ZNSt15__new_allocatorISt17basic_string_viewIcSt11char_traitsIcEEE8allocateEmPKv__M76:
	# LowerLoad(5222:3).2: (^6) into i64 ^18
	movq (%r12), %rbx
	# LowerMath(5223:3): ^18, 16 into i64 ^19
	movq %rbx, %rax
	shlq $4, %rax
	# Clobber %rax
	movq %rax, -40(%rbp)
	# SetupCalls(5224:3): move argument i64 ^19
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _Znwm@PLT
	# SetupCalls(5224:3): move i8* result from %rax
	movq %rax, %rbx
	# Unclobber %rax
	movq -40(%rbp), %rax
	# LowerBasicConversion(5225:3): i8* ^20 -> %"class.std::basic_string_view"* ^21
	movq %rbx, %rax
	movq -56(%rbp), %r12
	movq -48(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10unique_ptrINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE11get_deleterEv
.p2align 4, 0x90
_ZNSt10unique_ptrINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE11get_deleterEv:
	.___ZNSt10unique_ptrINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE11get_deleterEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(4075:3): size = 8, type = %"class.std::unique_ptr"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(4076:3).9: mov %"class.std::unique_ptr"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(4077:3).2: (^2) into %"class.std::unique_ptr"* ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::unique_ptr"
	# LowerGetelementptr(4078:3): struct-type: %"class.std::unique_ptr"* ^3 -> ^4, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(4078:3): type of ^4 is %"struct.std::__uniq_ptr_data"*
	# LowerBasicConversion(4079:3): %"class.std::unique_ptr"* ^4 -> %"class.std::__uniq_ptr_impl"* ^5
	movq %rax, %rbx
	# SetupCalls(4080:3): move argument %"class.std::__uniq_ptr_impl"* nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE10_M_deleterEv
	# SetupCalls(4080:3): move %"struct.std::filesystem::__cxx11::path::_List::_Impl_deleter"* result from %rax
	movq %rax, %rbx
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10filesystem7__cxx114path5_ListaSEOS2_
.p2align 4, 0x90
_ZNSt10filesystem7__cxx114path5_ListaSEOS2_:
	.___ZNSt10filesystem7__cxx114path5_ListaSEOS2___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(56 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -40(%rbp)
	movq %r12, -48(%rbp)
	# LowerAlloca(6304:3): size = 8, type = %"struct.std::filesystem::__cxx11::path::_List"**, var = ^3
	leaq -8(%rbp), %rbx
	# LowerAlloca(6305:3): size = 8, type = %"struct.std::filesystem::__cxx11::path::_List"**, var = ^4
	leaq -16(%rbp), %rax
	# LowerStore(6306:3).9: mov %"struct.std::filesystem::__cxx11::path::_List"* %rdi, (^3)
	movq %rdi, (%rbx)
	# LowerStore(6307:3).9: mov %"struct.std::filesystem::__cxx11::path::_List"* %rsi, (^4)
	movq %rsi, (%rax)
	# LowerLoad(6308:3).2: (^3) into %"struct.std::filesystem::__cxx11::path::_List"* ^5
	movq (%rbx), %r12
	# tt = Pointer, type = %"struct.std::filesystem::__cxx11::path::_List"
	# LowerGetelementptr(6309:3): struct-type: %"struct.std::filesystem::__cxx11::path::_List"* ^5 -> ^6, indices=0,0
	movq %r12, %rcx
	# LowerGetelementptr(6309:3): type of ^6 is %"class.std::unique_ptr"*
	# LowerLoad(6310:3).2: (^4) into %"struct.std::filesystem::__cxx11::path::_List"* ^7
	movq (%rax), %rbx
	# tt = Pointer, type = %"struct.std::filesystem::__cxx11::path::_List"
	# LowerGetelementptr(6311:3): struct-type: %"struct.std::filesystem::__cxx11::path::_List"* ^7 -> ^8, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(6311:3): type of ^8 is %"class.std::unique_ptr"*
	# Clobber %rcx
	movq %rcx, -24(%rbp)
	# Clobber %rax
	movq %rax, -32(%rbp)
	# SetupCalls(6312:3): move argument %"class.std::unique_ptr"* nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(6312:3): move argument %"class.std::unique_ptr"* nonnull dereferenceable(8) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNSt10unique_ptrINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEEaSEOS6_
	# SetupCalls(6312:3): move %"class.std::unique_ptr"* result from %rax
	movq %rax, %rax
	# Unclobber %rax
	movq -32(%rbp), %rax
	# Unclobber %rcx
	movq -24(%rbp), %rcx
	movq %r12, %rax
	movq -48(%rbp), %r12
	movq -40(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10unique_ptrINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEED2Ev
.p2align 4, 0x90
_ZNSt10unique_ptrINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEED2Ev:
	.___ZNSt10unique_ptrINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEED2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(64 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -48(%rbp)
	movq %r12, -56(%rbp)
	movq %r13, -40(%rbp)
	# LowerAlloca(4037:3): size = 8, type = %"class.std::unique_ptr"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerAlloca(4038:3): size = 8, type = %"struct.std::filesystem::__cxx11::path::_List::_Impl"***, var = ^3
	leaq -16(%rbp), %r13
	# LowerStore(4039:3).9: mov %"class.std::unique_ptr"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(4040:3).2: (^2) into %"class.std::unique_ptr"* ^4
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::unique_ptr"
	# LowerGetelementptr(4041:3): struct-type: %"class.std::unique_ptr"* ^4 -> ^5, indices=0,0
	movq %rbx, %rcx
	# LowerGetelementptr(4041:3): type of ^5 is %"struct.std::__uniq_ptr_data"*
	# LowerBasicConversion(4042:3): %"class.std::unique_ptr"* ^5 -> %"class.std::__uniq_ptr_impl"* ^6
	movq %rcx, %rax
	# Clobber %rax
	movq %rax, -24(%rbp)
	# SetupCalls(4043:3): move argument %"class.std::__uniq_ptr_impl"* nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE6_M_ptrEv
	# SetupCalls(4043:3): move %"struct.std::filesystem::__cxx11::path::_List::_Impl"** result from %rax
	movq %rax, %r12
	# Unclobber %rax
	movq -24(%rbp), %rax
	# LowerStore(4044:3).9: mov %"struct.std::filesystem::__cxx11::path::_List::_Impl"** ^7, (^3)
	movq %r12, (%r13)
	# LowerLoad(4045:3).2: (^3) into %"struct.std::filesystem::__cxx11::path::_List::_Impl"** ^8
	movq (%r13), %rax
	# LowerLoad(4046:3).2: (^8) into %"struct.std::filesystem::__cxx11::path::_List::_Impl"* ^9
	movq (%rax), %rcx
	# LowerIcmp(4047:3): %"struct.std::filesystem::__cxx11::path::_List::_Impl"* ^9 vs. intlike 0
	cmpq $0, %rcx
	setne %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt10unique_ptrINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEED2Ev__M48
	jmp .___ZNSt10unique_ptrINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEED2Ev__M99
	.___ZNSt10unique_ptrINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEED2Ev__M48:
	# SetupCalls(4051:3): move argument %"class.std::unique_ptr"* nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt10unique_ptrINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE11get_deleterEv
	# SetupCalls(4051:3): move %"struct.std::filesystem::__cxx11::path::_List::_Impl_deleter"* result from %rax
	movq %rax, %rbx
	# LowerLoad(4052:3).2: (^3) into %"struct.std::filesystem::__cxx11::path::_List::_Impl"** ^13
	movq (%r13), %rax
	# LowerLoad(4053:3).2: (^13) into %"struct.std::filesystem::__cxx11::path::_List::_Impl"* ^14
	movq (%rax), %rcx
	# Clobber %rcx
	movq %rcx, -32(%rbp)
	# SetupCalls(4054:3): move argument %"struct.std::filesystem::__cxx11::path::_List::_Impl_deleter"* nonnull dereferenceable(1) align 1 ^12
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(4054:3): move argument %"struct.std::filesystem::__cxx11::path::_List::_Impl"* ^14
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	callq _ZNKSt10filesystem7__cxx114path5_List13_Impl_deleterclEPNS2_5_ImplE@PLT
	# Unclobber %rcx
	movq -32(%rbp), %rcx
	.___ZNSt10unique_ptrINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEED2Ev__M99:
	# LowerLoad(4058:3).2: (^3) into %"struct.std::filesystem::__cxx11::path::_List::_Impl"** ^16
	movq (%r13), %rax
	# LowerStore(4059:3).3: mov $imm, (^16)
	movq $0, (%rax)
	movq -40(%rbp), %r13
	movq -56(%rbp), %r12
	movq -48(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt17basic_string_viewIcSt11char_traitsIcEEC2EPKc
.p2align 4, 0x90
_ZNSt17basic_string_viewIcSt11char_traitsIcEEC2EPKc:
	.___ZNSt17basic_string_viewIcSt11char_traitsIcEEC2EPKc__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(64 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -56(%rbp)
	movq %r12, -32(%rbp)
	movq %r13, -48(%rbp)
	movq %r14, -40(%rbp)
	# LowerAlloca(2598:3): size = 8, type = %"class.std::basic_string_view"**, var = ^3
	leaq -8(%rbp), %rax
	# LowerAlloca(2599:3): size = 8, type = i8**, var = ^4
	leaq -16(%rbp), %r12
	# LowerStore(2600:3).9: mov %"class.std::basic_string_view"* %rdi, (^3)
	movq %rdi, (%rax)
	# LowerStore(2601:3).9: mov i8* %rsi, (^4)
	movq %rsi, (%r12)
	# LowerLoad(2602:3).2: (^3) into %"class.std::basic_string_view"* ^5
	movq (%rax), %r14
	# tt = Pointer, type = %"class.std::basic_string_view"
	# LowerGetelementptr(2603:3): struct-type: %"class.std::basic_string_view"* ^5 -> ^6, indices=0,0
	movq %r14, %r13
	# LowerGetelementptr(2603:3): type of ^6 is i64*
	# LowerLoad(2604:3).2: (^4) into i8* ^7
	movq (%r12), %rax
	# Clobber %rax
	movq %rax, -24(%rbp)
	# SetupCalls(2605:3): move argument i8* ^7
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt11char_traitsIcE6lengthEPKc
	# SetupCalls(2605:3): move i64 result from %rax
	movq %rax, %rbx
	# Unclobber %rax
	movq -24(%rbp), %rax
	# LowerStore(2606:3).9: mov i64 ^8, (^6)
	movq %rbx, (%r13)
	# tt = Pointer, type = %"class.std::basic_string_view"
	# LowerGetelementptr(2607:3): struct-type: %"class.std::basic_string_view"* ^5 -> ^9, indices=0,1
	movq %r14, %rax
	addq $8, %rax
	# LowerGetelementptr(2607:3): type of ^9 is i8**
	# LowerLoad(2608:3).2: (^4) into i8* ^10
	movq (%r12), %rbx
	# LowerStore(2609:3).9: mov i8* ^10, (^9)
	movq %rbx, (%rax)
	movq -40(%rbp), %r14
	movq -48(%rbp), %r13
	movq -32(%rbp), %r12
	movq -56(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10filesystem12is_directoryERKNS_7__cxx114pathE
.p2align 4, 0x90
_ZNSt10filesystem12is_directoryERKNS_7__cxx114pathE:
	.___ZNSt10filesystem12is_directoryERKNS_7__cxx114pathE__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(64 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	movq %r12, -40(%rbp)
	# LowerAlloca(2170:3): size = 8, type = %"class.std::filesystem::__cxx11::path"**, var = ^2
	leaq -8(%rbp), %rbx
	# LowerAlloca(2171:3): size = 8, type = %"class.std::filesystem::file_status"*, var = ^3
	leaq -16(%rbp), %r12
	# LowerStore(2172:3).9: mov %"class.std::filesystem::__cxx11::path"* %rdi, (^2)
	movq %rdi, (%rbx)
	# LowerLoad(2173:3).2: (^2) into %"class.std::filesystem::__cxx11::path"* ^4
	movq (%rbx), %rax
	# Clobber %rax
	movq %rax, -24(%rbp)
	# SetupCalls(2174:3): move argument %"class.std::filesystem::__cxx11::path"* nonnull dereferenceable(40) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt10filesystem6statusERKNS_7__cxx114pathE@PLT
	# SetupCalls(2174:3): move i64 result from %rax
	movq %rax, %rbx
	# Unclobber %rax
	movq -24(%rbp), %rax
	# LowerBasicConversion(2175:3): %"class.std::filesystem::file_status"* ^3 -> i64* ^6
	movq %r12, %rax
	# LowerStore(2176:3).9: mov i64 ^5, (^6)
	movq %rbx, (%rax)
	# LowerBasicConversion(2177:3): %"class.std::filesystem::file_status"* ^3 -> i64* ^7
	movq %r12, %rbx
	# LowerLoad(2178:3).2: (^7) into i64 ^8
	movq (%rbx), %rax
	# Clobber %rax
	movq %rax, -24(%rbp)
	# SetupCalls(2179:3): move argument i64 ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt10filesystem12is_directoryENS_11file_statusE
	# SetupCalls(2179:3): move i1 result from %rax
	movb %al, %bl
	# Unclobber %rax
	movq -24(%rbp), %rax
	movb %bl, %al
	movq -40(%rbp), %r12
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE22_M_insert_range_uniqueIPKSI_EENSt9enable_ifIXsr17__same_value_typeIT_EE5valueEvE4typeEST_ST_
.p2align 4, 0x90
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE22_M_insert_range_uniqueIPKSI_EENSt9enable_ifIXsr17__same_value_typeIT_EE5valueEvE4typeEST_ST_:
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE22_M_insert_range_uniqueIPKSI_EENSt9enable_ifIXsr17__same_value_typeIT_EE5valueEvE4typeEST_ST___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(192 + 0, 16)
	subq $192, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -104(%rbp)
	movq %r12, -160(%rbp)
	movq %r13, -168(%rbp)
	movq %r14, -176(%rbp)
	movq %r15, -112(%rbp)
	# LowerAlloca(9416:3): size = 8, type = %"class.std::_Rb_tree"**, var = ^4
	leaq -8(%rbp), %rax
	# LowerAlloca(9417:3): size = 8, type = %"struct.std::pair"**, var = ^5
	# Fixing source-to-dest leaq -16(%rbp), -64(%rbp)
	leaq -16(%rbp), %r15
	movq %r15, -64(%rbp)
	# LowerAlloca(9418:3): size = 8, type = %"struct.std::pair"**, var = ^6
	# Fixing source-to-dest leaq -24(%rbp), -72(%rbp)
	leaq -24(%rbp), %r15
	movq %r15, -72(%rbp)
	# LowerAlloca(9419:3): size = 8, type = %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Alloc_node"*, var = ^7
	# Fixing source-to-dest leaq -32(%rbp), -80(%rbp)
	leaq -32(%rbp), %r15
	movq %r15, -80(%rbp)
	# LowerAlloca(9420:3): size = 8, type = %"struct.std::_Rb_tree_const_iterator"*, var = ^8
	leaq -40(%rbp), %rbx
	# LowerAlloca(9421:3): size = 8, type = %"struct.std::_Rb_tree_iterator"*, var = ^9
	leaq -48(%rbp), %r12
	# LowerAlloca(9422:3): size = 8, type = %"struct.std::_Rb_tree_iterator"*, var = ^10
	leaq -56(%rbp), %r13
	# LowerStore(9423:3).9: mov %"class.std::_Rb_tree"* %rdi, (^4)
	movq %rdi, (%rax)
	# LowerStore(9424:3).9: mov %"struct.std::pair"* %rsi, (^5)
	movq -64(%rbp), %rcx
	movq %rsi, (%rcx)
	# LowerStore(9425:3).9: mov %"struct.std::pair"* %rdx, (^6)
	movq -72(%rbp), %rcx
	movq %rdx, (%rcx)
	# LowerLoad(9426:3).2: (^4) into %"class.std::_Rb_tree"* ^11
	movq (%rax), %r14
	# SetupCalls(9427:3): move argument %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Alloc_node"* nonnull dereferenceable(8) align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq -80(%rbp), %rdi
	# SetupCalls(9427:3): move argument %"class.std::_Rb_tree"* nonnull dereferenceable(48) align 8 ^11
	# Fixed movzx with identical source and destination widths
	movq %r14, %rsi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE11_Alloc_nodeC2ERSO_
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE22_M_insert_range_uniqueIPKSI_EENSt9enable_ifIXsr17__same_value_typeIT_EE5valueEvE4typeEST_ST___M46:
	# LowerLoad(9431:3).2: (^5) into %"struct.std::pair"* ^13
	movq -64(%rbp), %rcx
	movq (%rcx), %rax
	# LowerLoad(9432:3).2: (^6) into %"struct.std::pair"* ^14
	movq -72(%rbp), %rdx
	movq (%rdx), %rcx
	# LowerIcmp(9433:3): %"struct.std::pair"* ^13 vs. operand %"struct.std::pair"* ^14
	cmpq %rcx, %rax
	setne %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE22_M_insert_range_uniqueIPKSI_EENSt9enable_ifIXsr17__same_value_typeIT_EE5valueEvE4typeEST_ST___M55
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE22_M_insert_range_uniqueIPKSI_EENSt9enable_ifIXsr17__same_value_typeIT_EE5valueEvE4typeEST_ST___M161
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE22_M_insert_range_uniqueIPKSI_EENSt9enable_ifIXsr17__same_value_typeIT_EE5valueEvE4typeEST_ST___M55:
	# SetupCalls(9437:3): move argument %"class.std::_Rb_tree"* nonnull dereferenceable(48) align 8 ^11
	# Fixed movzx with identical source and destination widths
	movq %r14, %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE3endEv
	# SetupCalls(9437:3): move %"struct.std::_Rb_tree_node_base"* result from %rax
	movq %rax, %r15
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(9438:3): struct-type: %"struct.std::_Rb_tree_iterator"* ^9 -> ^18, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(9438:3): type of ^18 is %"struct.std::_Rb_tree_node_base"**
	# LowerStore(9439:3).9: mov %"struct.std::_Rb_tree_node_base"* ^17, (^18)
	movq %r15, (%rax)
	# SetupCalls(9440:3): move argument %"struct.std::_Rb_tree_const_iterator"* nonnull dereferenceable(8) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(9440:3): move argument %"struct.std::_Rb_tree_iterator"* nonnull dereferenceable(8) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq %r12, %rsi
	callq _ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEEC2ERKSt17_Rb_tree_iteratorISI_E
	# LowerLoad(9441:3).2: (^5) into %"struct.std::pair"* ^19
	movq -64(%rbp), %rax
	movq (%rax), %rcx
	# tt = Pointer, type = %"struct.std::_Rb_tree_const_iterator"
	# LowerGetelementptr(9442:3): struct-type: %"struct.std::_Rb_tree_const_iterator"* ^8 -> ^20, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(9442:3): type of ^20 is %"struct.std::_Rb_tree_node_base"**
	# LowerLoad(9443:3).2: (^20) into %"struct.std::_Rb_tree_node_base"* ^21
	movq (%rax), %rdx
	# Clobber %rdx
	movq %rdx, -88(%rbp)
	# Clobber %rcx
	movq %rcx, -96(%rbp)
	# SetupCalls(9444:3): move argument %"class.std::_Rb_tree"* nonnull dereferenceable(48) align 8 ^11
	# Fixed movzx with identical source and destination widths
	movq %r14, %rdi
	# SetupCalls(9444:3): move argument %"struct.std::_Rb_tree_node_base"* ^21
	# Fixed movzx with identical source and destination widths
	movq %rdx, %rsi
	# SetupCalls(9444:3): move argument %"struct.std::pair"* nonnull dereferenceable(64) align 8 ^19
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdx
	# SetupCalls(9444:3): move argument %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Alloc_node"* nonnull dereferenceable(8) align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq -80(%rbp), %rcx
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE17_M_insert_unique_IRKSI_NSO_11_Alloc_nodeEEESt17_Rb_tree_iteratorISI_ESt23_Rb_tree_const_iteratorISI_EOT_RT0_
	# SetupCalls(9444:3): move %"struct.std::_Rb_tree_node_base"* result from %rax
	movq %rax, %r15
	# Unclobber %rcx
	movq -96(%rbp), %rcx
	# Unclobber %rdx
	movq -88(%rbp), %rdx
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(9445:3): struct-type: %"struct.std::_Rb_tree_iterator"* ^10 -> ^23, indices=0,0
	movq %r13, %rax
	# LowerGetelementptr(9445:3): type of ^23 is %"struct.std::_Rb_tree_node_base"**
	# LowerStore(9446:3).9: mov %"struct.std::_Rb_tree_node_base"* ^22, (^23)
	movq %r15, (%rax)
	# LowerLoad(9450:3).2: (^5) into %"struct.std::pair"* ^25
	movq -64(%rbp), %rax
	movq (%rax), %rcx
	# tt = Pointer, type = %"struct.std::pair"
	# LowerGetelementptr(9451:3): struct-type: %"struct.std::pair"* ^25 -> ^26, indices=1
	movq %rcx, %rax
	addq $64, %rax
	# LowerGetelementptr(9451:3): type of ^26 is %"struct.std::pair"*
	# LowerStore(9452:3).9: mov %"struct.std::pair"* ^26, (^5)
	movq -64(%rbp), %rcx
	movq %rax, (%rcx)
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE22_M_insert_range_uniqueIPKSI_EENSt9enable_ifIXsr17__same_value_typeIT_EE5valueEvE4typeEST_ST___M46
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE22_M_insert_range_uniqueIPKSI_EENSt9enable_ifIXsr17__same_value_typeIT_EE5valueEvE4typeEST_ST___M161:
	movq -112(%rbp), %r15
	movq -176(%rbp), %r14
	movq -168(%rbp), %r13
	movq -160(%rbp), %r12
	movq -104(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt3getILm0EJPNSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSB_
.p2align 4, 0x90
_ZSt3getILm0EJPNSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSB_:
	.___ZSt3getILm0EJPNSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSB___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(3848:3): size = 8, type = %"class.std::tuple"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(3849:3).9: mov %"class.std::tuple"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(3850:3).2: (^2) into %"class.std::tuple"* ^3
	movq (%rax), %rbx
	# LowerBasicConversion(3851:3): %"class.std::tuple"* ^3 -> %"struct.std::_Tuple_impl"* ^4
	movq %rbx, %rax
	# Clobber %rax
	movq %rax, -16(%rbp)
	# SetupCalls(3852:3): move argument %"struct.std::_Tuple_impl"* nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZSt12__get_helperILm0EPNSt10filesystem7__cxx114path5_List5_ImplEJNS3_13_Impl_deleterEEERKT0_RKSt11_Tuple_implIXT_EJS7_DpT1_EE
	# SetupCalls(3852:3): move %"struct.std::filesystem::__cxx11::path::_List::_Impl"** result from %rax
	movq %rax, %rbx
	# Unclobber %rax
	movq -16(%rbp), %rax
	movq %rbx, %rax
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE
.p2align 4, 0x90
_Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE:
	.___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(912 + 0, 16)
	subq $912, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -520(%rbp)
	movq %r12, -560(%rbp)
	movq %r13, -488(%rbp)
	movq %r14, -544(%rbp)
	movq %r15, -480(%rbp)
	# LowerAlloca(1238:3): size = 4, type = i32*, var = ^2
	# Fixing source-to-dest leaq -4(%rbp), -328(%rbp)
	leaq -4(%rbp), %r15
	movq %r15, -328(%rbp)
	# LowerAlloca(1239:3): size = 8, type = %"class.std::vector"**, var = ^3
	leaq -16(%rbp), %r13
	# LowerAlloca(1240:3): size = 40, type = %"class.std::filesystem::__cxx11::path"*, var = ^4
	# Fixing source-to-dest leaq -56(%rbp), -336(%rbp)
	leaq -56(%rbp), %r15
	movq %r15, -336(%rbp)
	# LowerAlloca(1241:3): size = 4, type = i32*, var = ^5
	# Fixing source-to-dest leaq -60(%rbp), -344(%rbp)
	leaq -60(%rbp), %r15
	movq %r15, -344(%rbp)
	# LowerAlloca(1242:3): size = 24, type = %"class.std::vector.5"*, var = ^6
	# Fixing source-to-dest leaq -88(%rbp), -352(%rbp)
	leaq -88(%rbp), %r15
	movq %r15, -352(%rbp)
	# LowerAlloca(1243:3): size = 8, type = %"class.std::filesystem::__cxx11::directory_iterator"**, var = ^7
	leaq -96(%rbp), %rbx
	# LowerAlloca(1244:3): size = 16, type = %"class.std::filesystem::__cxx11::directory_iterator"*, var = ^8
	# Fixing source-to-dest leaq -112(%rbp), -408(%rbp)
	leaq -112(%rbp), %r15
	movq %r15, -408(%rbp)
	# LowerAlloca(1245:3): size = 16, type = %"class.std::filesystem::__cxx11::directory_iterator"*, var = ^9
	# Fixing source-to-dest leaq -128(%rbp), -416(%rbp)
	leaq -128(%rbp), %r15
	movq %r15, -416(%rbp)
	# LowerAlloca(1246:3): size = 16, type = %"class.std::filesystem::__cxx11::directory_iterator"*, var = ^10
	leaq -144(%rbp), %r14
	# LowerAlloca(1247:3): size = 16, type = %"class.std::filesystem::__cxx11::directory_iterator"*, var = ^11
	# Fixing source-to-dest leaq -160(%rbp), -424(%rbp)
	leaq -160(%rbp), %r15
	movq %r15, -424(%rbp)
	# LowerAlloca(1248:3): size = 16, type = %"class.std::filesystem::__cxx11::directory_iterator"*, var = ^12
	leaq -176(%rbp), %r12
	# LowerAlloca(1249:3): size = 8, type = %"class.std::filesystem::__cxx11::directory_entry"**, var = ^13
	# Fixing source-to-dest leaq -184(%rbp), -432(%rbp)
	leaq -184(%rbp), %r15
	movq %r15, -432(%rbp)
	# LowerAlloca(1250:3): size = 32, type = %"class.std::__cxx11::basic_string"*, var = ^14
	# Fixing source-to-dest leaq -216(%rbp), -440(%rbp)
	leaq -216(%rbp), %r15
	movq %r15, -440(%rbp)
	# LowerAlloca(1251:3): size = 40, type = %"class.std::filesystem::__cxx11::path"*, var = ^15
	# Fixing source-to-dest leaq -256(%rbp), -448(%rbp)
	leaq -256(%rbp), %r15
	movq %r15, -448(%rbp)
	# LowerAlloca(1252:3): size = 1, type = i8*, var = ^16
	# Fixing source-to-dest leaq -257(%rbp), -456(%rbp)
	leaq -257(%rbp), %r15
	movq %r15, -456(%rbp)
	# LowerAlloca(1253:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^17
	# Fixing source-to-dest leaq -272(%rbp), -400(%rbp)
	leaq -272(%rbp), %r15
	movq %r15, -400(%rbp)
	# LowerAlloca(1254:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^18
	# Fixing source-to-dest leaq -280(%rbp), -392(%rbp)
	leaq -280(%rbp), %r15
	movq %r15, -392(%rbp)
	# LowerAlloca(1255:3): size = 1, type = %class.anon*, var = ^19
	leaq -281(%rbp), %rax
	# LowerAlloca(1256:3): size = 8, type = %"class.std::vector.5"**, var = ^20
	# Fixing source-to-dest leaq -296(%rbp), -384(%rbp)
	leaq -296(%rbp), %r15
	movq %r15, -384(%rbp)
	# LowerAlloca(1257:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^21
	# Fixing source-to-dest leaq -304(%rbp), -360(%rbp)
	leaq -304(%rbp), %r15
	movq %r15, -360(%rbp)
	# LowerAlloca(1258:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^22
	# Fixing source-to-dest leaq -312(%rbp), -368(%rbp)
	leaq -312(%rbp), %r15
	movq %r15, -368(%rbp)
	# LowerAlloca(1259:3): size = 8, type = %struct.LsItem**, var = ^23
	# Fixing source-to-dest leaq -320(%rbp), -376(%rbp)
	leaq -320(%rbp), %r15
	movq %r15, -376(%rbp)
	# LowerStore(1260:3).9: mov %"class.std::vector"* %rdi, (^3)
	movq %rdi, (%r13)
	# SetupCalls(1261:3): move argument %"class.std::filesystem::__cxx11::path"* nonnull dereferenceable(40) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -336(%rbp), %rdi
	callq _ZNSt10filesystem7__cxx114pathC2Ev
	# LowerLoad(1262:3).2: (^3) into %"class.std::vector"* ^24
	movq (%r13), %rax
	# Clobber %rax
	movq %rax, -464(%rbp)
	# SetupCalls(1263:3): move argument %"class.std::vector"* nonnull dereferenceable(24) align 8 ^24
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE4sizeEv
	# SetupCalls(1263:3): move i64 result from %rax
	movq %rax, %r15
	# Unclobber %rax
	movq -464(%rbp), %rax
	# LowerIcmp(1264:3): i64 ^25 vs. intlike 1
	cmpq $1, %r15
	sete %al
	andq $1, %rax
	cmpb $0, %al
	jne .___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M98
	jmp .___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M124
	.___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M98:
	# SetupCalls(1268:3): move argument %"class.std::filesystem::__cxx11::path"* nonnull dereferenceable(40) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -336(%rbp), %rdi
	# SetupCalls(1268:3): move argument [2 x i8]* nonnull dereferenceable(2) align 1 @.str
	leaq .str(%rip), %rsi
	callq _ZNSt10filesystem7__cxx114pathaSIA2_cEERNSt9enable_ifIX13__is_path_srcIT_EES1_E4typeERKS5_
	# SetupCalls(1268:3): move %"class.std::filesystem::__cxx11::path"* result from %rax
	movq %rax, %rax
	jmp .___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M314
	.___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M124:
	# LowerLoad(1272:3).2: (^3) into %"class.std::vector"* ^30
	movq (%r13), %rax
	# Clobber %rax
	movq %rax, -464(%rbp)
	# SetupCalls(1273:3): move argument %"class.std::vector"* nonnull dereferenceable(24) align 8 ^30
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE4sizeEv
	# SetupCalls(1273:3): move i64 result from %rax
	movq %rax, %r15
	# Unclobber %rax
	movq -464(%rbp), %rax
	# LowerIcmp(1274:3): i64 ^31 vs. intlike 2
	cmpq $2, %r15
	sete %al
	andq $1, %rax
	cmpb $0, %al
	jne .___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M154
	jmp .___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M207
	.___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M154:
	# LowerLoad(1278:3).2: (^3) into %"class.std::vector"* ^34
	movq (%r13), %rax
	# Clobber %rax
	movq %rax, -464(%rbp)
	# SetupCalls(1279:3): move argument %"class.std::vector"* nonnull dereferenceable(24) align 8 ^34
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(1279:3): move argument i64 1
	movq $1, %rsi
	callq _ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEixEm
	# SetupCalls(1279:3): move %"class.std::basic_string_view"* result from %rax
	movq %rax, %r13
	# Unclobber %rax
	movq -464(%rbp), %rax
	# SetupCalls(1280:3): move argument %"class.std::filesystem::__cxx11::path"* nonnull dereferenceable(40) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -336(%rbp), %rdi
	# SetupCalls(1280:3): move argument %"class.std::basic_string_view"* nonnull dereferenceable(16) align 8 ^35
	# Fixed movzx with identical source and destination widths
	movq %r13, %rsi
	callq _ZNSt10filesystem7__cxx114pathaSISt17basic_string_viewIcSt11char_traitsIcEEEERNSt9enable_ifIX13__is_path_srcIT_EES1_E4typeERKS8_
	# SetupCalls(1280:3): move %"class.std::filesystem::__cxx11::path"* result from %rax
	movq %rax, %rax
	jmp .___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M313
	.___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M207:
	# SetupCalls(1284:3): move argument %"class.std::basic_ostream"* nonnull dereferenceable(8) align 8 @_ZSt4cerr
	leaq _ZSt4cerr(%rip), %rdi
	# SetupCalls(1284:3): move argument i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1, i64 0, i64 0)
	leaq .str.1(%rip), %rsi
	callq _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
	# SetupCalls(1284:3): move %"class.std::basic_ostream"* result from %rax
	movq %rax, %rbx
	# LowerLoad(1285:3).2: (^3) into %"class.std::vector"* ^39
	movq (%r13), %rax
	# Clobber %rax
	movq %rax, -464(%rbp)
	# SetupCalls(1286:3): move argument %"class.std::vector"* nonnull dereferenceable(24) align 8 ^39
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE4sizeEv
	# SetupCalls(1286:3): move i64 result from %rax
	movq %rax, %r12
	# Unclobber %rax
	movq -464(%rbp), %rax
	# SetupCalls(1287:3): move argument %"class.std::basic_ostream"* nonnull dereferenceable(8) align 8 ^38
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(1287:3): move argument i64 ^40
	# Fixed movzx with identical source and destination widths
	movq %r12, %rsi
	callq _ZNSolsEm@PLT
	# SetupCalls(1287:3): move %"class.std::basic_ostream"* result from %rax
	movq %rax, %rbx
	# SetupCalls(1288:3): move argument %"class.std::basic_ostream"* nonnull dereferenceable(8) align 8 ^41
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(1288:3): move argument i8 signext 10
	movq $10, %rsi
	movsbq %sil, %rsi
	callq _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@PLT
	# SetupCalls(1288:3): move %"class.std::basic_ostream"* result from %rax
	movq %rax, %rax
	# LowerStore(1289:3).3: mov $imm, (^2)
	movq -328(%rbp), %rax
	movl $1, (%rax)
	# LowerStore(1290:3).3: mov $imm, (^5)
	movq -344(%rbp), %rax
	movl $1, (%rax)
	jmp .___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M1329
	.___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M313:
	.___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M314:
	# SetupCalls(1297:3): move argument %"class.std::filesystem::__cxx11::path"* nonnull dereferenceable(40) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -336(%rbp), %rdi
	callq _ZNSt10filesystem6existsERKNS_7__cxx114pathE
	# SetupCalls(1297:3): move i1 result from %rax
	movb %al, %r13b
	cmpb $0, %r13b
	jne .___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M419
	.___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M338:
	# SetupCalls(1301:3): move argument %"class.std::basic_ostream"* nonnull dereferenceable(8) align 8 @_ZSt4cerr
	leaq _ZSt4cerr(%rip), %rdi
	# SetupCalls(1301:3): move argument i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0)
	leaq .str.2(%rip), %rsi
	callq _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
	# SetupCalls(1301:3): move %"class.std::basic_ostream"* result from %rax
	movq %rax, %rbx
	# SetupCalls(1302:3): move argument %"class.std::basic_ostream"* nonnull dereferenceable(8) align 8 ^47
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(1302:3): move argument %"class.std::filesystem::__cxx11::path"* nonnull dereferenceable(40) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -336(%rbp), %rsi
	callq _ZNSt10filesystem7__cxx11lsIcSt11char_traitsIcEEERSt13basic_ostreamIT_T0_ES8_RKNS0_4pathE
	# SetupCalls(1302:3): move %"class.std::basic_ostream"* result from %rax
	movq %rax, %rbx
	# SetupCalls(1303:3): move argument %"class.std::basic_ostream"* nonnull dereferenceable(8) align 8 ^48
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(1303:3): move argument i8 signext 10
	movq $10, %rsi
	movsbq %sil, %rsi
	callq _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@PLT
	# SetupCalls(1303:3): move %"class.std::basic_ostream"* result from %rax
	movq %rax, %rax
	# LowerStore(1304:3).3: mov $imm, (^2)
	movq -328(%rbp), %rax
	movl $2, (%rax)
	# LowerStore(1305:3).3: mov $imm, (^5)
	movq -344(%rbp), %rax
	movl $1, (%rax)
	jmp .___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M1329
	.___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M419:
	# SetupCalls(1309:3): move argument %"class.std::vector.5"* nonnull dereferenceable(24) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq -352(%rbp), %rdi
	callq _ZNSt6vectorI6LsItemSaIS0_EEC2Ev
	# SetupCalls(1310:3): move argument %"class.std::filesystem::__cxx11::directory_iterator"* nonnull dereferenceable(16) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq -408(%rbp), %rdi
	# SetupCalls(1310:3): move argument %"class.std::filesystem::__cxx11::path"* nonnull dereferenceable(40) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -336(%rbp), %rsi
	callq _ZNSt10filesystem7__cxx1118directory_iteratorC2ERKNS0_4pathE
	# LowerStore(1311:3).9: mov %"class.std::filesystem::__cxx11::directory_iterator"* ^8, (^7)
	# Fixing source-to-dest movq -408(%rbp), (%rbx)
	movq -408(%rbp), %r15
	movq %r15, (%rbx)
	# LowerLoad(1312:3).2: (^7) into %"class.std::filesystem::__cxx11::directory_iterator"* ^51
	movq (%rbx), %rax
	# Clobber %rax
	movq %rax, -464(%rbp)
	# SetupCalls(1313:3): move argument %"class.std::filesystem::__cxx11::directory_iterator"* nonnull dereferenceable(16) align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq %r14, %rdi
	# SetupCalls(1313:3): move argument %"class.std::filesystem::__cxx11::directory_iterator"* nonnull dereferenceable(16) align 8 ^51
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNSt10filesystem7__cxx1118directory_iteratorC2ERKS1_
	# Unclobber %rax
	movq -464(%rbp), %rax
	# SetupCalls(1314:3): move argument %"class.std::filesystem::__cxx11::directory_iterator"* sret align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq -416(%rbp), %rdi
	# SetupCalls(1314:3): move argument %"class.std::filesystem::__cxx11::directory_iterator"* ^10
	# Fixed movzx with identical source and destination widths
	movq %r14, %rsi
	callq _ZNSt10filesystem7__cxx115beginENS0_18directory_iteratorE
	# SetupCalls(1315:3): move argument %"class.std::filesystem::__cxx11::directory_iterator"* nonnull dereferenceable(16) align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq %r14, %rdi
	callq _ZNSt10filesystem7__cxx1118directory_iteratorD2Ev
	# LowerLoad(1316:3).2: (^7) into %"class.std::filesystem::__cxx11::directory_iterator"* ^52
	movq (%rbx), %rax
	# Clobber %rax
	movq %rax, -464(%rbp)
	# SetupCalls(1317:3): move argument %"class.std::filesystem::__cxx11::directory_iterator"* nonnull dereferenceable(16) align 8 ^12
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(1317:3): move argument %"class.std::filesystem::__cxx11::directory_iterator"* nonnull dereferenceable(16) align 8 ^52
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNSt10filesystem7__cxx1118directory_iteratorC2ERKS1_
	# Unclobber %rax
	movq -464(%rbp), %rax
	# SetupCalls(1318:3): move argument %"class.std::filesystem::__cxx11::directory_iterator"* sret align 8 ^11
	# Fixed movzx with identical source and destination widths
	movq -424(%rbp), %rdi
	# SetupCalls(1318:3): move argument %"class.std::filesystem::__cxx11::directory_iterator"* ^12
	# Fixed movzx with identical source and destination widths
	movq %r12, %rsi
	callq _ZNSt10filesystem7__cxx113endENS0_18directory_iteratorE
	# SetupCalls(1319:3): move argument %"class.std::filesystem::__cxx11::directory_iterator"* nonnull dereferenceable(16) align 8 ^12
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	callq _ZNSt10filesystem7__cxx1118directory_iteratorD2Ev
	.___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M604:
	# SetupCalls(1323:3): move argument %"class.std::filesystem::__cxx11::directory_iterator"* nonnull dereferenceable(16) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq -416(%rbp), %rdi
	# SetupCalls(1323:3): move argument %"class.std::filesystem::__cxx11::directory_iterator"* nonnull dereferenceable(16) align 8 ^11
	# Fixed movzx with identical source and destination widths
	movq -424(%rbp), %rsi
	callq _ZNSt10filesystem7__cxx11neERKNS0_18directory_iteratorES3_
	# SetupCalls(1323:3): move i1 result from %rax
	movb %al, %bl
	cmpb $0, %bl
	jne .___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M696
	.___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M630:
	# LowerStore(1327:3).3: mov $imm, (^5)
	movq -344(%rbp), %rax
	movl $2, (%rax)
	# SetupCalls(1328:3): move argument %"class.std::filesystem::__cxx11::directory_iterator"* nonnull dereferenceable(16) align 8 ^11
	# Fixed movzx with identical source and destination widths
	movq -424(%rbp), %rdi
	callq _ZNSt10filesystem7__cxx1118directory_iteratorD2Ev
	# SetupCalls(1329:3): move argument %"class.std::filesystem::__cxx11::directory_iterator"* nonnull dereferenceable(16) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq -416(%rbp), %rdi
	callq _ZNSt10filesystem7__cxx1118directory_iteratorD2Ev
	# SetupCalls(1330:3): move argument %"class.std::filesystem::__cxx11::directory_iterator"* nonnull dereferenceable(16) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq -408(%rbp), %rdi
	callq _ZNSt10filesystem7__cxx1118directory_iteratorD2Ev
	jmp .___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M915
	.___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M696:
	# SetupCalls(1334:3): move argument %"class.std::filesystem::__cxx11::directory_iterator"* nonnull dereferenceable(16) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq -416(%rbp), %rdi
	callq _ZNKSt10filesystem7__cxx1118directory_iteratordeEv@PLT
	# SetupCalls(1334:3): move %"class.std::filesystem::__cxx11::directory_entry"* result from %rax
	movq %rax, %rbx
	# LowerStore(1335:3).9: mov %"class.std::filesystem::__cxx11::directory_entry"* ^57, (^13)
	movq -432(%rbp), %rax
	movq %rbx, (%rax)
	# LowerLoad(1336:3).2: (^13) into %"class.std::filesystem::__cxx11::directory_entry"* ^58
	movq -432(%rbp), %rbx
	movq (%rbx), %rax
	# Clobber %rax
	movq %rax, -464(%rbp)
	# SetupCalls(1337:3): move argument %"class.std::filesystem::__cxx11::directory_entry"* nonnull dereferenceable(41) align 8 ^58
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNKSt10filesystem7__cxx1115directory_entry4pathEv
	# SetupCalls(1337:3): move %"class.std::filesystem::__cxx11::path"* result from %rax
	movq %rax, %rbx
	# Unclobber %rax
	movq -464(%rbp), %rax
	# SetupCalls(1338:3): move argument %"class.std::filesystem::__cxx11::path"* sret align 8 ^15
	# Fixed movzx with identical source and destination widths
	movq -448(%rbp), %rdi
	# SetupCalls(1338:3): move argument %"class.std::filesystem::__cxx11::path"* nonnull dereferenceable(40) align 8 ^59
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZNKSt10filesystem7__cxx114path8filenameEv
	# SetupCalls(1339:3): move argument %"class.std::__cxx11::basic_string"* sret align 8 ^14
	# Fixed movzx with identical source and destination widths
	movq -440(%rbp), %rdi
	# SetupCalls(1339:3): move argument %"class.std::filesystem::__cxx11::path"* nonnull dereferenceable(40) align 8 ^15
	# Fixed movzx with identical source and destination widths
	movq -448(%rbp), %rsi
	callq _ZNKSt10filesystem7__cxx114path6stringEv
	# LowerLoad(1340:3).2: (^13) into %"class.std::filesystem::__cxx11::directory_entry"* ^60
	movq -432(%rbp), %rbx
	movq (%rbx), %rax
	# Clobber %rax
	movq %rax, -464(%rbp)
	# SetupCalls(1341:3): move argument %"class.std::filesystem::__cxx11::directory_entry"* nonnull dereferenceable(41) align 8 ^60
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNKSt10filesystem7__cxx1115directory_entry12is_directoryEv
	# SetupCalls(1341:3): move i1 result from %rax
	movb %al, %bl
	# Unclobber %rax
	movq -464(%rbp), %rax
	# LowerBasicConversion(1342:3): i1 ^61 -> i8 ^62
	movb %bl, %al
	# LowerStore(1343:3).9: mov i8 ^62, (^16)
	movq -456(%rbp), %rbx
	movb %al, (%rbx)
	# SetupCalls(1344:3): move argument %"class.std::vector.5"* nonnull dereferenceable(24) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq -352(%rbp), %rdi
	# SetupCalls(1344:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^14
	# Fixed movzx with identical source and destination widths
	movq -440(%rbp), %rsi
	# SetupCalls(1344:3): move argument i8* nonnull dereferenceable(1) align 1 ^16
	# Fixed movzx with identical source and destination widths
	movq -456(%rbp), %rdx
	callq _ZNSt6vectorI6LsItemSaIS0_EE12emplace_backIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbEEERS0_DpOT_
	# SetupCalls(1344:3): move %struct.LsItem* result from %rax
	movq %rax, %rax
	# SetupCalls(1345:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^14
	# Fixed movzx with identical source and destination widths
	movq -440(%rbp), %rdi
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
	# SetupCalls(1346:3): move argument %"class.std::filesystem::__cxx11::path"* nonnull dereferenceable(40) align 8 ^15
	# Fixed movzx with identical source and destination widths
	movq -448(%rbp), %rdi
	callq _ZNSt10filesystem7__cxx114pathD2Ev
	# SetupCalls(1350:3): move argument %"class.std::filesystem::__cxx11::directory_iterator"* nonnull dereferenceable(16) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq -416(%rbp), %rdi
	callq _ZNSt10filesystem7__cxx1118directory_iteratorppEv@PLT
	# SetupCalls(1350:3): move %"class.std::filesystem::__cxx11::directory_iterator"* result from %rax
	movq %rax, %rax
	jmp .___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M604
	.___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M915:
	# SetupCalls(1354:3): move argument %"class.std::vector.5"* nonnull dereferenceable(24) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq -352(%rbp), %rdi
	callq _ZNSt6vectorI6LsItemSaIS0_EE5beginEv
	# SetupCalls(1354:3): move %struct.LsItem* result from %rax
	movq %rax, %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(1355:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^17 -> ^68, indices=0,0
	movq -400(%rbp), %rax
	# LowerGetelementptr(1355:3): type of ^68 is %struct.LsItem**
	# LowerStore(1356:3).9: mov %struct.LsItem* ^67, (^68)
	movq %rbx, (%rax)
	# SetupCalls(1357:3): move argument %"class.std::vector.5"* nonnull dereferenceable(24) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq -352(%rbp), %rdi
	callq _ZNSt6vectorI6LsItemSaIS0_EE3endEv
	# SetupCalls(1357:3): move %struct.LsItem* result from %rax
	movq %rax, %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(1358:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^18 -> ^70, indices=0,0
	movq -392(%rbp), %rax
	# LowerGetelementptr(1358:3): type of ^70 is %struct.LsItem**
	# LowerStore(1359:3).9: mov %struct.LsItem* ^69, (^70)
	movq %rbx, (%rax)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(1360:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^17 -> ^71, indices=0,0
	movq -400(%rbp), %rax
	# LowerGetelementptr(1360:3): type of ^71 is %struct.LsItem**
	# LowerLoad(1361:3).2: (^71) into %struct.LsItem* ^72
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(1362:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^18 -> ^73, indices=0,0
	movq -392(%rbp), %rax
	# LowerGetelementptr(1362:3): type of ^73 is %struct.LsItem**
	# LowerLoad(1363:3).2: (^73) into %struct.LsItem* ^74
	movq (%rax), %rcx
	# Clobber %rcx
	movq %rcx, -472(%rbp)
	# SetupCalls(1364:3): move argument %struct.LsItem* ^72
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(1364:3): move argument %struct.LsItem* ^74
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	callq _ZSt4sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEEZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISB_EEE3$_0EvT_SH_T0_
	# Unclobber %rcx
	movq -472(%rbp), %rcx
	# LowerStore(1365:3).9: mov %"class.std::vector.5"* ^6, (^20)
	movq -384(%rbp), %rax
	# Fixing source-to-dest movq -352(%rbp), (%rax)
	movq -352(%rbp), %r15
	movq %r15, (%rax)
	# LowerLoad(1366:3).2: (^20) into %"class.std::vector.5"* ^75
	movq -384(%rbp), %rax
	movq (%rax), %rbx
	# SetupCalls(1367:3): move argument %"class.std::vector.5"* nonnull dereferenceable(24) align 8 ^75
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt6vectorI6LsItemSaIS0_EE5beginEv
	# SetupCalls(1367:3): move %struct.LsItem* result from %rax
	movq %rax, %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(1368:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^21 -> ^77, indices=0,0
	movq -360(%rbp), %rax
	# LowerGetelementptr(1368:3): type of ^77 is %struct.LsItem**
	# LowerStore(1369:3).9: mov %struct.LsItem* ^76, (^77)
	movq %rbx, (%rax)
	# LowerLoad(1370:3).2: (^20) into %"class.std::vector.5"* ^78
	movq -384(%rbp), %rbx
	movq (%rbx), %rax
	# Clobber %rax
	movq %rax, -464(%rbp)
	# SetupCalls(1371:3): move argument %"class.std::vector.5"* nonnull dereferenceable(24) align 8 ^78
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt6vectorI6LsItemSaIS0_EE3endEv
	# SetupCalls(1371:3): move %struct.LsItem* result from %rax
	movq %rax, %rbx
	# Unclobber %rax
	movq -464(%rbp), %rax
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(1372:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^22 -> ^80, indices=0,0
	movq -368(%rbp), %rax
	# LowerGetelementptr(1372:3): type of ^80 is %struct.LsItem**
	# LowerStore(1373:3).9: mov %struct.LsItem* ^79, (^80)
	movq %rbx, (%rax)
	.___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M1073:
	# SetupCalls(1377:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^21
	# Fixed movzx with identical source and destination widths
	movq -360(%rbp), %rdi
	# SetupCalls(1377:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^22
	# Fixed movzx with identical source and destination widths
	movq -368(%rbp), %rsi
	callq _ZN9__gnu_cxxneIP6LsItemSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_
	# SetupCalls(1377:3): move i1 result from %rax
	movb %al, %bl
	cmpb $0, %bl
	jne .___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M1099
	jmp .___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M1303
	.___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M1099:
	# SetupCalls(1381:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^21
	# Fixed movzx with identical source and destination widths
	movq -360(%rbp), %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEdeEv
	# SetupCalls(1381:3): move %struct.LsItem* result from %rax
	movq %rax, %rbx
	# LowerStore(1382:3).9: mov %struct.LsItem* ^84, (^23)
	movq -376(%rbp), %rax
	movq %rbx, (%rax)
	# LowerLoad(1383:3).2: (^23) into %struct.LsItem* ^85
	movq -376(%rbp), %rax
	movq (%rax), %rbx
	# tt = Pointer, type = %struct.LsItem
	# LowerGetelementptr(1384:3): struct-type: %struct.LsItem* ^85 -> ^86, indices=0,1
	movq %rbx, %rax
	addq $32, %rax
	# LowerGetelementptr(1384:3): type of ^86 is i8*
	# LowerLoad(1385:3).2: (^86) into i8 ^87
	movb (%rax), %bl
	# LowerTrunc(1386:3): 8 to 1, move
	movb %bl, %al
	# LowerTrunc(1386:3): 8 to 1, apply mask
	andq $1, %rax
	cmpb $0, %al
	jne .___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M1138
	jmp .___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M1220
	.___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M1138:
	# SetupCalls(1390:3): move argument %"class.std::basic_ostream"* nonnull dereferenceable(8) align 8 @_ZSt4cout
	leaq _ZSt4cout(%rip), %rdi
	# SetupCalls(1390:3): move argument i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i64 0, i64 0)
	leaq .str.3(%rip), %rsi
	callq _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
	# SetupCalls(1390:3): move %"class.std::basic_ostream"* result from %rax
	movq %rax, %rbx
	# LowerLoad(1391:3).2: (^23) into %struct.LsItem* ^91
	movq -376(%rbp), %rax
	movq (%rax), %rcx
	# tt = Pointer, type = %struct.LsItem
	# LowerGetelementptr(1392:3): struct-type: %struct.LsItem* ^91 -> ^92, indices=0,0
	movq %rcx, %rax
	# LowerGetelementptr(1392:3): type of ^92 is %"class.std::__cxx11::basic_string"*
	# Clobber %rax
	movq %rax, -464(%rbp)
	# SetupCalls(1393:3): move argument %"class.std::basic_ostream"* nonnull dereferenceable(8) align 8 ^90
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(1393:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^92
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKNSt7__cxx1112basic_stringIS4_S5_T1_EE@PLT
	# SetupCalls(1393:3): move %"class.std::basic_ostream"* result from %rax
	movq %rax, %rbx
	# Unclobber %rax
	movq -464(%rbp), %rax
	# SetupCalls(1394:3): move argument %"class.std::basic_ostream"* nonnull dereferenceable(8) align 8 ^93
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(1394:3): move argument i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0)
	leaq .str.4(%rip), %rsi
	callq _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
	# SetupCalls(1394:3): move %"class.std::basic_ostream"* result from %rax
	movq %rax, %rax
	jmp .___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M1278
	.___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M1220:
	# LowerLoad(1398:3).2: (^23) into %struct.LsItem* ^96
	movq -376(%rbp), %rax
	movq (%rax), %rbx
	# tt = Pointer, type = %struct.LsItem
	# LowerGetelementptr(1399:3): struct-type: %struct.LsItem* ^96 -> ^97, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(1399:3): type of ^97 is %"class.std::__cxx11::basic_string"*
	# Clobber %rax
	movq %rax, -464(%rbp)
	# SetupCalls(1400:3): move argument %"class.std::basic_ostream"* nonnull dereferenceable(8) align 8 @_ZSt4cout
	leaq _ZSt4cout(%rip), %rdi
	# SetupCalls(1400:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^97
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKNSt7__cxx1112basic_stringIS4_S5_T1_EE@PLT
	# SetupCalls(1400:3): move %"class.std::basic_ostream"* result from %rax
	movq %rax, %rbx
	# Unclobber %rax
	movq -464(%rbp), %rax
	# SetupCalls(1401:3): move argument %"class.std::basic_ostream"* nonnull dereferenceable(8) align 8 ^98
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(1401:3): move argument i8 signext 10
	movq $10, %rsi
	movsbq %sil, %rsi
	callq _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@PLT
	# SetupCalls(1401:3): move %"class.std::basic_ostream"* result from %rax
	movq %rax, %rax
	.___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M1278:
	# SetupCalls(1408:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^21
	# Fixed movzx with identical source and destination widths
	movq -360(%rbp), %rdi
	callq _ZN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEppEv
	# SetupCalls(1408:3): move %"class.__gnu_cxx::__normal_iterator"* result from %rax
	movq %rax, %rax
	jmp .___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M1073
	.___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M1303:
	# LowerStore(1412:3).3: mov $imm, (^2)
	movq -328(%rbp), %rax
	movl $0, (%rax)
	# LowerStore(1413:3).3: mov $imm, (^5)
	movq -344(%rbp), %rax
	movl $1, (%rax)
	# SetupCalls(1414:3): move argument %"class.std::vector.5"* nonnull dereferenceable(24) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq -352(%rbp), %rdi
	callq _ZNSt6vectorI6LsItemSaIS0_EED2Ev
	.___Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M1329:
	# SetupCalls(1418:3): move argument %"class.std::filesystem::__cxx11::path"* nonnull dereferenceable(40) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -336(%rbp), %rdi
	callq _ZNSt10filesystem7__cxx114pathD2Ev
	# LowerLoad(1419:3).2: (^2) into i32 ^105
	movq -328(%rbp), %rax
	movl (%rax), %ebx
	movl %ebx, %eax
	movq -480(%rbp), %r15
	movq -544(%rbp), %r14
	movq -488(%rbp), %r13
	movq -560(%rbp), %r12
	movq -520(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEES3_ET_S8_T0_
.p2align 4, 0x90
_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEES3_ET_S8_T0_:
	.___ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEES3_ET_S8_T0___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(128 + 0, 16)
	subq $128, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -80(%rbp)
	movq %r12, -64(%rbp)
	movq %r13, -72(%rbp)
	movq %r14, -56(%rbp)
	# LowerAlloca(9158:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^3
	leaq -8(%rbp), %r14
	# LowerAlloca(9159:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^4
	leaq -16(%rbp), %r12
	# LowerAlloca(9160:3): size = 8, type = %struct.LsItem**, var = ^5
	leaq -24(%rbp), %rcx
	# LowerAlloca(9161:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^6
	leaq -32(%rbp), %r13
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(9162:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^4 -> ^7, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(9162:3): type of ^7 is %struct.LsItem**
	# LowerStore(9163:3).9: mov %struct.LsItem* %rdi, (^7)
	movq %rdi, (%rax)
	# LowerStore(9164:3).9: mov %struct.LsItem* %rsi, (^5)
	movq %rsi, (%rcx)
	# LowerLoad(9165:3).2: (^5) into %struct.LsItem* ^8
	movq (%rcx), %rbx
	# LowerBasicConversion(9166:3): %"class.__gnu_cxx::__normal_iterator"* ^6 -> i8* ^9
	movq %r13, %rax
	# LowerBasicConversion(9167:3): %"class.__gnu_cxx::__normal_iterator"* ^4 -> i8* ^10
	movq %r12, %rcx
	# Clobber %rcx
	movq %rcx, -40(%rbp)
	# Clobber %rax
	movq %rax, -48(%rbp)
	# SetupCalls(9168:3): move argument i8* align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(9168:3): move argument i8* align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(9168:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -48(%rbp), %rax
	# Unclobber %rcx
	movq -40(%rbp), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(9169:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^6 -> ^11, indices=0,0
	movq %r13, %rcx
	# LowerGetelementptr(9169:3): type of ^11 is %struct.LsItem**
	# LowerLoad(9170:3).2: (^11) into %struct.LsItem* ^12
	movq (%rcx), %rax
	# Clobber %rax
	movq %rax, -48(%rbp)
	# SetupCalls(9171:3): move argument %struct.LsItem* ^12
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZSt12__niter_baseIP6LsItemSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE
	# SetupCalls(9171:3): move %struct.LsItem* result from %rax
	movq %rax, %r13
	# Unclobber %rax
	movq -48(%rbp), %rax
	# LowerBasicConversion(9172:3): %struct.LsItem* ^8 -> i64 ^14
	movq %rbx, %rax
	# LowerBasicConversion(9173:3): %struct.LsItem* ^13 -> i64 ^15
	movq %r13, %rbx
	# LowerMath(9174:3): ^14, ^15 into i64 ^16
	movq %rax, %rcx
	subq %rbx, %rcx
	# LowerSdiv(9175:3): ^16, 40 into i64 ^17
	movq %rcx, %rbx
	movq $0, %rdx
	movq %rbx, %rax
	movq $40, %rbx
	idivq %rbx
	movq %rax, %rbx
	# SetupCalls(9176:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(9176:3): move argument i64 ^17
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEplEl
	# SetupCalls(9176:3): move %struct.LsItem* result from %rax
	movq %rax, %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(9177:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^3 -> ^19, indices=0,0
	movq %r14, %rax
	# LowerGetelementptr(9177:3): type of ^19 is %struct.LsItem**
	# LowerStore(9178:3).9: mov %struct.LsItem* ^18, (^19)
	movq %rbx, (%rax)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(9179:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^3 -> ^20, indices=0,0
	movq %r14, %rax
	# LowerGetelementptr(9179:3): type of ^20 is %struct.LsItem**
	# LowerLoad(9180:3).2: (^20) into %struct.LsItem* ^21
	movq (%rax), %rbx
	movq %rbx, %rax
	movq -56(%rbp), %r14
	movq -72(%rbp), %r13
	movq -64(%rbp), %r12
	movq -80(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISA_EEEEEC2IRA5_KcRSF_Lb1EEEOT_OT0_
.p2align 4, 0x90
_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISA_EEEEEC2IRA5_KcRSF_Lb1EEEOT_OT0_:
	.___ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISA_EEEEEC2IRA5_KcRSF_Lb1EEEOT_OT0___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(128 + 0, 16)
	subq $128, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -80(%rbp)
	movq %r12, -88(%rbp)
	movq %r13, -96(%rbp)
	movq %r14, -104(%rbp)
	movq %r15, -112(%rbp)
	# LowerAlloca(2465:3): size = 8, type = %"class.std::__new_allocator.1"**, var = ^4
	leaq -8(%rbp), %rbx
	# LowerAlloca(2466:3): size = 8, type = %"class.std::allocator.0"**, var = ^5
	leaq -16(%rbp), %r12
	# LowerAlloca(2467:3): size = 8, type = %"class.std::allocator.0"**, var = ^6
	leaq -24(%rbp), %r8
	# LowerAlloca(2468:3): size = 8, type = %"struct.std::pair"**, var = ^7
	leaq -32(%rbp), %rcx
	# LowerAlloca(2469:3): size = 8, type = [5 x i8]**, var = ^8
	leaq -40(%rbp), %rax
	# LowerAlloca(2470:3): size = 8, type = i32 (%"class.std::vector"*) ***, var = ^9
	leaq -48(%rbp), %r13
	# LowerAlloca(2471:3): size = 1, type = %"class.std::allocator.0"*, var = ^10
	leaq -49(%rbp), %r14
	# LowerStore(2472:3).9: mov %"struct.std::pair"* %rdi, (^7)
	movq %rdi, (%rcx)
	# LowerStore(2473:3).9: mov [5 x i8]* %rsi, (^8)
	movq %rsi, (%rax)
	# LowerStore(2474:3).9: mov i32 (%"class.std::vector"*) ** %rdx, (^9)
	movq %rdx, (%r13)
	# LowerLoad(2475:3).2: (^7) into %"struct.std::pair"* ^11
	movq (%rcx), %r15
	# LowerBasicConversion(2476:3): %"struct.std::pair"* ^11 -> %"class.std::__pair_base"* ^12
	movq %r15, %rcx
	# tt = Pointer, type = %"struct.std::pair"
	# LowerGetelementptr(2477:3): struct-type: %"struct.std::pair"* ^11 -> ^13, indices=0,0
	movq %r15, %rcx
	# LowerGetelementptr(2477:3): type of ^13 is %"class.std::__cxx11::basic_string"*
	# LowerLoad(2478:3).2: (^8) into [5 x i8]* ^14
	movq (%rax), %rdx
	# tt = Pointer, type = [5 x i8]
	# LowerGetelementptr(2479:3): struct-type: [5 x i8]* ^14 -> ^15, indices=0,0
	movq %rdx, %rax
	# LowerGetelementptr(2479:3): type of ^15 is i8*
	# LowerStore(2480:3).9: mov %"class.std::allocator.0"* ^10, (^6)
	movq %r14, (%r8)
	# LowerLoad(2481:3).2: (^6) into %"class.std::allocator.0"* ^16
	movq (%r8), %rdx
	# LowerBasicConversion(2482:3): %"class.std::allocator.0"* ^16 -> %"class.std::__new_allocator.1"* ^17
	movq %rdx, %rsi
	# LowerStore(2483:3).9: mov %"class.std::__new_allocator.1"* ^17, (^4)
	movq %rsi, (%rbx)
	# LowerLoad(2484:3).2: (^4) into %"class.std::__new_allocator.1"* ^18
	movq (%rbx), %rdx
	# Clobber %rcx
	movq %rcx, -64(%rbp)
	# Clobber %rax
	movq %rax, -72(%rbp)
	# SetupCalls(2485:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^13
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(2485:3): move argument i8* ^15
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(2485:3): move argument %"class.std::allocator.0"* nonnull dereferenceable(1) align 1 ^10
	# Fixed movzx with identical source and destination widths
	movq %r14, %rdx
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_
	# Unclobber %rax
	movq -72(%rbp), %rax
	# Unclobber %rcx
	movq -64(%rbp), %rcx
	# LowerStore(2486:3).9: mov %"class.std::allocator.0"* ^10, (^5)
	movq %r14, (%r12)
	# LowerLoad(2487:3).2: (^5) into %"class.std::allocator.0"* ^19
	movq (%r12), %rbx
	# LowerBasicConversion(2488:3): %"class.std::allocator.0"* ^19 -> %"class.std::__new_allocator.1"* ^20
	movq %rbx, %rax
	# Clobber %rax
	movq %rax, -72(%rbp)
	# SetupCalls(2489:3): move argument %"class.std::__new_allocator.1"* nonnull dereferenceable(1) align 1 ^20
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt15__new_allocatorIcED2Ev
	# Unclobber %rax
	movq -72(%rbp), %rax
	# tt = Pointer, type = %"struct.std::pair"
	# LowerGetelementptr(2490:3): struct-type: %"struct.std::pair"* ^11 -> ^21, indices=0,1
	movq %r15, %rax
	addq $32, %rax
	# LowerGetelementptr(2490:3): type of ^21 is %"class.std::function"*
	# LowerLoad(2491:3).2: (^9) into i32 (%"class.std::vector"*) ** ^22
	movq (%r13), %rbx
	# Clobber %rax
	movq %rax, -72(%rbp)
	# SetupCalls(2492:3): move argument %"class.std::function"* nonnull dereferenceable(32) align 8 ^21
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(2492:3): move argument i32 (%"class.std::vector"*) ** nonnull ^22
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZNSt8functionIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEEC2IRS9_vEEOT_
	# Unclobber %rax
	movq -72(%rbp), %rax
	movq -112(%rbp), %r15
	movq -104(%rbp), %r14
	movq -96(%rbp), %r13
	movq -88(%rbp), %r12
	movq -80(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt16initializer_listISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEE3endEv
.p2align 4, 0x90
_ZNKSt16initializer_listISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEE3endEv:
	.___ZNKSt16initializer_listISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEE3endEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	movq %r12, -16(%rbp)
	# LowerAlloca(9471:3): size = 8, type = %"class.std::initializer_list.13"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(9472:3).9: mov %"class.std::initializer_list.13"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(9473:3).2: (^2) into %"class.std::initializer_list.13"* ^3
	movq (%rax), %r12
	# SetupCalls(9474:3): move argument %"class.std::initializer_list.13"* nonnull dereferenceable(16) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	callq _ZNKSt16initializer_listISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEE5beginEv
	# SetupCalls(9474:3): move %"struct.std::pair"* result from %rax
	movq %rax, %rbx
	# SetupCalls(9475:3): move argument %"class.std::initializer_list.13"* nonnull dereferenceable(16) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	callq _ZNKSt16initializer_listISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEE4sizeEv
	# SetupCalls(9475:3): move i64 result from %rax
	movq %rax, %r12
	# tt = Pointer, type = %"struct.std::pair"
	# LowerGetelementptr(9476:3): pointer-type -> ^6
	movq %r12, %rax
	shlq $6, %rax
	addq %rbx, %rax
	movq -16(%rbp), %r12
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEppEv
.p2align 4, 0x90
_ZN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEppEv:
	.___ZN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEppEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(1964:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(1965:3).9: mov %"class.__gnu_cxx::__normal_iterator"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(1966:3).2: (^2) into %"class.__gnu_cxx::__normal_iterator"* ^3
	movq (%rax), %rdx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(1967:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^3 -> ^4, indices=0,0
	movq %rdx, %rax
	# LowerGetelementptr(1967:3): type of ^4 is %struct.LsItem**
	# LowerLoad(1968:3).2: (^4) into %struct.LsItem* ^5
	movq (%rax), %rcx
	# tt = Pointer, type = %struct.LsItem
	# LowerGetelementptr(1969:3): struct-type: %struct.LsItem* ^5 -> ^6, indices=1
	movq %rcx, %rbx
	addq $40, %rbx
	# LowerGetelementptr(1969:3): type of ^6 is %struct.LsItem*
	# LowerStore(1970:3).9: mov %struct.LsItem* ^6, (^4)
	movq %rbx, (%rax)
	movq %rdx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZN9__gnu_cxxneIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKNS_17__normal_iteratorIT_T0_EESE_
.p2align 4, 0x90
_ZN9__gnu_cxxneIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKNS_17__normal_iteratorIT_T0_EESE_:
	.___ZN9__gnu_cxxneIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKNS_17__normal_iteratorIT_T0_EESE___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(56 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	movq %r12, -48(%rbp)
	movq %r13, -40(%rbp)
	# LowerAlloca(6604:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator.20"**, var = ^3
	leaq -8(%rbp), %rcx
	# LowerAlloca(6605:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator.20"**, var = ^4
	leaq -16(%rbp), %rbx
	# LowerStore(6606:3).9: mov %"class.__gnu_cxx::__normal_iterator.20"* %rdi, (^3)
	movq %rdi, (%rcx)
	# LowerStore(6607:3).9: mov %"class.__gnu_cxx::__normal_iterator.20"* %rsi, (^4)
	movq %rsi, (%rbx)
	# LowerLoad(6608:3).2: (^3) into %"class.__gnu_cxx::__normal_iterator.20"* ^5
	movq (%rcx), %rax
	# Clobber %rax
	movq %rax, -24(%rbp)
	# SetupCalls(6609:3): move argument %"class.__gnu_cxx::__normal_iterator.20"* nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv
	# SetupCalls(6609:3): move i8** result from %rax
	movq %rax, %r13
	# Unclobber %rax
	movq -24(%rbp), %rax
	# LowerLoad(6610:3).2: (^6) into i8* ^7
	movq (%r13), %r12
	# LowerLoad(6611:3).2: (^4) into %"class.__gnu_cxx::__normal_iterator.20"* ^8
	movq (%rbx), %rax
	# Clobber %rax
	movq %rax, -24(%rbp)
	# SetupCalls(6612:3): move argument %"class.__gnu_cxx::__normal_iterator.20"* nonnull dereferenceable(8) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv
	# SetupCalls(6612:3): move i8** result from %rax
	movq %rax, %rbx
	# Unclobber %rax
	movq -24(%rbp), %rax
	# LowerLoad(6613:3).2: (^9) into i8* ^10
	movq (%rbx), %rax
	# LowerIcmp(6614:3): i8* ^7 vs. operand i8* ^10
	cmpq %rax, %r12
	setne %al
	andq $1, %rax
	movq -40(%rbp), %r13
	movq -48(%rbp), %r12
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZStlsIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_St17basic_string_viewIS3_S4_E
.p2align 4, 0x90
_ZStlsIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_St17basic_string_viewIS3_S4_E:
	.___ZStlsIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_St17basic_string_viewIS3_S4_E__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(64 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	movq %r12, -40(%rbp)
	movq %r13, -48(%rbp)
	# LowerAlloca(2776:3): size = 16, type = %"class.std::basic_string_view"*, var = ^4
	leaq -16(%rbp), %rbx
	# LowerAlloca(2777:3): size = 8, type = %"class.std::basic_ostream"**, var = ^5
	leaq -24(%rbp), %r8
	# LowerBasicConversion(2778:3): %"class.std::basic_string_view"* ^4 -> {i64, i8*}* ^6
	movq %rbx, %rcx
	# tt = Pointer, type = {i64, i8*}
	# LowerGetelementptr(2779:3): struct-type: {i64, i8*}* ^6 -> ^7, indices=0,0
	movq %rcx, %rax
	# LowerGetelementptr(2779:3): type of ^7 is i64*
	# LowerStore(2780:3).9: mov i64 %rsi, (^7)
	movq %rsi, (%rax)
	# tt = Pointer, type = {i64, i8*}
	# LowerGetelementptr(2781:3): struct-type: {i64, i8*}* ^6 -> ^8, indices=0,1
	movq %rcx, %rax
	addq $8, %rax
	# LowerGetelementptr(2781:3): type of ^8 is i8**
	# LowerStore(2782:3).9: mov i8* %rdx, (^8)
	movq %rdx, (%rax)
	# LowerStore(2783:3).9: mov %"class.std::basic_ostream"* %rdi, (^5)
	movq %rdi, (%r8)
	# LowerLoad(2784:3).2: (^5) into %"class.std::basic_ostream"* ^9
	movq (%r8), %r12
	# SetupCalls(2785:3): move argument %"class.std::basic_string_view"* nonnull dereferenceable(16) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv
	# SetupCalls(2785:3): move i8* result from %rax
	movq %rax, %r13
	# SetupCalls(2786:3): move argument %"class.std::basic_string_view"* nonnull dereferenceable(16) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv
	# SetupCalls(2786:3): move i64 result from %rax
	movq %rax, %rbx
	# SetupCalls(2787:3): move argument %"class.std::basic_ostream"* nonnull dereferenceable(8) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(2787:3): move argument i8* ^10
	# Fixed movzx with identical source and destination widths
	movq %r13, %rsi
	# SetupCalls(2787:3): move argument i64 ^11
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdx
	callq _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT
	# SetupCalls(2787:3): move %"class.std::basic_ostream"* result from %rax
	movq %rax, %rbx
	movq %rbx, %rax
	movq -48(%rbp), %r13
	movq -40(%rbp), %r12
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt3getILm1EJPNSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSB_
.p2align 4, 0x90
_ZSt3getILm1EJPNSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSB_:
	.___ZSt3getILm1EJPNSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSB___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(4137:3): size = 8, type = %"class.std::tuple"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(4138:3).9: mov %"class.std::tuple"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(4139:3).2: (^2) into %"class.std::tuple"* ^3
	movq (%rax), %rbx
	# LowerBasicConversion(4140:3): %"class.std::tuple"* ^3 -> %"struct.std::_Tuple_impl.3"* ^4
	movq %rbx, %rax
	# Clobber %rax
	movq %rax, -16(%rbp)
	# SetupCalls(4141:3): move argument %"struct.std::_Tuple_impl.3"* nonnull dereferenceable(1) align 1 ^4
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZSt12__get_helperILm1ENSt10filesystem7__cxx114path5_List13_Impl_deleterEJEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE
	# SetupCalls(4141:3): move %"struct.std::filesystem::__cxx11::path::_List::_Impl_deleter"* result from %rax
	movq %rax, %rbx
	# Unclobber %rax
	movq -16(%rbp), %rax
	movq %rbx, %rax
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt4__lgIlET_S0_
.p2align 4, 0x90
_ZSt4__lgIlET_S0_:
	.___ZSt4__lgIlET_S0___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(7607:3): size = 8, type = i64*, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(7608:3).9: mov i64 %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(7609:3).2: (^2) into i64 ^3
	movq (%rax), %rbx
	# SetupCalls(7610:3): move argument i64 ^3
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZSt11__bit_widthImEiT_
	# SetupCalls(7610:3): move i32 result from %rax
	movl %eax, %ebx
	# LowerMath(7611:3): ^4, 1 into i32 ^5
	movl %ebx, %ecx
	subl $1, %ecx
	movslq %ecx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10filesystem7__cxx114path8iteratorC2EPKS1_b
.p2align 4, 0x90
_ZNSt10filesystem7__cxx114path8iteratorC2EPKS1_b:
	.___ZNSt10filesystem7__cxx114path8iteratorC2EPKS1_b__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(56 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	# LowerAlloca(3913:3): size = 8, type = %"class.std::filesystem::__cxx11::path::iterator"**, var = ^4
	leaq -8(%rbp), %rbx
	# LowerAlloca(3914:3): size = 8, type = %"class.std::filesystem::__cxx11::path"**, var = ^5
	leaq -16(%rbp), %r8
	# LowerAlloca(3915:3): size = 1, type = i8*, var = ^6
	leaq -17(%rbp), %rcx
	# LowerStore(3916:3).9: mov %"class.std::filesystem::__cxx11::path::iterator"* %rdi, (^4)
	movq %rdi, (%rbx)
	# LowerStore(3917:3).9: mov %"class.std::filesystem::__cxx11::path"* %rsi, (^5)
	movq %rsi, (%r8)
	# LowerBasicConversion(3918:3): i1 %dl -> i8 ^7
	movb %dl, %al
	# LowerStore(3919:3).9: mov i8 ^7, (^6)
	movb %al, (%rcx)
	# LowerLoad(3920:3).2: (^4) into %"class.std::filesystem::__cxx11::path::iterator"* ^8
	movq (%rbx), %rax
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path::iterator"
	# LowerGetelementptr(3921:3): struct-type: %"class.std::filesystem::__cxx11::path::iterator"* ^8 -> ^9, indices=0,0
	movq %rax, %rbx
	# LowerGetelementptr(3921:3): type of ^9 is %"class.std::filesystem::__cxx11::path"**
	# LowerLoad(3922:3).2: (^5) into %"class.std::filesystem::__cxx11::path"* ^10
	movq (%r8), %rdx
	# LowerStore(3923:3).9: mov %"class.std::filesystem::__cxx11::path"* ^10, (^9)
	movq %rdx, (%rbx)
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path::iterator"
	# LowerGetelementptr(3924:3): struct-type: %"class.std::filesystem::__cxx11::path::iterator"* ^8 -> ^11, indices=0,1
	movq %rax, %rbx
	addq $8, %rbx
	# LowerGetelementptr(3924:3): type of ^11 is %"struct.std::filesystem::__cxx11::path::_Cmpt"**
	# LowerStore(3925:3).3: mov $imm, (^11)
	movq $0, (%rbx)
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path::iterator"
	# LowerGetelementptr(3926:3): struct-type: %"class.std::filesystem::__cxx11::path::iterator"* ^8 -> ^12, indices=0,2
	movq %rax, %rbx
	addq $16, %rbx
	# LowerGetelementptr(3926:3): type of ^12 is i8*
	# LowerLoad(3927:3).2: (^6) into i8 ^13
	movb (%rcx), %al
	# LowerTrunc(3928:3): 8 to 1, move
	movb %al, %cl
	# LowerTrunc(3928:3): 8 to 1, apply mask
	andq $1, %rcx
	# LowerBasicConversion(3929:3): i1 ^14 -> i8 ^15
	movb %cl, %al
	# LowerStore(3930:3).9: mov i8 ^15, (^12)
	movb %al, (%rbx)
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt12_Vector_baseI6LsItemSaIS0_EE19_M_get_Tp_allocatorEv
.p2align 4, 0x90
_ZNSt12_Vector_baseI6LsItemSaIS0_EE19_M_get_Tp_allocatorEv:
	.___ZNSt12_Vector_baseI6LsItemSaIS0_EE19_M_get_Tp_allocatorEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(6679:3): size = 8, type = %"struct.std::_Vector_base.6"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(6680:3).9: mov %"struct.std::_Vector_base.6"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(6681:3).2: (^2) into %"struct.std::_Vector_base.6"* ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"struct.std::_Vector_base.6"
	# LowerGetelementptr(6682:3): struct-type: %"struct.std::_Vector_base.6"* ^3 -> ^4, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(6682:3): type of ^4 is %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl"*
	# LowerBasicConversion(6683:3): %"struct.std::_Vector_base.6"* ^4 -> %"class.std::allocator.7"* ^5
	movq %rax, %rbx
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10unique_ptrINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEEaSEOS6_
.p2align 4, 0x90
_ZNSt10unique_ptrINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEEaSEOS6_:
	.___ZNSt10unique_ptrINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEEaSEOS6___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(56 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -40(%rbp)
	movq %r12, -48(%rbp)
	# LowerAlloca(6329:3): size = 8, type = %"class.std::unique_ptr"**, var = ^3
	leaq -8(%rbp), %rbx
	# LowerAlloca(6330:3): size = 8, type = %"class.std::unique_ptr"**, var = ^4
	leaq -16(%rbp), %rax
	# LowerStore(6331:3).9: mov %"class.std::unique_ptr"* %rdi, (^3)
	movq %rdi, (%rbx)
	# LowerStore(6332:3).9: mov %"class.std::unique_ptr"* %rsi, (^4)
	movq %rsi, (%rax)
	# LowerLoad(6333:3).2: (^3) into %"class.std::unique_ptr"* ^5
	movq (%rbx), %r12
	# tt = Pointer, type = %"class.std::unique_ptr"
	# LowerGetelementptr(6334:3): struct-type: %"class.std::unique_ptr"* ^5 -> ^6, indices=0,0
	movq %r12, %rcx
	# LowerGetelementptr(6334:3): type of ^6 is %"struct.std::__uniq_ptr_data"*
	# LowerLoad(6335:3).2: (^4) into %"class.std::unique_ptr"* ^7
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::unique_ptr"
	# LowerGetelementptr(6336:3): struct-type: %"class.std::unique_ptr"* ^7 -> ^8, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(6336:3): type of ^8 is %"struct.std::__uniq_ptr_data"*
	# Clobber %rcx
	movq %rcx, -24(%rbp)
	# Clobber %rax
	movq %rax, -32(%rbp)
	# SetupCalls(6337:3): move argument %"struct.std::__uniq_ptr_data"* nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(6337:3): move argument %"struct.std::__uniq_ptr_data"* nonnull dereferenceable(8) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNSt15__uniq_ptr_dataINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterELb1ELb1EEaSEOS6_
	# SetupCalls(6337:3): move %"struct.std::__uniq_ptr_data"* result from %rax
	movq %rax, %rax
	# Unclobber %rax
	movq -32(%rbp), %rax
	# Unclobber %rcx
	movq -24(%rbp), %rcx
	movq %r12, %rax
	movq -48(%rbp), %r12
	movq -40(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt8functionIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEEC2ERKSA_
.p2align 4, 0x90
_ZNSt8functionIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEEC2ERKSA_:
	.___ZNSt8functionIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEEC2ERKSA___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(88 + 0, 16)
	subq $96, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -48(%rbp)
	movq %r12, -64(%rbp)
	movq %r13, -56(%rbp)
	# LowerAlloca(10508:3): size = 8, type = %"class.std::function"**, var = ^3
	leaq -8(%rbp), %rax
	# LowerAlloca(10509:3): size = 8, type = %"class.std::function"**, var = ^4
	leaq -16(%rbp), %rbx
	# LowerStore(10510:3).9: mov %"class.std::function"* %rdi, (^3)
	movq %rdi, (%rax)
	# LowerStore(10511:3).9: mov %"class.std::function"* %rsi, (^4)
	movq %rsi, (%rbx)
	# LowerLoad(10512:3).2: (^3) into %"class.std::function"* ^5
	movq (%rax), %r13
	# LowerBasicConversion(10513:3): %"class.std::function"* ^5 -> %"struct.std::_Maybe_unary_or_binary_function"* ^6
	movq %r13, %rax
	# LowerBasicConversion(10514:3): %"class.std::function"* ^5 -> %"class.std::_Function_base"* ^7
	movq %r13, %r12
	# LowerBasicConversion(10515:3): %"class.std::_Function_base"* ^7 -> i8* ^8
	movq %r12, %rax
	# tt = Pointer, type = i8
	# LowerGetelementptr(10516:3): struct-type: i8* ^8 -> ^9, indices=0
	movq %rax, %rcx
	# LowerGetelementptr(10516:3): type of ^9 is i8*
	# Clobber %rcx
	movq %rcx, -24(%rbp)
	# SetupCalls(10517:3): move argument i8* align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(10517:3): move argument i32 0
	movq $0, %rsi
	# SetupCalls(10517:3): move argument i64 24
	movq $24, %rdx
	callq memset@PLT
	# Unclobber %rcx
	movq -24(%rbp), %rcx
	# SetupCalls(10518:3): move argument %"class.std::_Function_base"* nonnull dereferenceable(24) align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	callq _ZNSt14_Function_baseC2Ev
	# tt = Pointer, type = %"class.std::function"
	# LowerGetelementptr(10519:3): struct-type: %"class.std::function"* ^5 -> ^10, indices=0,1
	movq %r13, %rax
	addq $24, %rax
	# LowerGetelementptr(10519:3): type of ^10 is i32 (%"union.std::_Any_data"*, %"class.std::vector"*) ***
	# LowerStore(10520:3).3: mov $imm, (^10)
	movq $0, (%rax)
	# LowerLoad(10521:3).2: (^4) into %"class.std::function"* ^11
	movq (%rbx), %rax
	# Clobber %rax
	movq %rax, -32(%rbp)
	# SetupCalls(10522:3): move argument %"class.std::function"* nonnull dereferenceable(32) align 8 ^11
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNKSt8functionIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEEcvbEv
	# SetupCalls(10522:3): move i1 result from %rax
	movb %al, %r12b
	# Unclobber %rax
	movq -32(%rbp), %rax
	cmpb $0, %r12b
	jne .___ZNSt8functionIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEEC2ERKSA___M99
	jmp .___ZNSt8functionIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEEC2ERKSA___M190
	.___ZNSt8functionIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEEC2ERKSA___M99:
	# LowerLoad(10526:3).2: (^4) into %"class.std::function"* ^14
	movq (%rbx), %rax
	# LowerBasicConversion(10527:3): %"class.std::function"* ^14 -> %"class.std::_Function_base"* ^15
	movq %rax, %rcx
	# tt = Pointer, type = %"class.std::_Function_base"
	# LowerGetelementptr(10528:3): struct-type: %"class.std::_Function_base"* ^15 -> ^16, indices=0,1
	movq %rcx, %rax
	addq $16, %rax
	# LowerGetelementptr(10528:3): type of ^16 is i1 (%"union.std::_Any_data"*, %"union.std::_Any_data"*, i32) ***
	# LowerLoad(10529:3).2: (^16) into i1 (%"union.std::_Any_data"*, %"union.std::_Any_data"*, i32) ** ^17
	movq (%rax), %r8
	# LowerBasicConversion(10530:3): %"class.std::function"* ^5 -> %"class.std::_Function_base"* ^18
	movq %r13, %rax
	# tt = Pointer, type = %"class.std::_Function_base"
	# LowerGetelementptr(10531:3): struct-type: %"class.std::_Function_base"* ^18 -> ^19, indices=0,0
	movq %rax, %rcx
	# LowerGetelementptr(10531:3): type of ^19 is %"union.std::_Any_data"*
	# LowerLoad(10532:3).2: (^4) into %"class.std::function"* ^20
	movq (%rbx), %rax
	# LowerBasicConversion(10533:3): %"class.std::function"* ^20 -> %"class.std::_Function_base"* ^21
	movq %rax, %rdx
	# tt = Pointer, type = %"class.std::_Function_base"
	# LowerGetelementptr(10534:3): struct-type: %"class.std::_Function_base"* ^21 -> ^22, indices=0,0
	movq %rdx, %rax
	# LowerGetelementptr(10534:3): type of ^22 is %"union.std::_Any_data"*
	# Clobber %rcx
	movq %rcx, -24(%rbp)
	# Clobber %r8
	movq %r8, -40(%rbp)
	# Clobber %rax
	movq %rax, -32(%rbp)
	# SetupCalls(10535:3): move argument %"union.std::_Any_data"* nonnull dereferenceable(16) align 8 ^19
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(10535:3): move argument %"union.std::_Any_data"* nonnull dereferenceable(16) align 8 ^22
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(10535:3): move argument i32 2
	movq $2, %rdx
	# SetupCalls(10535:3): jump to function operand ^17
	callq *%r8
	# SetupCalls(10535:3): move i1 result from %rax
	movb %al, %al
	# Unclobber %rax
	movq -32(%rbp), %rax
	# Unclobber %r8
	movq -40(%rbp), %r8
	# Unclobber %rcx
	movq -24(%rbp), %rcx
	# LowerLoad(10536:3).2: (^4) into %"class.std::function"* ^24
	movq (%rbx), %rax
	# tt = Pointer, type = %"class.std::function"
	# LowerGetelementptr(10537:3): struct-type: %"class.std::function"* ^24 -> ^25, indices=0,1
	movq %rax, %rcx
	addq $24, %rcx
	# LowerGetelementptr(10537:3): type of ^25 is i32 (%"union.std::_Any_data"*, %"class.std::vector"*) ***
	# LowerLoad(10538:3).2: (^25) into i32 (%"union.std::_Any_data"*, %"class.std::vector"*) ** ^26
	movq (%rcx), %rax
	# tt = Pointer, type = %"class.std::function"
	# LowerGetelementptr(10539:3): struct-type: %"class.std::function"* ^5 -> ^27, indices=0,1
	movq %r13, %rcx
	addq $24, %rcx
	# LowerGetelementptr(10539:3): type of ^27 is i32 (%"union.std::_Any_data"*, %"class.std::vector"*) ***
	# LowerStore(10540:3).9: mov i32 (%"union.std::_Any_data"*, %"class.std::vector"*) ** ^26, (^27)
	movq %rax, (%rcx)
	# LowerLoad(10541:3).2: (^4) into %"class.std::function"* ^28
	movq (%rbx), %rax
	# LowerBasicConversion(10542:3): %"class.std::function"* ^28 -> %"class.std::_Function_base"* ^29
	movq %rax, %rbx
	# tt = Pointer, type = %"class.std::_Function_base"
	# LowerGetelementptr(10543:3): struct-type: %"class.std::_Function_base"* ^29 -> ^30, indices=0,1
	movq %rbx, %rax
	addq $16, %rax
	# LowerGetelementptr(10543:3): type of ^30 is i1 (%"union.std::_Any_data"*, %"union.std::_Any_data"*, i32) ***
	# LowerLoad(10544:3).2: (^30) into i1 (%"union.std::_Any_data"*, %"union.std::_Any_data"*, i32) ** ^31
	movq (%rax), %rbx
	# LowerBasicConversion(10545:3): %"class.std::function"* ^5 -> %"class.std::_Function_base"* ^32
	movq %r13, %rax
	# tt = Pointer, type = %"class.std::_Function_base"
	# LowerGetelementptr(10546:3): struct-type: %"class.std::_Function_base"* ^32 -> ^33, indices=0,1
	movq %rax, %rcx
	addq $16, %rcx
	# LowerGetelementptr(10546:3): type of ^33 is i1 (%"union.std::_Any_data"*, %"union.std::_Any_data"*, i32) ***
	# LowerStore(10547:3).9: mov i1 (%"union.std::_Any_data"*, %"union.std::_Any_data"*, i32) ** ^31, (^33)
	movq %rbx, (%rcx)
	.___ZNSt8functionIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEEC2ERKSA___M190:
	movq -56(%rbp), %r13
	movq -64(%rbp), %r12
	movq -48(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt10filesystem7__cxx114path5_List4typeEv
.p2align 4, 0x90
_ZNKSt10filesystem7__cxx114path5_List4typeEv:
	.___ZNKSt10filesystem7__cxx114path5_List4typeEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(40 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(3813:3): size = 8, type = %"struct.std::filesystem::__cxx11::path::_List"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(3814:3).9: mov %"struct.std::filesystem::__cxx11::path::_List"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(3815:3).2: (^2) into %"struct.std::filesystem::__cxx11::path::_List"* ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"struct.std::filesystem::__cxx11::path::_List"
	# LowerGetelementptr(3816:3): struct-type: %"struct.std::filesystem::__cxx11::path::_List"* ^3 -> ^4, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(3816:3): type of ^4 is %"class.std::unique_ptr"*
	# Clobber %rax
	movq %rax, -16(%rbp)
	# SetupCalls(3817:3): move argument %"class.std::unique_ptr"* nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNKSt10unique_ptrINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE3getEv
	# SetupCalls(3817:3): move %"struct.std::filesystem::__cxx11::path::_List::_Impl"* result from %rax
	movq %rax, %rbx
	# Unclobber %rax
	movq -16(%rbp), %rax
	# LowerBasicConversion(3818:3): %"struct.std::filesystem::__cxx11::path::_List::_Impl"* ^5 -> i64 ^6
	movq %rbx, %rax
	# LowerLogic(3820:3): ^6, 3 into i64 ^7
	movq %rax, %rbx
	andq $3, %rbx
	# LowerTrunc(3820:3): 64 to 8, move
	movb %bl, %al
	# LowerTrunc(3820:3): 64 to 8, apply mask
	andq $255, %rax
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaIS9_EEEESt4lessIS5_ESaISt4pairIKS5_SF_EEEC2ESt16initializer_listISK_ERKSH_RKSL_
.p2align 4, 0x90
_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaIS9_EEEESt4lessIS5_ESaISt4pairIKS5_SF_EEEC2ESt16initializer_listISK_ERKSH_RKSL_:
	.___ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaIS9_EEEESt4lessIS5_ESaISt4pairIKS5_SF_EEEC2ESt16initializer_listISK_ERKSH_RKSL___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(272 + 0, 16)
	subq $272, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -144(%rbp)
	movq %r12, -152(%rbp)
	movq %r13, -176(%rbp)
	movq %r14, -184(%rbp)
	movq %r15, -160(%rbp)
	# LowerAlloca(2531:3): size = 8, type = %"class.std::__new_allocator.15"**, var = ^6
	leaq -8(%rbp), %r9
	# LowerAlloca(2532:3): size = 8, type = %"class.std::__new_allocator.15"**, var = ^7
	leaq -16(%rbp), %rbx
	# LowerAlloca(2533:3): size = 8, type = %"class.std::allocator.14"**, var = ^8
	leaq -24(%rbp), %rax
	# LowerAlloca(2534:3): size = 8, type = %"class.std::allocator.14"**, var = ^9
	leaq -32(%rbp), %r12
	# LowerAlloca(2535:3): size = 8, type = %"class.std::allocator.14"**, var = ^10
	# Fixing source-to-dest leaq -40(%rbp), -104(%rbp)
	leaq -40(%rbp), %r15
	movq %r15, -104(%rbp)
	# LowerAlloca(2536:3): size = 16, type = %"class.std::initializer_list.13"*, var = ^11
	# Fixing source-to-dest leaq -56(%rbp), -96(%rbp)
	leaq -56(%rbp), %r15
	movq %r15, -96(%rbp)
	# LowerAlloca(2537:3): size = 8, type = %"class.std::map"**, var = ^12
	leaq -64(%rbp), %r11
	# LowerAlloca(2538:3): size = 8, type = %"struct.std::less"**, var = ^13
	leaq -72(%rbp), %r10
	# LowerAlloca(2539:3): size = 8, type = %"class.std::allocator.14"**, var = ^14
	leaq -80(%rbp), %r13
	# LowerAlloca(2540:3): size = 1, type = %"class.std::allocator.14"*, var = ^15
	# Fixing source-to-dest leaq -81(%rbp), -120(%rbp)
	leaq -81(%rbp), %r15
	movq %r15, -120(%rbp)
	# LowerBasicConversion(2541:3): %"class.std::initializer_list.13"* ^11 -> {%"struct.std::pair"*, i64}* ^16
	movq -96(%rbp), %r14
	# tt = Pointer, type = {%"struct.std::pair"*, i64}
	# LowerGetelementptr(2542:3): struct-type: {%"struct.std::pair"*, i64}* ^16 -> ^17, indices=0,0
	movq %r14, %r15
	# LowerGetelementptr(2542:3): type of ^17 is %"struct.std::pair"**
	# LowerStore(2543:3).9: mov %"struct.std::pair"* %rsi, (^17)
	movq %rsi, (%r15)
	# tt = Pointer, type = {%"struct.std::pair"*, i64}
	# LowerGetelementptr(2544:3): struct-type: {%"struct.std::pair"*, i64}* ^16 -> ^18, indices=0,1
	movq %r14, %rsi
	addq $8, %rsi
	# LowerGetelementptr(2544:3): type of ^18 is i64*
	# LowerStore(2545:3).9: mov i64 %rdx, (^18)
	movq %rdx, (%rsi)
	# LowerStore(2546:3).9: mov %"class.std::map"* %rdi, (^12)
	movq %rdi, (%r11)
	# LowerStore(2547:3).9: mov %"struct.std::less"* %rcx, (^13)
	movq %rcx, (%r10)
	# LowerStore(2548:3).9: mov %"class.std::allocator.14"* %r8, (^14)
	movq %r8, (%r13)
	# LowerLoad(2549:3).2: (^12) into %"class.std::map"* ^19
	# Fixing source-to-dest movq (%r11), -112(%rbp)
	movq (%r11), %r15
	movq %r15, -112(%rbp)
	# tt = Pointer, type = %"class.std::map"
	# LowerGetelementptr(2550:3): struct-type: %"class.std::map"* ^19 -> ^20, indices=0,0
	movq -112(%rbp), %rcx
	# LowerGetelementptr(2550:3): type of ^20 is %"class.std::_Rb_tree"*
	# LowerLoad(2551:3).2: (^13) into %"struct.std::less"* ^21
	movq (%r10), %rdx
	# LowerLoad(2552:3).2: (^14) into %"class.std::allocator.14"* ^22
	movq (%r13), %rsi
	# LowerStore(2553:3).9: mov %"class.std::allocator.14"* ^15, (^8)
	# Fixing source-to-dest movq -120(%rbp), (%rax)
	movq -120(%rbp), %r15
	movq %r15, (%rax)
	# LowerStore(2554:3).9: mov %"class.std::allocator.14"* ^22, (^9)
	movq %rsi, (%r12)
	# LowerLoad(2555:3).2: (^8) into %"class.std::allocator.14"* ^23
	movq (%rax), %rsi
	# LowerBasicConversion(2556:3): %"class.std::allocator.14"* ^23 -> %"class.std::__new_allocator.15"* ^24
	movq %rsi, %rdi
	# LowerLoad(2557:3).2: (^9) into %"class.std::allocator.14"* ^25
	movq (%r12), %rsi
	# LowerBasicConversion(2558:3): %"class.std::allocator.14"* ^25 -> %"class.std::__new_allocator.15"* ^26
	movq %rsi, %rax
	# LowerStore(2559:3).9: mov %"class.std::__new_allocator.15"* ^24, (^6)
	movq %rdi, (%r9)
	# LowerStore(2560:3).9: mov %"class.std::__new_allocator.15"* ^26, (^7)
	movq %rax, (%rbx)
	# LowerLoad(2561:3).2: (^6) into %"class.std::__new_allocator.15"* ^27
	movq (%r9), %rax
	# Clobber %rdx
	movq %rdx, -128(%rbp)
	# Clobber %rcx
	movq %rcx, -136(%rbp)
	# SetupCalls(2562:3): move argument %"class.std::_Rb_tree"* nonnull dereferenceable(48) align 8 ^20
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(2562:3): move argument %"struct.std::less"* nonnull dereferenceable(1) align 1 ^21
	# Fixed movzx with identical source and destination widths
	movq %rdx, %rsi
	# SetupCalls(2562:3): move argument %"class.std::allocator.14"* nonnull dereferenceable(1) align 1 ^15
	# Fixed movzx with identical source and destination widths
	movq -120(%rbp), %rdx
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EEC2ERKSM_RKSN_
	# Unclobber %rcx
	movq -136(%rbp), %rcx
	# Unclobber %rdx
	movq -128(%rbp), %rdx
	# LowerStore(2563:3).9: mov %"class.std::allocator.14"* ^15, (^10)
	movq -104(%rbp), %rax
	# Fixing source-to-dest movq -120(%rbp), (%rax)
	movq -120(%rbp), %r15
	movq %r15, (%rax)
	# LowerLoad(2564:3).2: (^10) into %"class.std::allocator.14"* ^28
	movq -104(%rbp), %rbx
	movq (%rbx), %rax
	# LowerBasicConversion(2565:3): %"class.std::allocator.14"* ^28 -> %"class.std::__new_allocator.15"* ^29
	movq %rax, %rbx
	# SetupCalls(2566:3): move argument %"class.std::__new_allocator.15"* nonnull dereferenceable(1) align 1 ^29
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt15__new_allocatorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEED2Ev
	# tt = Pointer, type = %"class.std::map"
	# LowerGetelementptr(2567:3): struct-type: %"class.std::map"* ^19 -> ^30, indices=0,0
	movq -112(%rbp), %rbx
	# LowerGetelementptr(2567:3): type of ^30 is %"class.std::_Rb_tree"*
	# SetupCalls(2568:3): move argument %"class.std::initializer_list.13"* nonnull dereferenceable(16) align 8 ^11
	# Fixed movzx with identical source and destination widths
	movq -96(%rbp), %rdi
	callq _ZNKSt16initializer_listISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEE5beginEv
	# SetupCalls(2568:3): move %"struct.std::pair"* result from %rax
	movq %rax, %r12
	# SetupCalls(2569:3): move argument %"class.std::initializer_list.13"* nonnull dereferenceable(16) align 8 ^11
	# Fixed movzx with identical source and destination widths
	movq -96(%rbp), %rdi
	callq _ZNKSt16initializer_listISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEE3endEv
	# SetupCalls(2569:3): move %"struct.std::pair"* result from %rax
	movq %rax, %r13
	# SetupCalls(2570:3): move argument %"class.std::_Rb_tree"* nonnull dereferenceable(48) align 8 ^30
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(2570:3): move argument %"struct.std::pair"* ^31
	# Fixed movzx with identical source and destination widths
	movq %r12, %rsi
	# SetupCalls(2570:3): move argument %"struct.std::pair"* ^32
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdx
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE22_M_insert_range_uniqueIPKSI_EENSt9enable_ifIXsr17__same_value_typeIT_EE5valueEvE4typeEST_ST_
	movq -160(%rbp), %r15
	movq -184(%rbp), %r14
	movq -176(%rbp), %r13
	movq -152(%rbp), %r12
	movq -144(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10filesystem7__cxx118__detail17__effective_rangeIA2_cEEDaRKT_
.p2align 4, 0x90
_ZNSt10filesystem7__cxx118__detail17__effective_rangeIA2_cEEDaRKT_:
	.___ZNSt10filesystem7__cxx118__detail17__effective_rangeIA2_cEEDaRKT___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(48 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -40(%rbp)
	# LowerAlloca(6286:3): size = 16, type = %"class.std::basic_string_view"*, var = ^2
	leaq -16(%rbp), %rbx
	# LowerAlloca(6287:3): size = 8, type = [2 x i8]**, var = ^3
	leaq -24(%rbp), %rcx
	# LowerStore(6288:3).9: mov [2 x i8]* %rdi, (^3)
	movq %rdi, (%rcx)
	# LowerLoad(6289:3).2: (^3) into [2 x i8]* ^4
	movq (%rcx), %rax
	# tt = Pointer, type = [2 x i8]
	# LowerGetelementptr(6290:3): struct-type: [2 x i8]* ^4 -> ^5, indices=0,0
	movq %rax, %rcx
	# LowerGetelementptr(6290:3): type of ^5 is i8*
	# Clobber %rcx
	movq %rcx, -32(%rbp)
	# SetupCalls(6291:3): move argument %"class.std::basic_string_view"* nonnull dereferenceable(16) align 8 ^2
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(6291:3): move argument i8* ^5
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	callq _ZNSt17basic_string_viewIcSt11char_traitsIcEEC2EPKc
	# Unclobber %rcx
	movq -32(%rbp), %rcx
	# LowerBasicConversion(6292:3): %"class.std::basic_string_view"* ^2 -> {i64, i8*}* ^6
	movq %rbx, %rcx
	# LowerLoad(6293:3).2: (^6) into {i64, i8*} ^7
	# FinishMultireg: mov (%reg), <%pack...>
	movq (%rcx), %rax
	movq 8(%rcx), %rbx
	# LowerRet: two-register return
	movq %rax, %rax
	movq %rbx, %rdx
	movq -40(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE5beginEv
.p2align 4, 0x90
_ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE5beginEv:
	.___ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE5beginEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(64 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -40(%rbp)
	movq %r12, -32(%rbp)
	# LowerAlloca(10605:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator.24"*, var = ^2
	leaq -8(%rbp), %r12
	# LowerAlloca(10606:3): size = 8, type = %"class.std::vector"**, var = ^3
	leaq -16(%rbp), %rbx
	# LowerStore(10607:3).9: mov %"class.std::vector"* %rdi, (^3)
	movq %rdi, (%rbx)
	# LowerLoad(10608:3).2: (^3) into %"class.std::vector"* ^4
	movq (%rbx), %rax
	# LowerBasicConversion(10609:3): %"class.std::vector"* ^4 -> %"struct.std::_Vector_base"* ^5
	movq %rax, %rbx
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(10610:3): struct-type: %"struct.std::_Vector_base"* ^5 -> ^6, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(10610:3): type of ^6 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# LowerBasicConversion(10611:3): %"struct.std::_Vector_base"* ^6 -> %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^7
	movq %rax, %rbx
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(10612:3): struct-type: %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^7 -> ^8, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(10612:3): type of ^8 is %"class.std::basic_string_view"**
	# Clobber %rax
	movq %rax, -24(%rbp)
	# SetupCalls(10613:3): move argument %"class.__gnu_cxx::__normal_iterator.24"* nonnull dereferenceable(8) align 8 ^2
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(10613:3): move argument %"class.std::basic_string_view"** nonnull dereferenceable(8) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZN9__gnu_cxx17__normal_iteratorIPKSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEEC2ERKS6_
	# Unclobber %rax
	movq -24(%rbp), %rax
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator.24"
	# LowerGetelementptr(10614:3): struct-type: %"class.__gnu_cxx::__normal_iterator.24"* ^2 -> ^9, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(10614:3): type of ^9 is %"class.std::basic_string_view"**
	# LowerLoad(10615:3).2: (^9) into %"class.std::basic_string_view"* ^10
	movq (%rax), %rbx
	movq %rbx, %rax
	movq -32(%rbp), %r12
	movq -40(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv
.p2align 4, 0x90
_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv:
	.___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(1073:3): size = 8, type = %"class.std::basic_string_view"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(1074:3).9: mov %"class.std::basic_string_view"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(1075:3).2: (^2) into %"class.std::basic_string_view"* ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::basic_string_view"
	# LowerGetelementptr(1076:3): struct-type: %"class.std::basic_string_view"* ^3 -> ^4, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(1076:3): type of ^4 is i64*
	# LowerLoad(1077:3).2: (^4) into i64 ^5
	movq (%rax), %rbx
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEEmmEv
.p2align 4, 0x90
_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEEmmEv:
	.___ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEEmmEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	movq %r12, -16(%rbp)
	# LowerAlloca(10229:3): size = 8, type = %"struct.std::_Rb_tree_iterator"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(10230:3).9: mov %"struct.std::_Rb_tree_iterator"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(10231:3).2: (^2) into %"struct.std::_Rb_tree_iterator"* ^3
	movq (%rax), %r12
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(10232:3): struct-type: %"struct.std::_Rb_tree_iterator"* ^3 -> ^4, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(10232:3): type of ^4 is %"struct.std::_Rb_tree_node_base"**
	# LowerLoad(10233:3).2: (^4) into %"struct.std::_Rb_tree_node_base"* ^5
	movq (%rax), %rbx
	# SetupCalls(10234:3): move argument %"struct.std::_Rb_tree_node_base"* ^5
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base@PLT
	# SetupCalls(10234:3): move %"struct.std::_Rb_tree_node_base"* result from %rax
	movq %rax, %rbx
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(10235:3): struct-type: %"struct.std::_Rb_tree_iterator"* ^3 -> ^7, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(10235:3): type of ^7 is %"struct.std::_Rb_tree_node_base"**
	# LowerStore(10236:3).9: mov %"struct.std::_Rb_tree_node_base"* ^6, (^7)
	movq %rbx, (%rax)
	movq %r12, %rax
	movq -16(%rbp), %r12
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEEptEv
.p2align 4, 0x90
_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEEptEv:
	.___ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEEptEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(40 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(2739:3): size = 8, type = %"struct.std::_Rb_tree_iterator"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(2740:3).9: mov %"struct.std::_Rb_tree_iterator"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(2741:3).2: (^2) into %"struct.std::_Rb_tree_iterator"* ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(2742:3): struct-type: %"struct.std::_Rb_tree_iterator"* ^3 -> ^4, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(2742:3): type of ^4 is %"struct.std::_Rb_tree_node_base"**
	# LowerLoad(2743:3).2: (^4) into %"struct.std::_Rb_tree_node_base"* ^5
	movq (%rax), %rbx
	# LowerBasicConversion(2744:3): %"struct.std::_Rb_tree_node_base"* ^5 -> %"struct.std::_Rb_tree_node"* ^6
	movq %rbx, %rax
	# Clobber %rax
	movq %rax, -16(%rbp)
	# SetupCalls(2745:3): move argument %"struct.std::_Rb_tree_node"* nonnull dereferenceable(96) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEE9_M_valptrEv
	# SetupCalls(2745:3): move %"struct.std::pair"* result from %rax
	movq %rax, %rbx
	# Unclobber %rax
	movq -16(%rbp), %rax
	movq %rbx, %rax
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt6vectorI6LsItemSaIS0_EE12emplace_backIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbEEERS0_DpOT_
.p2align 4, 0x90
_ZNSt6vectorI6LsItemSaIS0_EE12emplace_backIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbEEERS0_DpOT_:
	.___ZNSt6vectorI6LsItemSaIS0_EE12emplace_backIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbEEERS0_DpOT___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(280 + 0, 16)
	subq $288, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -176(%rbp)
	movq %r12, -200(%rbp)
	movq %r13, -208(%rbp)
	movq %r14, -216(%rbp)
	movq %r15, -184(%rbp)
	# LowerAlloca(1647:3): size = 8, type = %"class.std::__new_allocator.8"**, var = ^4
	leaq -8(%rbp), %rbx
	# LowerAlloca(1648:3): size = 8, type = %struct.LsItem**, var = ^5
	leaq -16(%rbp), %r9
	# LowerAlloca(1649:3): size = 8, type = %"class.std::__cxx11::basic_string"**, var = ^6
	leaq -24(%rbp), %rcx
	# LowerAlloca(1650:3): size = 8, type = i8**, var = ^7
	# Fixing source-to-dest leaq -32(%rbp), -152(%rbp)
	leaq -32(%rbp), %r15
	movq %r15, -152(%rbp)
	# LowerAlloca(1651:3): size = 32, type = %"class.std::__cxx11::basic_string"*, var = ^8
	# Fixing source-to-dest leaq -64(%rbp), -144(%rbp)
	leaq -64(%rbp), %r15
	movq %r15, -144(%rbp)
	# LowerAlloca(1652:3): size = 8, type = %"class.std::allocator.7"**, var = ^9
	leaq -72(%rbp), %r10
	# LowerAlloca(1653:3): size = 8, type = %struct.LsItem**, var = ^10
	leaq -80(%rbp), %r11
	# LowerAlloca(1654:3): size = 8, type = %"class.std::__cxx11::basic_string"**, var = ^11
	leaq -88(%rbp), %r12
	# LowerAlloca(1655:3): size = 8, type = i8**, var = ^12
	leaq -96(%rbp), %r8
	# LowerAlloca(1656:3): size = 8, type = %"class.std::vector.5"**, var = ^13
	leaq -104(%rbp), %rax
	# LowerAlloca(1657:3): size = 8, type = %"class.std::__cxx11::basic_string"**, var = ^14
	leaq -112(%rbp), %r13
	# LowerAlloca(1658:3): size = 8, type = i8**, var = ^15
	leaq -120(%rbp), %r14
	# LowerAlloca(1659:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^16
	leaq -128(%rbp), %r15
	# LowerStore(1660:3).9: mov %"class.std::vector.5"* %rdi, (^13)
	movq %rdi, (%rax)
	# LowerStore(1661:3).9: mov %"class.std::__cxx11::basic_string"* %rsi, (^14)
	movq %rsi, (%r13)
	# LowerStore(1662:3).9: mov i8* %rdx, (^15)
	movq %rdx, (%r14)
	# LowerLoad(1663:3).2: (^13) into %"class.std::vector.5"* ^17
	# Fixing source-to-dest movq (%rax), -136(%rbp)
	pushq %r15
	movq (%rax), %r15
	movq %r15, -136(%rbp)
	popq %r15
	# LowerBasicConversion(1664:3): %"class.std::vector.5"* ^17 -> %"struct.std::_Vector_base.6"* ^18
	movq -136(%rbp), %rax
	# tt = Pointer, type = %"struct.std::_Vector_base.6"
	# LowerGetelementptr(1665:3): struct-type: %"struct.std::_Vector_base.6"* ^18 -> ^19, indices=0,0
	movq %rax, %rdx
	# LowerGetelementptr(1665:3): type of ^19 is %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl"*
	# LowerBasicConversion(1666:3): %"struct.std::_Vector_base.6"* ^19 -> %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"* ^20
	movq %rdx, %rax
	# tt = Pointer, type = %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"
	# LowerGetelementptr(1667:3): struct-type: %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"* ^20 -> ^21, indices=0,1
	movq %rax, %rdx
	addq $8, %rdx
	# LowerGetelementptr(1667:3): type of ^21 is %struct.LsItem**
	# LowerLoad(1668:3).2: (^21) into %struct.LsItem* ^22
	movq (%rdx), %rsi
	# LowerBasicConversion(1669:3): %"class.std::vector.5"* ^17 -> %"struct.std::_Vector_base.6"* ^23
	movq -136(%rbp), %rax
	# tt = Pointer, type = %"struct.std::_Vector_base.6"
	# LowerGetelementptr(1670:3): struct-type: %"struct.std::_Vector_base.6"* ^23 -> ^24, indices=0,0
	movq %rax, %rdx
	# LowerGetelementptr(1670:3): type of ^24 is %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl"*
	# LowerBasicConversion(1671:3): %"struct.std::_Vector_base.6"* ^24 -> %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"* ^25
	movq %rdx, %rdi
	# tt = Pointer, type = %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"
	# LowerGetelementptr(1672:3): struct-type: %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"* ^25 -> ^26, indices=0,2
	movq %rdi, %rax
	addq $16, %rax
	# LowerGetelementptr(1672:3): type of ^26 is %struct.LsItem**
	# LowerLoad(1673:3).2: (^26) into %struct.LsItem* ^27
	movq (%rax), %rdx
	# LowerIcmp(1674:3): %struct.LsItem* ^22 vs. operand %struct.LsItem* ^27
	cmpq %rdx, %rsi
	setne %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt6vectorI6LsItemSaIS0_EE12emplace_backIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbEEERS0_DpOT___M70
	jmp .___ZNSt6vectorI6LsItemSaIS0_EE12emplace_backIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbEEERS0_DpOT___M233
	.___ZNSt6vectorI6LsItemSaIS0_EE12emplace_backIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbEEERS0_DpOT___M70:
	# LowerBasicConversion(1678:3): %"class.std::vector.5"* ^17 -> %"struct.std::_Vector_base.6"* ^30
	movq -136(%rbp), %rax
	# tt = Pointer, type = %"struct.std::_Vector_base.6"
	# LowerGetelementptr(1679:3): struct-type: %"struct.std::_Vector_base.6"* ^30 -> ^31, indices=0,0
	movq %rax, %rdx
	# LowerGetelementptr(1679:3): type of ^31 is %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl"*
	# LowerBasicConversion(1680:3): %"struct.std::_Vector_base.6"* ^31 -> %"class.std::allocator.7"* ^32
	movq %rdx, %rax
	# LowerBasicConversion(1681:3): %"class.std::vector.5"* ^17 -> %"struct.std::_Vector_base.6"* ^33
	movq -136(%rbp), %rdx
	# tt = Pointer, type = %"struct.std::_Vector_base.6"
	# LowerGetelementptr(1682:3): struct-type: %"struct.std::_Vector_base.6"* ^33 -> ^34, indices=0,0
	movq %rdx, %rsi
	# LowerGetelementptr(1682:3): type of ^34 is %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl"*
	# LowerBasicConversion(1683:3): %"struct.std::_Vector_base.6"* ^34 -> %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"* ^35
	movq %rsi, %rdx
	# tt = Pointer, type = %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"
	# LowerGetelementptr(1684:3): struct-type: %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"* ^35 -> ^36, indices=0,1
	movq %rdx, %rsi
	addq $8, %rsi
	# LowerGetelementptr(1684:3): type of ^36 is %struct.LsItem**
	# LowerLoad(1685:3).2: (^36) into %struct.LsItem* ^37
	movq (%rsi), %rdx
	# LowerLoad(1686:3).2: (^14) into %"class.std::__cxx11::basic_string"* ^38
	movq (%r13), %rsi
	# LowerLoad(1687:3).2: (^15) into i8* ^39
	movq (%r14), %rdi
	# LowerStore(1688:3).9: mov %"class.std::allocator.7"* ^32, (^9)
	movq %rax, (%r10)
	# LowerStore(1689:3).9: mov %struct.LsItem* ^37, (^10)
	movq %rdx, (%r11)
	# LowerStore(1690:3).9: mov %"class.std::__cxx11::basic_string"* ^38, (^11)
	movq %rsi, (%r12)
	# LowerStore(1691:3).9: mov i8* ^39, (^12)
	movq %rdi, (%r8)
	# LowerLoad(1692:3).2: (^9) into %"class.std::allocator.7"* ^40
	movq (%r10), %rax
	# LowerBasicConversion(1693:3): %"class.std::allocator.7"* ^40 -> %"class.std::__new_allocator.8"* ^41
	movq %rax, %rdx
	# LowerLoad(1694:3).2: (^10) into %struct.LsItem* ^42
	movq (%r11), %rax
	# LowerLoad(1695:3).2: (^11) into %"class.std::__cxx11::basic_string"* ^43
	movq (%r12), %rsi
	# LowerLoad(1696:3).2: (^12) into i8* ^44
	movq (%r8), %rdi
	# LowerStore(1697:3).9: mov %"class.std::__new_allocator.8"* ^41, (^4)
	movq %rdx, (%rbx)
	# LowerStore(1698:3).9: mov %struct.LsItem* ^42, (^5)
	movq %rax, (%r9)
	# LowerStore(1699:3).9: mov %"class.std::__cxx11::basic_string"* ^43, (^6)
	movq %rsi, (%rcx)
	# LowerStore(1700:3).9: mov i8* ^44, (^7)
	movq -152(%rbp), %rax
	movq %rdi, (%rax)
	# LowerLoad(1701:3).2: (^4) into %"class.std::__new_allocator.8"* ^45
	movq (%rbx), %rax
	# LowerLoad(1702:3).2: (^5) into %struct.LsItem* ^46
	movq (%r9), %rbx
	# LowerBasicConversion(1703:3): %struct.LsItem* ^46 -> i8* ^47
	movq %rbx, %rax
	# LowerLoad(1704:3).2: (^6) into %"class.std::__cxx11::basic_string"* ^48
	movq (%rcx), %rax
	# Clobber %rax
	movq %rax, -160(%rbp)
	# SetupCalls(1705:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq -144(%rbp), %rdi
	# SetupCalls(1705:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^48
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_@PLT
	# Unclobber %rax
	movq -160(%rbp), %rax
	# LowerLoad(1706:3).2: (^7) into i8* ^49
	movq -152(%rbp), %rcx
	movq (%rcx), %rax
	# LowerLoad(1707:3).2: (^49) into i8 ^50
	movb (%rax), %cl
	# LowerTrunc(1708:3): 8 to 1, move
	movb %cl, %al
	# LowerTrunc(1708:3): 8 to 1, apply mask
	andq $1, %rax
	# Clobber %rax
	movq %rax, -160(%rbp)
	# SetupCalls(1709:3): move argument %struct.LsItem* nonnull dereferenceable(33) align 8 ^46
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(1709:3): move argument %"class.std::__cxx11::basic_string"* ^8
	# Fixed movzx with identical source and destination widths
	movq -144(%rbp), %rsi
	# SetupCalls(1709:3): move argument i1 zeroext ^51
	movzbq %al, %rdx
	andq $1, %rdx
	callq _ZN6LsItemC2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
	# Unclobber %rax
	movq -160(%rbp), %rax
	# SetupCalls(1710:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq -144(%rbp), %rdi
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
	# LowerBasicConversion(1711:3): %"class.std::vector.5"* ^17 -> %"struct.std::_Vector_base.6"* ^52
	movq -136(%rbp), %rax
	# tt = Pointer, type = %"struct.std::_Vector_base.6"
	# LowerGetelementptr(1712:3): struct-type: %"struct.std::_Vector_base.6"* ^52 -> ^53, indices=0,0
	movq %rax, %rbx
	# LowerGetelementptr(1712:3): type of ^53 is %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl"*
	# LowerBasicConversion(1713:3): %"struct.std::_Vector_base.6"* ^53 -> %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"* ^54
	movq %rbx, %rax
	# tt = Pointer, type = %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"
	# LowerGetelementptr(1714:3): struct-type: %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"* ^54 -> ^55, indices=0,1
	movq %rax, %rbx
	addq $8, %rbx
	# LowerGetelementptr(1714:3): type of ^55 is %struct.LsItem**
	# LowerLoad(1715:3).2: (^55) into %struct.LsItem* ^56
	movq (%rbx), %rax
	# tt = Pointer, type = %struct.LsItem
	# LowerGetelementptr(1716:3): struct-type: %struct.LsItem* ^56 -> ^57, indices=1
	movq %rax, %rcx
	addq $40, %rcx
	# LowerGetelementptr(1716:3): type of ^57 is %struct.LsItem*
	# LowerStore(1717:3).9: mov %struct.LsItem* ^57, (^55)
	movq %rcx, (%rbx)
	jmp .___ZNSt6vectorI6LsItemSaIS0_EE12emplace_backIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbEEERS0_DpOT___M300
	.___ZNSt6vectorI6LsItemSaIS0_EE12emplace_backIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbEEERS0_DpOT___M233:
	# SetupCalls(1721:3): move argument %"class.std::vector.5"* nonnull dereferenceable(24) align 8 ^17
	# Fixed movzx with identical source and destination widths
	movq -136(%rbp), %rdi
	callq _ZNSt6vectorI6LsItemSaIS0_EE3endEv
	# SetupCalls(1721:3): move %struct.LsItem* result from %rax
	movq %rax, %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(1722:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^16 -> ^60, indices=0,0
	movq %r15, %rax
	# LowerGetelementptr(1722:3): type of ^60 is %struct.LsItem**
	# LowerStore(1723:3).9: mov %struct.LsItem* ^59, (^60)
	movq %rbx, (%rax)
	# LowerLoad(1724:3).2: (^14) into %"class.std::__cxx11::basic_string"* ^61
	movq (%r13), %r8
	# LowerLoad(1725:3).2: (^15) into i8* ^62
	movq (%r14), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(1726:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^16 -> ^63, indices=0,0
	movq %r15, %rcx
	# LowerGetelementptr(1726:3): type of ^63 is %struct.LsItem**
	# LowerLoad(1727:3).2: (^63) into %struct.LsItem* ^64
	movq (%rcx), %rax
	# Clobber %r8
	movq %r8, -168(%rbp)
	# Clobber %rax
	movq %rax, -160(%rbp)
	# SetupCalls(1728:3): move argument %"class.std::vector.5"* nonnull dereferenceable(24) align 8 ^17
	# Fixed movzx with identical source and destination widths
	movq -136(%rbp), %rdi
	# SetupCalls(1728:3): move argument %struct.LsItem* ^64
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(1728:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^61
	# Fixed movzx with identical source and destination widths
	movq %r8, %rdx
	# SetupCalls(1728:3): move argument i8* nonnull dereferenceable(1) align 1 ^62
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rcx
	callq _ZNSt6vectorI6LsItemSaIS0_EE17_M_realloc_insertIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbEEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_
	# Unclobber %rax
	movq -160(%rbp), %rax
	# Unclobber %r8
	movq -168(%rbp), %r8
	.___ZNSt6vectorI6LsItemSaIS0_EE12emplace_backIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbEEERS0_DpOT___M300:
	# SetupCalls(1732:3): move argument %"class.std::vector.5"* nonnull dereferenceable(24) align 8 ^17
	# Fixed movzx with identical source and destination widths
	movq -136(%rbp), %rdi
	callq _ZNSt6vectorI6LsItemSaIS0_EE4backEv
	# SetupCalls(1732:3): move %struct.LsItem* result from %rax
	movq %rax, %rbx
	movq %rbx, %rax
	movq -184(%rbp), %r15
	movq -216(%rbp), %r14
	movq -208(%rbp), %r13
	movq -200(%rbp), %r12
	movq -176(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt15__new_allocatorIcED2Ev
.p2align 4, 0x90
_ZNSt15__new_allocatorIcED2Ev:
	.___ZNSt15__new_allocatorIcED2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(4944:3): size = 8, type = %"class.std::__new_allocator.1"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(4945:3).9: mov %"class.std::__new_allocator.1"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(4946:3).2: (^2) into %"class.std::__new_allocator.1"* ^3
	movq (%rax), %rbx
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE13_Rb_tree_implISM_Lb1EEC2ERKSM_OSaISt13_Rb_tree_nodeISI_EE
.p2align 4, 0x90
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE13_Rb_tree_implISM_Lb1EEC2ERKSM_OSaISt13_Rb_tree_nodeISI_EE:
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE13_Rb_tree_implISM_Lb1EEC2ERKSM_OSaISt13_Rb_tree_nodeISI_EE__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(96 + 0, 16)
	subq $96, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -72(%rbp)
	movq %r12, -80(%rbp)
	# LowerAlloca(9482:3): size = 8, type = %"class.std::__new_allocator.11"**, var = ^4
	leaq -8(%rbp), %rbx
	# LowerAlloca(9483:3): size = 8, type = %"class.std::__new_allocator.11"**, var = ^5
	leaq -16(%rbp), %r9
	# LowerAlloca(9484:3): size = 8, type = %"class.std::allocator.10"**, var = ^6
	leaq -24(%rbp), %r8
	# LowerAlloca(9485:3): size = 8, type = %"class.std::allocator.10"**, var = ^7
	leaq -32(%rbp), %rcx
	# LowerAlloca(9486:3): size = 8, type = %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Rb_tree_impl"**, var = ^8
	leaq -40(%rbp), %rax
	# LowerAlloca(9487:3): size = 8, type = %"struct.std::less"**, var = ^9
	leaq -48(%rbp), %r10
	# LowerAlloca(9488:3): size = 8, type = %"class.std::allocator.10"**, var = ^10
	leaq -56(%rbp), %r11
	# LowerStore(9489:3).9: mov %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Rb_tree_impl"* %rdi, (^8)
	movq %rdi, (%rax)
	# LowerStore(9490:3).9: mov %"struct.std::less"* %rsi, (^9)
	movq %rsi, (%r10)
	# LowerStore(9491:3).9: mov %"class.std::allocator.10"* %rdx, (^10)
	movq %rdx, (%r11)
	# LowerLoad(9492:3).2: (^8) into %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Rb_tree_impl"* ^11
	movq (%rax), %r12
	# LowerBasicConversion(9493:3): %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Rb_tree_impl"* ^11 -> %"class.std::allocator.10"* ^12
	movq %r12, %rdx
	# LowerLoad(9494:3).2: (^10) into %"class.std::allocator.10"* ^13
	movq (%r11), %rax
	# LowerStore(9495:3).9: mov %"class.std::allocator.10"* ^12, (^6)
	movq %rdx, (%r8)
	# LowerStore(9496:3).9: mov %"class.std::allocator.10"* ^13, (^7)
	movq %rax, (%rcx)
	# LowerLoad(9497:3).2: (^6) into %"class.std::allocator.10"* ^14
	movq (%r8), %rax
	# LowerBasicConversion(9498:3): %"class.std::allocator.10"* ^14 -> %"class.std::__new_allocator.11"* ^15
	movq %rax, %rdx
	# LowerLoad(9499:3).2: (^7) into %"class.std::allocator.10"* ^16
	movq (%rcx), %rax
	# LowerBasicConversion(9500:3): %"class.std::allocator.10"* ^16 -> %"class.std::__new_allocator.11"* ^17
	movq %rax, %rcx
	# LowerStore(9501:3).9: mov %"class.std::__new_allocator.11"* ^15, (^4)
	movq %rdx, (%rbx)
	# LowerStore(9502:3).9: mov %"class.std::__new_allocator.11"* ^17, (^5)
	movq %rcx, (%r9)
	# LowerLoad(9503:3).2: (^4) into %"class.std::__new_allocator.11"* ^18
	movq (%rbx), %rax
	# LowerBasicConversion(9504:3): %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Rb_tree_impl"* ^11 -> %"struct.std::_Rb_tree_key_compare"* ^19
	movq %r12, %rbx
	# LowerLoad(9505:3).2: (^9) into %"struct.std::less"* ^20
	movq (%r10), %rax
	# Clobber %rax
	movq %rax, -64(%rbp)
	# SetupCalls(9506:3): move argument %"struct.std::_Rb_tree_key_compare"* nonnull dereferenceable(1) align 1 ^19
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(9506:3): move argument %"struct.std::less"* nonnull dereferenceable(1) align 1 ^20
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2ERKS7_
	# Unclobber %rax
	movq -64(%rbp), %rax
	# LowerBasicConversion(9507:3): %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Rb_tree_impl"* ^11 -> i8* ^21
	movq %r12, %rax
	# tt = Pointer, type = i8
	# LowerGetelementptr(9508:3): struct-type: i8* ^21 -> ^22, indices=8
	movq %rax, %rbx
	addq $8, %rbx
	# LowerGetelementptr(9508:3): type of ^22 is i8*
	# LowerBasicConversion(9509:3): i8* ^22 -> %"struct.std::_Rb_tree_header"* ^23
	movq %rbx, %rax
	# Clobber %rax
	movq %rax, -64(%rbp)
	# SetupCalls(9510:3): move argument %"struct.std::_Rb_tree_header"* nonnull dereferenceable(40) align 8 ^23
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt15_Rb_tree_headerC2Ev
	# Unclobber %rax
	movq -64(%rbp), %rax
	movq -80(%rbp), %r12
	movq -72(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaIS9_EEEESt4lessIS5_ESaISt4pairIKS5_SF_EEE3endEv
.p2align 4, 0x90
_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaIS9_EEEESt4lessIS5_ESaISt4pairIKS5_SF_EEE3endEv:
	.___ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaIS9_EEEESt4lessIS5_ESaISt4pairIKS5_SF_EEE3endEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(56 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	movq %r12, -24(%rbp)
	# LowerAlloca(2724:3): size = 8, type = %"struct.std::_Rb_tree_iterator"*, var = ^2
	leaq -8(%rbp), %r12
	# LowerAlloca(2725:3): size = 8, type = %"class.std::map"**, var = ^3
	leaq -16(%rbp), %rbx
	# LowerStore(2726:3).9: mov %"class.std::map"* %rdi, (^3)
	movq %rdi, (%rbx)
	# LowerLoad(2727:3).2: (^3) into %"class.std::map"* ^4
	movq (%rbx), %rax
	# tt = Pointer, type = %"class.std::map"
	# LowerGetelementptr(2728:3): struct-type: %"class.std::map"* ^4 -> ^5, indices=0,0
	movq %rax, %rbx
	# LowerGetelementptr(2728:3): type of ^5 is %"class.std::_Rb_tree"*
	# SetupCalls(2729:3): move argument %"class.std::_Rb_tree"* nonnull dereferenceable(48) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE3endEv
	# SetupCalls(2729:3): move %"struct.std::_Rb_tree_node_base"* result from %rax
	movq %rax, %rbx
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(2730:3): struct-type: %"struct.std::_Rb_tree_iterator"* ^2 -> ^7, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(2730:3): type of ^7 is %"struct.std::_Rb_tree_node_base"**
	# LowerStore(2731:3).9: mov %"struct.std::_Rb_tree_node_base"* ^6, (^7)
	movq %rbx, (%rax)
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(2732:3): struct-type: %"struct.std::_Rb_tree_iterator"* ^2 -> ^8, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(2732:3): type of ^8 is %"struct.std::_Rb_tree_node_base"**
	# LowerLoad(2733:3).2: (^8) into %"struct.std::_Rb_tree_node_base"* ^9
	movq (%rax), %rbx
	movq %rbx, %rax
	movq -24(%rbp), %r12
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt14__relocate_a_1IPSt17basic_string_viewIcSt11char_traitsIcEES4_SaIS3_EET0_T_S7_S6_RT1_
.p2align 4, 0x90
_ZSt14__relocate_a_1IPSt17basic_string_viewIcSt11char_traitsIcEES4_SaIS3_EET0_T_S7_S6_RT1_:
	.___ZSt14__relocate_a_1IPSt17basic_string_viewIcSt11char_traitsIcEES4_SaIS3_EET0_T_S7_S6_RT1___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(96 + 0, 16)
	subq $96, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -88(%rbp)
	movq %r12, -80(%rbp)
	movq %r13, -72(%rbp)
	movq %r14, -96(%rbp)
	# LowerAlloca(5919:3): size = 8, type = %"class.std::basic_string_view"**, var = ^5
	leaq -8(%rbp), %r13
	# LowerAlloca(5920:3): size = 8, type = %"class.std::basic_string_view"**, var = ^6
	leaq -16(%rbp), %r12
	# LowerAlloca(5921:3): size = 8, type = %"class.std::basic_string_view"**, var = ^7
	leaq -24(%rbp), %rax
	# LowerAlloca(5922:3): size = 8, type = %"class.std::allocator"**, var = ^8
	leaq -32(%rbp), %rbx
	# LowerAlloca(5923:3): size = 8, type = %"class.std::basic_string_view"**, var = ^9
	leaq -40(%rbp), %r14
	# LowerStore(5924:3).9: mov %"class.std::basic_string_view"* %rdi, (^5)
	movq %rdi, (%r13)
	# LowerStore(5925:3).9: mov %"class.std::basic_string_view"* %rsi, (^6)
	movq %rsi, (%r12)
	# LowerStore(5926:3).9: mov %"class.std::basic_string_view"* %rdx, (^7)
	movq %rdx, (%rax)
	# LowerStore(5927:3).9: mov %"class.std::allocator"* %rcx, (^8)
	movq %rcx, (%rbx)
	# LowerLoad(5928:3).2: (^7) into %"class.std::basic_string_view"* ^10
	movq (%rax), %rcx
	# LowerStore(5929:3).9: mov %"class.std::basic_string_view"* ^10, (^9)
	movq %rcx, (%r14)
	.___ZSt14__relocate_a_1IPSt17basic_string_viewIcSt11char_traitsIcEES4_SaIS3_EET0_T_S7_S6_RT1___M23:
	# LowerLoad(5933:3).2: (^5) into %"class.std::basic_string_view"* ^12
	movq (%r13), %rcx
	# LowerLoad(5934:3).2: (^6) into %"class.std::basic_string_view"* ^13
	movq (%r12), %rax
	# LowerIcmp(5935:3): %"class.std::basic_string_view"* ^12 vs. operand %"class.std::basic_string_view"* ^13
	cmpq %rax, %rcx
	setne %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZSt14__relocate_a_1IPSt17basic_string_viewIcSt11char_traitsIcEES4_SaIS3_EET0_T_S7_S6_RT1___M32
	jmp .___ZSt14__relocate_a_1IPSt17basic_string_viewIcSt11char_traitsIcEES4_SaIS3_EET0_T_S7_S6_RT1___M83
	.___ZSt14__relocate_a_1IPSt17basic_string_viewIcSt11char_traitsIcEES4_SaIS3_EET0_T_S7_S6_RT1___M32:
	# LowerLoad(5939:3).2: (^9) into %"class.std::basic_string_view"* ^16
	movq (%r14), %rax
	# LowerLoad(5940:3).2: (^5) into %"class.std::basic_string_view"* ^17
	movq (%r13), %rcx
	# LowerLoad(5941:3).2: (^8) into %"class.std::allocator"* ^18
	movq (%rbx), %r8
	# Clobber %rcx
	movq %rcx, -48(%rbp)
	# Clobber %r8
	movq %r8, -56(%rbp)
	# Clobber %rax
	movq %rax, -64(%rbp)
	# SetupCalls(5942:3): move argument %"class.std::basic_string_view"* ^16
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(5942:3): move argument %"class.std::basic_string_view"* ^17
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(5942:3): move argument %"class.std::allocator"* nonnull dereferenceable(1) align 1 ^18
	# Fixed movzx with identical source and destination widths
	movq %r8, %rdx
	callq _ZSt19__relocate_object_aISt17basic_string_viewIcSt11char_traitsIcEES3_SaIS3_EEvPT_PT0_RT1_
	# Unclobber %rax
	movq -64(%rbp), %rax
	# Unclobber %r8
	movq -56(%rbp), %r8
	# Unclobber %rcx
	movq -48(%rbp), %rcx
	# LowerLoad(5946:3).2: (^5) into %"class.std::basic_string_view"* ^20
	movq (%r13), %rax
	# tt = Pointer, type = %"class.std::basic_string_view"
	# LowerGetelementptr(5947:3): struct-type: %"class.std::basic_string_view"* ^20 -> ^21, indices=1
	movq %rax, %rcx
	addq $16, %rcx
	# LowerGetelementptr(5947:3): type of ^21 is %"class.std::basic_string_view"*
	# LowerStore(5948:3).9: mov %"class.std::basic_string_view"* ^21, (^5)
	movq %rcx, (%r13)
	# LowerLoad(5949:3).2: (^9) into %"class.std::basic_string_view"* ^22
	movq (%r14), %rax
	# tt = Pointer, type = %"class.std::basic_string_view"
	# LowerGetelementptr(5950:3): struct-type: %"class.std::basic_string_view"* ^22 -> ^23, indices=1
	movq %rax, %rcx
	addq $16, %rcx
	# LowerGetelementptr(5950:3): type of ^23 is %"class.std::basic_string_view"*
	# LowerStore(5951:3).9: mov %"class.std::basic_string_view"* ^23, (^9)
	movq %rcx, (%r14)
	jmp .___ZSt14__relocate_a_1IPSt17basic_string_viewIcSt11char_traitsIcEES4_SaIS3_EET0_T_S7_S6_RT1___M23
	.___ZSt14__relocate_a_1IPSt17basic_string_viewIcSt11char_traitsIcEES4_SaIS3_EET0_T_S7_S6_RT1___M83:
	# LowerLoad(5955:3).2: (^9) into %"class.std::basic_string_view"* ^25
	movq (%r14), %rax
	movq -96(%rbp), %r14
	movq -72(%rbp), %r13
	movq -80(%rbp), %r12
	movq -88(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10filesystem6existsERKNS_7__cxx114pathE
.p2align 4, 0x90
_ZNSt10filesystem6existsERKNS_7__cxx114pathE:
	.___ZNSt10filesystem6existsERKNS_7__cxx114pathE__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(64 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	movq %r12, -40(%rbp)
	# LowerAlloca(1512:3): size = 8, type = %"class.std::filesystem::__cxx11::path"**, var = ^2
	leaq -8(%rbp), %rbx
	# LowerAlloca(1513:3): size = 8, type = %"class.std::filesystem::file_status"*, var = ^3
	leaq -16(%rbp), %r12
	# LowerStore(1514:3).9: mov %"class.std::filesystem::__cxx11::path"* %rdi, (^2)
	movq %rdi, (%rbx)
	# LowerLoad(1515:3).2: (^2) into %"class.std::filesystem::__cxx11::path"* ^4
	movq (%rbx), %rax
	# Clobber %rax
	movq %rax, -24(%rbp)
	# SetupCalls(1516:3): move argument %"class.std::filesystem::__cxx11::path"* nonnull dereferenceable(40) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt10filesystem6statusERKNS_7__cxx114pathE@PLT
	# SetupCalls(1516:3): move i64 result from %rax
	movq %rax, %rbx
	# Unclobber %rax
	movq -24(%rbp), %rax
	# LowerBasicConversion(1517:3): %"class.std::filesystem::file_status"* ^3 -> i64* ^6
	movq %r12, %rax
	# LowerStore(1518:3).9: mov i64 ^5, (^6)
	movq %rbx, (%rax)
	# LowerBasicConversion(1519:3): %"class.std::filesystem::file_status"* ^3 -> i64* ^7
	movq %r12, %rbx
	# LowerLoad(1520:3).2: (^7) into i64 ^8
	movq (%rbx), %rax
	# Clobber %rax
	movq %rax, -24(%rbp)
	# SetupCalls(1521:3): move argument i64 ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt10filesystem6existsENS_11file_statusE
	# SetupCalls(1521:3): move i1 result from %rax
	movb %al, %bl
	# Unclobber %rax
	movq -24(%rbp), %rax
	movb %bl, %al
	movq -40(%rbp), %r12
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE19_M_get_Tp_allocatorEv
.p2align 4, 0x90
_ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE19_M_get_Tp_allocatorEv:
	.___ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE19_M_get_Tp_allocatorEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(5167:3): size = 8, type = %"struct.std::_Vector_base"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(5168:3).9: mov %"struct.std::_Vector_base"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(5169:3).2: (^2) into %"struct.std::_Vector_base"* ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(5170:3): struct-type: %"struct.std::_Vector_base"* ^3 -> ^4, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(5170:3): type of ^4 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# LowerBasicConversion(5171:3): %"struct.std::_Vector_base"* ^4 -> %"class.std::allocator"* ^5
	movq %rax, %rbx
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZN9__gnu_cxx17__normal_iteratorIPSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEEC2ERKS5_
.p2align 4, 0x90
_ZN9__gnu_cxx17__normal_iteratorIPSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEEC2ERKS5_:
	.___ZN9__gnu_cxx17__normal_iteratorIPSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEEC2ERKS5___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(5884:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator.19"**, var = ^3
	leaq -8(%rbp), %rcx
	# LowerAlloca(5885:3): size = 8, type = %"class.std::basic_string_view"***, var = ^4
	leaq -16(%rbp), %rax
	# LowerStore(5886:3).9: mov %"class.__gnu_cxx::__normal_iterator.19"* %rdi, (^3)
	movq %rdi, (%rcx)
	# LowerStore(5887:3).9: mov %"class.std::basic_string_view"** %rsi, (^4)
	movq %rsi, (%rax)
	# LowerLoad(5888:3).2: (^3) into %"class.__gnu_cxx::__normal_iterator.19"* ^5
	movq (%rcx), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator.19"
	# LowerGetelementptr(5889:3): struct-type: %"class.__gnu_cxx::__normal_iterator.19"* ^5 -> ^6, indices=0,0
	movq %rbx, %rcx
	# LowerGetelementptr(5889:3): type of ^6 is %"class.std::basic_string_view"**
	# LowerLoad(5890:3).2: (^4) into %"class.std::basic_string_view"** ^7
	movq (%rax), %rbx
	# LowerLoad(5891:3).2: (^7) into %"class.std::basic_string_view"* ^8
	movq (%rbx), %rax
	# LowerStore(5892:3).9: mov %"class.std::basic_string_view"* ^8, (^6)
	movq %rax, (%rcx)
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt6vectorI6LsItemSaIS0_EE5beginEv
.p2align 4, 0x90
_ZNSt6vectorI6LsItemSaIS0_EE5beginEv:
	.___ZNSt6vectorI6LsItemSaIS0_EE5beginEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(64 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -40(%rbp)
	movq %r12, -32(%rbp)
	# LowerAlloca(1904:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^2
	leaq -8(%rbp), %r12
	# LowerAlloca(1905:3): size = 8, type = %"class.std::vector.5"**, var = ^3
	leaq -16(%rbp), %rbx
	# LowerStore(1906:3).9: mov %"class.std::vector.5"* %rdi, (^3)
	movq %rdi, (%rbx)
	# LowerLoad(1907:3).2: (^3) into %"class.std::vector.5"* ^4
	movq (%rbx), %rax
	# LowerBasicConversion(1908:3): %"class.std::vector.5"* ^4 -> %"struct.std::_Vector_base.6"* ^5
	movq %rax, %rbx
	# tt = Pointer, type = %"struct.std::_Vector_base.6"
	# LowerGetelementptr(1909:3): struct-type: %"struct.std::_Vector_base.6"* ^5 -> ^6, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(1909:3): type of ^6 is %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl"*
	# LowerBasicConversion(1910:3): %"struct.std::_Vector_base.6"* ^6 -> %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"* ^7
	movq %rax, %rbx
	# tt = Pointer, type = %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"
	# LowerGetelementptr(1911:3): struct-type: %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"* ^7 -> ^8, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(1911:3): type of ^8 is %struct.LsItem**
	# Clobber %rax
	movq %rax, -24(%rbp)
	# SetupCalls(1912:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^2
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(1912:3): move argument %struct.LsItem** nonnull dereferenceable(8) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEC2ERKS2_
	# Unclobber %rax
	movq -24(%rbp), %rax
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(1913:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^2 -> ^9, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(1913:3): type of ^9 is %struct.LsItem**
	# LowerLoad(1914:3).2: (^9) into %struct.LsItem* ^10
	movq (%rax), %rbx
	movq %rbx, %rax
	movq -32(%rbp), %r12
	movq -40(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt17basic_string_viewIcSt11char_traitsIcEE6substrEmm
.p2align 4, 0x90
_ZNKSt17basic_string_viewIcSt11char_traitsIcEE6substrEmm:
	.___ZNKSt17basic_string_viewIcSt11char_traitsIcEE6substrEmm__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(192 + 0, 16)
	subq $192, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -112(%rbp)
	movq %r12, -104(%rbp)
	movq %r13, -144(%rbp)
	movq %r14, -128(%rbp)
	movq %r15, -96(%rbp)
	# LowerAlloca(1095:3): size = 16, type = %"class.std::basic_string_view"*, var = ^4
	# Fixing source-to-dest leaq -16(%rbp), -64(%rbp)
	leaq -16(%rbp), %r15
	movq %r15, -64(%rbp)
	# LowerAlloca(1096:3): size = 8, type = %"class.std::basic_string_view"**, var = ^5
	leaq -24(%rbp), %rcx
	# LowerAlloca(1097:3): size = 8, type = i64*, var = ^6
	leaq -32(%rbp), %r12
	# LowerAlloca(1098:3): size = 8, type = i64*, var = ^7
	leaq -40(%rbp), %rbx
	# LowerAlloca(1099:3): size = 8, type = i64*, var = ^8
	# Fixing source-to-dest leaq -48(%rbp), -72(%rbp)
	leaq -48(%rbp), %r15
	movq %r15, -72(%rbp)
	# LowerAlloca(1100:3): size = 8, type = i64*, var = ^9
	leaq -56(%rbp), %r14
	# LowerStore(1101:3).9: mov %"class.std::basic_string_view"* %rdi, (^5)
	movq %rdi, (%rcx)
	# LowerStore(1102:3).9: mov i64 %rsi, (^6)
	movq %rsi, (%r12)
	# LowerStore(1103:3).9: mov i64 %rdx, (^7)
	movq %rdx, (%rbx)
	# LowerLoad(1104:3).2: (^5) into %"class.std::basic_string_view"* ^10
	movq (%rcx), %r15
	# SetupCalls(1105:3): move argument %"class.std::basic_string_view"* nonnull dereferenceable(16) align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq %r15, %rdi
	callq _ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv
	# SetupCalls(1105:3): move i64 result from %rax
	movq %rax, %r13
	# LowerLoad(1106:3).2: (^6) into i64 ^12
	movq (%r12), %rax
	# Clobber %rax
	movq %rax, -80(%rbp)
	# SetupCalls(1107:3): move argument i64 ^11
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	# SetupCalls(1107:3): move argument i64 ^12
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(1107:3): move argument i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.23, i64 0, i64 0)
	leaq .str.23(%rip), %rdx
	callq _ZSt10__sv_checkmmPKc
	# SetupCalls(1107:3): move i64 result from %rax
	movq %rax, %r13
	# Unclobber %rax
	movq -80(%rbp), %rax
	# LowerStore(1108:3).9: mov i64 ^13, (^6)
	movq %r13, (%r12)
	# tt = Pointer, type = %"class.std::basic_string_view"
	# LowerGetelementptr(1109:3): struct-type: %"class.std::basic_string_view"* ^10 -> ^14, indices=0,0
	movq %r15, %rax
	# LowerGetelementptr(1109:3): type of ^14 is i64*
	# LowerLoad(1110:3).2: (^14) into i64 ^15
	movq (%rax), %rcx
	# LowerLoad(1111:3).2: (^6) into i64 ^16
	movq (%r12), %rax
	# LowerMath(1112:3): ^15, ^16 into i64 ^17
	movq %rcx, %rdx
	subq %rax, %rdx
	# LowerStore(1113:3).9: mov i64 ^17, (^9)
	movq %rdx, (%r14)
	# SetupCalls(1114:3): move argument i64* nonnull dereferenceable(8) align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(1114:3): move argument i64* nonnull dereferenceable(8) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq %r14, %rsi
	callq _ZSt3minImERKT_S2_S2_
	# SetupCalls(1114:3): move i64* result from %rax
	movq %rax, %rbx
	# LowerLoad(1115:3).2: (^18) into i64 ^19
	movq (%rbx), %rax
	# LowerStore(1116:3).9: mov i64 ^19, (^8)
	movq -72(%rbp), %rbx
	movq %rax, (%rbx)
	# tt = Pointer, type = %"class.std::basic_string_view"
	# LowerGetelementptr(1117:3): struct-type: %"class.std::basic_string_view"* ^10 -> ^20, indices=0,1
	movq %r15, %rax
	addq $8, %rax
	# LowerGetelementptr(1117:3): type of ^20 is i8**
	# LowerLoad(1118:3).2: (^20) into i8* ^21
	movq (%rax), %rbx
	# LowerLoad(1119:3).2: (^6) into i64 ^22
	movq (%r12), %rax
	# tt = Pointer, type = i8
	# LowerGetelementptr(1120:3): pointer-type -> ^23
	movq %rax, %rcx
	addq %rbx, %rcx
	# LowerLoad(1121:3).2: (^8) into i64 ^24
	movq -72(%rbp), %rbx
	movq (%rbx), %rax
	# Clobber %rcx
	movq %rcx, -88(%rbp)
	# Clobber %rax
	movq %rax, -80(%rbp)
	# SetupCalls(1122:3): move argument %"class.std::basic_string_view"* nonnull dereferenceable(16) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -64(%rbp), %rdi
	# SetupCalls(1122:3): move argument i8* ^23
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(1122:3): move argument i64 ^24
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdx
	callq _ZNSt17basic_string_viewIcSt11char_traitsIcEEC2EPKcm
	# Unclobber %rax
	movq -80(%rbp), %rax
	# Unclobber %rcx
	movq -88(%rbp), %rcx
	# LowerBasicConversion(1123:3): %"class.std::basic_string_view"* ^4 -> {i64, i8*}* ^25
	movq -64(%rbp), %rcx
	# LowerLoad(1124:3).2: (^25) into {i64, i8*} ^26
	# FinishMultireg: mov (%reg), <%pack...>
	movq (%rcx), %rax
	movq 8(%rcx), %rbx
	# LowerRet: two-register return
	movq %rax, %rax
	movq %rbx, %rdx
	movq -96(%rbp), %r15
	movq -128(%rbp), %r14
	movq -144(%rbp), %r13
	movq -104(%rbp), %r12
	movq -112(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE9push_backERKS3_
.p2align 4, 0x90
_ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE9push_backERKS3_:
	.___ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE9push_backERKS3___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(168 + 0, 16)
	subq $176, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -96(%rbp)
	movq %r12, -120(%rbp)
	movq %r13, -104(%rbp)
	movq %r14, -112(%rbp)
	# LowerAlloca(1130:3): size = 8, type = %"class.std::__new_allocator"**, var = ^3
	leaq -8(%rbp), %r9
	# LowerAlloca(1131:3): size = 8, type = %"class.std::basic_string_view"**, var = ^4
	leaq -16(%rbp), %rbx
	# LowerAlloca(1132:3): size = 8, type = %"class.std::basic_string_view"**, var = ^5
	leaq -24(%rbp), %r8
	# LowerAlloca(1133:3): size = 8, type = %"class.std::allocator"**, var = ^6
	leaq -32(%rbp), %rdx
	# LowerAlloca(1134:3): size = 8, type = %"class.std::basic_string_view"**, var = ^7
	leaq -40(%rbp), %rcx
	# LowerAlloca(1135:3): size = 8, type = %"class.std::basic_string_view"**, var = ^8
	leaq -48(%rbp), %rax
	# LowerAlloca(1136:3): size = 8, type = %"class.std::vector"**, var = ^9
	leaq -56(%rbp), %r10
	# LowerAlloca(1137:3): size = 8, type = %"class.std::basic_string_view"**, var = ^10
	leaq -64(%rbp), %r13
	# LowerAlloca(1138:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator.19"*, var = ^11
	leaq -72(%rbp), %r14
	# LowerStore(1139:3).9: mov %"class.std::vector"* %rdi, (^9)
	movq %rdi, (%r10)
	# LowerStore(1140:3).9: mov %"class.std::basic_string_view"* %rsi, (^10)
	movq %rsi, (%r13)
	# LowerLoad(1141:3).2: (^9) into %"class.std::vector"* ^12
	movq (%r10), %r12
	# LowerBasicConversion(1142:3): %"class.std::vector"* ^12 -> %"struct.std::_Vector_base"* ^13
	movq %r12, %rsi
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(1143:3): struct-type: %"struct.std::_Vector_base"* ^13 -> ^14, indices=0,0
	movq %rsi, %rdi
	# LowerGetelementptr(1143:3): type of ^14 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# LowerBasicConversion(1144:3): %"struct.std::_Vector_base"* ^14 -> %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^15
	movq %rdi, %rsi
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(1145:3): struct-type: %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^15 -> ^16, indices=0,1
	movq %rsi, %rdi
	addq $8, %rdi
	# LowerGetelementptr(1145:3): type of ^16 is %"class.std::basic_string_view"**
	# LowerLoad(1146:3).2: (^16) into %"class.std::basic_string_view"* ^17
	movq (%rdi), %r10
	# LowerBasicConversion(1147:3): %"class.std::vector"* ^12 -> %"struct.std::_Vector_base"* ^18
	movq %r12, %rsi
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(1148:3): struct-type: %"struct.std::_Vector_base"* ^18 -> ^19, indices=0,0
	movq %rsi, %rdi
	# LowerGetelementptr(1148:3): type of ^19 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# LowerBasicConversion(1149:3): %"struct.std::_Vector_base"* ^19 -> %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^20
	movq %rdi, %rsi
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(1150:3): struct-type: %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^20 -> ^21, indices=0,2
	movq %rsi, %rdi
	addq $16, %rdi
	# LowerGetelementptr(1150:3): type of ^21 is %"class.std::basic_string_view"**
	# LowerLoad(1151:3).2: (^21) into %"class.std::basic_string_view"* ^22
	movq (%rdi), %rsi
	# LowerIcmp(1152:3): %"class.std::basic_string_view"* ^17 vs. operand %"class.std::basic_string_view"* ^22
	cmpq %rsi, %r10
	setne %sil
	andq $1, %rsi
	cmpb $0, %sil
	jne .___ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE9push_backERKS3___M60
	jmp .___ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE9push_backERKS3___M166
	.___ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE9push_backERKS3___M60:
	# LowerBasicConversion(1156:3): %"class.std::vector"* ^12 -> %"struct.std::_Vector_base"* ^25
	movq %r12, %rdi
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(1157:3): struct-type: %"struct.std::_Vector_base"* ^25 -> ^26, indices=0,0
	movq %rdi, %rsi
	# LowerGetelementptr(1157:3): type of ^26 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# LowerBasicConversion(1158:3): %"struct.std::_Vector_base"* ^26 -> %"class.std::allocator"* ^27
	movq %rsi, %rdi
	# LowerBasicConversion(1159:3): %"class.std::vector"* ^12 -> %"struct.std::_Vector_base"* ^28
	movq %r12, %rsi
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(1160:3): struct-type: %"struct.std::_Vector_base"* ^28 -> ^29, indices=0,0
	movq %rsi, %r10
	# LowerGetelementptr(1160:3): type of ^29 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# LowerBasicConversion(1161:3): %"struct.std::_Vector_base"* ^29 -> %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^30
	movq %r10, %rsi
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(1162:3): struct-type: %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^30 -> ^31, indices=0,1
	movq %rsi, %r10
	addq $8, %r10
	# LowerGetelementptr(1162:3): type of ^31 is %"class.std::basic_string_view"**
	# LowerLoad(1163:3).2: (^31) into %"class.std::basic_string_view"* ^32
	movq (%r10), %rsi
	# LowerLoad(1164:3).2: (^10) into %"class.std::basic_string_view"* ^33
	movq (%r13), %r10
	# LowerStore(1165:3).9: mov %"class.std::allocator"* ^27, (^6)
	movq %rdi, (%rdx)
	# LowerStore(1166:3).9: mov %"class.std::basic_string_view"* ^32, (^7)
	movq %rsi, (%rcx)
	# LowerStore(1167:3).9: mov %"class.std::basic_string_view"* ^33, (^8)
	movq %r10, (%rax)
	# LowerLoad(1168:3).2: (^6) into %"class.std::allocator"* ^34
	movq (%rdx), %rsi
	# LowerBasicConversion(1169:3): %"class.std::allocator"* ^34 -> %"class.std::__new_allocator"* ^35
	movq %rsi, %rdx
	# LowerLoad(1170:3).2: (^7) into %"class.std::basic_string_view"* ^36
	movq (%rcx), %rsi
	# LowerLoad(1171:3).2: (^8) into %"class.std::basic_string_view"* ^37
	movq (%rax), %rcx
	# LowerStore(1172:3).9: mov %"class.std::__new_allocator"* ^35, (^3)
	movq %rdx, (%r9)
	# LowerStore(1173:3).9: mov %"class.std::basic_string_view"* ^36, (^4)
	movq %rsi, (%rbx)
	# LowerStore(1174:3).9: mov %"class.std::basic_string_view"* ^37, (^5)
	movq %rcx, (%r8)
	# LowerLoad(1175:3).2: (^3) into %"class.std::__new_allocator"* ^38
	movq (%r9), %rax
	# LowerLoad(1176:3).2: (^4) into %"class.std::basic_string_view"* ^39
	movq (%rbx), %rax
	# LowerBasicConversion(1177:3): %"class.std::basic_string_view"* ^39 -> i8* ^40
	movq %rax, %rbx
	# LowerLoad(1178:3).2: (^5) into %"class.std::basic_string_view"* ^41
	movq (%r8), %rbx
	# LowerBasicConversion(1179:3): %"class.std::basic_string_view"* ^39 -> i8* ^42
	movq %rax, %rcx
	# LowerBasicConversion(1180:3): %"class.std::basic_string_view"* ^41 -> i8* ^43
	movq %rbx, %rax
	# Clobber %rcx
	movq %rcx, -80(%rbp)
	# Clobber %rax
	movq %rax, -88(%rbp)
	# SetupCalls(1181:3): move argument i8* align 8 ^42
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(1181:3): move argument i8* align 8 ^43
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(1181:3): move argument i64 16
	movq $16, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -88(%rbp), %rax
	# Unclobber %rcx
	movq -80(%rbp), %rcx
	# LowerBasicConversion(1182:3): %"class.std::vector"* ^12 -> %"struct.std::_Vector_base"* ^44
	movq %r12, %rax
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(1183:3): struct-type: %"struct.std::_Vector_base"* ^44 -> ^45, indices=0,0
	movq %rax, %rbx
	# LowerGetelementptr(1183:3): type of ^45 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# LowerBasicConversion(1184:3): %"struct.std::_Vector_base"* ^45 -> %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^46
	movq %rbx, %rax
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(1185:3): struct-type: %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^46 -> ^47, indices=0,1
	movq %rax, %rbx
	addq $8, %rbx
	# LowerGetelementptr(1185:3): type of ^47 is %"class.std::basic_string_view"**
	# LowerLoad(1186:3).2: (^47) into %"class.std::basic_string_view"* ^48
	movq (%rbx), %rcx
	# tt = Pointer, type = %"class.std::basic_string_view"
	# LowerGetelementptr(1187:3): struct-type: %"class.std::basic_string_view"* ^48 -> ^49, indices=1
	movq %rcx, %rax
	addq $16, %rax
	# LowerGetelementptr(1187:3): type of ^49 is %"class.std::basic_string_view"*
	# LowerStore(1188:3).9: mov %"class.std::basic_string_view"* ^49, (^47)
	movq %rax, (%rbx)
	jmp .___ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE9push_backERKS3___M229
	.___ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE9push_backERKS3___M166:
	# SetupCalls(1192:3): move argument %"class.std::vector"* nonnull dereferenceable(24) align 8 ^12
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	callq _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE3endEv
	# SetupCalls(1192:3): move %"class.std::basic_string_view"* result from %rax
	movq %rax, %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator.19"
	# LowerGetelementptr(1193:3): struct-type: %"class.__gnu_cxx::__normal_iterator.19"* ^11 -> ^52, indices=0,0
	movq %r14, %rax
	# LowerGetelementptr(1193:3): type of ^52 is %"class.std::basic_string_view"**
	# LowerStore(1194:3).9: mov %"class.std::basic_string_view"* ^51, (^52)
	movq %rbx, (%rax)
	# LowerLoad(1195:3).2: (^10) into %"class.std::basic_string_view"* ^53
	movq (%r13), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator.19"
	# LowerGetelementptr(1196:3): struct-type: %"class.__gnu_cxx::__normal_iterator.19"* ^11 -> ^54, indices=0,0
	movq %r14, %rcx
	# LowerGetelementptr(1196:3): type of ^54 is %"class.std::basic_string_view"**
	# LowerLoad(1197:3).2: (^54) into %"class.std::basic_string_view"* ^55
	movq (%rcx), %rax
	# Clobber %rax
	movq %rax, -88(%rbp)
	# SetupCalls(1198:3): move argument %"class.std::vector"* nonnull dereferenceable(24) align 8 ^12
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(1198:3): move argument %"class.std::basic_string_view"* ^55
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(1198:3): move argument %"class.std::basic_string_view"* nonnull dereferenceable(16) align 8 ^53
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdx
	callq _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_
	# Unclobber %rax
	movq -88(%rbp), %rax
	.___ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE9push_backERKS3___M229:
	movq -112(%rbp), %r14
	movq -104(%rbp), %r13
	movq -120(%rbp), %r12
	movq -96(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt6vectorI6LsItemSaIS0_EE3endEv
.p2align 4, 0x90
_ZNSt6vectorI6LsItemSaIS0_EE3endEv:
	.___ZNSt6vectorI6LsItemSaIS0_EE3endEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(64 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -40(%rbp)
	movq %r12, -32(%rbp)
	# LowerAlloca(1920:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^2
	leaq -8(%rbp), %r12
	# LowerAlloca(1921:3): size = 8, type = %"class.std::vector.5"**, var = ^3
	leaq -16(%rbp), %rbx
	# LowerStore(1922:3).9: mov %"class.std::vector.5"* %rdi, (^3)
	movq %rdi, (%rbx)
	# LowerLoad(1923:3).2: (^3) into %"class.std::vector.5"* ^4
	movq (%rbx), %rax
	# LowerBasicConversion(1924:3): %"class.std::vector.5"* ^4 -> %"struct.std::_Vector_base.6"* ^5
	movq %rax, %rbx
	# tt = Pointer, type = %"struct.std::_Vector_base.6"
	# LowerGetelementptr(1925:3): struct-type: %"struct.std::_Vector_base.6"* ^5 -> ^6, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(1925:3): type of ^6 is %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl"*
	# LowerBasicConversion(1926:3): %"struct.std::_Vector_base.6"* ^6 -> %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"* ^7
	movq %rax, %rbx
	# tt = Pointer, type = %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"
	# LowerGetelementptr(1927:3): struct-type: %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"* ^7 -> ^8, indices=0,1
	movq %rbx, %rax
	addq $8, %rax
	# LowerGetelementptr(1927:3): type of ^8 is %struct.LsItem**
	# Clobber %rax
	movq %rax, -24(%rbp)
	# SetupCalls(1928:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^2
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(1928:3): move argument %struct.LsItem** nonnull dereferenceable(8) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEC2ERKS2_
	# Unclobber %rax
	movq -24(%rbp), %rax
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(1929:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^2 -> ^9, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(1929:3): type of ^9 is %struct.LsItem**
	# LowerLoad(1930:3).2: (^9) into %struct.LsItem* ^10
	movq (%rax), %rbx
	movq %rbx, %rax
	movq -32(%rbp), %r12
	movq -40(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10filesystem7__cxx114pathC2ERKS1_
.p2align 4, 0x90
_ZNSt10filesystem7__cxx114pathC2ERKS1_:
	.___ZNSt10filesystem7__cxx114pathC2ERKS1___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(56 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -40(%rbp)
	movq %r12, -48(%rbp)
	# LowerAlloca(3676:3): size = 8, type = %"class.std::filesystem::__cxx11::path"**, var = ^3
	leaq -8(%rbp), %rax
	# LowerAlloca(3677:3): size = 8, type = %"class.std::filesystem::__cxx11::path"**, var = ^4
	leaq -16(%rbp), %rbx
	# LowerStore(3678:3).9: mov %"class.std::filesystem::__cxx11::path"* %rdi, (^3)
	movq %rdi, (%rax)
	# LowerStore(3679:3).9: mov %"class.std::filesystem::__cxx11::path"* %rsi, (^4)
	movq %rsi, (%rbx)
	# LowerLoad(3680:3).2: (^3) into %"class.std::filesystem::__cxx11::path"* ^5
	movq (%rax), %r12
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path"
	# LowerGetelementptr(3681:3): struct-type: %"class.std::filesystem::__cxx11::path"* ^5 -> ^6, indices=0,0
	movq %r12, %rdx
	# LowerGetelementptr(3681:3): type of ^6 is %"class.std::__cxx11::basic_string"*
	# LowerLoad(3682:3).2: (^4) into %"class.std::filesystem::__cxx11::path"* ^7
	movq (%rbx), %rcx
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path"
	# LowerGetelementptr(3683:3): struct-type: %"class.std::filesystem::__cxx11::path"* ^7 -> ^8, indices=0,0
	movq %rcx, %rax
	# LowerGetelementptr(3683:3): type of ^8 is %"class.std::__cxx11::basic_string"*
	# Clobber %rdx
	movq %rdx, -24(%rbp)
	# Clobber %rax
	movq %rax, -32(%rbp)
	# SetupCalls(3684:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rdx, %rdi
	# SetupCalls(3684:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_@PLT
	# Unclobber %rax
	movq -32(%rbp), %rax
	# Unclobber %rdx
	movq -24(%rbp), %rdx
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path"
	# LowerGetelementptr(3685:3): struct-type: %"class.std::filesystem::__cxx11::path"* ^5 -> ^9, indices=0,1
	movq %r12, %rax
	addq $32, %rax
	# LowerGetelementptr(3685:3): type of ^9 is %"struct.std::filesystem::__cxx11::path::_List"*
	# LowerLoad(3686:3).2: (^4) into %"class.std::filesystem::__cxx11::path"* ^10
	movq (%rbx), %rcx
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path"
	# LowerGetelementptr(3687:3): struct-type: %"class.std::filesystem::__cxx11::path"* ^10 -> ^11, indices=0,1
	movq %rcx, %rbx
	addq $32, %rbx
	# LowerGetelementptr(3687:3): type of ^11 is %"struct.std::filesystem::__cxx11::path::_List"*
	# Clobber %rax
	movq %rax, -32(%rbp)
	# SetupCalls(3688:3): move argument %"struct.std::filesystem::__cxx11::path::_List"* nonnull dereferenceable(8) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(3688:3): move argument %"struct.std::filesystem::__cxx11::path::_List"* nonnull dereferenceable(8) align 8 ^11
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZNSt10filesystem7__cxx114path5_ListC1ERKS2_@PLT
	# Unclobber %rax
	movq -32(%rbp), %rax
	movq -48(%rbp), %r12
	movq -40(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt10filesystem7__cxx114path6stringEv
.p2align 4, 0x90
_ZNKSt10filesystem7__cxx114path6stringEv:
	.___ZNKSt10filesystem7__cxx114path6stringEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(88 + 0, 16)
	subq $96, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -80(%rbp)
	movq %r12, -72(%rbp)
	# LowerAlloca(1823:3): size = 8, type = %"class.std::__new_allocator.1"**, var = ^3
	leaq -8(%rbp), %r8
	# LowerAlloca(1824:3): size = 8, type = %"class.std::allocator.0"**, var = ^4
	leaq -16(%rbp), %r12
	# LowerAlloca(1825:3): size = 8, type = %"class.std::allocator.0"**, var = ^5
	leaq -24(%rbp), %rdx
	# LowerAlloca(1826:3): size = 8, type = i8**, var = ^6
	leaq -32(%rbp), %rcx
	# LowerAlloca(1827:3): size = 8, type = %"class.std::filesystem::__cxx11::path"**, var = ^7
	leaq -40(%rbp), %rax
	# LowerAlloca(1828:3): size = 1, type = %"class.std::allocator.0"*, var = ^8
	leaq -41(%rbp), %rbx
	# LowerBasicConversion(1829:3): %"class.std::__cxx11::basic_string"* %rdi -> i8* ^9
	movq %rdi, %r9
	# LowerStore(1830:3).9: mov i8* ^9, (^6)
	movq %r9, (%rcx)
	# LowerStore(1831:3).9: mov %"class.std::filesystem::__cxx11::path"* %rsi, (^7)
	movq %rsi, (%rax)
	# LowerLoad(1832:3).2: (^7) into %"class.std::filesystem::__cxx11::path"* ^10
	movq (%rax), %rcx
	# LowerStore(1833:3).9: mov %"class.std::allocator.0"* ^8, (^5)
	movq %rbx, (%rdx)
	# LowerLoad(1834:3).2: (^5) into %"class.std::allocator.0"* ^11
	movq (%rdx), %rsi
	# LowerBasicConversion(1835:3): %"class.std::allocator.0"* ^11 -> %"class.std::__new_allocator.1"* ^12
	movq %rsi, %rax
	# LowerStore(1836:3).9: mov %"class.std::__new_allocator.1"* ^12, (^3)
	movq %rax, (%r8)
	# LowerLoad(1837:3).2: (^3) into %"class.std::__new_allocator.1"* ^13
	movq (%r8), %rax
	# Clobber %rdi
	movq %rdi, -56(%rbp)
	# Clobber %rcx
	movq %rcx, -64(%rbp)
	# SetupCalls(1838:3): move argument %"class.std::__cxx11::basic_string"* sret align 8 %rdi
	# Semiunclobber live %rdi into %rdi
	movq -56(%rbp), %rdi
	# SetupCalls(1838:3): move argument %"class.std::filesystem::__cxx11::path"* nonnull dereferenceable(40) align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(1838:3): move argument %"class.std::allocator.0"* nonnull dereferenceable(1) align 1 ^8
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdx
	callq _ZNKSt10filesystem7__cxx114path6stringIcSt11char_traitsIcESaIcEEENSt7__cxx1112basic_stringIT_T0_T1_EERKSA_
	# Unclobber %rcx
	movq -64(%rbp), %rcx
	# Unclobber %rdi
	movq -56(%rbp), %rdi
	# LowerStore(1839:3).9: mov %"class.std::allocator.0"* ^8, (^4)
	movq %rbx, (%r12)
	# LowerLoad(1840:3).2: (^4) into %"class.std::allocator.0"* ^14
	movq (%r12), %rax
	# LowerBasicConversion(1841:3): %"class.std::allocator.0"* ^14 -> %"class.std::__new_allocator.1"* ^15
	movq %rax, %rbx
	# SetupCalls(1842:3): move argument %"class.std::__new_allocator.1"* nonnull dereferenceable(1) align 1 ^15
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt15__new_allocatorIcED2Ev
	movq -72(%rbp), %r12
	movq -80(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ISt17basic_string_viewIcS2_EvEERKT_RKS3_
.p2align 4, 0x90
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ISt17basic_string_viewIcS2_EvEERKT_RKS3_:
	.___ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ISt17basic_string_viewIcS2_EvEERKT_RKS3___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(184 + 0, 16)
	subq $192, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -128(%rbp)
	movq %r12, -120(%rbp)
	movq %r13, -112(%rbp)
	movq %r14, -136(%rbp)
	movq %r15, -144(%rbp)
	# LowerAlloca(2663:3): size = 8, type = %"class.std::__cxx11::basic_string"**, var = ^4
	leaq -8(%rbp), %rax
	# LowerAlloca(2664:3): size = 8, type = %"class.std::basic_string_view"**, var = ^5
	leaq -16(%rbp), %rcx
	# LowerAlloca(2665:3): size = 8, type = %"class.std::allocator.0"**, var = ^6
	leaq -24(%rbp), %r13
	# LowerAlloca(2666:3): size = 16, type = %"struct.std::__cxx11::basic_string<char>::__sv_wrapper"*, var = ^7
	leaq -40(%rbp), %r12
	# LowerAlloca(2667:3): size = 16, type = %"class.std::basic_string_view"*, var = ^8
	leaq -56(%rbp), %rbx
	# LowerAlloca(2668:3): size = 16, type = %"class.std::basic_string_view"*, var = ^9
	leaq -72(%rbp), %r14
	# LowerStore(2669:3).9: mov %"class.std::__cxx11::basic_string"* %rdi, (^4)
	movq %rdi, (%rax)
	# LowerStore(2670:3).9: mov %"class.std::basic_string_view"* %rsi, (^5)
	movq %rsi, (%rcx)
	# LowerStore(2671:3).9: mov %"class.std::allocator.0"* %rdx, (^6)
	movq %rdx, (%r13)
	# LowerLoad(2672:3).2: (^4) into %"class.std::__cxx11::basic_string"* ^10
	# Fixing source-to-dest movq (%rax), -80(%rbp)
	movq (%rax), %r15
	movq %r15, -80(%rbp)
	# LowerLoad(2673:3).2: (^5) into %"class.std::basic_string_view"* ^11
	movq (%rcx), %rdx
	# LowerBasicConversion(2674:3): %"class.std::basic_string_view"* ^9 -> i8* ^12
	movq %r14, %rcx
	# LowerBasicConversion(2675:3): %"class.std::basic_string_view"* ^11 -> i8* ^13
	movq %rdx, %rax
	# Clobber %rcx
	movq %rcx, -88(%rbp)
	# Clobber %rax
	movq %rax, -96(%rbp)
	# SetupCalls(2676:3): move argument i8* align 8 ^12
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(2676:3): move argument i8* align 8 ^13
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(2676:3): move argument i64 16
	movq $16, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -96(%rbp), %rax
	# Unclobber %rcx
	movq -88(%rbp), %rcx
	# LowerBasicConversion(2677:3): %"class.std::basic_string_view"* ^9 -> {i64, i8*}* ^14
	movq %r14, %rax
	# tt = Pointer, type = {i64, i8*}
	# LowerGetelementptr(2678:3): struct-type: {i64, i8*}* ^14 -> ^15, indices=0,0
	movq %rax, %rcx
	# LowerGetelementptr(2678:3): type of ^15 is i64*
	# LowerLoad(2679:3).2: (^15) into i64 ^16
	movq (%rcx), %rdx
	# tt = Pointer, type = {i64, i8*}
	# LowerGetelementptr(2680:3): struct-type: {i64, i8*}* ^14 -> ^17, indices=0,1
	movq %rax, %rcx
	addq $8, %rcx
	# LowerGetelementptr(2680:3): type of ^17 is i8**
	# LowerLoad(2681:3).2: (^17) into i8* ^18
	movq (%rcx), %rax
	# Clobber %rdx
	movq %rdx, -104(%rbp)
	# Clobber %rax
	movq %rax, -96(%rbp)
	# SetupCalls(2682:3): move argument i64 ^16
	# Fixed movzx with identical source and destination widths
	movq %rdx, %rdi
	# SetupCalls(2682:3): move argument i8* ^18
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE17_S_to_string_viewESt17basic_string_viewIcS2_E@PLT
	# SetupCalls(2682:3): move 128-bit result from %rax and %rdx
	# Multireg move: <%hax %hdx> -> <%hr14 %hr15>
	movq %rax, %r14
	movq %rdx, %r15
	# Unclobber %rax
	movq -96(%rbp), %rax
	# Unclobber %rdx
	movq -104(%rbp), %rdx
	# LowerBasicConversion(2683:3): %"class.std::basic_string_view"* ^8 -> {i64, i8*}* ^20
	movq %rbx, %rax
	# tt = Pointer, type = {i64, i8*}
	# LowerGetelementptr(2684:3): struct-type: {i64, i8*}* ^20 -> ^21, indices=0,0
	movq %rax, %rcx
	# LowerGetelementptr(2684:3): type of ^21 is i64*
	# LowerExtractvalue(2686:3)
	# PaddedStructs({i64, i8*} -> i64): move from pack ^19 ({i64, i8*}) to ^38 (opaque), index = 0
	movq %r14, %rsi
	movq %rsi, %rdx
	# LowerStore(2686:3).9: mov i64 ^22, (^21)
	movq %rdx, (%rcx)
	# tt = Pointer, type = {i64, i8*}
	# LowerGetelementptr(2687:3): struct-type: {i64, i8*}* ^20 -> ^23, indices=0,1
	movq %rax, %rcx
	addq $8, %rcx
	# LowerGetelementptr(2687:3): type of ^23 is i8**
	# LowerExtractvalue(2689:3)
	# PaddedStructs({i64, i8*} -> i8*): move from pack ^19 ({i64, i8*}) to ^39 (opaque), index = 1
	movq %r15, %rdx
	movq %rdx, %rax
	# LowerStore(2689:3).9: mov i8* ^24, (^23)
	movq %rax, (%rcx)
	# LowerBasicConversion(2690:3): %"class.std::basic_string_view"* ^8 -> {i64, i8*}* ^25
	movq %rbx, %rcx
	# tt = Pointer, type = {i64, i8*}
	# LowerGetelementptr(2691:3): struct-type: {i64, i8*}* ^25 -> ^26, indices=0,0
	movq %rcx, %rax
	# LowerGetelementptr(2691:3): type of ^26 is i64*
	# LowerLoad(2692:3).2: (^26) into i64 ^27
	movq (%rax), %rbx
	# tt = Pointer, type = {i64, i8*}
	# LowerGetelementptr(2693:3): struct-type: {i64, i8*}* ^25 -> ^28, indices=0,1
	movq %rcx, %rax
	addq $8, %rax
	# LowerGetelementptr(2693:3): type of ^28 is i8**
	# LowerLoad(2694:3).2: (^28) into i8* ^29
	movq (%rax), %rcx
	# Clobber %rcx
	movq %rcx, -88(%rbp)
	# SetupCalls(2695:3): move argument %"struct.std::__cxx11::basic_string<char>::__sv_wrapper"* nonnull dereferenceable(16) align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(2695:3): move argument i64 ^27
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(2695:3): move argument i8* ^29
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdx
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12__sv_wrapperC1ESt17basic_string_viewIcS2_E@PLT
	# Unclobber %rcx
	movq -88(%rbp), %rcx
	# LowerLoad(2696:3).2: (^6) into %"class.std::allocator.0"* ^30
	movq (%r13), %rax
	# LowerBasicConversion(2697:3): %"struct.std::__cxx11::basic_string<char>::__sv_wrapper"* ^7 -> {i64, i8*}* ^31
	movq %r12, %rbx
	# tt = Pointer, type = {i64, i8*}
	# LowerGetelementptr(2698:3): struct-type: {i64, i8*}* ^31 -> ^32, indices=0,0
	movq %rbx, %rcx
	# LowerGetelementptr(2698:3): type of ^32 is i64*
	# LowerLoad(2699:3).2: (^32) into i64 ^33
	movq (%rcx), %rdx
	# tt = Pointer, type = {i64, i8*}
	# LowerGetelementptr(2700:3): struct-type: {i64, i8*}* ^31 -> ^34, indices=0,1
	movq %rbx, %rcx
	addq $8, %rcx
	# LowerGetelementptr(2700:3): type of ^34 is i8**
	# LowerLoad(2701:3).2: (^34) into i8* ^35
	movq (%rcx), %rbx
	# Clobber %rdx
	movq %rdx, -104(%rbp)
	# Clobber %rax
	movq %rax, -96(%rbp)
	# SetupCalls(2702:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq -80(%rbp), %rdi
	# SetupCalls(2702:3): move argument i64 ^33
	# Fixed movzx with identical source and destination widths
	movq %rdx, %rsi
	# SetupCalls(2702:3): move argument i8* ^35
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdx
	# SetupCalls(2702:3): move argument %"class.std::allocator.0"* nonnull dereferenceable(1) align 1 ^30
	# Fixed movzx with identical source and destination widths
	movq %rax, %rcx
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ENS4_12__sv_wrapperERKS3_@PLT
	# Unclobber %rax
	movq -96(%rbp), %rax
	# Unclobber %rdx
	movq -104(%rbp), %rdx
	movq -144(%rbp), %r15
	movq -136(%rbp), %r14
	movq -112(%rbp), %r13
	movq -120(%rbp), %r12
	movq -128(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EE7_M_lessERKS2_
.p2align 4, 0x90
_ZNKSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EE7_M_lessERKS2_:
	.___ZNKSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EE7_M_lessERKS2___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(72 + 0, 16)
	subq $80, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -56(%rbp)
	# LowerAlloca(3622:3): size = 8, type = %"class.std::__shared_count"**, var = ^3
	leaq -8(%rbp), %rcx
	# LowerAlloca(3623:3): size = 8, type = %"class.std::__shared_count"**, var = ^4
	leaq -16(%rbp), %rbx
	# LowerAlloca(3624:3): size = 1, type = %"struct.std::less.17"*, var = ^5
	leaq -17(%rbp), %rdx
	# LowerStore(3625:3).9: mov %"class.std::__shared_count"* %rdi, (^3)
	movq %rdi, (%rcx)
	# LowerStore(3626:3).9: mov %"class.std::__shared_count"* %rsi, (^4)
	movq %rsi, (%rbx)
	# LowerLoad(3627:3).2: (^3) into %"class.std::__shared_count"* ^6
	movq (%rcx), %rax
	# tt = Pointer, type = %"class.std::__shared_count"
	# LowerGetelementptr(3628:3): struct-type: %"class.std::__shared_count"* ^6 -> ^7, indices=0,0
	movq %rax, %rcx
	# LowerGetelementptr(3628:3): type of ^7 is %"class.std::_Sp_counted_base"**
	# LowerLoad(3629:3).2: (^7) into %"class.std::_Sp_counted_base"* ^8
	movq (%rcx), %rax
	# LowerLoad(3630:3).2: (^4) into %"class.std::__shared_count"* ^9
	movq (%rbx), %rcx
	# tt = Pointer, type = %"class.std::__shared_count"
	# LowerGetelementptr(3631:3): struct-type: %"class.std::__shared_count"* ^9 -> ^10, indices=0,0
	movq %rcx, %rbx
	# LowerGetelementptr(3631:3): type of ^10 is %"class.std::_Sp_counted_base"**
	# LowerLoad(3632:3).2: (^10) into %"class.std::_Sp_counted_base"* ^11
	movq (%rbx), %rcx
	# Clobber %rdx
	movq %rdx, -32(%rbp)
	# Clobber %rcx
	movq %rcx, -40(%rbp)
	# Clobber %rax
	movq %rax, -48(%rbp)
	# SetupCalls(3633:3): move argument %"struct.std::less.17"* nonnull dereferenceable(1) align 1 ^5
	# Fixed movzx with identical source and destination widths
	movq %rdx, %rdi
	# SetupCalls(3633:3): move argument %"class.std::_Sp_counted_base"* ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(3633:3): move argument %"class.std::_Sp_counted_base"* ^11
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdx
	callq _ZNKSt4lessIPSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EEEclES4_S4_
	# SetupCalls(3633:3): move i1 result from %rax
	movb %al, %bl
	# Unclobber %rax
	movq -48(%rbp), %rax
	# Unclobber %rcx
	movq -40(%rbp), %rcx
	# Unclobber %rdx
	movq -32(%rbp), %rdx
	movb %bl, %al
	movq -56(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt19__relocate_object_aI6LsItemS0_SaIS0_EEvPT_PT0_RT1_
.p2align 4, 0x90
_ZSt19__relocate_object_aI6LsItemS0_SaIS0_EEvPT_PT0_RT1_:
	.___ZSt19__relocate_object_aI6LsItemS0_SaIS0_EEvPT_PT0_RT1___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(240 + 0, 16)
	subq $240, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -160(%rbp)
	movq %r12, -168(%rbp)
	movq %r13, -176(%rbp)
	movq %r14, -184(%rbp)
	movq %r15, -144(%rbp)
	# LowerAlloca(7335:3): size = 8, type = %"class.std::__new_allocator.8"**, var = ^4
	# Fixing source-to-dest leaq -8(%rbp), -112(%rbp)
	leaq -8(%rbp), %r15
	movq %r15, -112(%rbp)
	# LowerAlloca(7336:3): size = 8, type = %struct.LsItem**, var = ^5
	# Fixing source-to-dest leaq -16(%rbp), -120(%rbp)
	leaq -16(%rbp), %r15
	movq %r15, -120(%rbp)
	# LowerAlloca(7337:3): size = 8, type = %"class.std::__new_allocator.8"**, var = ^6
	leaq -24(%rbp), %rcx
	# LowerAlloca(7338:3): size = 8, type = %struct.LsItem**, var = ^7
	leaq -32(%rbp), %rbx
	# LowerAlloca(7339:3): size = 8, type = %struct.LsItem**, var = ^8
	leaq -40(%rbp), %rax
	# LowerAlloca(7340:3): size = 8, type = %"class.std::allocator.7"**, var = ^9
	leaq -48(%rbp), %r12
	# LowerAlloca(7341:3): size = 8, type = %struct.LsItem**, var = ^10
	leaq -56(%rbp), %r13
	# LowerAlloca(7342:3): size = 8, type = %"class.std::allocator.7"**, var = ^11
	leaq -64(%rbp), %r10
	# LowerAlloca(7343:3): size = 8, type = %struct.LsItem**, var = ^12
	leaq -72(%rbp), %r9
	# LowerAlloca(7344:3): size = 8, type = %struct.LsItem**, var = ^13
	leaq -80(%rbp), %r8
	# LowerAlloca(7345:3): size = 8, type = %struct.LsItem**, var = ^14
	leaq -88(%rbp), %r11
	# LowerAlloca(7346:3): size = 8, type = %struct.LsItem**, var = ^15
	leaq -96(%rbp), %r14
	# LowerAlloca(7347:3): size = 8, type = %"class.std::allocator.7"**, var = ^16
	leaq -104(%rbp), %r15
	# LowerStore(7348:3).9: mov %struct.LsItem* %rdi, (^14)
	movq %rdi, (%r11)
	# LowerStore(7349:3).9: mov %struct.LsItem* %rsi, (^15)
	movq %rsi, (%r14)
	# LowerStore(7350:3).9: mov %"class.std::allocator.7"* %rdx, (^16)
	movq %rdx, (%r15)
	# LowerLoad(7351:3).2: (^16) into %"class.std::allocator.7"* ^17
	movq (%r15), %rsi
	# LowerLoad(7352:3).2: (^14) into %struct.LsItem* ^18
	movq (%r11), %rdi
	# LowerLoad(7353:3).2: (^15) into %struct.LsItem* ^19
	movq (%r14), %rdx
	# LowerStore(7354:3).9: mov %"class.std::allocator.7"* ^17, (^11)
	movq %rsi, (%r10)
	# LowerStore(7355:3).9: mov %struct.LsItem* ^18, (^12)
	movq %rdi, (%r9)
	# LowerStore(7356:3).9: mov %struct.LsItem* ^19, (^13)
	movq %rdx, (%r8)
	# LowerLoad(7357:3).2: (^11) into %"class.std::allocator.7"* ^20
	movq (%r10), %rdx
	# LowerBasicConversion(7358:3): %"class.std::allocator.7"* ^20 -> %"class.std::__new_allocator.8"* ^21
	movq %rdx, %rsi
	# LowerLoad(7359:3).2: (^12) into %struct.LsItem* ^22
	movq (%r9), %rdx
	# LowerLoad(7360:3).2: (^13) into %struct.LsItem* ^23
	movq (%r8), %rdi
	# LowerStore(7361:3).9: mov %"class.std::__new_allocator.8"* ^21, (^6)
	movq %rsi, (%rcx)
	# LowerStore(7362:3).9: mov %struct.LsItem* ^22, (^7)
	movq %rdx, (%rbx)
	# LowerStore(7363:3).9: mov %struct.LsItem* ^23, (^8)
	movq %rdi, (%rax)
	# LowerLoad(7364:3).2: (^6) into %"class.std::__new_allocator.8"* ^24
	movq (%rcx), %rdx
	# LowerLoad(7365:3).2: (^7) into %struct.LsItem* ^25
	movq (%rbx), %rcx
	# LowerBasicConversion(7366:3): %struct.LsItem* ^25 -> i8* ^26
	movq %rcx, %rbx
	# LowerLoad(7367:3).2: (^8) into %struct.LsItem* ^27
	movq (%rax), %rbx
	# Clobber %rcx
	movq %rcx, -128(%rbp)
	# SetupCalls(7368:3): move argument %struct.LsItem* nonnull dereferenceable(33) align 8 ^25
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(7368:3): move argument %struct.LsItem* nonnull dereferenceable(33) align 8 ^27
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZN6LsItemC2EOS_
	# Unclobber %rcx
	movq -128(%rbp), %rcx
	# LowerLoad(7369:3).2: (^16) into %"class.std::allocator.7"* ^28
	movq (%r15), %rax
	# LowerLoad(7370:3).2: (^15) into %struct.LsItem* ^29
	movq (%r14), %rbx
	# LowerStore(7371:3).9: mov %"class.std::allocator.7"* ^28, (^9)
	movq %rax, (%r12)
	# LowerStore(7372:3).9: mov %struct.LsItem* ^29, (^10)
	movq %rbx, (%r13)
	# LowerLoad(7373:3).2: (^9) into %"class.std::allocator.7"* ^30
	movq (%r12), %rax
	# LowerBasicConversion(7374:3): %"class.std::allocator.7"* ^30 -> %"class.std::__new_allocator.8"* ^31
	movq %rax, %rbx
	# LowerLoad(7375:3).2: (^10) into %struct.LsItem* ^32
	movq (%r13), %rcx
	# LowerStore(7376:3).9: mov %"class.std::__new_allocator.8"* ^31, (^4)
	movq -112(%rbp), %rax
	movq %rbx, (%rax)
	# LowerStore(7377:3).9: mov %struct.LsItem* ^32, (^5)
	movq -120(%rbp), %rax
	movq %rcx, (%rax)
	# LowerLoad(7378:3).2: (^4) into %"class.std::__new_allocator.8"* ^33
	movq -112(%rbp), %rbx
	movq (%rbx), %rax
	# LowerLoad(7379:3).2: (^5) into %struct.LsItem* ^34
	movq -120(%rbp), %rbx
	movq (%rbx), %rax
	# Clobber %rax
	movq %rax, -136(%rbp)
	# SetupCalls(7380:3): move argument %struct.LsItem* nonnull dereferenceable(33) align 8 ^34
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZN6LsItemD2Ev
	# Unclobber %rax
	movq -136(%rbp), %rax
	movq -144(%rbp), %r15
	movq -184(%rbp), %r14
	movq -176(%rbp), %r13
	movq -168(%rbp), %r12
	movq -160(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt10__sv_checkmmPKc
.p2align 4, 0x90
_ZSt10__sv_checkmmPKc:
	.___ZSt10__sv_checkmmPKc__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(64 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -56(%rbp)
	movq %r12, -64(%rbp)
	# LowerAlloca(3061:3): size = 8, type = i64*, var = ^4
	leaq -8(%rbp), %rbx
	# LowerAlloca(3062:3): size = 8, type = i64*, var = ^5
	leaq -16(%rbp), %r12
	# LowerAlloca(3063:3): size = 8, type = i8**, var = ^6
	leaq -24(%rbp), %r8
	# LowerStore(3064:3).9: mov i64 %rdi, (^4)
	movq %rdi, (%rbx)
	# LowerStore(3065:3).9: mov i64 %rsi, (^5)
	movq %rsi, (%r12)
	# LowerStore(3066:3).9: mov i8* %rdx, (^6)
	movq %rdx, (%r8)
	# LowerLoad(3067:3).2: (^5) into i64 ^7
	movq (%r12), %rcx
	# LowerLoad(3068:3).2: (^4) into i64 ^8
	movq (%rbx), %rax
	# LowerIcmp(3069:3): i64 ^7 vs. operand i64 ^8
	cmpq %rax, %rcx
	seta %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZSt10__sv_checkmmPKc__M21
	jmp .___ZSt10__sv_checkmmPKc__M56
	.___ZSt10__sv_checkmmPKc__M21:
	# LowerLoad(3073:3).2: (^6) into i8* ^11
	movq (%r8), %rdx
	# LowerLoad(3074:3).2: (^5) into i64 ^12
	movq (%r12), %rcx
	# LowerLoad(3075:3).2: (^4) into i64 ^13
	movq (%rbx), %rax
	# Clobber %rdx
	movq %rdx, -32(%rbp)
	# Clobber %rcx
	movq %rcx, -40(%rbp)
	# Clobber %rax
	movq %rax, -48(%rbp)
	# SetupCalls(3076:3): move argument i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.24, i64 0, i64 0)
	leaq .str.24(%rip), %rdi
	# SetupCalls(3076:3): move argument i8* ^11
	# Fixed movzx with identical source and destination widths
	movq %rdx, %rsi
	# SetupCalls(3076:3): move argument i64 ^12
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdx
	# SetupCalls(3076:3): move argument i64 ^13
	# Fixed movzx with identical source and destination widths
	movq %rax, %rcx
	movq $0, %rax
	callq _ZSt24__throw_out_of_range_fmtPKcz@PLT
	# Unclobber %rax
	movq -48(%rbp), %rax
	# Unclobber %rcx
	movq -40(%rbp), %rcx
	# Unclobber %rdx
	movq -32(%rbp), %rdx
	.___ZSt10__sv_checkmmPKc__M56:
	# LowerLoad(3080:3).2: (^5) into i64 ^15
	movq (%r12), %rax
	movq -64(%rbp), %r12
	movq -56(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE9push_backEOS3_
.p2align 4, 0x90
_ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE9push_backEOS3_:
	.___ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE9push_backEOS3___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(40 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	# LowerAlloca(1083:3): size = 8, type = %"class.std::vector"**, var = ^3
	leaq -8(%rbp), %rbx
	# LowerAlloca(1084:3): size = 8, type = %"class.std::basic_string_view"**, var = ^4
	leaq -16(%rbp), %rax
	# LowerStore(1085:3).9: mov %"class.std::vector"* %rdi, (^3)
	movq %rdi, (%rbx)
	# LowerStore(1086:3).9: mov %"class.std::basic_string_view"* %rsi, (^4)
	movq %rsi, (%rax)
	# LowerLoad(1087:3).2: (^3) into %"class.std::vector"* ^5
	movq (%rbx), %rcx
	# LowerLoad(1088:3).2: (^4) into %"class.std::basic_string_view"* ^6
	movq (%rax), %rbx
	# Clobber %rcx
	movq %rcx, -24(%rbp)
	# SetupCalls(1089:3): move argument %"class.std::vector"* nonnull dereferenceable(24) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(1089:3): move argument %"class.std::basic_string_view"* nonnull dereferenceable(16) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12emplace_backIJS3_EEERS3_DpOT_
	# SetupCalls(1089:3): move %"class.std::basic_string_view"* result from %rax
	movq %rax, %rax
	# Unclobber %rcx
	movq -24(%rbp), %rcx
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt8functionIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEEcvbEv
.p2align 4, 0x90
_ZNKSt8functionIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEEcvbEv:
	.___ZNKSt8functionIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEEcvbEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(10556:3): size = 8, type = %"class.std::function"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(10557:3).9: mov %"class.std::function"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(10558:3).2: (^2) into %"class.std::function"* ^3
	movq (%rax), %rbx
	# LowerBasicConversion(10559:3): %"class.std::function"* ^3 -> %"class.std::_Function_base"* ^4
	movq %rbx, %rax
	# Clobber %rax
	movq %rax, -16(%rbp)
	# SetupCalls(10560:3): move argument %"class.std::_Function_base"* nonnull dereferenceable(24) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNKSt14_Function_base8_M_emptyEv
	# SetupCalls(10560:3): move i1 result from %rax
	movb %al, %bl
	# Unclobber %rax
	movq -16(%rbp), %rax
	# LowerLogic(10562:3): ^5, true into i1 ^6
	movb %bl, %al
	xorb $1, %al
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt6vectorI6LsItemSaIS0_EE4backEv
.p2align 4, 0x90
_ZNSt6vectorI6LsItemSaIS0_EE4backEv:
	.___ZNSt6vectorI6LsItemSaIS0_EE4backEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(72 + 0, 16)
	subq $80, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -48(%rbp)
	movq %r12, -56(%rbp)
	movq %r13, -40(%rbp)
	# LowerAlloca(6988:3): size = 8, type = %"class.std::vector.5"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerAlloca(6989:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^3
	leaq -16(%rbp), %r13
	# LowerAlloca(6990:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^4
	leaq -24(%rbp), %rbx
	# LowerStore(6991:3).9: mov %"class.std::vector.5"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(6992:3).2: (^2) into %"class.std::vector.5"* ^5
	movq (%rax), %rcx
	# Clobber %rcx
	movq %rcx, -32(%rbp)
	# SetupCalls(6993:3): move argument %"class.std::vector.5"* nonnull dereferenceable(24) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	callq _ZNSt6vectorI6LsItemSaIS0_EE3endEv
	# SetupCalls(6993:3): move %struct.LsItem* result from %rax
	movq %rax, %r12
	# Unclobber %rcx
	movq -32(%rbp), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(6994:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^4 -> ^7, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(6994:3): type of ^7 is %struct.LsItem**
	# LowerStore(6995:3).9: mov %struct.LsItem* ^6, (^7)
	movq %r12, (%rax)
	# SetupCalls(6996:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(6996:3): move argument i64 1
	movq $1, %rsi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEmiEl
	# SetupCalls(6996:3): move %struct.LsItem* result from %rax
	movq %rax, %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(6997:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^3 -> ^9, indices=0,0
	movq %r13, %rax
	# LowerGetelementptr(6997:3): type of ^9 is %struct.LsItem**
	# LowerStore(6998:3).9: mov %struct.LsItem* ^8, (^9)
	movq %rbx, (%rax)
	# SetupCalls(6999:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEdeEv
	# SetupCalls(6999:3): move %struct.LsItem* result from %rax
	movq %rax, %rbx
	movq %rbx, %rax
	movq -40(%rbp), %r13
	movq -56(%rbp), %r12
	movq -48(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt4sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEEZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISB_EEE3$_0EvT_SH_T0_
.p2align 4, 0x90
_ZSt4sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEEZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISB_EEE3$_0EvT_SH_T0_:
	.___ZSt4sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEEZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISB_EEE3$_0EvT_SH_T0___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(104 + 0, 16)
	subq $112, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -80(%rbp)
	movq %r12, -96(%rbp)
	movq %r13, -88(%rbp)
	# LowerAlloca(1875:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^3
	leaq -8(%rbp), %rcx
	# LowerAlloca(1876:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^4
	leaq -16(%rbp), %rbx
	# LowerAlloca(1877:3): size = 1, type = %class.anon*, var = ^5
	leaq -17(%rbp), %rax
	# LowerAlloca(1878:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^6
	leaq -32(%rbp), %r13
	# LowerAlloca(1879:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^7
	leaq -40(%rbp), %r12
	# LowerAlloca(1880:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, var = ^8
	leaq -41(%rbp), %rax
	# LowerAlloca(1881:3): size = 1, type = %class.anon*, var = ^9
	leaq -42(%rbp), %rax
	# LowerAlloca(1882:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, var = ^10
	leaq -43(%rbp), %rax
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(1883:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^3 -> ^11, indices=0,0
	movq %rcx, %rax
	# LowerGetelementptr(1883:3): type of ^11 is %struct.LsItem**
	# LowerStore(1884:3).9: mov %struct.LsItem* %rdi, (^11)
	movq %rdi, (%rax)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(1885:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^4 -> ^12, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(1885:3): type of ^12 is %struct.LsItem**
	# LowerStore(1886:3).9: mov %struct.LsItem* %rsi, (^12)
	movq %rsi, (%rax)
	# LowerBasicConversion(1887:3): %"class.__gnu_cxx::__normal_iterator"* ^6 -> i8* ^13
	movq %r13, %rax
	# LowerBasicConversion(1888:3): %"class.__gnu_cxx::__normal_iterator"* ^3 -> i8* ^14
	movq %rcx, %rdx
	# Clobber %rdx
	movq %rdx, -56(%rbp)
	# Clobber %rax
	movq %rax, -64(%rbp)
	# SetupCalls(1889:3): move argument i8* align 8 ^13
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(1889:3): move argument i8* align 8 ^14
	# Fixed movzx with identical source and destination widths
	movq %rdx, %rsi
	# SetupCalls(1889:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -64(%rbp), %rax
	# Unclobber %rdx
	movq -56(%rbp), %rdx
	# LowerBasicConversion(1890:3): %"class.__gnu_cxx::__normal_iterator"* ^7 -> i8* ^15
	movq %r12, %rax
	# LowerBasicConversion(1891:3): %"class.__gnu_cxx::__normal_iterator"* ^4 -> i8* ^16
	movq %rbx, %rcx
	# Clobber %rcx
	movq %rcx, -72(%rbp)
	# Clobber %rax
	movq %rax, -64(%rbp)
	# SetupCalls(1892:3): move argument i8* align 8 ^15
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(1892:3): move argument i8* align 8 ^16
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(1892:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -64(%rbp), %rax
	# Unclobber %rcx
	movq -72(%rbp), %rcx
	callq _ZN9__gnu_cxx5__ops16__iter_comp_iterIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EENS0_15_Iter_comp_iterIT_EESD_
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(1894:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^6 -> ^17, indices=0,0
	movq %r13, %rax
	# LowerGetelementptr(1894:3): type of ^17 is %struct.LsItem**
	# LowerLoad(1895:3).2: (^17) into %struct.LsItem* ^18
	movq (%rax), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(1896:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^7 -> ^19, indices=0,0
	movq %r12, %rbx
	# LowerGetelementptr(1896:3): type of ^19 is %struct.LsItem**
	# LowerLoad(1897:3).2: (^19) into %struct.LsItem* ^20
	movq (%rbx), %rax
	# Clobber %rcx
	movq %rcx, -72(%rbp)
	# Clobber %rax
	movq %rax, -64(%rbp)
	# SetupCalls(1898:3): move argument %struct.LsItem* ^18
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(1898:3): move argument %struct.LsItem* ^20
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZSt6__sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0_
	# Unclobber %rax
	movq -64(%rbp), %rax
	# Unclobber %rcx
	movq -72(%rbp), %rcx
	movq -88(%rbp), %r13
	movq -96(%rbp), %r12
	movq -80(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10filesystem7__cxx1118directory_iteratorC2ERKNS0_4pathE
.p2align 4, 0x90
_ZNSt10filesystem7__cxx1118directory_iteratorC2ERKNS0_4pathE:
	.___ZNSt10filesystem7__cxx1118directory_iteratorC2ERKNS0_4pathE__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(40 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	# LowerAlloca(1575:3): size = 8, type = %"class.std::filesystem::__cxx11::directory_iterator"**, var = ^3
	leaq -8(%rbp), %rbx
	# LowerAlloca(1576:3): size = 8, type = %"class.std::filesystem::__cxx11::path"**, var = ^4
	leaq -16(%rbp), %rax
	# LowerStore(1577:3).9: mov %"class.std::filesystem::__cxx11::directory_iterator"* %rdi, (^3)
	movq %rdi, (%rbx)
	# LowerStore(1578:3).9: mov %"class.std::filesystem::__cxx11::path"* %rsi, (^4)
	movq %rsi, (%rax)
	# LowerLoad(1579:3).2: (^3) into %"class.std::filesystem::__cxx11::directory_iterator"* ^5
	movq (%rbx), %rcx
	# LowerLoad(1580:3).2: (^4) into %"class.std::filesystem::__cxx11::path"* ^6
	movq (%rax), %rbx
	# Clobber %rcx
	movq %rcx, -24(%rbp)
	# SetupCalls(1581:3): move argument %"class.std::filesystem::__cxx11::directory_iterator"* nonnull dereferenceable(16) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(1581:3): move argument %"class.std::filesystem::__cxx11::path"* nonnull dereferenceable(40) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(1581:3): move argument i8 zeroext 0
	movq $0, %rdx
	andq $255, %rdx
	# SetupCalls(1581:3): move argument %"class.std::error_code"* null
	movq $0, %rcx
	callq _ZNSt10filesystem7__cxx1118directory_iteratorC2ERKNS0_4pathENS_17directory_optionsEPSt10error_code@PLT
	# Unclobber %rcx
	movq -24(%rbp), %rcx
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt10filesystem7__cxx114path8iterator11_M_is_multiEv
.p2align 4, 0x90
_ZNKSt10filesystem7__cxx114path8iterator11_M_is_multiEv:
	.___ZNKSt10filesystem7__cxx114path8iterator11_M_is_multiEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(3936:3): size = 8, type = %"class.std::filesystem::__cxx11::path::iterator"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(3937:3).9: mov %"class.std::filesystem::__cxx11::path::iterator"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(3938:3).2: (^2) into %"class.std::filesystem::__cxx11::path::iterator"* ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path::iterator"
	# LowerGetelementptr(3939:3): struct-type: %"class.std::filesystem::__cxx11::path::iterator"* ^3 -> ^4, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(3939:3): type of ^4 is %"class.std::filesystem::__cxx11::path"**
	# LowerLoad(3940:3).2: (^4) into %"class.std::filesystem::__cxx11::path"* ^5
	movq (%rax), %rbx
	# SetupCalls(3941:3): move argument %"class.std::filesystem::__cxx11::path"* nonnull dereferenceable(40) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNKSt10filesystem7__cxx114path7_M_typeEv
	# SetupCalls(3941:3): move i8 result from %rax
	movb %al, %bl
	# LowerIcmp(3942:3): i8 ^6 vs. intlike 0
	cmpb $0, %bl
	sete %al
	andq $1, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt12__get_helperILm0EPNSt10filesystem7__cxx114path5_List5_ImplEJNS3_13_Impl_deleterEEERT0_RSt11_Tuple_implIXT_EJS7_DpT1_EE
.p2align 4, 0x90
_ZSt12__get_helperILm0EPNSt10filesystem7__cxx114path5_List5_ImplEJNS3_13_Impl_deleterEEERT0_RSt11_Tuple_implIXT_EJS7_DpT1_EE:
	.___ZSt12__get_helperILm0EPNSt10filesystem7__cxx114path5_List5_ImplEJNS3_13_Impl_deleterEEERT0_RSt11_Tuple_implIXT_EJS7_DpT1_EE__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(4099:3): size = 8, type = %"struct.std::_Tuple_impl"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(4100:3).9: mov %"struct.std::_Tuple_impl"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(4101:3).2: (^2) into %"struct.std::_Tuple_impl"* ^3
	movq (%rax), %rbx
	# SetupCalls(4102:3): move argument %"struct.std::_Tuple_impl"* nonnull dereferenceable(8) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt11_Tuple_implILm0EJPNSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEEE7_M_headERS7_
	# SetupCalls(4102:3): move %"struct.std::filesystem::__cxx11::path::_List::_Impl"** result from %rax
	movq %rax, %rbx
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv
.p2align 4, 0x90
_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv:
	.___ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(352 + 0, 16)
	subq $352, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -208(%rbp)
	movq %r12, -232(%rbp)
	movq %r13, -240(%rbp)
	movq %r14, -248(%rbp)
	movq %r15, -176(%rbp)
	# LowerAlloca(3374:3): size = 8, type = i32**, var = ^2
	# Fixing source-to-dest leaq -8(%rbp), -168(%rbp)
	leaq -8(%rbp), %r15
	movq %r15, -168(%rbp)
	# LowerAlloca(3375:3): size = 4, type = i32*, var = ^3
	leaq -12(%rbp), %r8
	# LowerAlloca(3376:3): size = 4, type = i32*, var = ^4
	# Fixing source-to-dest leaq -16(%rbp), -152(%rbp)
	leaq -16(%rbp), %r15
	movq %r15, -152(%rbp)
	# LowerAlloca(3377:3): size = 4, type = i32*, var = ^5
	# Fixing source-to-dest leaq -20(%rbp), -136(%rbp)
	leaq -20(%rbp), %r15
	movq %r15, -136(%rbp)
	# LowerAlloca(3378:3): size = 8, type = i32**, var = ^6
	# Fixing source-to-dest leaq -32(%rbp), -160(%rbp)
	leaq -32(%rbp), %r15
	movq %r15, -160(%rbp)
	# LowerAlloca(3379:3): size = 4, type = i32*, var = ^7
	leaq -36(%rbp), %rbx
	# LowerAlloca(3380:3): size = 4, type = i32*, var = ^8
	# Fixing source-to-dest leaq -40(%rbp), -144(%rbp)
	leaq -40(%rbp), %r15
	movq %r15, -144(%rbp)
	# LowerAlloca(3381:3): size = 4, type = i32*, var = ^9
	# Fixing source-to-dest leaq -44(%rbp), -128(%rbp)
	leaq -44(%rbp), %r15
	movq %r15, -128(%rbp)
	# LowerAlloca(3382:3): size = 8, type = i32**, var = ^10
	leaq -56(%rbp), %r9
	# LowerAlloca(3383:3): size = 4, type = i32*, var = ^11
	leaq -60(%rbp), %r10
	# LowerAlloca(3384:3): size = 8, type = %"class.std::_Sp_counted_base"**, var = ^12
	leaq -72(%rbp), %rdx
	# LowerAlloca(3385:3): size = 1, type = i8*, var = ^13
	leaq -73(%rbp), %rax
	# LowerAlloca(3386:3): size = 1, type = i8*, var = ^14
	leaq -74(%rbp), %r11
	# LowerAlloca(3387:3): size = 1, type = i8*, var = ^15
	leaq -75(%rbp), %r12
	# LowerAlloca(3388:3): size = 4, type = i32*, var = ^16
	leaq -80(%rbp), %r13
	# LowerAlloca(3389:3): size = 4, type = i32*, var = ^17
	leaq -84(%rbp), %r14
	# LowerAlloca(3390:3): size = 8, type = i64*, var = ^18
	leaq -96(%rbp), %r15
	# LowerAlloca(3391:3): size = 8, type = i64**, var = ^19
	leaq -104(%rbp), %rsi
	# LowerAlloca(3392:3): size = 8, type = i64*, var = ^20
	leaq -112(%rbp), %rcx
	# LowerStore(3393:3).9: mov %"class.std::_Sp_counted_base"* %rdi, (^12)
	movq %rdi, (%rdx)
	# LowerLoad(3394:3).2: (^12) into %"class.std::_Sp_counted_base"* ^21
	# Fixing source-to-dest movq (%rdx), -120(%rbp)
	pushq %r15
	movq (%rdx), %r15
	movq %r15, -120(%rbp)
	popq %r15
	# LowerStore(3395:3).3: mov $imm, (^13)
	movb $1, (%rax)
	# LowerStore(3396:3).3: mov $imm, (^14)
	movb $1, (%r11)
	# LowerStore(3397:3).3: mov $imm, (^15)
	movb $1, (%r12)
	# LowerStore(3398:3).3: mov $imm, (^16)
	movl $32, (%r13)
	# LowerStore(3399:3).3: mov $imm, (^17)
	movl $32, (%r14)
	# LowerStore(3400:3).3: mov $imm, (^18)
	movabsq $4294967297, %rax
	movq %rax, (%r15)
	# tt = Pointer, type = %"class.std::_Sp_counted_base"
	# LowerGetelementptr(3401:3): struct-type: %"class.std::_Sp_counted_base"* ^21 -> ^22, indices=0,1
	movq -120(%rbp), %rax
	addq $8, %rax
	# LowerGetelementptr(3401:3): type of ^22 is i32*
	# LowerBasicConversion(3402:3): %"class.std::_Sp_counted_base"* ^22 -> i64* ^23
	movq %rax, %rdx
	# LowerStore(3403:3).9: mov i64* ^23, (^19)
	movq %rdx, (%rsi)
	# LowerLoad(3404:3).2: (^19) into i64* ^24
	movq (%rsi), %rax
	# LowerLoad(3405:3).2: (^24) into i64 ^25
	movq (%rax), %rdx
	# LowerStore(3406:3).9: mov i64 ^25, (^20)
	movq %rdx, (%rcx)
	# LowerLoad(3407:3).2: (^20) into i64 ^26
	movq (%rcx), %rax
	# LowerIcmp(3408:3): i64 ^26 vs. intlike 4294967297
	movabsq $4294967297, %rcx
	cmpq %rcx, %rax
	sete %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv__M79
	jmp .___ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv__M160
	.___ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv__M79:
	# tt = Pointer, type = %"class.std::_Sp_counted_base"
	# LowerGetelementptr(3412:3): struct-type: %"class.std::_Sp_counted_base"* ^21 -> ^29, indices=0,1
	movq -120(%rbp), %rax
	addq $8, %rax
	# LowerGetelementptr(3412:3): type of ^29 is i32*
	# LowerStore(3413:3).3: mov $imm, (^29)
	movl $0, (%rax)
	# tt = Pointer, type = %"class.std::_Sp_counted_base"
	# LowerGetelementptr(3414:3): struct-type: %"class.std::_Sp_counted_base"* ^21 -> ^30, indices=0,2
	movq -120(%rbp), %rax
	addq $12, %rax
	# LowerGetelementptr(3414:3): type of ^30 is i32*
	# LowerStore(3415:3).3: mov $imm, (^30)
	movl $0, (%rax)
	# LowerBasicConversion(3416:3): %"class.std::_Sp_counted_base"* ^21 -> void (%"class.std::_Sp_counted_base"*) **** ^31
	movq -120(%rbp), %rax
	# LowerLoad(3417:3).2: (^31) into void (%"class.std::_Sp_counted_base"*) *** ^32
	movq (%rax), %rbx
	# tt = Pointer, type = void (%"class.std::_Sp_counted_base"*) **
	# LowerGetelementptr(3418:3): struct-type: void (%"class.std::_Sp_counted_base"*) *** ^32 -> ^33, indices=2
	movq %rbx, %rax
	addq $16, %rax
	# LowerGetelementptr(3418:3): type of ^33 is void (%"class.std::_Sp_counted_base"*) ***
	# LowerLoad(3419:3).2: (^33) into void (%"class.std::_Sp_counted_base"*) ** ^34
	movq (%rax), %rbx
	# SetupCalls(3420:3): move argument %"class.std::_Sp_counted_base"* nonnull dereferenceable(16) align 8 ^21
	# Fixed movzx with identical source and destination widths
	movq -120(%rbp), %rdi
	# SetupCalls(3420:3): jump to function operand ^34
	callq *%rbx
	# LowerBasicConversion(3421:3): %"class.std::_Sp_counted_base"* ^21 -> void (%"class.std::_Sp_counted_base"*) **** ^35
	movq -120(%rbp), %rax
	# LowerLoad(3422:3).2: (^35) into void (%"class.std::_Sp_counted_base"*) *** ^36
	movq (%rax), %rbx
	# tt = Pointer, type = void (%"class.std::_Sp_counted_base"*) **
	# LowerGetelementptr(3423:3): struct-type: void (%"class.std::_Sp_counted_base"*) *** ^36 -> ^37, indices=3
	movq %rbx, %rax
	addq $24, %rax
	# LowerGetelementptr(3423:3): type of ^37 is void (%"class.std::_Sp_counted_base"*) ***
	# LowerLoad(3424:3).2: (^37) into void (%"class.std::_Sp_counted_base"*) ** ^38
	movq (%rax), %rbx
	# SetupCalls(3425:3): move argument %"class.std::_Sp_counted_base"* nonnull dereferenceable(16) align 8 ^21
	# Fixed movzx with identical source and destination widths
	movq -120(%rbp), %rdi
	# SetupCalls(3425:3): jump to function operand ^38
	callq *%rbx
	jmp .___ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv__M260
	.___ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv__M160:
	# tt = Pointer, type = %"class.std::_Sp_counted_base"
	# LowerGetelementptr(3429:3): struct-type: %"class.std::_Sp_counted_base"* ^21 -> ^40, indices=0,1
	movq -120(%rbp), %rax
	addq $8, %rax
	# LowerGetelementptr(3429:3): type of ^40 is i32*
	# LowerStore(3430:3).9: mov %"class.std::_Sp_counted_base"* ^40, (^10)
	movq %rax, (%r9)
	# LowerStore(3431:3).3: mov $imm, (^11)
	movl $-1, (%r10)
	# LowerLoad(3432:3).4: __libc_single_threaded into ^41
	movq __libc_single_threaded(%rip), %rax
	# LowerIcmp(3433:3): i8 ^41 vs. intlike 0
	cmpb $0, %al
	setne %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv__M176
	jmp .___ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv__M206
	.___ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv__M176:
	# LowerLoad(3437:3).2: (^10) into i32* ^44
	movq (%r9), %rax
	# LowerLoad(3438:3).2: (^11) into i32 ^45
	movl (%r10), %ecx
	# LowerStore(3439:3).9: mov i32* ^44, (^6)
	movq -160(%rbp), %rdx
	movq %rax, (%rdx)
	# LowerStore(3440:3).9: mov i32 ^45, (^7)
	movl %ecx, (%rbx)
	# LowerLoad(3441:3).2: (^6) into i32* ^46
	movq -160(%rbp), %rcx
	movq (%rcx), %rax
	# LowerLoad(3442:3).2: (^46) into i32 ^47
	movl (%rax), %ecx
	# LowerStore(3443:3).9: mov i32 ^47, (^8)
	movq -144(%rbp), %rax
	movl %ecx, (%rax)
	# LowerLoad(3444:3).2: (^7) into i32 ^48
	movl (%rbx), %ecx
	# LowerLoad(3445:3).2: (^6) into i32* ^49
	movq -160(%rbp), %rbx
	movq (%rbx), %rax
	# LowerLoad(3446:3).2: (^49) into i32 ^50
	movl (%rax), %ebx
	# LowerMath(3447:3): ^50, ^48 into i32 ^51
	movl %ebx, %edx
	addl %ecx, %edx
	# LowerStore(3448:3).9: mov i32 ^51, (^49)
	movl %edx, (%rax)
	# LowerLoad(3449:3).2: (^8) into i32 ^52
	movq -144(%rbp), %rax
	movl (%rax), %ebx
	# LowerStore(3450:3).9: mov i32 ^52, (^9)
	movq -128(%rbp), %rax
	movl %ebx, (%rax)
	jmp .___ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv__M231
	.___ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv__M206:
	# LowerLoad(3454:3).2: (^10) into i32* ^54
	movq (%r9), %rbx
	# LowerLoad(3455:3).2: (^11) into i32 ^55
	movl (%r10), %eax
	# LowerStore(3456:3).9: mov i32* ^54, (^2)
	movq -168(%rbp), %rcx
	movq %rbx, (%rcx)
	# LowerStore(3457:3).9: mov i32 ^55, (^3)
	movl %eax, (%r8)
	# LowerLoad(3458:3).2: (^2) into i32* ^56
	movq -168(%rbp), %rax
	movq (%rax), %rbx
	# LowerLoad(3459:3).2: (^3) into i32 ^57
	movl (%r8), %ecx
	# LowerStore(3460:3).9: mov i32 ^57, (^4)
	movq -152(%rbp), %rax
	movl %ecx, (%rax)
	# LowerLoad(3461:3).2: (^4) into i32 ^58
	movq -152(%rbp), %rax
	movl (%rax), %ecx
	movl %ecx, %edx
	lock addl %edx, (%rbx)
	# LowerStore(3463:3).9: mov i32 ^59, (^5)
	movq -136(%rbp), %rax
	movl %edx, (%rax)
	# LowerLoad(3464:3).2: (^5) into i32 ^60
	movq -136(%rbp), %rax
	movl (%rax), %ebx
	# LowerStore(3465:3).9: mov i32 ^60, (^9)
	movq -128(%rbp), %rax
	movl %ebx, (%rax)
	.___ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv__M231:
	# LowerLoad(3469:3).2: (^9) into i32 ^62
	movq -128(%rbp), %rbx
	movl (%rbx), %eax
	# LowerIcmp(3470:3): i32 ^62 vs. intlike 1
	cmpl $1, %eax
	sete %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv__M238
	jmp .___ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv__M260
	.___ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv__M238:
	# SetupCalls(3474:3): move argument %"class.std::_Sp_counted_base"* nonnull dereferenceable(16) align 8 ^21
	# Fixed movzx with identical source and destination widths
	movq -120(%rbp), %rdi
	callq _ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE24_M_release_last_use_coldEv
	.___ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv__M260:
	movq -176(%rbp), %r15
	movq -248(%rbp), %r14
	movq -240(%rbp), %r13
	movq -232(%rbp), %r12
	movq -208(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt10filesystem7__cxx114path8filenameEv
.p2align 4, 0x90
_ZNKSt10filesystem7__cxx114path8filenameEv:
	.___ZNKSt10filesystem7__cxx114path8filenameEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(184 + 0, 16)
	subq $192, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -112(%rbp)
	movq %r12, -104(%rbp)
	movq %r13, -128(%rbp)
	movq %r14, -96(%rbp)
	# LowerAlloca(1747:3): size = 8, type = i8**, var = ^3
	leaq -8(%rbp), %rcx
	# LowerAlloca(1748:3): size = 8, type = %"class.std::filesystem::__cxx11::path"**, var = ^4
	leaq -16(%rbp), %rax
	# LowerAlloca(1749:3): size = 24, type = %"class.std::filesystem::__cxx11::path::iterator"*, var = ^5
	leaq -40(%rbp), %r14
	# LowerAlloca(1750:3): size = 24, type = %"class.std::filesystem::__cxx11::path::iterator"*, var = ^6
	leaq -64(%rbp), %r12
	# LowerBasicConversion(1751:3): %"class.std::filesystem::__cxx11::path"* %rdi -> i8* ^7
	movq %rdi, %rbx
	# LowerStore(1752:3).9: mov i8* ^7, (^3)
	movq %rbx, (%rcx)
	# LowerStore(1753:3).9: mov %"class.std::filesystem::__cxx11::path"* %rsi, (^4)
	movq %rsi, (%rax)
	# LowerLoad(1754:3).2: (^4) into %"class.std::filesystem::__cxx11::path"* ^8
	movq (%rax), %rbx
	# Clobber %rdi
	movq %rdi, -72(%rbp)
	# SetupCalls(1755:3): move argument %"class.std::filesystem::__cxx11::path"* nonnull dereferenceable(40) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNKSt10filesystem7__cxx114path5emptyEv
	# SetupCalls(1755:3): move i1 result from %rax
	movb %al, %r13b
	# Unclobber %rdi
	movq -72(%rbp), %rdi
	cmpb $0, %r13b
	jne .___ZNKSt10filesystem7__cxx114path8filenameEv__M40
	jmp .___ZNKSt10filesystem7__cxx114path8filenameEv__M62
	.___ZNKSt10filesystem7__cxx114path8filenameEv__M40:
	# Clobber %rdi
	movq %rdi, -72(%rbp)
	# SetupCalls(1759:3): move argument %"class.std::filesystem::__cxx11::path"* nonnull dereferenceable(40) align 8 %rdi
	# Semiunclobber live %rdi into %rdi
	movq -72(%rbp), %rdi
	callq _ZNSt10filesystem7__cxx114pathC2Ev
	# Unclobber %rdi
	movq -72(%rbp), %rdi
	jmp .___ZNKSt10filesystem7__cxx114path8filenameEv__M397
	.___ZNKSt10filesystem7__cxx114path8filenameEv__M62:
	# Clobber %rdi
	movq %rdi, -72(%rbp)
	# SetupCalls(1763:3): move argument %"class.std::filesystem::__cxx11::path"* nonnull dereferenceable(40) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNKSt10filesystem7__cxx114path7_M_typeEv
	# SetupCalls(1763:3): move i8 result from %rax
	movb %al, %r13b
	# Unclobber %rdi
	movq -72(%rbp), %rdi
	# LowerIcmp(1764:3): i8 ^12 vs. intlike 3
	cmpb $3, %r13b
	sete %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNKSt10filesystem7__cxx114path8filenameEv__M90
	jmp .___ZNKSt10filesystem7__cxx114path8filenameEv__M114
	.___ZNKSt10filesystem7__cxx114path8filenameEv__M90:
	# Clobber %rdi
	movq %rdi, -72(%rbp)
	# SetupCalls(1768:3): move argument %"class.std::filesystem::__cxx11::path"* nonnull dereferenceable(40) align 8 %rdi
	# Semiunclobber live %rdi into %rdi
	movq -72(%rbp), %rdi
	# SetupCalls(1768:3): move argument %"class.std::filesystem::__cxx11::path"* nonnull dereferenceable(40) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZNSt10filesystem7__cxx114pathC2ERKS1_
	# Unclobber %rdi
	movq -72(%rbp), %rdi
	jmp .___ZNKSt10filesystem7__cxx114path8filenameEv__M397
	.___ZNKSt10filesystem7__cxx114path8filenameEv__M114:
	# Clobber %rdi
	movq %rdi, -72(%rbp)
	# SetupCalls(1772:3): move argument %"class.std::filesystem::__cxx11::path"* nonnull dereferenceable(40) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNKSt10filesystem7__cxx114path7_M_typeEv
	# SetupCalls(1772:3): move i8 result from %rax
	movb %al, %r13b
	# Unclobber %rdi
	movq -72(%rbp), %rdi
	# LowerIcmp(1773:3): i8 ^16 vs. intlike 0
	cmpb $0, %r13b
	sete %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNKSt10filesystem7__cxx114path8filenameEv__M142
	jmp .___ZNKSt10filesystem7__cxx114path8filenameEv__M373
	.___ZNKSt10filesystem7__cxx114path8filenameEv__M142:
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path"
	# LowerGetelementptr(1777:3): struct-type: %"class.std::filesystem::__cxx11::path"* ^8 -> ^19, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(1777:3): type of ^19 is %"class.std::__cxx11::basic_string"*
	# Clobber %rdi
	movq %rdi, -72(%rbp)
	# Clobber %rax
	movq %rax, -80(%rbp)
	# SetupCalls(1778:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^19
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4backEv@PLT
	# SetupCalls(1778:3): move i8* result from %rax
	movq %rax, %r13
	# Unclobber %rax
	movq -80(%rbp), %rax
	# Unclobber %rdi
	movq -72(%rbp), %rdi
	# LowerLoad(1779:3).2: (^20) into i8 ^21
	movb (%r13), %al
	movsbl %al, %ecx
	# LowerIcmp(1781:3): i32 ^22 vs. intlike 47
	cmpl $47, %ecx
	sete %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNKSt10filesystem7__cxx114path8filenameEv__M177
	jmp .___ZNKSt10filesystem7__cxx114path8filenameEv__M199
	.___ZNKSt10filesystem7__cxx114path8filenameEv__M177:
	# Clobber %rdi
	movq %rdi, -72(%rbp)
	# SetupCalls(1785:3): move argument %"class.std::filesystem::__cxx11::path"* nonnull dereferenceable(40) align 8 %rdi
	# Semiunclobber live %rdi into %rdi
	movq -72(%rbp), %rdi
	callq _ZNSt10filesystem7__cxx114pathC2Ev
	# Unclobber %rdi
	movq -72(%rbp), %rdi
	jmp .___ZNKSt10filesystem7__cxx114path8filenameEv__M397
	.___ZNKSt10filesystem7__cxx114path8filenameEv__M199:
	# Clobber %rdi
	movq %rdi, -72(%rbp)
	# SetupCalls(1789:3): move argument %"class.std::filesystem::__cxx11::path::iterator"* sret align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(1789:3): move argument %"class.std::filesystem::__cxx11::path"* nonnull dereferenceable(40) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZNKSt10filesystem7__cxx114path3endEv
	# Unclobber %rdi
	movq -72(%rbp), %rdi
	# Clobber %rdi
	movq %rdi, -72(%rbp)
	# SetupCalls(1790:3): move argument %"class.std::filesystem::__cxx11::path::iterator"* nonnull dereferenceable(17) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	callq _ZNSt10filesystem7__cxx114path8iteratormmEv
	# SetupCalls(1790:3): move %"class.std::filesystem::__cxx11::path::iterator"* result from %rax
	movq %rax, %rbx
	# Unclobber %rdi
	movq -72(%rbp), %rdi
	# LowerBasicConversion(1791:3): %"class.std::filesystem::__cxx11::path::iterator"* ^5 -> i8* ^27
	movq %r14, %rax
	# LowerBasicConversion(1792:3): %"class.std::filesystem::__cxx11::path::iterator"* ^26 -> i8* ^28
	movq %rbx, %rcx
	# Clobber %rdi
	movq %rdi, -72(%rbp)
	# Clobber %rcx
	movq %rcx, -88(%rbp)
	# Clobber %rax
	movq %rax, -80(%rbp)
	# SetupCalls(1793:3): move argument i8* align 8 ^27
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(1793:3): move argument i8* align 8 ^28
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(1793:3): move argument i64 24
	movq $24, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -80(%rbp), %rax
	# Unclobber %rcx
	movq -88(%rbp), %rcx
	# Unclobber %rdi
	movq -72(%rbp), %rdi
	# Clobber %rdi
	movq %rdi, -72(%rbp)
	# SetupCalls(1794:3): move argument %"class.std::filesystem::__cxx11::path::iterator"* nonnull dereferenceable(17) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r14, %rdi
	callq _ZNKSt10filesystem7__cxx114path8iteratorptEv
	# SetupCalls(1794:3): move %"class.std::filesystem::__cxx11::path"* result from %rax
	movq %rax, %rbx
	# Unclobber %rdi
	movq -72(%rbp), %rdi
	# Clobber %rdi
	movq %rdi, -72(%rbp)
	# SetupCalls(1795:3): move argument %"class.std::filesystem::__cxx11::path"* nonnull dereferenceable(40) align 8 ^29
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNKSt10filesystem7__cxx114path7_M_typeEv
	# SetupCalls(1795:3): move i8 result from %rax
	movb %al, %bl
	# Unclobber %rdi
	movq -72(%rbp), %rdi
	# LowerIcmp(1796:3): i8 ^30 vs. intlike 3
	cmpb $3, %bl
	sete %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNKSt10filesystem7__cxx114path8filenameEv__M325
	jmp .___ZNKSt10filesystem7__cxx114path8filenameEv__M372
	.___ZNKSt10filesystem7__cxx114path8filenameEv__M325:
	# Clobber %rdi
	movq %rdi, -72(%rbp)
	# SetupCalls(1800:3): move argument %"class.std::filesystem::__cxx11::path::iterator"* nonnull dereferenceable(17) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r14, %rdi
	callq _ZNKSt10filesystem7__cxx114path8iteratordeEv
	# SetupCalls(1800:3): move %"class.std::filesystem::__cxx11::path"* result from %rax
	movq %rax, %rbx
	# Unclobber %rdi
	movq -72(%rbp), %rdi
	# Clobber %rdi
	movq %rdi, -72(%rbp)
	# SetupCalls(1801:3): move argument %"class.std::filesystem::__cxx11::path"* nonnull dereferenceable(40) align 8 %rdi
	# Semiunclobber live %rdi into %rdi
	movq -72(%rbp), %rdi
	# SetupCalls(1801:3): move argument %"class.std::filesystem::__cxx11::path"* nonnull dereferenceable(40) align 8 ^33
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZNSt10filesystem7__cxx114pathC2ERKS1_
	# Unclobber %rdi
	movq -72(%rbp), %rdi
	jmp .___ZNKSt10filesystem7__cxx114path8filenameEv__M397
	.___ZNKSt10filesystem7__cxx114path8filenameEv__M372:
	.___ZNKSt10filesystem7__cxx114path8filenameEv__M373:
	# Clobber %rdi
	movq %rdi, -72(%rbp)
	# SetupCalls(1814:3): move argument %"class.std::filesystem::__cxx11::path"* nonnull dereferenceable(40) align 8 %rdi
	# Semiunclobber live %rdi into %rdi
	movq -72(%rbp), %rdi
	callq _ZNSt10filesystem7__cxx114pathC2Ev
	# Unclobber %rdi
	movq -72(%rbp), %rdi
	.___ZNKSt10filesystem7__cxx114path8filenameEv__M397:
	movq -96(%rbp), %r14
	movq -128(%rbp), %r13
	movq -104(%rbp), %r12
	movq -112(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt16initializer_listISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEE5beginEv
.p2align 4, 0x90
_ZNKSt16initializer_listISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEE5beginEv:
	.___ZNKSt16initializer_listISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEE5beginEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(9461:3): size = 8, type = %"class.std::initializer_list.13"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(9462:3).9: mov %"class.std::initializer_list.13"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(9463:3).2: (^2) into %"class.std::initializer_list.13"* ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::initializer_list.13"
	# LowerGetelementptr(9464:3): struct-type: %"class.std::initializer_list.13"* ^3 -> ^4, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(9464:3): type of ^4 is %"struct.std::pair"**
	# LowerLoad(9465:3).2: (^4) into %"struct.std::pair"* ^5
	movq (%rax), %rbx
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt10filesystem7__cxx114path3endEv
.p2align 4, 0x90
_ZNKSt10filesystem7__cxx114path3endEv:
	.___ZNKSt10filesystem7__cxx114path3endEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(48 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	movq %r12, -40(%rbp)
	# LowerAlloca(3697:3): size = 8, type = %"class.std::filesystem::__cxx11::path"**, var = ^3
	leaq -8(%rbp), %rax
	# LowerStore(3698:3).9: mov %"class.std::filesystem::__cxx11::path"* %rsi, (^3)
	movq %rsi, (%rax)
	# LowerLoad(3699:3).2: (^3) into %"class.std::filesystem::__cxx11::path"* ^4
	movq (%rax), %rbx
	# Clobber %rdi
	movq %rdi, -16(%rbp)
	# SetupCalls(3700:3): move argument %"class.std::filesystem::__cxx11::path"* nonnull dereferenceable(40) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNKSt10filesystem7__cxx114path7_M_typeEv
	# SetupCalls(3700:3): move i8 result from %rax
	movb %al, %r12b
	# Unclobber %rdi
	movq -16(%rbp), %rdi
	# LowerIcmp(3701:3): i8 ^5 vs. intlike 0
	cmpb $0, %r12b
	sete %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNKSt10filesystem7__cxx114path3endEv__M34
	jmp .___ZNKSt10filesystem7__cxx114path3endEv__M88
	.___ZNKSt10filesystem7__cxx114path3endEv__M34:
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path"
	# LowerGetelementptr(3705:3): struct-type: %"class.std::filesystem::__cxx11::path"* ^4 -> ^8, indices=0,1
	movq %rbx, %rax
	addq $32, %rax
	# LowerGetelementptr(3705:3): type of ^8 is %"struct.std::filesystem::__cxx11::path::_List"*
	# Clobber %rdi
	movq %rdi, -16(%rbp)
	# Clobber %rax
	movq %rax, -24(%rbp)
	# SetupCalls(3706:3): move argument %"struct.std::filesystem::__cxx11::path::_List"* nonnull dereferenceable(8) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNKSt10filesystem7__cxx114path5_List3endEv@PLT
	# SetupCalls(3706:3): move %"struct.std::filesystem::__cxx11::path::_Cmpt"* result from %rax
	movq %rax, %r12
	# Unclobber %rax
	movq -24(%rbp), %rax
	# Unclobber %rdi
	movq -16(%rbp), %rdi
	# Clobber %rdi
	movq %rdi, -16(%rbp)
	# SetupCalls(3707:3): move argument %"class.std::filesystem::__cxx11::path::iterator"* nonnull dereferenceable(17) align 8 %rdi
	# Semiunclobber live %rdi into %rdi
	movq -16(%rbp), %rdi
	# SetupCalls(3707:3): move argument %"class.std::filesystem::__cxx11::path"* ^4
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(3707:3): move argument %"struct.std::filesystem::__cxx11::path::_Cmpt"* ^9
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdx
	callq _ZNSt10filesystem7__cxx114path8iteratorC2EPKS1_PKNS1_5_CmptE
	# Unclobber %rdi
	movq -16(%rbp), %rdi
	jmp .___ZNKSt10filesystem7__cxx114path3endEv__M115
	.___ZNKSt10filesystem7__cxx114path3endEv__M88:
	# Clobber %rdi
	movq %rdi, -16(%rbp)
	# SetupCalls(3711:3): move argument %"class.std::filesystem::__cxx11::path::iterator"* nonnull dereferenceable(17) align 8 %rdi
	# Semiunclobber live %rdi into %rdi
	movq -16(%rbp), %rdi
	# SetupCalls(3711:3): move argument %"class.std::filesystem::__cxx11::path"* ^4
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(3711:3): move argument i1 zeroext true
	movq $1, %rdx
	andq $1, %rdx
	callq _ZNSt10filesystem7__cxx114path8iteratorC2EPKS1_b
	# Unclobber %rdi
	movq -16(%rbp), %rdi
	.___ZNKSt10filesystem7__cxx114path3endEv__M115:
	movq -40(%rbp), %r12
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt8functionIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEED2Ev
.p2align 4, 0x90
_ZNSt8functionIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEED2Ev:
	.___ZNSt8functionIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEED2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(4674:3): size = 8, type = %"class.std::function"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(4675:3).9: mov %"class.std::function"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(4676:3).2: (^2) into %"class.std::function"* ^3
	movq (%rax), %rbx
	# LowerBasicConversion(4677:3): %"class.std::function"* ^3 -> %"class.std::_Function_base"* ^4
	movq %rbx, %rax
	# Clobber %rax
	movq %rax, -16(%rbp)
	# SetupCalls(4678:3): move argument %"class.std::_Function_base"* nonnull dereferenceable(24) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt14_Function_baseD2Ev
	# Unclobber %rax
	movq -16(%rbp), %rax
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt12__shared_ptrINSt10filesystem7__cxx114_DirELN9__gnu_cxx12_Lock_policyE2EE12owner_beforeIS2_EEbRKS_IT_LS4_2EE
.p2align 4, 0x90
_ZNKSt12__shared_ptrINSt10filesystem7__cxx114_DirELN9__gnu_cxx12_Lock_policyE2EE12owner_beforeIS2_EEbRKS_IT_LS4_2EE:
	.___ZNKSt12__shared_ptrINSt10filesystem7__cxx114_DirELN9__gnu_cxx12_Lock_policyE2EE12owner_beforeIS2_EEbRKS_IT_LS4_2EE__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(56 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -40(%rbp)
	# LowerAlloca(3608:3): size = 8, type = %"class.std::__shared_ptr"**, var = ^3
	leaq -8(%rbp), %rcx
	# LowerAlloca(3609:3): size = 8, type = %"class.std::__shared_ptr"**, var = ^4
	leaq -16(%rbp), %rax
	# LowerStore(3610:3).9: mov %"class.std::__shared_ptr"* %rdi, (^3)
	movq %rdi, (%rcx)
	# LowerStore(3611:3).9: mov %"class.std::__shared_ptr"* %rsi, (^4)
	movq %rsi, (%rax)
	# LowerLoad(3612:3).2: (^3) into %"class.std::__shared_ptr"* ^5
	movq (%rcx), %rbx
	# tt = Pointer, type = %"class.std::__shared_ptr"
	# LowerGetelementptr(3613:3): struct-type: %"class.std::__shared_ptr"* ^5 -> ^6, indices=0,1
	movq %rbx, %rcx
	addq $8, %rcx
	# LowerGetelementptr(3613:3): type of ^6 is %"class.std::__shared_count"*
	# LowerLoad(3614:3).2: (^4) into %"class.std::__shared_ptr"* ^7
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::__shared_ptr"
	# LowerGetelementptr(3615:3): struct-type: %"class.std::__shared_ptr"* ^7 -> ^8, indices=0,1
	movq %rbx, %rax
	addq $8, %rax
	# LowerGetelementptr(3615:3): type of ^8 is %"class.std::__shared_count"*
	# Clobber %rcx
	movq %rcx, -24(%rbp)
	# Clobber %rax
	movq %rax, -32(%rbp)
	# SetupCalls(3616:3): move argument %"class.std::__shared_count"* nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(3616:3): move argument %"class.std::__shared_count"* nonnull dereferenceable(8) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNKSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EE7_M_lessERKS2_
	# SetupCalls(3616:3): move i1 result from %rax
	movb %al, %bl
	# Unclobber %rax
	movq -32(%rbp), %rax
	# Unclobber %rcx
	movq -24(%rbp), %rcx
	movb %bl, %al
	movq -40(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt10filesystem7__cxx114path7_M_typeEv
.p2align 4, 0x90
_ZNKSt10filesystem7__cxx114path7_M_typeEv:
	.___ZNKSt10filesystem7__cxx114path7_M_typeEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(3666:3): size = 8, type = %"class.std::filesystem::__cxx11::path"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(3667:3).9: mov %"class.std::filesystem::__cxx11::path"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(3668:3).2: (^2) into %"class.std::filesystem::__cxx11::path"* ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path"
	# LowerGetelementptr(3669:3): struct-type: %"class.std::filesystem::__cxx11::path"* ^3 -> ^4, indices=0,1
	movq %rbx, %rax
	addq $32, %rax
	# LowerGetelementptr(3669:3): type of ^4 is %"struct.std::filesystem::__cxx11::path::_List"*
	# Clobber %rax
	movq %rax, -16(%rbp)
	# SetupCalls(3670:3): move argument %"struct.std::filesystem::__cxx11::path::_List"* nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNKSt10filesystem7__cxx114path5_List4typeEv
	# SetupCalls(3670:3): move i8 result from %rax
	movb %al, %bl
	# Unclobber %rax
	movq -16(%rbp), %rax
	movb %bl, %al
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12_Vector_implC2Ev
.p2align 4, 0x90
_ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12_Vector_implC2Ev:
	.___ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12_Vector_implC2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(40 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -40(%rbp)
	# LowerAlloca(2828:3): size = 8, type = %"class.std::__new_allocator"**, var = ^2
	leaq -8(%rbp), %rcx
	# LowerAlloca(2829:3): size = 8, type = %"class.std::allocator"**, var = ^3
	leaq -16(%rbp), %rsi
	# LowerAlloca(2830:3): size = 8, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"**, var = ^4
	leaq -24(%rbp), %rax
	# LowerStore(2831:3).9: mov %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"* %rdi, (^4)
	movq %rdi, (%rax)
	# LowerLoad(2832:3).2: (^4) into %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"* ^5
	movq (%rax), %rdx
	# LowerBasicConversion(2833:3): %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"* ^5 -> %"class.std::allocator"* ^6
	movq %rdx, %rax
	# LowerStore(2834:3).9: mov %"class.std::allocator"* ^6, (^3)
	movq %rax, (%rsi)
	# LowerLoad(2835:3).2: (^3) into %"class.std::allocator"* ^7
	movq (%rsi), %rbx
	# LowerBasicConversion(2836:3): %"class.std::allocator"* ^7 -> %"class.std::__new_allocator"* ^8
	movq %rbx, %rax
	# LowerStore(2837:3).9: mov %"class.std::__new_allocator"* ^8, (^2)
	movq %rax, (%rcx)
	# LowerLoad(2838:3).2: (^2) into %"class.std::__new_allocator"* ^9
	movq (%rcx), %rax
	# LowerBasicConversion(2839:3): %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"* ^5 -> %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^10
	movq %rdx, %rax
	# Clobber %rax
	movq %rax, -32(%rbp)
	# SetupCalls(2840:3): move argument %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* nonnull dereferenceable(24) align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE17_Vector_impl_dataC2Ev
	# Unclobber %rax
	movq -32(%rbp), %rax
	movq -40(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt12_Vector_baseI6LsItemSaIS0_EE12_Vector_implC2Ev
.p2align 4, 0x90
_ZNSt12_Vector_baseI6LsItemSaIS0_EE12_Vector_implC2Ev:
	.___ZNSt12_Vector_baseI6LsItemSaIS0_EE12_Vector_implC2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(40 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -40(%rbp)
	# LowerAlloca(3194:3): size = 8, type = %"class.std::__new_allocator.8"**, var = ^2
	leaq -8(%rbp), %rcx
	# LowerAlloca(3195:3): size = 8, type = %"class.std::allocator.7"**, var = ^3
	leaq -16(%rbp), %rsi
	# LowerAlloca(3196:3): size = 8, type = %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl"**, var = ^4
	leaq -24(%rbp), %rax
	# LowerStore(3197:3).9: mov %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl"* %rdi, (^4)
	movq %rdi, (%rax)
	# LowerLoad(3198:3).2: (^4) into %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl"* ^5
	movq (%rax), %rdx
	# LowerBasicConversion(3199:3): %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl"* ^5 -> %"class.std::allocator.7"* ^6
	movq %rdx, %rax
	# LowerStore(3200:3).9: mov %"class.std::allocator.7"* ^6, (^3)
	movq %rax, (%rsi)
	# LowerLoad(3201:3).2: (^3) into %"class.std::allocator.7"* ^7
	movq (%rsi), %rbx
	# LowerBasicConversion(3202:3): %"class.std::allocator.7"* ^7 -> %"class.std::__new_allocator.8"* ^8
	movq %rbx, %rax
	# LowerStore(3203:3).9: mov %"class.std::__new_allocator.8"* ^8, (^2)
	movq %rax, (%rcx)
	# LowerLoad(3204:3).2: (^2) into %"class.std::__new_allocator.8"* ^9
	movq (%rcx), %rax
	# LowerBasicConversion(3205:3): %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl"* ^5 -> %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"* ^10
	movq %rdx, %rax
	# Clobber %rax
	movq %rax, -32(%rbp)
	# SetupCalls(3206:3): move argument %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"* nonnull dereferenceable(24) align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt12_Vector_baseI6LsItemSaIS0_EE17_Vector_impl_dataC2Ev
	# Unclobber %rax
	movq -32(%rbp), %rax
	movq -40(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt15__new_allocatorI6LsItemED2Ev
.p2align 4, 0x90
_ZNSt15__new_allocatorI6LsItemED2Ev:
	.___ZNSt15__new_allocatorI6LsItemED2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(6840:3): size = 8, type = %"class.std::__new_allocator.8"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(6841:3).9: mov %"class.std::__new_allocator.8"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(6842:3).2: (^2) into %"class.std::__new_allocator.8"* ^3
	movq (%rax), %rbx
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE11_S_max_sizeERKS4_
.p2align 4, 0x90
_ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE11_S_max_sizeERKS4_:
	.___ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE11_S_max_sizeERKS4___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(88 + 0, 16)
	subq $96, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -72(%rbp)
	# LowerAlloca(5240:3): size = 8, type = %"class.std::__new_allocator"**, var = ^2
	leaq -8(%rbp), %rsi
	# LowerAlloca(5241:3): size = 8, type = %"class.std::__new_allocator"**, var = ^3
	leaq -16(%rbp), %r9
	# LowerAlloca(5242:3): size = 8, type = %"class.std::allocator"**, var = ^4
	leaq -24(%rbp), %rbx
	# LowerAlloca(5243:3): size = 8, type = %"class.std::allocator"**, var = ^5
	leaq -32(%rbp), %r8
	# LowerAlloca(5244:3): size = 8, type = i64*, var = ^6
	leaq -40(%rbp), %rdx
	# LowerAlloca(5245:3): size = 8, type = i64*, var = ^7
	leaq -48(%rbp), %rcx
	# LowerStore(5246:3).9: mov %"class.std::allocator"* %rdi, (^5)
	movq %rdi, (%r8)
	# LowerStore(5247:3).3: mov $imm, (^6)
	movabsq $576460752303423487, %rax
	movq %rax, (%rdx)
	# LowerLoad(5248:3).2: (^5) into %"class.std::allocator"* ^8
	movq (%r8), %rax
	# LowerStore(5249:3).9: mov %"class.std::allocator"* ^8, (^4)
	movq %rax, (%rbx)
	# LowerLoad(5250:3).2: (^4) into %"class.std::allocator"* ^9
	movq (%rbx), %rax
	# LowerBasicConversion(5251:3): %"class.std::allocator"* ^9 -> %"class.std::__new_allocator"* ^10
	movq %rax, %rbx
	# LowerStore(5252:3).9: mov %"class.std::__new_allocator"* ^10, (^3)
	movq %rbx, (%r9)
	# LowerLoad(5253:3).2: (^3) into %"class.std::__new_allocator"* ^11
	movq (%r9), %rax
	# LowerStore(5254:3).9: mov %"class.std::__new_allocator"* ^11, (^2)
	movq %rax, (%rsi)
	# LowerLoad(5255:3).2: (^2) into %"class.std::__new_allocator"* ^12
	movq (%rsi), %rax
	# LowerStore(5256:3).3: mov $imm, (^7)
	movabsq $576460752303423487, %rax
	movq %rax, (%rcx)
	# Clobber %rdx
	movq %rdx, -56(%rbp)
	# Clobber %rcx
	movq %rcx, -64(%rbp)
	# SetupCalls(5257:3): move argument i64* nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rdx, %rdi
	# SetupCalls(5257:3): move argument i64* nonnull dereferenceable(8) align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	callq _ZSt3minImERKT_S2_S2_
	# SetupCalls(5257:3): move i64* result from %rax
	movq %rax, %rbx
	# Unclobber %rcx
	movq -64(%rbp), %rcx
	# Unclobber %rdx
	movq -56(%rbp), %rdx
	# LowerLoad(5258:3).2: (^13) into i64 ^14
	movq (%rbx), %rax
	movq -72(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE4sizeEv
.p2align 4, 0x90
_ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE4sizeEv:
	.___ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE4sizeEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(56 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(1437:3): size = 8, type = %"class.std::vector"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(1438:3).9: mov %"class.std::vector"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(1439:3).2: (^2) into %"class.std::vector"* ^3
	movq (%rax), %rcx
	# LowerBasicConversion(1440:3): %"class.std::vector"* ^3 -> %"struct.std::_Vector_base"* ^4
	movq %rcx, %rax
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(1441:3): struct-type: %"struct.std::_Vector_base"* ^4 -> ^5, indices=0,0
	movq %rax, %rbx
	# LowerGetelementptr(1441:3): type of ^5 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# LowerBasicConversion(1442:3): %"struct.std::_Vector_base"* ^5 -> %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^6
	movq %rbx, %rax
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(1443:3): struct-type: %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^6 -> ^7, indices=0,1
	movq %rax, %rbx
	addq $8, %rbx
	# LowerGetelementptr(1443:3): type of ^7 is %"class.std::basic_string_view"**
	# LowerLoad(1444:3).2: (^7) into %"class.std::basic_string_view"* ^8
	movq (%rbx), %rax
	# LowerBasicConversion(1445:3): %"class.std::vector"* ^3 -> %"struct.std::_Vector_base"* ^9
	movq %rcx, %rbx
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(1446:3): struct-type: %"struct.std::_Vector_base"* ^9 -> ^10, indices=0,0
	movq %rbx, %rcx
	# LowerGetelementptr(1446:3): type of ^10 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# LowerBasicConversion(1447:3): %"struct.std::_Vector_base"* ^10 -> %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^11
	movq %rcx, %rbx
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(1448:3): struct-type: %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^11 -> ^12, indices=0,0
	movq %rbx, %rcx
	# LowerGetelementptr(1448:3): type of ^12 is %"class.std::basic_string_view"**
	# LowerLoad(1449:3).2: (^12) into %"class.std::basic_string_view"* ^13
	movq (%rcx), %rbx
	# LowerBasicConversion(1450:3): %"class.std::basic_string_view"* ^8 -> i64 ^14
	movq %rax, %rcx
	# LowerBasicConversion(1451:3): %"class.std::basic_string_view"* ^13 -> i64 ^15
	movq %rbx, %rax
	# LowerMath(1452:3): ^14, ^15 into i64 ^16
	movq %rcx, %rbx
	subq %rax, %rbx
	# LowerSdiv(1453:3): ^16, 16 into i64 ^17
	movq %rbx, %rax
	sarq $4, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt12__get_helperILm1ENSt10filesystem7__cxx114path5_List13_Impl_deleterEJEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE
.p2align 4, 0x90
_ZSt12__get_helperILm1ENSt10filesystem7__cxx114path5_List13_Impl_deleterEJEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE:
	.___ZSt12__get_helperILm1ENSt10filesystem7__cxx114path5_List13_Impl_deleterEJEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(4147:3): size = 8, type = %"struct.std::_Tuple_impl.3"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(4148:3).9: mov %"struct.std::_Tuple_impl.3"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(4149:3).2: (^2) into %"struct.std::_Tuple_impl.3"* ^3
	movq (%rax), %rbx
	# SetupCalls(4150:3): move argument %"struct.std::_Tuple_impl.3"* nonnull dereferenceable(1) align 1 ^3
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt11_Tuple_implILm1EJNSt10filesystem7__cxx114path5_List13_Impl_deleterEEE7_M_headERS5_
	# SetupCalls(4150:3): move %"struct.std::filesystem::__cxx11::path::_List::_Impl_deleter"* result from %rax
	movq %rax, %rbx
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEE9_M_valptrEv
.p2align 4, 0x90
_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEE9_M_valptrEv:
	.___ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEE9_M_valptrEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(10266:3): size = 8, type = %"struct.std::_Rb_tree_node"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(10267:3).9: mov %"struct.std::_Rb_tree_node"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(10268:3).2: (^2) into %"struct.std::_Rb_tree_node"* ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"struct.std::_Rb_tree_node"
	# LowerGetelementptr(10269:3): struct-type: %"struct.std::_Rb_tree_node"* ^3 -> ^4, indices=0,1
	movq %rbx, %rax
	addq $32, %rax
	# LowerGetelementptr(10269:3): type of ^4 is %"struct.__gnu_cxx::__aligned_membuf"*
	# Clobber %rax
	movq %rax, -16(%rbp)
	# SetupCalls(10270:3): move argument %"struct.__gnu_cxx::__aligned_membuf"* nonnull dereferenceable(64) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEE6_M_ptrEv
	# SetupCalls(10270:3): move %"struct.std::pair"* result from %rax
	movq %rax, %rbx
	# Unclobber %rax
	movq -16(%rbp), %rax
	movq %rbx, %rax
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISA_EEEEEC2IRA3_KcRSF_Lb1EEEOT_OT0_
.p2align 4, 0x90
_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISA_EEEEEC2IRA3_KcRSF_Lb1EEEOT_OT0_:
	.___ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISA_EEEEEC2IRA3_KcRSF_Lb1EEEOT_OT0___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(128 + 0, 16)
	subq $128, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -80(%rbp)
	movq %r12, -88(%rbp)
	movq %r13, -96(%rbp)
	movq %r14, -104(%rbp)
	movq %r15, -112(%rbp)
	# LowerAlloca(2399:3): size = 8, type = %"class.std::__new_allocator.1"**, var = ^4
	leaq -8(%rbp), %rbx
	# LowerAlloca(2400:3): size = 8, type = %"class.std::allocator.0"**, var = ^5
	leaq -16(%rbp), %r12
	# LowerAlloca(2401:3): size = 8, type = %"class.std::allocator.0"**, var = ^6
	leaq -24(%rbp), %r8
	# LowerAlloca(2402:3): size = 8, type = %"struct.std::pair"**, var = ^7
	leaq -32(%rbp), %rcx
	# LowerAlloca(2403:3): size = 8, type = [3 x i8]**, var = ^8
	leaq -40(%rbp), %rax
	# LowerAlloca(2404:3): size = 8, type = i32 (%"class.std::vector"*) ***, var = ^9
	leaq -48(%rbp), %r13
	# LowerAlloca(2405:3): size = 1, type = %"class.std::allocator.0"*, var = ^10
	leaq -49(%rbp), %r14
	# LowerStore(2406:3).9: mov %"struct.std::pair"* %rdi, (^7)
	movq %rdi, (%rcx)
	# LowerStore(2407:3).9: mov [3 x i8]* %rsi, (^8)
	movq %rsi, (%rax)
	# LowerStore(2408:3).9: mov i32 (%"class.std::vector"*) ** %rdx, (^9)
	movq %rdx, (%r13)
	# LowerLoad(2409:3).2: (^7) into %"struct.std::pair"* ^11
	movq (%rcx), %r15
	# LowerBasicConversion(2410:3): %"struct.std::pair"* ^11 -> %"class.std::__pair_base"* ^12
	movq %r15, %rcx
	# tt = Pointer, type = %"struct.std::pair"
	# LowerGetelementptr(2411:3): struct-type: %"struct.std::pair"* ^11 -> ^13, indices=0,0
	movq %r15, %rcx
	# LowerGetelementptr(2411:3): type of ^13 is %"class.std::__cxx11::basic_string"*
	# LowerLoad(2412:3).2: (^8) into [3 x i8]* ^14
	movq (%rax), %rdx
	# tt = Pointer, type = [3 x i8]
	# LowerGetelementptr(2413:3): struct-type: [3 x i8]* ^14 -> ^15, indices=0,0
	movq %rdx, %rax
	# LowerGetelementptr(2413:3): type of ^15 is i8*
	# LowerStore(2414:3).9: mov %"class.std::allocator.0"* ^10, (^6)
	movq %r14, (%r8)
	# LowerLoad(2415:3).2: (^6) into %"class.std::allocator.0"* ^16
	movq (%r8), %rdx
	# LowerBasicConversion(2416:3): %"class.std::allocator.0"* ^16 -> %"class.std::__new_allocator.1"* ^17
	movq %rdx, %rsi
	# LowerStore(2417:3).9: mov %"class.std::__new_allocator.1"* ^17, (^4)
	movq %rsi, (%rbx)
	# LowerLoad(2418:3).2: (^4) into %"class.std::__new_allocator.1"* ^18
	movq (%rbx), %rdx
	# Clobber %rcx
	movq %rcx, -64(%rbp)
	# Clobber %rax
	movq %rax, -72(%rbp)
	# SetupCalls(2419:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^13
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(2419:3): move argument i8* ^15
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(2419:3): move argument %"class.std::allocator.0"* nonnull dereferenceable(1) align 1 ^10
	# Fixed movzx with identical source and destination widths
	movq %r14, %rdx
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_
	# Unclobber %rax
	movq -72(%rbp), %rax
	# Unclobber %rcx
	movq -64(%rbp), %rcx
	# LowerStore(2420:3).9: mov %"class.std::allocator.0"* ^10, (^5)
	movq %r14, (%r12)
	# LowerLoad(2421:3).2: (^5) into %"class.std::allocator.0"* ^19
	movq (%r12), %rbx
	# LowerBasicConversion(2422:3): %"class.std::allocator.0"* ^19 -> %"class.std::__new_allocator.1"* ^20
	movq %rbx, %rax
	# Clobber %rax
	movq %rax, -72(%rbp)
	# SetupCalls(2423:3): move argument %"class.std::__new_allocator.1"* nonnull dereferenceable(1) align 1 ^20
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt15__new_allocatorIcED2Ev
	# Unclobber %rax
	movq -72(%rbp), %rax
	# tt = Pointer, type = %"struct.std::pair"
	# LowerGetelementptr(2424:3): struct-type: %"struct.std::pair"* ^11 -> ^21, indices=0,1
	movq %r15, %rax
	addq $32, %rax
	# LowerGetelementptr(2424:3): type of ^21 is %"class.std::function"*
	# LowerLoad(2425:3).2: (^9) into i32 (%"class.std::vector"*) ** ^22
	movq (%r13), %rbx
	# Clobber %rax
	movq %rax, -72(%rbp)
	# SetupCalls(2426:3): move argument %"class.std::function"* nonnull dereferenceable(32) align 8 ^21
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(2426:3): move argument i32 (%"class.std::vector"*) ** nonnull ^22
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZNSt8functionIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEEC2IRS9_vEEOT_
	# Unclobber %rax
	movq -72(%rbp), %rax
	movq -112(%rbp), %r15
	movq -104(%rbp), %r14
	movq -96(%rbp), %r13
	movq -88(%rbp), %r12
	movq -80(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE13_Rb_tree_implISM_Lb1EED2Ev
.p2align 4, 0x90
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE13_Rb_tree_implISM_Lb1EED2Ev:
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE13_Rb_tree_implISM_Lb1EED2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(48 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	# LowerAlloca(4761:3): size = 8, type = %"class.std::allocator.10"**, var = ^2
	leaq -8(%rbp), %rcx
	# LowerAlloca(4762:3): size = 8, type = %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Rb_tree_impl"**, var = ^3
	leaq -16(%rbp), %rbx
	# LowerStore(4763:3).9: mov %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Rb_tree_impl"* %rdi, (^3)
	movq %rdi, (%rbx)
	# LowerLoad(4764:3).2: (^3) into %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Rb_tree_impl"* ^4
	movq (%rbx), %rax
	# LowerBasicConversion(4765:3): %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Rb_tree_impl"* ^4 -> %"class.std::allocator.10"* ^5
	movq %rax, %rbx
	# LowerStore(4766:3).9: mov %"class.std::allocator.10"* ^5, (^2)
	movq %rbx, (%rcx)
	# LowerLoad(4767:3).2: (^2) into %"class.std::allocator.10"* ^6
	movq (%rcx), %rbx
	# LowerBasicConversion(4768:3): %"class.std::allocator.10"* ^6 -> %"class.std::__new_allocator.11"* ^7
	movq %rbx, %rax
	# Clobber %rax
	movq %rax, -24(%rbp)
	# SetupCalls(4769:3): move argument %"class.std::__new_allocator.11"* nonnull dereferenceable(1) align 1 ^7
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEEED2Ev
	# Unclobber %rax
	movq -24(%rbp), %rax
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt18uninitialized_copyIPKSt17basic_string_viewIcSt11char_traitsIcEEPS3_ET0_T_S8_S7_
.p2align 4, 0x90
_ZSt18uninitialized_copyIPKSt17basic_string_viewIcSt11char_traitsIcEEPS3_ET0_T_S8_S7_:
	.___ZSt18uninitialized_copyIPKSt17basic_string_viewIcSt11char_traitsIcEEPS3_ET0_T_S8_S7___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(72 + 0, 16)
	subq $80, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -56(%rbp)
	# LowerAlloca(5267:3): size = 8, type = %"class.std::basic_string_view"**, var = ^4
	leaq -8(%rbp), %rbx
	# LowerAlloca(5268:3): size = 8, type = %"class.std::basic_string_view"**, var = ^5
	leaq -16(%rbp), %r9
	# LowerAlloca(5269:3): size = 8, type = %"class.std::basic_string_view"**, var = ^6
	leaq -24(%rbp), %r8
	# LowerAlloca(5270:3): size = 1, type = i8*, var = ^7
	leaq -25(%rbp), %rcx
	# LowerAlloca(5271:3): size = 1, type = i8*, var = ^8
	leaq -26(%rbp), %rax
	# LowerStore(5272:3).9: mov %"class.std::basic_string_view"* %rdi, (^4)
	movq %rdi, (%rbx)
	# LowerStore(5273:3).9: mov %"class.std::basic_string_view"* %rsi, (^5)
	movq %rsi, (%r9)
	# LowerStore(5274:3).9: mov %"class.std::basic_string_view"* %rdx, (^6)
	movq %rdx, (%r8)
	# LowerStore(5275:3).3: mov $imm, (^7)
	movb $0, (%rcx)
	# LowerStore(5276:3).3: mov $imm, (^8)
	movb $0, (%rax)
	# LowerLoad(5277:3).2: (^4) into %"class.std::basic_string_view"* ^9
	movq (%rbx), %rax
	# LowerLoad(5278:3).2: (^5) into %"class.std::basic_string_view"* ^10
	movq (%r9), %rbx
	# LowerLoad(5279:3).2: (^6) into %"class.std::basic_string_view"* ^11
	movq (%r8), %rcx
	# Clobber %rcx
	movq %rcx, -40(%rbp)
	# Clobber %rax
	movq %rax, -48(%rbp)
	# SetupCalls(5280:3): move argument %"class.std::basic_string_view"* ^9
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(5280:3): move argument %"class.std::basic_string_view"* ^10
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(5280:3): move argument %"class.std::basic_string_view"* ^11
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdx
	callq _ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKSt17basic_string_viewIcSt11char_traitsIcEEPS5_EET0_T_SA_S9_
	# SetupCalls(5280:3): move %"class.std::basic_string_view"* result from %rax
	movq %rax, %rbx
	# Unclobber %rax
	movq -48(%rbp), %rax
	# Unclobber %rcx
	movq -40(%rbp), %rcx
	movq %rbx, %rax
	movq -56(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10filesystem7__cxx114path8iteratormmEv
.p2align 4, 0x90
_ZNSt10filesystem7__cxx114path8iteratormmEv:
	.___ZNSt10filesystem7__cxx114path8iteratormmEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	movq %r12, -16(%rbp)
	# LowerAlloca(3720:3): size = 8, type = %"class.std::filesystem::__cxx11::path::iterator"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(3721:3).9: mov %"class.std::filesystem::__cxx11::path::iterator"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(3722:3).2: (^2) into %"class.std::filesystem::__cxx11::path::iterator"* ^3
	movq (%rax), %r12
	# SetupCalls(3729:3): move argument %"class.std::filesystem::__cxx11::path::iterator"* nonnull dereferenceable(17) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	callq _ZNKSt10filesystem7__cxx114path8iterator11_M_is_multiEv
	# SetupCalls(3729:3): move i1 result from %rax
	movb %al, %bl
	cmpb $0, %bl
	jne .___ZNSt10filesystem7__cxx114path8iteratormmEv__M32
	jmp .___ZNSt10filesystem7__cxx114path8iteratormmEv__M49
	.___ZNSt10filesystem7__cxx114path8iteratormmEv__M32:
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path::iterator"
	# LowerGetelementptr(3739:3): struct-type: %"class.std::filesystem::__cxx11::path::iterator"* ^3 -> ^10, indices=0,1
	movq %r12, %rbx
	addq $8, %rbx
	# LowerGetelementptr(3739:3): type of ^10 is %"struct.std::filesystem::__cxx11::path::_Cmpt"**
	# LowerLoad(3740:3).2: (^10) into %"struct.std::filesystem::__cxx11::path::_Cmpt"* ^11
	movq (%rbx), %rcx
	# tt = Pointer, type = %"struct.std::filesystem::__cxx11::path::_Cmpt"
	# LowerGetelementptr(3741:3): struct-type: %"struct.std::filesystem::__cxx11::path::_Cmpt"* ^11 -> ^12, indices=-1
	movq %rcx, %rax
	addq $-48, %rax
	# LowerGetelementptr(3741:3): type of ^12 is %"struct.std::filesystem::__cxx11::path::_Cmpt"*
	# LowerStore(3742:3).9: mov %"struct.std::filesystem::__cxx11::path::_Cmpt"* ^12, (^10)
	movq %rax, (%rbx)
	jmp .___ZNSt10filesystem7__cxx114path8iteratormmEv__M59
	.___ZNSt10filesystem7__cxx114path8iteratormmEv__M49:
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path::iterator"
	# LowerGetelementptr(3752:3): struct-type: %"class.std::filesystem::__cxx11::path::iterator"* ^3 -> ^16, indices=0,2
	movq %r12, %rax
	addq $16, %rax
	# LowerGetelementptr(3752:3): type of ^16 is i8*
	# LowerStore(3753:3).3: mov $imm, (^16)
	movb $0, (%rax)
	.___ZNSt10filesystem7__cxx114path8iteratormmEv__M59:
	movq %r12, %rax
	movq -16(%rbp), %r12
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt10filesystem7__cxx1115directory_entry12is_directoryEv
.p2align 4, 0x90
_ZNKSt10filesystem7__cxx1115directory_entry12is_directoryEv:
	.___ZNKSt10filesystem7__cxx1115directory_entry12is_directoryEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(1848:3): size = 8, type = %"class.std::filesystem::__cxx11::directory_entry"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(1849:3).9: mov %"class.std::filesystem::__cxx11::directory_entry"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(1850:3).2: (^2) into %"class.std::filesystem::__cxx11::directory_entry"* ^3
	movq (%rax), %rbx
	# SetupCalls(1851:3): move argument %"class.std::filesystem::__cxx11::directory_entry"* nonnull dereferenceable(41) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNKSt10filesystem7__cxx1115directory_entry12_M_file_typeEv
	# SetupCalls(1851:3): move i8 result from %rax
	movb %al, %bl
	# LowerIcmp(1852:3): i8 ^4 vs. intlike 2
	cmpb $2, %bl
	sete %al
	andq $1, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10filesystem7__cxx114pathD2Ev
.p2align 4, 0x90
_ZNSt10filesystem7__cxx114pathD2Ev:
	.___ZNSt10filesystem7__cxx114pathD2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(1861:3): size = 8, type = %"class.std::filesystem::__cxx11::path"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(1862:3).9: mov %"class.std::filesystem::__cxx11::path"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(1863:3).2: (^2) into %"class.std::filesystem::__cxx11::path"* ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path"
	# LowerGetelementptr(1864:3): struct-type: %"class.std::filesystem::__cxx11::path"* ^3 -> ^4, indices=0,1
	movq %rbx, %rax
	addq $32, %rax
	# LowerGetelementptr(1864:3): type of ^4 is %"struct.std::filesystem::__cxx11::path::_List"*
	# Clobber %rax
	movq %rax, -16(%rbp)
	# SetupCalls(1865:3): move argument %"struct.std::filesystem::__cxx11::path::_List"* nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt10filesystem7__cxx114path5_ListD2Ev
	# Unclobber %rax
	movq -16(%rbp), %rax
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path"
	# LowerGetelementptr(1866:3): struct-type: %"class.std::filesystem::__cxx11::path"* ^3 -> ^5, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(1866:3): type of ^5 is %"class.std::__cxx11::basic_string"*
	# Clobber %rax
	movq %rax, -16(%rbp)
	# SetupCalls(1867:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
	# Unclobber %rax
	movq -16(%rbp), %rax
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE19_M_get_Tp_allocatorEv
.p2align 4, 0x90
_ZNKSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE19_M_get_Tp_allocatorEv:
	.___ZNKSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE19_M_get_Tp_allocatorEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(5874:3): size = 8, type = %"struct.std::_Vector_base"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(5875:3).9: mov %"struct.std::_Vector_base"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(5876:3).2: (^2) into %"struct.std::_Vector_base"* ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(5877:3): struct-type: %"struct.std::_Vector_base"* ^3 -> ^4, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(5877:3): type of ^4 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# LowerBasicConversion(5878:3): %"struct.std::_Vector_base"* ^4 -> %"class.std::allocator"* ^5
	movq %rax, %rbx
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10filesystem7__cxx114path10_S_convertISt17basic_string_viewIcSt11char_traitsIcEEEEDaT_
.p2align 4, 0x90
_ZNSt10filesystem7__cxx114path10_S_convertISt17basic_string_viewIcSt11char_traitsIcEEEEDaT_:
	.___ZNSt10filesystem7__cxx114path10_S_convertISt17basic_string_viewIcSt11char_traitsIcEEEEDaT___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(72 + 0, 16)
	subq $80, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -64(%rbp)
	movq %r12, -56(%rbp)
	# LowerAlloca(6269:3): size = 16, type = %"class.std::basic_string_view"*, var = ^3
	leaq -16(%rbp), %r12
	# LowerAlloca(6270:3): size = 16, type = %"class.std::basic_string_view"*, var = ^4
	leaq -32(%rbp), %rbx
	# LowerBasicConversion(6271:3): %"class.std::basic_string_view"* ^4 -> {i64, i8*}* ^5
	movq %rbx, %rcx
	# tt = Pointer, type = {i64, i8*}
	# LowerGetelementptr(6272:3): struct-type: {i64, i8*}* ^5 -> ^6, indices=0,0
	movq %rcx, %rax
	# LowerGetelementptr(6272:3): type of ^6 is i64*
	# LowerStore(6273:3).9: mov i64 %rdi, (^6)
	movq %rdi, (%rax)
	# tt = Pointer, type = {i64, i8*}
	# LowerGetelementptr(6274:3): struct-type: {i64, i8*}* ^5 -> ^7, indices=0,1
	movq %rcx, %rax
	addq $8, %rax
	# LowerGetelementptr(6274:3): type of ^7 is i8**
	# LowerStore(6275:3).9: mov i8* %rsi, (^7)
	movq %rsi, (%rax)
	# LowerBasicConversion(6276:3): %"class.std::basic_string_view"* ^3 -> i8* ^8
	movq %r12, %rax
	# LowerBasicConversion(6277:3): %"class.std::basic_string_view"* ^4 -> i8* ^9
	movq %rbx, %rcx
	# Clobber %rcx
	movq %rcx, -40(%rbp)
	# Clobber %rax
	movq %rax, -48(%rbp)
	# SetupCalls(6278:3): move argument i8* align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(6278:3): move argument i8* align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(6278:3): move argument i64 16
	movq $16, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -48(%rbp), %rax
	# Unclobber %rcx
	movq -40(%rbp), %rcx
	# LowerBasicConversion(6279:3): %"class.std::basic_string_view"* ^3 -> {i64, i8*}* ^10
	movq %r12, %rax
	# LowerLoad(6280:3).2: (^10) into {i64, i8*} ^11
	# FinishMultireg: mov (%reg), <%pack...>
	movq (%rax), %rbx
	movq 8(%rax), %rcx
	# LowerRet: two-register return
	movq %rbx, %rax
	movq %rcx, %rdx
	movq -56(%rbp), %r12
	movq -64(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE6_M_ptrEv
.p2align 4, 0x90
_ZNSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE6_M_ptrEv:
	.___ZNSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE6_M_ptrEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(4065:3): size = 8, type = %"class.std::__uniq_ptr_impl"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(4066:3).9: mov %"class.std::__uniq_ptr_impl"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(4067:3).2: (^2) into %"class.std::__uniq_ptr_impl"* ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::__uniq_ptr_impl"
	# LowerGetelementptr(4068:3): struct-type: %"class.std::__uniq_ptr_impl"* ^3 -> ^4, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(4068:3): type of ^4 is %"class.std::tuple"*
	# Clobber %rax
	movq %rax, -16(%rbp)
	# SetupCalls(4069:3): move argument %"class.std::tuple"* nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZSt3getILm0EJPNSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSB_
	# SetupCalls(4069:3): move %"struct.std::filesystem::__cxx11::path::_List::_Impl"** result from %rax
	movq %rax, %rbx
	# Unclobber %rax
	movq -16(%rbp), %rax
	movq %rbx, %rax
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10_Head_baseILm1ENSt10filesystem7__cxx114path5_List13_Impl_deleterELb1EE7_M_headERS5_
.p2align 4, 0x90
_ZNSt10_Head_baseILm1ENSt10filesystem7__cxx114path5_List13_Impl_deleterELb1EE7_M_headERS5_:
	.___ZNSt10_Head_baseILm1ENSt10filesystem7__cxx114path5_List13_Impl_deleterELb1EE7_M_headERS5___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(4166:3): size = 8, type = %"struct.std::_Head_base"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(4167:3).9: mov %"struct.std::_Head_base"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(4168:3).2: (^2) into %"struct.std::_Head_base"* ^3
	movq (%rax), %rbx
	# LowerBasicConversion(4169:3): %"struct.std::_Head_base"* ^3 -> %"struct.std::filesystem::__cxx11::path::_List::_Impl_deleter"* ^4
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNK9__gnu_cxx17__normal_iteratorIPSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEEdeEv
.p2align 4, 0x90
_ZNK9__gnu_cxx17__normal_iteratorIPSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEEdeEv:
	.___ZNK9__gnu_cxx17__normal_iteratorIPSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEEdeEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(6042:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator.19"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(6043:3).9: mov %"class.__gnu_cxx::__normal_iterator.19"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(6044:3).2: (^2) into %"class.__gnu_cxx::__normal_iterator.19"* ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator.19"
	# LowerGetelementptr(6045:3): struct-type: %"class.__gnu_cxx::__normal_iterator.19"* ^3 -> ^4, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(6045:3): type of ^4 is %"class.std::basic_string_view"**
	# LowerLoad(6046:3).2: (^4) into %"class.std::basic_string_view"* ^5
	movq (%rax), %rbx
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12_Vector_implD2Ev
.p2align 4, 0x90
_ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12_Vector_implD2Ev:
	.___ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12_Vector_implD2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(48 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	# LowerAlloca(5449:3): size = 8, type = %"class.std::allocator"**, var = ^2
	leaq -8(%rbp), %rcx
	# LowerAlloca(5450:3): size = 8, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"**, var = ^3
	leaq -16(%rbp), %rbx
	# LowerStore(5451:3).9: mov %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"* %rdi, (^3)
	movq %rdi, (%rbx)
	# LowerLoad(5452:3).2: (^3) into %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"* ^4
	movq (%rbx), %rax
	# LowerBasicConversion(5453:3): %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"* ^4 -> %"class.std::allocator"* ^5
	movq %rax, %rbx
	# LowerStore(5454:3).9: mov %"class.std::allocator"* ^5, (^2)
	movq %rbx, (%rcx)
	# LowerLoad(5455:3).2: (^2) into %"class.std::allocator"* ^6
	movq (%rcx), %rbx
	# LowerBasicConversion(5456:3): %"class.std::allocator"* ^6 -> %"class.std::__new_allocator"* ^7
	movq %rbx, %rax
	# Clobber %rax
	movq %rax, -24(%rbp)
	# SetupCalls(5457:3): move argument %"class.std::__new_allocator"* nonnull dereferenceable(1) align 1 ^7
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt15__new_allocatorISt17basic_string_viewIcSt11char_traitsIcEEED2Ev
	# Unclobber %rax
	movq -24(%rbp), %rax
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE17_Vector_impl_dataC2Ev
.p2align 4, 0x90
_ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE17_Vector_impl_dataC2Ev:
	.___ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE17_Vector_impl_dataC2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(2846:3): size = 8, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(2847:3).9: mov %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(2848:3).2: (^2) into %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(2849:3): struct-type: %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^3 -> ^4, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(2849:3): type of ^4 is %"class.std::basic_string_view"**
	# LowerStore(2850:3).3: mov $imm, (^4)
	movq $0, (%rax)
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(2851:3): struct-type: %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^3 -> ^5, indices=0,1
	movq %rbx, %rax
	addq $8, %rax
	# LowerGetelementptr(2851:3): type of ^5 is %"class.std::basic_string_view"**
	# LowerStore(2852:3).3: mov $imm, (^5)
	movq $0, (%rax)
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(2853:3): struct-type: %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^3 -> ^6, indices=0,2
	movq %rbx, %rax
	addq $16, %rax
	# LowerGetelementptr(2853:3): type of ^6 is %"class.std::basic_string_view"**
	# LowerStore(2854:3).3: mov $imm, (^6)
	movq $0, (%rax)
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt10filesystem7__cxx114path6stringIcSt11char_traitsIcESaIcEEENSt7__cxx1112basic_stringIT_T0_T1_EERKSA_
.p2align 4, 0x90
_ZNKSt10filesystem7__cxx114path6stringIcSt11char_traitsIcESaIcEEENSt7__cxx1112basic_stringIT_T0_T1_EERKSA_:
	.___ZNKSt10filesystem7__cxx114path6stringIcSt11char_traitsIcESaIcEEENSt7__cxx1112basic_stringIT_T0_T1_EERKSA___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(80 + 0, 16)
	subq $80, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -56(%rbp)
	movq %r12, -48(%rbp)
	movq %r13, -72(%rbp)
	# LowerAlloca(3948:3): size = 8, type = i8**, var = ^4
	leaq -8(%rbp), %rax
	# LowerAlloca(3949:3): size = 8, type = %"class.std::filesystem::__cxx11::path"**, var = ^5
	leaq -16(%rbp), %rcx
	# LowerAlloca(3950:3): size = 8, type = %"class.std::allocator.0"**, var = ^6
	leaq -24(%rbp), %r12
	# LowerBasicConversion(3951:3): %"class.std::__cxx11::basic_string"* %rdi -> i8* ^7
	movq %rdi, %rbx
	# LowerStore(3952:3).9: mov i8* ^7, (^4)
	movq %rbx, (%rax)
	# LowerStore(3953:3).9: mov %"class.std::filesystem::__cxx11::path"* %rsi, (^5)
	movq %rsi, (%rcx)
	# LowerStore(3954:3).9: mov %"class.std::allocator.0"* %rdx, (^6)
	movq %rdx, (%r12)
	# LowerLoad(3955:3).2: (^5) into %"class.std::filesystem::__cxx11::path"* ^8
	movq (%rcx), %rbx
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path"
	# LowerGetelementptr(3956:3): struct-type: %"class.std::filesystem::__cxx11::path"* ^8 -> ^9, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(3956:3): type of ^9 is %"class.std::__cxx11::basic_string"*
	# Clobber %rdi
	movq %rdi, -32(%rbp)
	# Clobber %rax
	movq %rax, -40(%rbp)
	# SetupCalls(3957:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv@PLT
	# SetupCalls(3957:3): move i8* result from %rax
	movq %rax, %r13
	# Unclobber %rax
	movq -40(%rbp), %rax
	# Unclobber %rdi
	movq -32(%rbp), %rdi
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path"
	# LowerGetelementptr(3958:3): struct-type: %"class.std::filesystem::__cxx11::path"* ^8 -> ^11, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(3958:3): type of ^11 is %"class.std::__cxx11::basic_string"*
	# Clobber %rdi
	movq %rdi, -32(%rbp)
	# Clobber %rax
	movq %rax, -40(%rbp)
	# SetupCalls(3959:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^11
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv@PLT
	# SetupCalls(3959:3): move i64 result from %rax
	movq %rax, %rbx
	# Unclobber %rax
	movq -40(%rbp), %rax
	# Unclobber %rdi
	movq -32(%rbp), %rdi
	# LowerLoad(3960:3).2: (^6) into %"class.std::allocator.0"* ^13
	movq (%r12), %rax
	# Clobber %rdi
	movq %rdi, -32(%rbp)
	# Clobber %rax
	movq %rax, -40(%rbp)
	# SetupCalls(3961:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 %rdi
	# Semiunclobber live %rdi into %rdi
	movq -32(%rbp), %rdi
	# SetupCalls(3961:3): move argument i8* ^10
	# Fixed movzx with identical source and destination widths
	movq %r13, %rsi
	# SetupCalls(3961:3): move argument i64 ^12
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdx
	# SetupCalls(3961:3): move argument %"class.std::allocator.0"* nonnull dereferenceable(1) align 1 ^13
	# Fixed movzx with identical source and destination widths
	movq %rax, %rcx
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcmRKS3_@PLT
	# Unclobber %rax
	movq -40(%rbp), %rax
	# Unclobber %rdi
	movq -32(%rbp), %rdi
	movq -72(%rbp), %r13
	movq -48(%rbp), %r12
	movq -56(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt9_Any_data9_M_accessIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEEERKT_v
.p2align 4, 0x90
_ZNKSt9_Any_data9_M_accessIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEEERKT_v:
	.___ZNKSt9_Any_data9_M_accessIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEEERKT_v__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(4538:3): size = 8, type = %"union.std::_Any_data"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(4539:3).9: mov %"union.std::_Any_data"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(4540:3).2: (^2) into %"union.std::_Any_data"* ^3
	movq (%rax), %rbx
	# SetupCalls(4541:3): move argument %"union.std::_Any_data"* nonnull dereferenceable(16) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNKSt9_Any_data9_M_accessEv
	# SetupCalls(4541:3): move i8* result from %rax
	movq %rax, %rbx
	# LowerBasicConversion(4542:3): i8* ^4 -> i32 (%"class.std::vector"*) *** ^5
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt12__relocate_aIP6LsItemS1_SaIS0_EET0_T_S4_S3_RT1_
.p2align 4, 0x90
_ZSt12__relocate_aIP6LsItemS1_SaIS0_EET0_T_S4_S3_RT1_:
	.___ZSt12__relocate_aIP6LsItemS1_SaIS0_EET0_T_S4_S3_RT1___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(104 + 0, 16)
	subq $112, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -72(%rbp)
	movq %r12, -64(%rbp)
	movq %r13, -56(%rbp)
	movq %r14, -80(%rbp)
	# LowerAlloca(7264:3): size = 8, type = %struct.LsItem**, var = ^5
	leaq -8(%rbp), %rax
	# LowerAlloca(7265:3): size = 8, type = %struct.LsItem**, var = ^6
	leaq -16(%rbp), %r13
	# LowerAlloca(7266:3): size = 8, type = %struct.LsItem**, var = ^7
	leaq -24(%rbp), %r12
	# LowerAlloca(7267:3): size = 8, type = %"class.std::allocator.7"**, var = ^8
	leaq -32(%rbp), %rbx
	# LowerStore(7268:3).9: mov %struct.LsItem* %rdi, (^5)
	movq %rdi, (%rax)
	# LowerStore(7269:3).9: mov %struct.LsItem* %rsi, (^6)
	movq %rsi, (%r13)
	# LowerStore(7270:3).9: mov %struct.LsItem* %rdx, (^7)
	movq %rdx, (%r12)
	# LowerStore(7271:3).9: mov %"class.std::allocator.7"* %rcx, (^8)
	movq %rcx, (%rbx)
	# LowerLoad(7272:3).2: (^5) into %struct.LsItem* ^9
	movq (%rax), %rcx
	# Clobber %rcx
	movq %rcx, -40(%rbp)
	# SetupCalls(7273:3): move argument %struct.LsItem* ^9
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	callq _ZSt12__niter_baseIP6LsItemET_S2_
	# SetupCalls(7273:3): move %struct.LsItem* result from %rax
	movq %rax, %r14
	# Unclobber %rcx
	movq -40(%rbp), %rcx
	# LowerLoad(7274:3).2: (^6) into %struct.LsItem* ^11
	movq (%r13), %rax
	# Clobber %rax
	movq %rax, -48(%rbp)
	# SetupCalls(7275:3): move argument %struct.LsItem* ^11
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZSt12__niter_baseIP6LsItemET_S2_
	# SetupCalls(7275:3): move %struct.LsItem* result from %rax
	movq %rax, %r13
	# Unclobber %rax
	movq -48(%rbp), %rax
	# LowerLoad(7276:3).2: (^7) into %struct.LsItem* ^13
	movq (%r12), %rax
	# Clobber %rax
	movq %rax, -48(%rbp)
	# SetupCalls(7277:3): move argument %struct.LsItem* ^13
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZSt12__niter_baseIP6LsItemET_S2_
	# SetupCalls(7277:3): move %struct.LsItem* result from %rax
	movq %rax, %r12
	# Unclobber %rax
	movq -48(%rbp), %rax
	# LowerLoad(7278:3).2: (^8) into %"class.std::allocator.7"* ^15
	movq (%rbx), %rax
	# Clobber %rax
	movq %rax, -48(%rbp)
	# SetupCalls(7279:3): move argument %struct.LsItem* ^10
	# Fixed movzx with identical source and destination widths
	movq %r14, %rdi
	# SetupCalls(7279:3): move argument %struct.LsItem* ^12
	# Fixed movzx with identical source and destination widths
	movq %r13, %rsi
	# SetupCalls(7279:3): move argument %struct.LsItem* ^14
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdx
	# SetupCalls(7279:3): move argument %"class.std::allocator.7"* nonnull dereferenceable(1) align 1 ^15
	# Fixed movzx with identical source and destination widths
	movq %rax, %rcx
	callq _ZSt14__relocate_a_1IP6LsItemS1_SaIS0_EET0_T_S4_S3_RT1_
	# SetupCalls(7279:3): move %struct.LsItem* result from %rax
	movq %rax, %rbx
	# Unclobber %rax
	movq -48(%rbp), %rax
	movq %rbx, %rax
	movq -80(%rbp), %r14
	movq -56(%rbp), %r13
	movq -64(%rbp), %r12
	movq -72(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _Z3pwdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE
.p2align 4, 0x90
_Z3pwdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE:
	.___Z3pwdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(168 + 0, 16)
	subq $176, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -120(%rbp)
	movq %r12, -136(%rbp)
	movq %r13, -104(%rbp)
	movq %r14, -128(%rbp)
	movq %r15, -112(%rbp)
	# LowerAlloca(2007:3): size = 4, type = i32*, var = ^2
	leaq -4(%rbp), %r13
	# LowerAlloca(2008:3): size = 8, type = %"class.std::vector"**, var = ^3
	leaq -16(%rbp), %r15
	# LowerAlloca(2009:3): size = 32, type = %"class.std::__cxx11::basic_string"*, var = ^4
	leaq -48(%rbp), %rbx
	# LowerAlloca(2010:3): size = 40, type = %"class.std::filesystem::__cxx11::path"*, var = ^5
	leaq -88(%rbp), %r14
	# LowerStore(2011:3).9: mov %"class.std::vector"* %rdi, (^3)
	movq %rdi, (%r15)
	# LowerLoad(2012:3).2: (^3) into %"class.std::vector"* ^6
	movq (%r15), %rax
	# Clobber %rax
	movq %rax, -96(%rbp)
	# SetupCalls(2013:3): move argument %"class.std::vector"* nonnull dereferenceable(24) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE4sizeEv
	# SetupCalls(2013:3): move i64 result from %rax
	movq %rax, %r12
	# Unclobber %rax
	movq -96(%rbp), %rax
	# LowerIcmp(2014:3): i64 ^7 vs. intlike 1
	cmpq $1, %r12
	setne %al
	andq $1, %rax
	cmpb $0, %al
	jne .___Z3pwdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M40
	jmp .___Z3pwdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M144
	.___Z3pwdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M40:
	# SetupCalls(2018:3): move argument %"class.std::basic_ostream"* nonnull dereferenceable(8) align 8 @_ZSt4cerr
	leaq _ZSt4cerr(%rip), %rdi
	# SetupCalls(2018:3): move argument i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1, i64 0, i64 0)
	leaq .str.1(%rip), %rsi
	callq _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
	# SetupCalls(2018:3): move %"class.std::basic_ostream"* result from %rax
	movq %rax, %r12
	# LowerLoad(2019:3).2: (^3) into %"class.std::vector"* ^11
	movq (%r15), %rax
	# Clobber %rax
	movq %rax, -96(%rbp)
	# SetupCalls(2020:3): move argument %"class.std::vector"* nonnull dereferenceable(24) align 8 ^11
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE4sizeEv
	# SetupCalls(2020:3): move i64 result from %rax
	movq %rax, %rbx
	# Unclobber %rax
	movq -96(%rbp), %rax
	# SetupCalls(2021:3): move argument %"class.std::basic_ostream"* nonnull dereferenceable(8) align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(2021:3): move argument i64 ^12
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZNSolsEm@PLT
	# SetupCalls(2021:3): move %"class.std::basic_ostream"* result from %rax
	movq %rax, %rbx
	# SetupCalls(2022:3): move argument %"class.std::basic_ostream"* nonnull dereferenceable(8) align 8 ^13
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(2022:3): move argument i8 signext 10
	movq $10, %rsi
	movsbq %sil, %rsi
	callq _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@PLT
	# SetupCalls(2022:3): move %"class.std::basic_ostream"* result from %rax
	movq %rax, %rax
	# LowerStore(2023:3).3: mov $imm, (^2)
	movl $1, (%r13)
	jmp .___Z3pwdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M284
	.___Z3pwdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M144:
	# SetupCalls(2027:3): move argument %"class.std::filesystem::__cxx11::path"* sret align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r14, %rdi
	callq _ZNSt10filesystem12current_pathB5cxx11Ev@PLT
	# SetupCalls(2028:3): move argument %"class.std::__cxx11::basic_string"* sret align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(2028:3): move argument %"class.std::filesystem::__cxx11::path"* nonnull dereferenceable(40) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r14, %rsi
	callq _ZNKSt10filesystem7__cxx114path6stringEv
	# SetupCalls(2029:3): move argument %"class.std::basic_ostream"* nonnull dereferenceable(8) align 8 @_ZSt4cout
	leaq _ZSt4cout(%rip), %rdi
	# SetupCalls(2029:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKNSt7__cxx1112basic_stringIS4_S5_T1_EE@PLT
	# SetupCalls(2029:3): move %"class.std::basic_ostream"* result from %rax
	movq %rax, %r12
	# SetupCalls(2030:3): move argument %"class.std::basic_ostream"* nonnull dereferenceable(8) align 8 ^16
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(2030:3): move argument i8 signext 10
	movq $10, %rsi
	movsbq %sil, %rsi
	callq _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@PLT
	# SetupCalls(2030:3): move %"class.std::basic_ostream"* result from %rax
	movq %rax, %rax
	# SetupCalls(2031:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
	# SetupCalls(2032:3): move argument %"class.std::filesystem::__cxx11::path"* nonnull dereferenceable(40) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r14, %rdi
	callq _ZNSt10filesystem7__cxx114pathD2Ev
	# LowerStore(2033:3).3: mov $imm, (^2)
	movl $0, (%r13)
	.___Z3pwdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M284:
	# LowerLoad(2037:3).2: (^2) into i32 ^19
	movl (%r13), %eax
	movq -112(%rbp), %r15
	movq -128(%rbp), %r14
	movq -104(%rbp), %r13
	movq -136(%rbp), %r12
	movq -120(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE5emptyEv
.p2align 4, 0x90
_ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE5emptyEv:
	.___ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE5emptyEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(72 + 0, 16)
	subq $80, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -56(%rbp)
	movq %r12, -40(%rbp)
	movq %r13, -48(%rbp)
	movq %r14, -32(%rbp)
	# LowerAlloca(2615:3): size = 8, type = %"class.std::vector"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerAlloca(2616:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator.24"*, var = ^3
	leaq -16(%rbp), %r14
	# LowerAlloca(2617:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator.24"*, var = ^4
	leaq -24(%rbp), %r12
	# LowerStore(2618:3).9: mov %"class.std::vector"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(2619:3).2: (^2) into %"class.std::vector"* ^5
	movq (%rax), %r13
	# SetupCalls(2620:3): move argument %"class.std::vector"* nonnull dereferenceable(24) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	callq _ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE5beginEv
	# SetupCalls(2620:3): move %"class.std::basic_string_view"* result from %rax
	movq %rax, %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator.24"
	# LowerGetelementptr(2621:3): struct-type: %"class.__gnu_cxx::__normal_iterator.24"* ^3 -> ^7, indices=0,0
	movq %r14, %rax
	# LowerGetelementptr(2621:3): type of ^7 is %"class.std::basic_string_view"**
	# LowerStore(2622:3).9: mov %"class.std::basic_string_view"* ^6, (^7)
	movq %rbx, (%rax)
	# SetupCalls(2623:3): move argument %"class.std::vector"* nonnull dereferenceable(24) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	callq _ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE3endEv
	# SetupCalls(2623:3): move %"class.std::basic_string_view"* result from %rax
	movq %rax, %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator.24"
	# LowerGetelementptr(2624:3): struct-type: %"class.__gnu_cxx::__normal_iterator.24"* ^4 -> ^9, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(2624:3): type of ^9 is %"class.std::basic_string_view"**
	# LowerStore(2625:3).9: mov %"class.std::basic_string_view"* ^8, (^9)
	movq %rbx, (%rax)
	# SetupCalls(2626:3): move argument %"class.__gnu_cxx::__normal_iterator.24"* nonnull dereferenceable(8) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %r14, %rdi
	# SetupCalls(2626:3): move argument %"class.__gnu_cxx::__normal_iterator.24"* nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %r12, %rsi
	callq _ZN9__gnu_cxxeqIPKSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESF_
	# SetupCalls(2626:3): move i1 result from %rax
	movb %al, %bl
	movb %bl, %al
	movq -32(%rbp), %r14
	movq -48(%rbp), %r13
	movq -40(%rbp), %r12
	movq -56(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt12_Vector_baseI6LsItemSaIS0_EEC2Ev
.p2align 4, 0x90
_ZNSt12_Vector_baseI6LsItemSaIS0_EEC2Ev:
	.___ZNSt12_Vector_baseI6LsItemSaIS0_EEC2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(3184:3): size = 8, type = %"struct.std::_Vector_base.6"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(3185:3).9: mov %"struct.std::_Vector_base.6"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(3186:3).2: (^2) into %"struct.std::_Vector_base.6"* ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"struct.std::_Vector_base.6"
	# LowerGetelementptr(3187:3): struct-type: %"struct.std::_Vector_base.6"* ^3 -> ^4, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(3187:3): type of ^4 is %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl"*
	# Clobber %rax
	movq %rax, -16(%rbp)
	# SetupCalls(3188:3): move argument %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl"* nonnull dereferenceable(24) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt12_Vector_baseI6LsItemSaIS0_EE12_Vector_implC2Ev
	# Unclobber %rax
	movq -16(%rbp), %rax
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE7releaseEv
.p2align 4, 0x90
_ZNSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE7releaseEv:
	.___ZNSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE7releaseEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(48 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	movq %r12, -40(%rbp)
	movq %r13, -24(%rbp)
	# LowerAlloca(6401:3): size = 8, type = %"class.std::__uniq_ptr_impl"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerAlloca(6402:3): size = 8, type = %"struct.std::filesystem::__cxx11::path::_List::_Impl"**, var = ^3
	leaq -16(%rbp), %r13
	# LowerStore(6403:3).9: mov %"class.std::__uniq_ptr_impl"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(6404:3).2: (^2) into %"class.std::__uniq_ptr_impl"* ^4
	movq (%rax), %rbx
	# SetupCalls(6405:3): move argument %"class.std::__uniq_ptr_impl"* nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE6_M_ptrEv
	# SetupCalls(6405:3): move %"struct.std::filesystem::__cxx11::path::_List::_Impl"** result from %rax
	movq %rax, %r12
	# LowerLoad(6406:3).2: (^5) into %"struct.std::filesystem::__cxx11::path::_List::_Impl"* ^6
	movq (%r12), %rax
	# LowerStore(6407:3).9: mov %"struct.std::filesystem::__cxx11::path::_List::_Impl"* ^6, (^3)
	movq %rax, (%r13)
	# SetupCalls(6408:3): move argument %"class.std::__uniq_ptr_impl"* nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE6_M_ptrEv
	# SetupCalls(6408:3): move %"struct.std::filesystem::__cxx11::path::_List::_Impl"** result from %rax
	movq %rax, %rbx
	# LowerStore(6409:3).3: mov $imm, (^7)
	movq $0, (%rbx)
	# LowerLoad(6410:3).2: (^3) into %"struct.std::filesystem::__cxx11::path::_List::_Impl"* ^8
	movq (%r13), %rax
	movq -24(%rbp), %r13
	movq -40(%rbp), %r12
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10filesystem7__cxx1118directory_iteratorC2Ev
.p2align 4, 0x90
_ZNSt10filesystem7__cxx1118directory_iteratorC2Ev:
	.___ZNSt10filesystem7__cxx1118directory_iteratorC2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(3568:3): size = 8, type = %"class.std::filesystem::__cxx11::directory_iterator"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(3569:3).9: mov %"class.std::filesystem::__cxx11::directory_iterator"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(3570:3).2: (^2) into %"class.std::filesystem::__cxx11::directory_iterator"* ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::directory_iterator"
	# LowerGetelementptr(3571:3): struct-type: %"class.std::filesystem::__cxx11::directory_iterator"* ^3 -> ^4, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(3571:3): type of ^4 is %"class.std::__shared_ptr"*
	# Clobber %rax
	movq %rax, -16(%rbp)
	# SetupCalls(3572:3): move argument %"class.std::__shared_ptr"* nonnull dereferenceable(16) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt12__shared_ptrINSt10filesystem7__cxx114_DirELN9__gnu_cxx12_Lock_policyE2EEC1Ev@PLT
	# Unclobber %rax
	movq -16(%rbp), %rax
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10_Head_baseILm0EPNSt10filesystem7__cxx114path5_List5_ImplELb0EE7_M_headERKS6_
.p2align 4, 0x90
_ZNSt10_Head_baseILm0EPNSt10filesystem7__cxx114path5_List5_ImplELb0EE7_M_headERKS6_:
	.___ZNSt10_Head_baseILm0EPNSt10filesystem7__cxx114path5_List5_ImplELb0EE7_M_headERKS6___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(3877:3): size = 8, type = %"struct.std::_Head_base.4"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(3878:3).9: mov %"struct.std::_Head_base.4"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(3879:3).2: (^2) into %"struct.std::_Head_base.4"* ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"struct.std::_Head_base.4"
	# LowerGetelementptr(3880:3): struct-type: %"struct.std::_Head_base.4"* ^3 -> ^4, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(3880:3): type of ^4 is %"struct.std::filesystem::__cxx11::path::_List::_Impl"**
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10filesystem12is_directoryENS_11file_statusE
.p2align 4, 0x90
_ZNSt10filesystem12is_directoryENS_11file_statusE:
	.___ZNSt10filesystem12is_directoryENS_11file_statusE__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(4175:3): size = 8, type = %"class.std::filesystem::file_status"*, var = ^2
	leaq -8(%rbp), %rax
	# LowerBasicConversion(4176:3): %"class.std::filesystem::file_status"* ^2 -> i64* ^3
	movq %rax, %rbx
	# LowerStore(4177:3).9: mov i64 %rdi, (^3)
	movq %rdi, (%rbx)
	# Clobber %rax
	movq %rax, -16(%rbp)
	# SetupCalls(4178:3): move argument %"class.std::filesystem::file_status"* nonnull dereferenceable(8) align 4 ^2
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNKSt10filesystem11file_status4typeEv
	# SetupCalls(4178:3): move i8 result from %rax
	movb %al, %bl
	# Unclobber %rax
	movq -16(%rbp), %rax
	# LowerIcmp(4179:3): i8 ^4 vs. intlike 2
	cmpb $2, %bl
	sete %al
	andq $1, %rax
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE10_M_deleterEv
.p2align 4, 0x90
_ZNSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE10_M_deleterEv:
	.___ZNSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE10_M_deleterEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(4127:3): size = 8, type = %"class.std::__uniq_ptr_impl"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(4128:3).9: mov %"class.std::__uniq_ptr_impl"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(4129:3).2: (^2) into %"class.std::__uniq_ptr_impl"* ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::__uniq_ptr_impl"
	# LowerGetelementptr(4130:3): struct-type: %"class.std::__uniq_ptr_impl"* ^3 -> ^4, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(4130:3): type of ^4 is %"class.std::tuple"*
	# Clobber %rax
	movq %rax, -16(%rbp)
	# SetupCalls(4131:3): move argument %"class.std::tuple"* nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZSt3getILm1EJPNSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSB_
	# SetupCalls(4131:3): move %"struct.std::filesystem::__cxx11::path::_List::_Impl_deleter"* result from %rax
	movq %rax, %rbx
	# Unclobber %rax
	movq -16(%rbp), %rax
	movq %rbx, %rax
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10filesystem7__cxx114pathaSISt17basic_string_viewIcSt11char_traitsIcEEEERNSt9enable_ifIX13__is_path_srcIT_EES1_E4typeERKS8_
.p2align 4, 0x90
_ZNSt10filesystem7__cxx114pathaSISt17basic_string_viewIcSt11char_traitsIcEEEERNSt9enable_ifIX13__is_path_srcIT_EES1_E4typeERKS8_:
	.___ZNSt10filesystem7__cxx114pathaSISt17basic_string_viewIcSt11char_traitsIcEEEERNSt9enable_ifIX13__is_path_srcIT_EES1_E4typeERKS8___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(96 + 0, 16)
	subq $96, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -64(%rbp)
	movq %r12, -80(%rbp)
	movq %r13, -72(%rbp)
	# LowerAlloca(1491:3): size = 8, type = %"class.std::filesystem::__cxx11::path"**, var = ^3
	leaq -8(%rbp), %rbx
	# LowerAlloca(1492:3): size = 8, type = %"class.std::basic_string_view"**, var = ^4
	leaq -16(%rbp), %rax
	# LowerAlloca(1493:3): size = 40, type = %"class.std::filesystem::__cxx11::path"*, var = ^5
	leaq -56(%rbp), %r13
	# LowerStore(1494:3).9: mov %"class.std::filesystem::__cxx11::path"* %rdi, (^3)
	movq %rdi, (%rbx)
	# LowerStore(1495:3).9: mov %"class.std::basic_string_view"* %rsi, (^4)
	movq %rsi, (%rax)
	# LowerLoad(1496:3).2: (^3) into %"class.std::filesystem::__cxx11::path"* ^6
	movq (%rbx), %r12
	# LowerLoad(1497:3).2: (^4) into %"class.std::basic_string_view"* ^7
	movq (%rax), %rbx
	# SetupCalls(1498:3): move argument %"class.std::filesystem::__cxx11::path"* nonnull dereferenceable(40) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	# SetupCalls(1498:3): move argument %"class.std::basic_string_view"* nonnull dereferenceable(16) align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(1498:3): move argument i8 zeroext 2
	movq $2, %rdx
	andq $255, %rdx
	callq _ZNSt10filesystem7__cxx114pathC2ISt17basic_string_viewIcSt11char_traitsIcEES1_EERKT_NS1_6formatE
	# SetupCalls(1499:3): move argument %"class.std::filesystem::__cxx11::path"* nonnull dereferenceable(40) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(1499:3): move argument %"class.std::filesystem::__cxx11::path"* nonnull dereferenceable(40) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r13, %rsi
	callq _ZNSt10filesystem7__cxx114pathaSEOS1_
	# SetupCalls(1499:3): move %"class.std::filesystem::__cxx11::path"* result from %rax
	movq %rax, %rbx
	# SetupCalls(1500:3): move argument %"class.std::filesystem::__cxx11::path"* nonnull dereferenceable(40) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	callq _ZNSt10filesystem7__cxx114pathD2Ev
	movq %rbx, %rax
	movq -72(%rbp), %r13
	movq -80(%rbp), %r12
	movq -64(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt11char_traitsIcE7compareEPKcS2_m
.p2align 4, 0x90
_ZNSt11char_traitsIcE7compareEPKcS2_m:
	.___ZNSt11char_traitsIcE7compareEPKcS2_m__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(72 + 0, 16)
	subq $80, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -64(%rbp)
	movq %r12, -72(%rbp)
	# LowerAlloca(3025:3): size = 4, type = i32*, var = ^4
	leaq -4(%rbp), %rbx
	# LowerAlloca(3026:3): size = 8, type = i8**, var = ^5
	leaq -16(%rbp), %r9
	# LowerAlloca(3027:3): size = 8, type = i8**, var = ^6
	leaq -24(%rbp), %r8
	# LowerAlloca(3028:3): size = 8, type = i64*, var = ^7
	leaq -32(%rbp), %rcx
	# LowerStore(3029:3).9: mov i8* %rdi, (^5)
	movq %rdi, (%r9)
	# LowerStore(3030:3).9: mov i8* %rsi, (^6)
	movq %rsi, (%r8)
	# LowerStore(3031:3).9: mov i64 %rdx, (^7)
	movq %rdx, (%rcx)
	# LowerLoad(3032:3).2: (^7) into i64 ^8
	movq (%rcx), %rax
	# LowerIcmp(3033:3): i64 ^8 vs. intlike 0
	cmpq $0, %rax
	sete %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt11char_traitsIcE7compareEPKcS2_m__M21
	jmp .___ZNSt11char_traitsIcE7compareEPKcS2_m__M24
	.___ZNSt11char_traitsIcE7compareEPKcS2_m__M21:
	# LowerStore(3037:3).3: mov $imm, (^4)
	movl $0, (%rbx)
	jmp .___ZNSt11char_traitsIcE7compareEPKcS2_m__M60
	.___ZNSt11char_traitsIcE7compareEPKcS2_m__M24:
	# LowerLoad(3041:3).2: (^5) into i8* ^12
	movq (%r9), %rdx
	# LowerLoad(3042:3).2: (^6) into i8* ^13
	movq (%r8), %rax
	# LowerLoad(3043:3).2: (^7) into i64 ^14
	movq (%rcx), %r8
	# Clobber %rdx
	movq %rdx, -40(%rbp)
	# Clobber %r8
	movq %r8, -48(%rbp)
	# Clobber %rax
	movq %rax, -56(%rbp)
	# SetupCalls(3044:3): move argument i8* ^12
	# Fixed movzx with identical source and destination widths
	movq %rdx, %rdi
	# SetupCalls(3044:3): move argument i8* ^13
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(3044:3): move argument i64 ^14
	# Fixed movzx with identical source and destination widths
	movq %r8, %rdx
	callq memcmp@PLT
	# SetupCalls(3044:3): move i32 result from %rax
	movl %eax, %r12d
	# Unclobber %rax
	movq -56(%rbp), %rax
	# Unclobber %r8
	movq -48(%rbp), %r8
	# Unclobber %rdx
	movq -40(%rbp), %rdx
	# LowerStore(3045:3).9: mov i32 ^15, (^4)
	movl %r12d, (%rbx)
	.___ZNSt11char_traitsIcE7compareEPKcS2_m__M60:
	# LowerLoad(3049:3).2: (^4) into i32 ^17
	movl (%rbx), %eax
	movq -72(%rbp), %r12
	movq -64(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt16initializer_listISt17basic_string_viewIcSt11char_traitsIcEEE3endEv
.p2align 4, 0x90
_ZNKSt16initializer_listISt17basic_string_viewIcSt11char_traitsIcEEE3endEv:
	.___ZNKSt16initializer_listISt17basic_string_viewIcSt11char_traitsIcEEE3endEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	movq %r12, -16(%rbp)
	# LowerAlloca(5056:3): size = 8, type = %"class.std::initializer_list"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(5057:3).9: mov %"class.std::initializer_list"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(5058:3).2: (^2) into %"class.std::initializer_list"* ^3
	movq (%rax), %r12
	# SetupCalls(5059:3): move argument %"class.std::initializer_list"* nonnull dereferenceable(16) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	callq _ZNKSt16initializer_listISt17basic_string_viewIcSt11char_traitsIcEEE5beginEv
	# SetupCalls(5059:3): move %"class.std::basic_string_view"* result from %rax
	movq %rax, %rbx
	# SetupCalls(5060:3): move argument %"class.std::initializer_list"* nonnull dereferenceable(16) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	callq _ZNKSt16initializer_listISt17basic_string_viewIcSt11char_traitsIcEEE4sizeEv
	# SetupCalls(5060:3): move i64 result from %rax
	movq %rax, %r12
	# tt = Pointer, type = %"class.std::basic_string_view"
	# LowerGetelementptr(5061:3): pointer-type -> ^6
	movq %r12, %rax
	shlq $4, %rax
	addq %rbx, %rax
	movq -16(%rbp), %r12
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _Z5splitSt17basic_string_viewIcSt11char_traitsIcEES2_b
.p2align 4, 0x90
_Z5splitSt17basic_string_viewIcSt11char_traitsIcEES2_b:
	.___Z5splitSt17basic_string_viewIcSt11char_traitsIcEES2_b__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(744 + 0, 16)
	subq $752, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -368(%rbp)
	movq %r12, -408(%rbp)
	movq %r13, -416(%rbp)
	movq %r14, -424(%rbp)
	movq %r15, -352(%rbp)
	# LowerAlloca(828:3): size = 8, type = %"class.std::__new_allocator"**, var = ^7
	# Fixing source-to-dest leaq -8(%rbp), -304(%rbp)
	leaq -8(%rbp), %r15
	movq %r15, -304(%rbp)
	# LowerAlloca(829:3): size = 8, type = %"class.std::allocator"**, var = ^8
	# Fixing source-to-dest leaq -16(%rbp), -280(%rbp)
	leaq -16(%rbp), %r15
	movq %r15, -280(%rbp)
	# LowerAlloca(830:3): size = 8, type = %"class.std::allocator"**, var = ^9
	leaq -24(%rbp), %rbx
	# LowerAlloca(831:3): size = 8, type = i8**, var = ^10
	leaq -32(%rbp), %r10
	# LowerAlloca(832:3): size = 16, type = %"class.std::basic_string_view"*, var = ^11
	# Fixing source-to-dest leaq -48(%rbp), -208(%rbp)
	leaq -48(%rbp), %r15
	movq %r15, -208(%rbp)
	# LowerAlloca(833:3): size = 16, type = %"class.std::basic_string_view"*, var = ^12
	# Fixing source-to-dest leaq -64(%rbp), -216(%rbp)
	leaq -64(%rbp), %r15
	movq %r15, -216(%rbp)
	# LowerAlloca(834:3): size = 1, type = i8*, var = ^13
	# Fixing source-to-dest leaq -65(%rbp), -224(%rbp)
	leaq -65(%rbp), %r15
	movq %r15, -224(%rbp)
	# LowerAlloca(835:3): size = 8, type = i64*, var = ^14
	# Fixing source-to-dest leaq -80(%rbp), -232(%rbp)
	leaq -80(%rbp), %r15
	movq %r15, -232(%rbp)
	# LowerAlloca(836:3): size = 16, type = %"class.std::basic_string_view"*, var = ^15
	leaq -96(%rbp), %r12
	# LowerAlloca(837:3): size = 16, type = %"class.std::initializer_list"*, var = ^16
	leaq -112(%rbp), %r13
	# LowerAlloca(838:3): size = 16, type = [1 x %"class.std::basic_string_view"]*, var = ^17
	leaq -128(%rbp), %r14
	# LowerAlloca(839:3): size = 1, type = %"class.std::allocator"*, var = ^18
	# Fixing source-to-dest leaq -129(%rbp), -296(%rbp)
	leaq -129(%rbp), %r15
	movq %r15, -296(%rbp)
	# LowerAlloca(840:3): size = 1, type = i1*, var = ^19
	# Fixing source-to-dest leaq -130(%rbp), -240(%rbp)
	leaq -130(%rbp), %r15
	movq %r15, -240(%rbp)
	# LowerAlloca(841:3): size = 8, type = i64*, var = ^20
	# Fixing source-to-dest leaq -144(%rbp), -248(%rbp)
	leaq -144(%rbp), %r15
	movq %r15, -248(%rbp)
	# LowerAlloca(842:3): size = 8, type = i64*, var = ^21
	# Fixing source-to-dest leaq -152(%rbp), -256(%rbp)
	leaq -152(%rbp), %r15
	movq %r15, -256(%rbp)
	# LowerAlloca(843:3): size = 16, type = %"class.std::basic_string_view"*, var = ^22
	# Fixing source-to-dest leaq -168(%rbp), -288(%rbp)
	leaq -168(%rbp), %r15
	movq %r15, -288(%rbp)
	# LowerAlloca(844:3): size = 16, type = %"class.std::basic_string_view"*, var = ^23
	# Fixing source-to-dest leaq -184(%rbp), -264(%rbp)
	leaq -184(%rbp), %r15
	movq %r15, -264(%rbp)
	# LowerAlloca(845:3): size = 16, type = %"class.std::basic_string_view"*, var = ^24
	# Fixing source-to-dest leaq -200(%rbp), -272(%rbp)
	leaq -200(%rbp), %r15
	movq %r15, -272(%rbp)
	# LowerBasicConversion(846:3): %"class.std::vector"* %rdi -> i8* ^25
	movq %rdi, %rax
	# LowerStore(847:3).9: mov i8* ^25, (^10)
	movq %rax, (%r10)
	# LowerBasicConversion(848:3): %"class.std::basic_string_view"* ^11 -> {i64, i8*}* ^26
	movq -208(%rbp), %rax
	# tt = Pointer, type = {i64, i8*}
	# LowerGetelementptr(849:3): struct-type: {i64, i8*}* ^26 -> ^27, indices=0,0
	movq %rax, %r10
	# LowerGetelementptr(849:3): type of ^27 is i64*
	# LowerStore(850:3).9: mov i64 %rsi, (^27)
	movq %rsi, (%r10)
	# tt = Pointer, type = {i64, i8*}
	# LowerGetelementptr(851:3): struct-type: {i64, i8*}* ^26 -> ^28, indices=0,1
	movq %rax, %rsi
	addq $8, %rsi
	# LowerGetelementptr(851:3): type of ^28 is i8**
	# LowerStore(852:3).9: mov i8* %rdx, (^28)
	movq %rdx, (%rsi)
	# LowerBasicConversion(853:3): %"class.std::basic_string_view"* ^12 -> {i64, i8*}* ^29
	movq -216(%rbp), %rdx
	# tt = Pointer, type = {i64, i8*}
	# LowerGetelementptr(854:3): struct-type: {i64, i8*}* ^29 -> ^30, indices=0,0
	movq %rdx, %rax
	# LowerGetelementptr(854:3): type of ^30 is i64*
	# LowerStore(855:3).9: mov i64 %rcx, (^30)
	movq %rcx, (%rax)
	# tt = Pointer, type = {i64, i8*}
	# LowerGetelementptr(856:3): struct-type: {i64, i8*}* ^29 -> ^31, indices=0,1
	movq %rdx, %rax
	addq $8, %rax
	# LowerGetelementptr(856:3): type of ^31 is i8**
	# LowerStore(857:3).9: mov i8* %r8, (^31)
	movq %r8, (%rax)
	# LowerBasicConversion(858:3): i1 %r9b -> i8 ^32
	movb %r9b, %cl
	# LowerStore(859:3).9: mov i8 ^32, (^13)
	movq -224(%rbp), %rax
	movb %cl, (%rax)
	# Clobber %rdi
	movq %rdi, -312(%rbp)
	# SetupCalls(860:3): move argument %"class.std::basic_string_view"* nonnull dereferenceable(16) align 8 ^11
	# Fixed movzx with identical source and destination widths
	movq -208(%rbp), %rdi
	callq _ZNKSt17basic_string_viewIcSt11char_traitsIcEE5emptyEv
	# SetupCalls(860:3): move i1 result from %rax
	movb %al, %r15b
	# Unclobber %rdi
	movq -312(%rbp), %rdi
	cmpb $0, %r15b
	jne .___Z5splitSt17basic_string_viewIcSt11char_traitsIcEES2_b__M99
	jmp .___Z5splitSt17basic_string_viewIcSt11char_traitsIcEES2_b__M148
	.___Z5splitSt17basic_string_viewIcSt11char_traitsIcEES2_b__M99:
	# LowerBasicConversion(864:3): %"class.std::vector"* %rdi -> i8* ^35
	movq %rdi, %rax
	# Clobber %rdi
	movq %rdi, -312(%rbp)
	# Clobber %rax
	movq %rax, -320(%rbp)
	# SetupCalls(865:3): move argument i8* align 8 ^35
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(865:3): move argument i32 0
	movq $0, %rsi
	# SetupCalls(865:3): move argument i64 24
	movq $24, %rdx
	callq memset@PLT
	# Unclobber %rax
	movq -320(%rbp), %rax
	# Unclobber %rdi
	movq -312(%rbp), %rdi
	# Clobber %rdi
	movq %rdi, -312(%rbp)
	# SetupCalls(866:3): move argument %"class.std::vector"* nonnull dereferenceable(24) align 8 %rdi
	# Semiunclobber live %rdi into %rdi
	movq -312(%rbp), %rdi
	callq _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEC2Ev
	# Unclobber %rdi
	movq -312(%rbp), %rdi
	jmp .___Z5splitSt17basic_string_viewIcSt11char_traitsIcEES2_b__M734
	.___Z5splitSt17basic_string_viewIcSt11char_traitsIcEES2_b__M148:
	# LowerBasicConversion(870:3): %"class.std::basic_string_view"* ^15 -> i8* ^37
	movq %r12, %rax
	# LowerBasicConversion(871:3): %"class.std::basic_string_view"* ^12 -> i8* ^38
	movq -216(%rbp), %rcx
	# Clobber %rdi
	movq %rdi, -312(%rbp)
	# Clobber %rcx
	movq %rcx, -328(%rbp)
	# Clobber %rax
	movq %rax, -320(%rbp)
	# SetupCalls(872:3): move argument i8* align 8 ^37
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(872:3): move argument i8* align 8 ^38
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(872:3): move argument i64 16
	movq $16, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -320(%rbp), %rax
	# Unclobber %rcx
	movq -328(%rbp), %rcx
	# Unclobber %rdi
	movq -312(%rbp), %rdi
	# LowerBasicConversion(873:3): %"class.std::basic_string_view"* ^15 -> {i64, i8*}* ^39
	movq %r12, %rax
	# tt = Pointer, type = {i64, i8*}
	# LowerGetelementptr(874:3): struct-type: {i64, i8*}* ^39 -> ^40, indices=0,0
	movq %rax, %rcx
	# LowerGetelementptr(874:3): type of ^40 is i64*
	# LowerLoad(875:3).2: (^40) into i64 ^41
	movq (%rcx), %rdx
	# tt = Pointer, type = {i64, i8*}
	# LowerGetelementptr(876:3): struct-type: {i64, i8*}* ^39 -> ^42, indices=0,1
	movq %rax, %rcx
	addq $8, %rcx
	# LowerGetelementptr(876:3): type of ^42 is i8**
	# LowerLoad(877:3).2: (^42) into i8* ^43
	movq (%rcx), %rax
	# Clobber %rdi
	movq %rdi, -312(%rbp)
	# Clobber %rdx
	movq %rdx, -336(%rbp)
	# Clobber %rax
	movq %rax, -320(%rbp)
	# SetupCalls(878:3): move argument %"class.std::basic_string_view"* nonnull dereferenceable(16) align 8 ^11
	# Fixed movzx with identical source and destination widths
	movq -208(%rbp), %rdi
	# SetupCalls(878:3): move argument i64 ^41
	# Fixed movzx with identical source and destination widths
	movq %rdx, %rsi
	# SetupCalls(878:3): move argument i8* ^43
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdx
	# SetupCalls(878:3): move argument i64 0
	movq $0, %rcx
	callq _ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findES2_m
	# SetupCalls(878:3): move i64 result from %rax
	movq %rax, %r12
	# Unclobber %rax
	movq -320(%rbp), %rax
	# Unclobber %rdx
	movq -336(%rbp), %rdx
	# Unclobber %rdi
	movq -312(%rbp), %rdi
	# LowerStore(879:3).9: mov i64 ^44, (^14)
	movq -232(%rbp), %rax
	movq %r12, (%rax)
	# LowerLoad(880:3).2: (^14) into i64 ^45
	movq -232(%rbp), %rcx
	movq (%rcx), %rax
	# LowerIcmp(881:3): i64 ^45 vs. intlike -1
	cmpq $-1, %rax
	sete %al
	andq $1, %rax
	cmpb $0, %al
	jne .___Z5splitSt17basic_string_viewIcSt11char_traitsIcEES2_b__M230
	jmp .___Z5splitSt17basic_string_viewIcSt11char_traitsIcEES2_b__M361
	.___Z5splitSt17basic_string_viewIcSt11char_traitsIcEES2_b__M230:
	# tt = Pointer, type = [1 x %"class.std::basic_string_view"]
	# LowerGetelementptr(885:3): struct-type: [1 x %"class.std::basic_string_view"]* ^17 -> ^48, indices=0,0
	movq %r14, %rcx
	# LowerGetelementptr(885:3): type of ^48 is %"class.std::basic_string_view"*
	# LowerBasicConversion(886:3): [1 x %"class.std::basic_string_view"]* ^48 -> i8* ^49
	movq %rcx, %rax
	# LowerBasicConversion(887:3): %"class.std::basic_string_view"* ^11 -> i8* ^50
	movq -208(%rbp), %rcx
	# Clobber %rdi
	movq %rdi, -312(%rbp)
	# Clobber %rcx
	movq %rcx, -328(%rbp)
	# Clobber %rax
	movq %rax, -320(%rbp)
	# SetupCalls(888:3): move argument i8* align 8 ^49
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(888:3): move argument i8* align 8 ^50
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(888:3): move argument i64 16
	movq $16, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -320(%rbp), %rax
	# Unclobber %rcx
	movq -328(%rbp), %rcx
	# Unclobber %rdi
	movq -312(%rbp), %rdi
	# tt = Pointer, type = %"class.std::initializer_list"
	# LowerGetelementptr(889:3): struct-type: %"class.std::initializer_list"* ^16 -> ^51, indices=0,0
	movq %r13, %rax
	# LowerGetelementptr(889:3): type of ^51 is %"class.std::basic_string_view"**
	# tt = Pointer, type = [1 x %"class.std::basic_string_view"]
	# LowerGetelementptr(890:3): struct-type: [1 x %"class.std::basic_string_view"]* ^17 -> ^52, indices=0,0
	movq %r14, %rcx
	# LowerGetelementptr(890:3): type of ^52 is %"class.std::basic_string_view"*
	# LowerStore(891:3).9: mov [1 x %"class.std::basic_string_view"]* ^52, (^51)
	movq %rcx, (%rax)
	# tt = Pointer, type = %"class.std::initializer_list"
	# LowerGetelementptr(892:3): struct-type: %"class.std::initializer_list"* ^16 -> ^53, indices=0,1
	movq %r13, %rax
	addq $8, %rax
	# LowerGetelementptr(892:3): type of ^53 is i64*
	# LowerStore(893:3).3: mov $imm, (^53)
	movq $1, (%rax)
	# LowerStore(894:3).9: mov %"class.std::allocator"* ^18, (^9)
	# Fixing source-to-dest movq -296(%rbp), (%rbx)
	movq -296(%rbp), %r15
	movq %r15, (%rbx)
	# LowerLoad(895:3).2: (^9) into %"class.std::allocator"* ^54
	movq (%rbx), %rcx
	# LowerBasicConversion(896:3): %"class.std::allocator"* ^54 -> %"class.std::__new_allocator"* ^55
	movq %rcx, %rax
	# LowerStore(897:3).9: mov %"class.std::__new_allocator"* ^55, (^7)
	movq -304(%rbp), %rbx
	movq %rax, (%rbx)
	# LowerLoad(898:3).2: (^7) into %"class.std::__new_allocator"* ^56
	movq -304(%rbp), %rbx
	movq (%rbx), %rax
	# LowerBasicConversion(899:3): %"class.std::initializer_list"* ^16 -> {%"class.std::basic_string_view"*, i64}* ^57
	movq %r13, %rax
	# tt = Pointer, type = {%"class.std::basic_string_view"*, i64}
	# LowerGetelementptr(900:3): struct-type: {%"class.std::basic_string_view"*, i64}* ^57 -> ^58, indices=0,0
	movq %rax, %rbx
	# LowerGetelementptr(900:3): type of ^58 is %"class.std::basic_string_view"**
	# LowerLoad(901:3).2: (^58) into %"class.std::basic_string_view"* ^59
	movq (%rbx), %rcx
	# tt = Pointer, type = {%"class.std::basic_string_view"*, i64}
	# LowerGetelementptr(902:3): struct-type: {%"class.std::basic_string_view"*, i64}* ^57 -> ^60, indices=0,1
	movq %rax, %rbx
	addq $8, %rbx
	# LowerGetelementptr(902:3): type of ^60 is i64*
	# LowerLoad(903:3).2: (^60) into i64 ^61
	movq (%rbx), %rax
	# Clobber %rdi
	movq %rdi, -312(%rbp)
	# Clobber %rcx
	movq %rcx, -328(%rbp)
	# Clobber %rax
	movq %rax, -320(%rbp)
	# SetupCalls(904:3): move argument %"class.std::vector"* nonnull dereferenceable(24) align 8 %rdi
	# Semiunclobber live %rdi into %rdi
	movq -312(%rbp), %rdi
	# SetupCalls(904:3): move argument %"class.std::basic_string_view"* ^59
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(904:3): move argument i64 ^61
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdx
	# SetupCalls(904:3): move argument %"class.std::allocator"* nonnull dereferenceable(1) align 1 ^18
	# Fixed movzx with identical source and destination widths
	movq -296(%rbp), %rcx
	callq _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEC2ESt16initializer_listIS3_ERKS4_
	# Unclobber %rax
	movq -320(%rbp), %rax
	# Unclobber %rcx
	movq -328(%rbp), %rcx
	# Unclobber %rdi
	movq -312(%rbp), %rdi
	# LowerStore(905:3).9: mov %"class.std::allocator"* ^18, (^8)
	movq -280(%rbp), %rax
	# Fixing source-to-dest movq -296(%rbp), (%rax)
	movq -296(%rbp), %r15
	movq %r15, (%rax)
	# LowerLoad(906:3).2: (^8) into %"class.std::allocator"* ^62
	movq -280(%rbp), %rbx
	movq (%rbx), %rax
	# LowerBasicConversion(907:3): %"class.std::allocator"* ^62 -> %"class.std::__new_allocator"* ^63
	movq %rax, %rbx
	# SetupCalls(908:3): move argument %"class.std::__new_allocator"* nonnull dereferenceable(1) align 1 ^63
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt15__new_allocatorISt17basic_string_viewIcSt11char_traitsIcEEED2Ev
	jmp .___Z5splitSt17basic_string_viewIcSt11char_traitsIcEES2_b__M734
	.___Z5splitSt17basic_string_viewIcSt11char_traitsIcEES2_b__M361:
	# LowerStore(912:3).3: mov $imm, (^19)
	movq -240(%rbp), %rax
	movb $0, (%rax)
	# Clobber %rdi
	movq %rdi, -312(%rbp)
	# SetupCalls(913:3): move argument %"class.std::vector"* nonnull dereferenceable(24) align 8 %rdi
	# Semiunclobber live %rdi into %rdi
	movq -312(%rbp), %rdi
	callq _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEC2Ev
	# Unclobber %rdi
	movq -312(%rbp), %rdi
	# Clobber %rdi
	movq %rdi, -312(%rbp)
	# SetupCalls(914:3): move argument %"class.std::basic_string_view"* nonnull dereferenceable(16) align 8 ^12
	# Fixed movzx with identical source and destination widths
	movq -216(%rbp), %rdi
	callq _ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv
	# SetupCalls(914:3): move i64 result from %rax
	movq %rax, %rbx
	# Unclobber %rdi
	movq -312(%rbp), %rdi
	# LowerStore(915:3).9: mov i64 ^65, (^20)
	movq -248(%rbp), %rax
	movq %rbx, (%rax)
	# LowerStore(916:3).3: mov $imm, (^21)
	movq -256(%rbp), %rax
	movq $0, (%rax)
	# LowerLoad(917:3).2: (^14) into i64 ^66
	movq -232(%rbp), %rax
	movq (%rax), %rbx
	# Clobber %rdi
	movq %rdi, -312(%rbp)
	# SetupCalls(918:3): move argument %"class.std::basic_string_view"* nonnull dereferenceable(16) align 8 ^11
	# Fixed movzx with identical source and destination widths
	movq -208(%rbp), %rdi
	# SetupCalls(918:3): move argument i64 0
	movq $0, %rsi
	# SetupCalls(918:3): move argument i64 ^66
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdx
	callq _ZNKSt17basic_string_viewIcSt11char_traitsIcEE6substrEmm
	# SetupCalls(918:3): move 128-bit result from %rax and %rdx
	# Multireg move: <%hax %hdx> -> <%hbx %hr12>
	movq %rax, %rbx
	movq %rdx, %r12
	# Unclobber %rdi
	movq -312(%rbp), %rdi
	# LowerBasicConversion(919:3): %"class.std::basic_string_view"* ^22 -> {i64, i8*}* ^68
	movq -288(%rbp), %rax
	# tt = Pointer, type = {i64, i8*}
	# LowerGetelementptr(920:3): struct-type: {i64, i8*}* ^68 -> ^69, indices=0,0
	movq %rax, %rcx
	# LowerGetelementptr(920:3): type of ^69 is i64*
	# LowerExtractvalue(922:3)
	# PaddedStructs({i64, i8*} -> i64): move from pack ^67 ({i64, i8*}) to ^117 (opaque), index = 0
	movq %rbx, %rsi
	movq %rsi, %rdx
	# LowerStore(922:3).9: mov i64 ^70, (^69)
	movq %rdx, (%rcx)
	# tt = Pointer, type = {i64, i8*}
	# LowerGetelementptr(923:3): struct-type: {i64, i8*}* ^68 -> ^71, indices=0,1
	movq %rax, %rcx
	addq $8, %rcx
	# LowerGetelementptr(923:3): type of ^71 is i8**
	# LowerExtractvalue(925:3)
	# PaddedStructs({i64, i8*} -> i8*): move from pack ^67 ({i64, i8*}) to ^118 (opaque), index = 1
	movq %r12, %rdx
	movq %rdx, %rax
	# LowerStore(925:3).9: mov i8* ^72, (^71)
	movq %rax, (%rcx)
	# Clobber %rdi
	movq %rdi, -312(%rbp)
	# SetupCalls(926:3): move argument %"class.std::vector"* nonnull dereferenceable(24) align 8 %rdi
	# Semiunclobber live %rdi into %rdi
	movq -312(%rbp), %rdi
	# SetupCalls(926:3): move argument %"class.std::basic_string_view"* nonnull dereferenceable(16) align 8 ^22
	# Fixed movzx with identical source and destination widths
	movq -288(%rbp), %rsi
	callq _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE9push_backEOS3_
	# Unclobber %rdi
	movq -312(%rbp), %rdi
	.___Z5splitSt17basic_string_viewIcSt11char_traitsIcEES2_b__M487:
	# LowerLoad(930:3).2: (^14) into i64 ^74
	movq -232(%rbp), %rax
	movq (%rax), %rbx
	# LowerIcmp(931:3): i64 ^74 vs. intlike -1
	cmpq $-1, %rbx
	setne %al
	andq $1, %rax
	cmpb $0, %al
	jne .___Z5splitSt17basic_string_viewIcSt11char_traitsIcEES2_b__M494
	jmp .___Z5splitSt17basic_string_viewIcSt11char_traitsIcEES2_b__M706
	.___Z5splitSt17basic_string_viewIcSt11char_traitsIcEES2_b__M494:
	# LowerLoad(935:3).2: (^14) into i64 ^77
	movq -232(%rbp), %rax
	movq (%rax), %rbx
	# LowerStore(936:3).9: mov i64 ^77, (^21)
	movq -256(%rbp), %rax
	movq %rbx, (%rax)
	# LowerBasicConversion(937:3): %"class.std::basic_string_view"* ^23 -> i8* ^78
	movq -264(%rbp), %rax
	# LowerBasicConversion(938:3): %"class.std::basic_string_view"* ^12 -> i8* ^79
	movq -216(%rbp), %rbx
	# Clobber %rdi
	movq %rdi, -312(%rbp)
	# Clobber %rax
	movq %rax, -320(%rbp)
	# SetupCalls(939:3): move argument i8* align 8 ^78
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(939:3): move argument i8* align 8 ^79
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(939:3): move argument i64 16
	movq $16, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -320(%rbp), %rax
	# Unclobber %rdi
	movq -312(%rbp), %rdi
	# LowerLoad(940:3).2: (^21) into i64 ^80
	movq -256(%rbp), %rbx
	movq (%rbx), %rax
	# LowerLoad(941:3).2: (^20) into i64 ^81
	movq -248(%rbp), %rcx
	movq (%rcx), %rbx
	# LowerMath(942:3): ^80, ^81 into i64 ^82
	movq %rax, %r8
	addq %rbx, %r8
	# LowerBasicConversion(943:3): %"class.std::basic_string_view"* ^23 -> {i64, i8*}* ^83
	movq -264(%rbp), %rax
	# tt = Pointer, type = {i64, i8*}
	# LowerGetelementptr(944:3): struct-type: {i64, i8*}* ^83 -> ^84, indices=0,0
	movq %rax, %rbx
	# LowerGetelementptr(944:3): type of ^84 is i64*
	# LowerLoad(945:3).2: (^84) into i64 ^85
	movq (%rbx), %rcx
	# tt = Pointer, type = {i64, i8*}
	# LowerGetelementptr(946:3): struct-type: {i64, i8*}* ^83 -> ^86, indices=0,1
	movq %rax, %rbx
	addq $8, %rbx
	# LowerGetelementptr(946:3): type of ^86 is i8**
	# LowerLoad(947:3).2: (^86) into i8* ^87
	movq (%rbx), %rax
	# Clobber %rdi
	movq %rdi, -312(%rbp)
	# Clobber %rcx
	movq %rcx, -328(%rbp)
	# Clobber %r8
	movq %r8, -344(%rbp)
	# Clobber %rax
	movq %rax, -320(%rbp)
	# SetupCalls(948:3): move argument %"class.std::basic_string_view"* nonnull dereferenceable(16) align 8 ^11
	# Fixed movzx with identical source and destination widths
	movq -208(%rbp), %rdi
	# SetupCalls(948:3): move argument i64 ^85
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(948:3): move argument i8* ^87
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdx
	# SetupCalls(948:3): move argument i64 ^82
	# Fixed movzx with identical source and destination widths
	movq %r8, %rcx
	callq _ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findES2_m
	# SetupCalls(948:3): move i64 result from %rax
	movq %rax, %rbx
	# Unclobber %rax
	movq -320(%rbp), %rax
	# Unclobber %r8
	movq -344(%rbp), %r8
	# Unclobber %rcx
	movq -328(%rbp), %rcx
	# Unclobber %rdi
	movq -312(%rbp), %rdi
	# LowerStore(949:3).9: mov i64 ^88, (^14)
	movq -232(%rbp), %rax
	movq %rbx, (%rax)
	# LowerLoad(950:3).2: (^21) into i64 ^89
	movq -256(%rbp), %rbx
	movq (%rbx), %rax
	# LowerLoad(951:3).2: (^20) into i64 ^90
	movq -248(%rbp), %rcx
	movq (%rcx), %rbx
	# LowerMath(952:3): ^89, ^90 into i64 ^91
	movq %rax, %rcx
	addq %rbx, %rcx
	# LowerLoad(953:3).2: (^14) into i64 ^92
	movq -232(%rbp), %rbx
	movq (%rbx), %rax
	# LowerLoad(954:3).2: (^21) into i64 ^93
	movq -256(%rbp), %rdx
	movq (%rdx), %rbx
	# LowerMath(955:3): ^92, ^93 into i64 ^94
	movq %rax, %rdx
	subq %rbx, %rdx
	# LowerLoad(956:3).2: (^20) into i64 ^95
	movq -248(%rbp), %rbx
	movq (%rbx), %rax
	# LowerMath(957:3): ^94, ^95 into i64 ^96
	movq %rdx, %rbx
	subq %rax, %rbx
	# Clobber %rdi
	movq %rdi, -312(%rbp)
	# Clobber %rcx
	movq %rcx, -328(%rbp)
	# SetupCalls(958:3): move argument %"class.std::basic_string_view"* nonnull dereferenceable(16) align 8 ^11
	# Fixed movzx with identical source and destination widths
	movq -208(%rbp), %rdi
	# SetupCalls(958:3): move argument i64 ^91
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(958:3): move argument i64 ^96
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdx
	callq _ZNKSt17basic_string_viewIcSt11char_traitsIcEE6substrEmm
	# SetupCalls(958:3): move 128-bit result from %rax and %rdx
	# Multireg move: <%hax %hdx> -> <%hbx %hr12>
	movq %rax, %rbx
	movq %rdx, %r12
	# Unclobber %rcx
	movq -328(%rbp), %rcx
	# Unclobber %rdi
	movq -312(%rbp), %rdi
	# LowerBasicConversion(959:3): %"class.std::basic_string_view"* ^24 -> {i64, i8*}* ^98
	movq -272(%rbp), %rax
	# tt = Pointer, type = {i64, i8*}
	# LowerGetelementptr(960:3): struct-type: {i64, i8*}* ^98 -> ^99, indices=0,0
	movq %rax, %rcx
	# LowerGetelementptr(960:3): type of ^99 is i64*
	# LowerExtractvalue(962:3)
	# PaddedStructs({i64, i8*} -> i64): move from pack ^97 ({i64, i8*}) to ^119 (opaque), index = 0
	movq %rbx, %rsi
	movq %rsi, %rdx
	# LowerStore(962:3).9: mov i64 ^100, (^99)
	movq %rdx, (%rcx)
	# tt = Pointer, type = {i64, i8*}
	# LowerGetelementptr(963:3): struct-type: {i64, i8*}* ^98 -> ^101, indices=0,1
	movq %rax, %rcx
	addq $8, %rcx
	# LowerGetelementptr(963:3): type of ^101 is i8**
	# LowerExtractvalue(965:3)
	# PaddedStructs({i64, i8*} -> i8*): move from pack ^97 ({i64, i8*}) to ^120 (opaque), index = 1
	movq %r12, %rdx
	movq %rdx, %rax
	# LowerStore(965:3).9: mov i8* ^102, (^101)
	movq %rax, (%rcx)
	# Clobber %rdi
	movq %rdi, -312(%rbp)
	# SetupCalls(966:3): move argument %"class.std::basic_string_view"* nonnull dereferenceable(16) align 8 ^24
	# Fixed movzx with identical source and destination widths
	movq -272(%rbp), %rdi
	callq _ZNKSt17basic_string_viewIcSt11char_traitsIcEE5emptyEv
	# SetupCalls(966:3): move i1 result from %rax
	movb %al, %bl
	# Unclobber %rdi
	movq -312(%rbp), %rdi
	cmpb $0, %bl
	jne .___Z5splitSt17basic_string_viewIcSt11char_traitsIcEES2_b__M674
	jmp .___Z5splitSt17basic_string_viewIcSt11char_traitsIcEES2_b__M681
	.___Z5splitSt17basic_string_viewIcSt11char_traitsIcEES2_b__M674:
	# LowerLoad(970:3).2: (^13) into i8 ^105
	movq -224(%rbp), %rax
	movb (%rax), %bl
	# LowerTrunc(971:3): 8 to 1, move
	movb %bl, %al
	# LowerTrunc(971:3): 8 to 1, apply mask
	andq $1, %rax
	cmpb $0, %al
	jne .___Z5splitSt17basic_string_viewIcSt11char_traitsIcEES2_b__M705
	.___Z5splitSt17basic_string_viewIcSt11char_traitsIcEES2_b__M681:
	# Clobber %rdi
	movq %rdi, -312(%rbp)
	# SetupCalls(975:3): move argument %"class.std::vector"* nonnull dereferenceable(24) align 8 %rdi
	# Semiunclobber live %rdi into %rdi
	movq -312(%rbp), %rdi
	# SetupCalls(975:3): move argument %"class.std::basic_string_view"* nonnull dereferenceable(16) align 8 ^24
	# Fixed movzx with identical source and destination widths
	movq -272(%rbp), %rsi
	callq _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE9push_backERKS3_
	# Unclobber %rdi
	movq -312(%rbp), %rdi
	.___Z5splitSt17basic_string_viewIcSt11char_traitsIcEES2_b__M705:
	jmp .___Z5splitSt17basic_string_viewIcSt11char_traitsIcEES2_b__M487
	.___Z5splitSt17basic_string_viewIcSt11char_traitsIcEES2_b__M706:
	# LowerStore(982:3).3: mov $imm, (^19)
	movq -240(%rbp), %rax
	movb $1, (%rax)
	# LowerLoad(983:3).2: (^19) into i1 ^110
	movq -240(%rbp), %rbx
	movb (%rbx), %al
	cmpb $0, %al
	jne .___Z5splitSt17basic_string_viewIcSt11char_traitsIcEES2_b__M733
	.___Z5splitSt17basic_string_viewIcSt11char_traitsIcEES2_b__M711:
	# Clobber %rdi
	movq %rdi, -312(%rbp)
	# SetupCalls(987:3): move argument %"class.std::vector"* nonnull dereferenceable(24) align 8 %rdi
	# Semiunclobber live %rdi into %rdi
	movq -312(%rbp), %rdi
	callq _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EED2Ev
	# Unclobber %rdi
	movq -312(%rbp), %rdi
	.___Z5splitSt17basic_string_viewIcSt11char_traitsIcEES2_b__M733:
	.___Z5splitSt17basic_string_viewIcSt11char_traitsIcEES2_b__M734:
	movq -352(%rbp), %r15
	movq -424(%rbp), %r14
	movq -416(%rbp), %r13
	movq -408(%rbp), %r12
	movq -368(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEEclERKSI_
.p2align 4, 0x90
_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEEclERKSI_:
	.___ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEEclERKSI___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(9883:3): size = 8, type = %"struct.std::_Select1st"**, var = ^3
	leaq -8(%rbp), %rcx
	# LowerAlloca(9884:3): size = 8, type = %"struct.std::pair"**, var = ^4
	leaq -16(%rbp), %rax
	# LowerStore(9885:3).9: mov %"struct.std::_Select1st"* %rdi, (^3)
	movq %rdi, (%rcx)
	# LowerStore(9886:3).9: mov %"struct.std::pair"* %rsi, (^4)
	movq %rsi, (%rax)
	# LowerLoad(9887:3).2: (^3) into %"struct.std::_Select1st"* ^5
	movq (%rcx), %rbx
	# LowerLoad(9888:3).2: (^4) into %"struct.std::pair"* ^6
	movq (%rax), %rbx
	# tt = Pointer, type = %"struct.std::pair"
	# LowerGetelementptr(9889:3): struct-type: %"struct.std::pair"* ^6 -> ^7, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(9889:3): type of ^7 is %"class.std::__cxx11::basic_string"*
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE19_M_range_initializeIPKS3_EEvT_S9_St20forward_iterator_tag
.p2align 4, 0x90
_ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE19_M_range_initializeIPKS3_EEvT_S9_St20forward_iterator_tag:
	.___ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE19_M_range_initializeIPKS3_EEvT_S9_St20forward_iterator_tag__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(288 + 0, 16)
	subq $288, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -112(%rbp)
	movq %r12, -136(%rbp)
	movq %r13, -120(%rbp)
	movq %r14, -176(%rbp)
	movq %r15, -128(%rbp)
	# LowerAlloca(4973:3): size = 8, type = %"class.std::basic_string_view"***, var = ^4
	leaq -8(%rbp), %rbx
	# LowerAlloca(4974:3): size = 8, type = %"class.std::basic_string_view"**, var = ^5
	leaq -16(%rbp), %r10
	# LowerAlloca(4975:3): size = 8, type = %"class.std::basic_string_view"**, var = ^6
	leaq -24(%rbp), %r8
	# LowerAlloca(4976:3): size = 8, type = %"class.std::basic_string_view"**, var = ^7
	leaq -32(%rbp), %rcx
	# LowerAlloca(4977:3): size = 8, type = %"class.std::basic_string_view"**, var = ^8
	leaq -40(%rbp), %rax
	# LowerAlloca(4978:3): size = 1, type = %"struct.std::forward_iterator_tag"*, var = ^9
	leaq -41(%rbp), %r9
	# LowerAlloca(4979:3): size = 8, type = %"class.std::vector"**, var = ^10
	leaq -56(%rbp), %r11
	# LowerAlloca(4980:3): size = 8, type = %"class.std::basic_string_view"**, var = ^11
	leaq -64(%rbp), %r13
	# LowerAlloca(4981:3): size = 8, type = %"class.std::basic_string_view"**, var = ^12
	# Fixing source-to-dest leaq -72(%rbp), -96(%rbp)
	leaq -72(%rbp), %r15
	movq %r15, -96(%rbp)
	# LowerAlloca(4982:3): size = 8, type = i64*, var = ^13
	leaq -80(%rbp), %r12
	# LowerStore(4983:3).9: mov %"class.std::vector"* %rdi, (^10)
	movq %rdi, (%r11)
	# LowerStore(4984:3).9: mov %"class.std::basic_string_view"* %rsi, (^11)
	movq %rsi, (%r13)
	# LowerStore(4985:3).9: mov %"class.std::basic_string_view"* %rdx, (^12)
	movq -96(%rbp), %rsi
	movq %rdx, (%rsi)
	# LowerLoad(4986:3).2: (^10) into %"class.std::vector"* ^14
	# Fixing source-to-dest movq (%r11), -88(%rbp)
	movq (%r11), %r15
	movq %r15, -88(%rbp)
	# LowerLoad(4987:3).2: (^11) into %"class.std::basic_string_view"* ^15
	movq (%r13), %rdx
	# LowerLoad(4988:3).2: (^12) into %"class.std::basic_string_view"* ^16
	movq -96(%rbp), %rdi
	movq (%rdi), %rsi
	# LowerStore(4989:3).9: mov %"class.std::basic_string_view"* ^15, (^7)
	movq %rdx, (%rcx)
	# LowerStore(4990:3).9: mov %"class.std::basic_string_view"* ^16, (^8)
	movq %rsi, (%rax)
	# LowerLoad(4991:3).2: (^7) into %"class.std::basic_string_view"* ^17
	movq (%rcx), %rdx
	# LowerLoad(4992:3).2: (^8) into %"class.std::basic_string_view"* ^18
	movq (%rax), %rsi
	# LowerStore(4993:3).9: mov %"class.std::basic_string_view"** ^7, (^4)
	movq %rcx, (%rbx)
	# LowerStore(4994:3).9: mov %"class.std::basic_string_view"* ^17, (^5)
	movq %rdx, (%r10)
	# LowerStore(4995:3).9: mov %"class.std::basic_string_view"* ^18, (^6)
	movq %rsi, (%r8)
	# LowerLoad(4996:3).2: (^6) into %"class.std::basic_string_view"* ^19
	movq (%r8), %rbx
	# LowerLoad(4997:3).2: (^5) into %"class.std::basic_string_view"* ^20
	movq (%r10), %rax
	# LowerBasicConversion(4998:3): %"class.std::basic_string_view"* ^19 -> i64 ^21
	movq %rbx, %rcx
	# LowerBasicConversion(4999:3): %"class.std::basic_string_view"* ^20 -> i64 ^22
	movq %rax, %rbx
	# LowerMath(5000:3): ^21, ^22 into i64 ^23
	movq %rcx, %rax
	subq %rbx, %rax
	# LowerSdiv(5001:3): ^23, 16 into i64 ^24
	movq %rax, %rbx
	sarq $4, %rbx
	# LowerStore(5002:3).9: mov i64 ^24, (^13)
	movq %rbx, (%r12)
	# LowerBasicConversion(5003:3): %"class.std::vector"* ^14 -> %"struct.std::_Vector_base"* ^25
	movq -88(%rbp), %r14
	# LowerLoad(5004:3).2: (^13) into i64 ^26
	movq (%r12), %rbx
	# LowerBasicConversion(5005:3): %"class.std::vector"* ^14 -> %"struct.std::_Vector_base"* ^27
	movq -88(%rbp), %rax
	# Clobber %rax
	movq %rax, -104(%rbp)
	# SetupCalls(5006:3): move argument %"struct.std::_Vector_base"* nonnull dereferenceable(24) align 8 ^27
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE19_M_get_Tp_allocatorEv
	# SetupCalls(5006:3): move %"class.std::allocator"* result from %rax
	movq %rax, %r15
	# Unclobber %rax
	movq -104(%rbp), %rax
	# SetupCalls(5007:3): move argument i64 ^26
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(5007:3): move argument %"class.std::allocator"* nonnull dereferenceable(1) align 1 ^28
	# Fixed movzx with identical source and destination widths
	movq %r15, %rsi
	callq _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE17_S_check_init_lenEmRKS4_
	# SetupCalls(5007:3): move i64 result from %rax
	movq %rax, %rbx
	# SetupCalls(5008:3): move argument %"struct.std::_Vector_base"* nonnull dereferenceable(24) align 8 ^25
	# Fixed movzx with identical source and destination widths
	movq %r14, %rdi
	# SetupCalls(5008:3): move argument i64 ^29
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE11_M_allocateEm
	# SetupCalls(5008:3): move %"class.std::basic_string_view"* result from %rax
	movq %rax, %rbx
	# LowerBasicConversion(5009:3): %"class.std::vector"* ^14 -> %"struct.std::_Vector_base"* ^31
	movq -88(%rbp), %rax
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(5010:3): struct-type: %"struct.std::_Vector_base"* ^31 -> ^32, indices=0,0
	movq %rax, %rcx
	# LowerGetelementptr(5010:3): type of ^32 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# LowerBasicConversion(5011:3): %"struct.std::_Vector_base"* ^32 -> %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^33
	movq %rcx, %rax
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(5012:3): struct-type: %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^33 -> ^34, indices=0,0
	movq %rax, %rcx
	# LowerGetelementptr(5012:3): type of ^34 is %"class.std::basic_string_view"**
	# LowerStore(5013:3).9: mov %"class.std::basic_string_view"* ^30, (^34)
	movq %rbx, (%rcx)
	# LowerBasicConversion(5014:3): %"class.std::vector"* ^14 -> %"struct.std::_Vector_base"* ^35
	movq -88(%rbp), %rax
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(5015:3): struct-type: %"struct.std::_Vector_base"* ^35 -> ^36, indices=0,0
	movq %rax, %rbx
	# LowerGetelementptr(5015:3): type of ^36 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# LowerBasicConversion(5016:3): %"struct.std::_Vector_base"* ^36 -> %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^37
	movq %rbx, %rax
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(5017:3): struct-type: %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^37 -> ^38, indices=0,0
	movq %rax, %rbx
	# LowerGetelementptr(5017:3): type of ^38 is %"class.std::basic_string_view"**
	# LowerLoad(5018:3).2: (^38) into %"class.std::basic_string_view"* ^39
	movq (%rbx), %rax
	# LowerLoad(5019:3).2: (^13) into i64 ^40
	movq (%r12), %rbx
	# tt = Pointer, type = %"class.std::basic_string_view"
	# LowerGetelementptr(5020:3): pointer-type -> ^41
	movq %rbx, %rcx
	shlq $4, %rcx
	addq %rax, %rcx
	# LowerBasicConversion(5021:3): %"class.std::vector"* ^14 -> %"struct.std::_Vector_base"* ^42
	movq -88(%rbp), %rax
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(5022:3): struct-type: %"struct.std::_Vector_base"* ^42 -> ^43, indices=0,0
	movq %rax, %rbx
	# LowerGetelementptr(5022:3): type of ^43 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# LowerBasicConversion(5023:3): %"struct.std::_Vector_base"* ^43 -> %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^44
	movq %rbx, %rax
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(5024:3): struct-type: %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^44 -> ^45, indices=0,2
	movq %rax, %rbx
	addq $16, %rbx
	# LowerGetelementptr(5024:3): type of ^45 is %"class.std::basic_string_view"**
	# LowerStore(5025:3).9: mov %"class.std::basic_string_view"* ^41, (^45)
	movq %rcx, (%rbx)
	# LowerLoad(5026:3).2: (^11) into %"class.std::basic_string_view"* ^46
	movq (%r13), %rbx
	# LowerLoad(5027:3).2: (^12) into %"class.std::basic_string_view"* ^47
	movq -96(%rbp), %rax
	movq (%rax), %r12
	# LowerBasicConversion(5028:3): %"class.std::vector"* ^14 -> %"struct.std::_Vector_base"* ^48
	movq -88(%rbp), %rcx
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(5029:3): struct-type: %"struct.std::_Vector_base"* ^48 -> ^49, indices=0,0
	movq %rcx, %rax
	# LowerGetelementptr(5029:3): type of ^49 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# LowerBasicConversion(5030:3): %"struct.std::_Vector_base"* ^49 -> %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^50
	movq %rax, %rcx
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(5031:3): struct-type: %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^50 -> ^51, indices=0,0
	movq %rcx, %rax
	# LowerGetelementptr(5031:3): type of ^51 is %"class.std::basic_string_view"**
	# LowerLoad(5032:3).2: (^51) into %"class.std::basic_string_view"* ^52
	movq (%rax), %r13
	# LowerBasicConversion(5033:3): %"class.std::vector"* ^14 -> %"struct.std::_Vector_base"* ^53
	movq -88(%rbp), %rax
	# Clobber %rax
	movq %rax, -104(%rbp)
	# SetupCalls(5034:3): move argument %"struct.std::_Vector_base"* nonnull dereferenceable(24) align 8 ^53
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE19_M_get_Tp_allocatorEv
	# SetupCalls(5034:3): move %"class.std::allocator"* result from %rax
	movq %rax, %r14
	# Unclobber %rax
	movq -104(%rbp), %rax
	# SetupCalls(5035:3): move argument %"class.std::basic_string_view"* ^46
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(5035:3): move argument %"class.std::basic_string_view"* ^47
	# Fixed movzx with identical source and destination widths
	movq %r12, %rsi
	# SetupCalls(5035:3): move argument %"class.std::basic_string_view"* ^52
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdx
	# SetupCalls(5035:3): move argument %"class.std::allocator"* nonnull dereferenceable(1) align 1 ^54
	# Fixed movzx with identical source and destination widths
	movq %r14, %rcx
	callq _ZSt22__uninitialized_copy_aIPKSt17basic_string_viewIcSt11char_traitsIcEEPS3_S3_ET0_T_S8_S7_RSaIT1_E
	# SetupCalls(5035:3): move %"class.std::basic_string_view"* result from %rax
	movq %rax, %rbx
	# LowerBasicConversion(5036:3): %"class.std::vector"* ^14 -> %"struct.std::_Vector_base"* ^56
	movq -88(%rbp), %rax
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(5037:3): struct-type: %"struct.std::_Vector_base"* ^56 -> ^57, indices=0,0
	movq %rax, %rcx
	# LowerGetelementptr(5037:3): type of ^57 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# LowerBasicConversion(5038:3): %"struct.std::_Vector_base"* ^57 -> %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^58
	movq %rcx, %rax
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(5039:3): struct-type: %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^58 -> ^59, indices=0,1
	movq %rax, %rcx
	addq $8, %rcx
	# LowerGetelementptr(5039:3): type of ^59 is %"class.std::basic_string_view"**
	# LowerStore(5040:3).9: mov %"class.std::basic_string_view"* ^55, (^59)
	movq %rbx, (%rcx)
	movq -128(%rbp), %r15
	movq -176(%rbp), %r14
	movq -120(%rbp), %r13
	movq -136(%rbp), %r12
	movq -112(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt6vectorI6LsItemSaIS0_EE8max_sizeEv
.p2align 4, 0x90
_ZNKSt6vectorI6LsItemSaIS0_EE8max_sizeEv:
	.___ZNKSt6vectorI6LsItemSaIS0_EE8max_sizeEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(40 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(7160:3): size = 8, type = %"class.std::vector.5"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(7161:3).9: mov %"class.std::vector.5"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(7162:3).2: (^2) into %"class.std::vector.5"* ^3
	movq (%rax), %rbx
	# LowerBasicConversion(7163:3): %"class.std::vector.5"* ^3 -> %"struct.std::_Vector_base.6"* ^4
	movq %rbx, %rax
	# Clobber %rax
	movq %rax, -16(%rbp)
	# SetupCalls(7164:3): move argument %"struct.std::_Vector_base.6"* nonnull dereferenceable(24) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNKSt12_Vector_baseI6LsItemSaIS0_EE19_M_get_Tp_allocatorEv
	# SetupCalls(7164:3): move %"class.std::allocator.7"* result from %rax
	movq %rax, %rbx
	# Unclobber %rax
	movq -16(%rbp), %rax
	# SetupCalls(7165:3): move argument %"class.std::allocator.7"* nonnull dereferenceable(1) align 1 ^5
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt6vectorI6LsItemSaIS0_EE11_S_max_sizeERKS1_
	# SetupCalls(7165:3): move i64 result from %rax
	movq %rax, %rbx
	movq %rbx, %rax
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _Z4quitRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE
.p2align 4, 0x90
_Z4quitRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE:
	.___Z4quitRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(8 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	# LowerAlloca(2187:3): size = 8, type = %"class.std::vector"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(2188:3).9: mov %"class.std::vector"* %rdi, (^2)
	movq %rdi, (%rax)
	# SetupCalls(2189:3): move argument i32 0
	movq $0, %rdi
	callq exit@PLT

.section .text
.global _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EED2Ev
.p2align 4, 0x90
_ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EED2Ev:
	.___ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EED2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(120 + 0, 16)
	subq $128, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -80(%rbp)
	movq %r12, -72(%rbp)
	movq %r13, -96(%rbp)
	movq %r14, -104(%rbp)
	movq %r15, -64(%rbp)
	# LowerAlloca(1207:3): size = 8, type = %"class.std::basic_string_view"**, var = ^2
	# Fixing source-to-dest leaq -8(%rbp), -48(%rbp)
	leaq -8(%rbp), %r15
	movq %r15, -48(%rbp)
	# LowerAlloca(1208:3): size = 8, type = %"class.std::basic_string_view"**, var = ^3
	leaq -16(%rbp), %r12
	# LowerAlloca(1209:3): size = 8, type = %"class.std::allocator"**, var = ^4
	leaq -24(%rbp), %rbx
	# LowerAlloca(1210:3): size = 8, type = %"class.std::vector"**, var = ^5
	leaq -32(%rbp), %rcx
	# LowerStore(1211:3).9: mov %"class.std::vector"* %rdi, (^5)
	movq %rdi, (%rcx)
	# LowerLoad(1212:3).2: (^5) into %"class.std::vector"* ^6
	# Fixing source-to-dest movq (%rcx), -40(%rbp)
	movq (%rcx), %r15
	movq %r15, -40(%rbp)
	# LowerBasicConversion(1213:3): %"class.std::vector"* ^6 -> %"struct.std::_Vector_base"* ^7
	movq -40(%rbp), %rcx
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(1214:3): struct-type: %"struct.std::_Vector_base"* ^7 -> ^8, indices=0,0
	movq %rcx, %rax
	# LowerGetelementptr(1214:3): type of ^8 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# LowerBasicConversion(1215:3): %"struct.std::_Vector_base"* ^8 -> %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^9
	movq %rax, %rcx
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(1216:3): struct-type: %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^9 -> ^10, indices=0,0
	movq %rcx, %rax
	# LowerGetelementptr(1216:3): type of ^10 is %"class.std::basic_string_view"**
	# LowerLoad(1217:3).2: (^10) into %"class.std::basic_string_view"* ^11
	movq (%rax), %r13
	# LowerBasicConversion(1218:3): %"class.std::vector"* ^6 -> %"struct.std::_Vector_base"* ^12
	movq -40(%rbp), %rcx
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(1219:3): struct-type: %"struct.std::_Vector_base"* ^12 -> ^13, indices=0,0
	movq %rcx, %rax
	# LowerGetelementptr(1219:3): type of ^13 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# LowerBasicConversion(1220:3): %"struct.std::_Vector_base"* ^13 -> %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^14
	movq %rax, %rcx
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(1221:3): struct-type: %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^14 -> ^15, indices=0,1
	movq %rcx, %rax
	addq $8, %rax
	# LowerGetelementptr(1221:3): type of ^15 is %"class.std::basic_string_view"**
	# LowerLoad(1222:3).2: (^15) into %"class.std::basic_string_view"* ^16
	movq (%rax), %r14
	# LowerBasicConversion(1223:3): %"class.std::vector"* ^6 -> %"struct.std::_Vector_base"* ^17
	movq -40(%rbp), %rax
	# Clobber %rax
	movq %rax, -56(%rbp)
	# SetupCalls(1224:3): move argument %"struct.std::_Vector_base"* nonnull dereferenceable(24) align 8 ^17
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE19_M_get_Tp_allocatorEv
	# SetupCalls(1224:3): move %"class.std::allocator"* result from %rax
	movq %rax, %r15
	# Unclobber %rax
	movq -56(%rbp), %rax
	# LowerStore(1225:3).9: mov %"class.std::basic_string_view"* ^11, (^2)
	movq -48(%rbp), %rax
	movq %r13, (%rax)
	# LowerStore(1226:3).9: mov %"class.std::basic_string_view"* ^16, (^3)
	movq %r14, (%r12)
	# LowerStore(1227:3).9: mov %"class.std::allocator"* ^18, (^4)
	movq %r15, (%rbx)
	# LowerLoad(1228:3).2: (^2) into %"class.std::basic_string_view"* ^19
	movq -48(%rbp), %rax
	movq (%rax), %rbx
	# LowerLoad(1229:3).2: (^3) into %"class.std::basic_string_view"* ^20
	movq (%r12), %rax
	# Clobber %rax
	movq %rax, -56(%rbp)
	# SetupCalls(1230:3): move argument %"class.std::basic_string_view"* ^19
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(1230:3): move argument %"class.std::basic_string_view"* ^20
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZSt8_DestroyIPSt17basic_string_viewIcSt11char_traitsIcEEEvT_S5_
	# Unclobber %rax
	movq -56(%rbp), %rax
	# LowerBasicConversion(1231:3): %"class.std::vector"* ^6 -> %"struct.std::_Vector_base"* ^21
	movq -40(%rbp), %rax
	# Clobber %rax
	movq %rax, -56(%rbp)
	# SetupCalls(1232:3): move argument %"struct.std::_Vector_base"* nonnull dereferenceable(24) align 8 ^21
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EED2Ev
	# Unclobber %rax
	movq -56(%rbp), %rax
	movq -64(%rbp), %r15
	movq -104(%rbp), %r14
	movq -96(%rbp), %r13
	movq -72(%rbp), %r12
	movq -80(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt8functionIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEEC2IRS9_vEEOT_
.p2align 4, 0x90
_ZNSt8functionIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEEC2IRS9_vEEOT_:
	.___ZNSt8functionIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEEC2IRS9_vEEOT___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(88 + 0, 16)
	subq $96, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -40(%rbp)
	movq %r12, -56(%rbp)
	movq %r13, -48(%rbp)
	# LowerAlloca(4220:3): size = 8, type = %"class.std::function"**, var = ^3
	leaq -8(%rbp), %rax
	# LowerAlloca(4221:3): size = 8, type = i32 (%"class.std::vector"*) ***, var = ^4
	leaq -16(%rbp), %rbx
	# LowerStore(4222:3).9: mov %"class.std::function"* %rdi, (^3)
	movq %rdi, (%rax)
	# LowerStore(4223:3).9: mov i32 (%"class.std::vector"*) ** %rsi, (^4)
	movq %rsi, (%rbx)
	# LowerLoad(4224:3).2: (^3) into %"class.std::function"* ^5
	movq (%rax), %r13
	# LowerBasicConversion(4225:3): %"class.std::function"* ^5 -> %"struct.std::_Maybe_unary_or_binary_function"* ^6
	movq %r13, %rax
	# LowerBasicConversion(4226:3): %"class.std::function"* ^5 -> %"class.std::_Function_base"* ^7
	movq %r13, %r12
	# LowerBasicConversion(4227:3): %"class.std::_Function_base"* ^7 -> i8* ^8
	movq %r12, %rax
	# tt = Pointer, type = i8
	# LowerGetelementptr(4228:3): struct-type: i8* ^8 -> ^9, indices=0
	movq %rax, %rcx
	# LowerGetelementptr(4228:3): type of ^9 is i8*
	# Clobber %rcx
	movq %rcx, -24(%rbp)
	# SetupCalls(4229:3): move argument i8* align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(4229:3): move argument i32 0
	movq $0, %rsi
	# SetupCalls(4229:3): move argument i64 24
	movq $24, %rdx
	callq memset@PLT
	# Unclobber %rcx
	movq -24(%rbp), %rcx
	# SetupCalls(4230:3): move argument %"class.std::_Function_base"* nonnull dereferenceable(24) align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	callq _ZNSt14_Function_baseC2Ev
	# tt = Pointer, type = %"class.std::function"
	# LowerGetelementptr(4231:3): struct-type: %"class.std::function"* ^5 -> ^10, indices=0,1
	movq %r13, %rax
	addq $24, %rax
	# LowerGetelementptr(4231:3): type of ^10 is i32 (%"union.std::_Any_data"*, %"class.std::vector"*) ***
	# LowerStore(4232:3).3: mov $imm, (^10)
	movq $0, (%rax)
	# LowerLoad(4233:3).2: (^4) into i32 (%"class.std::vector"*) ** ^11
	movq (%rbx), %rax
	# Clobber %rax
	movq %rax, -32(%rbp)
	# SetupCalls(4234:3): move argument i32 (%"class.std::vector"*) ** ^11
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE21_M_not_empty_functionISA_EEbPT_
	# SetupCalls(4234:3): move i1 result from %rax
	movb %al, %r12b
	# Unclobber %rax
	movq -32(%rbp), %rax
	cmpb $0, %r12b
	jne .___ZNSt8functionIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEEC2IRS9_vEEOT___M99
	jmp .___ZNSt8functionIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEEC2IRS9_vEEOT___M151
	.___ZNSt8functionIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEEC2IRS9_vEEOT___M99:
	# LowerBasicConversion(4238:3): %"class.std::function"* ^5 -> %"class.std::_Function_base"* ^14
	movq %r13, %rax
	# tt = Pointer, type = %"class.std::_Function_base"
	# LowerGetelementptr(4239:3): struct-type: %"class.std::_Function_base"* ^14 -> ^15, indices=0,0
	movq %rax, %rcx
	# LowerGetelementptr(4239:3): type of ^15 is %"union.std::_Any_data"*
	# LowerLoad(4240:3).2: (^4) into i32 (%"class.std::vector"*) ** ^16
	movq (%rbx), %rax
	# Clobber %rcx
	movq %rcx, -24(%rbp)
	# Clobber %rax
	movq %rax, -32(%rbp)
	# SetupCalls(4241:3): move argument %"union.std::_Any_data"* nonnull dereferenceable(16) align 8 ^15
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(4241:3): move argument i32 (%"class.std::vector"*) ** nonnull ^16
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE15_M_init_functorIRSA_EEvRSt9_Any_dataOT_
	# Unclobber %rax
	movq -32(%rbp), %rax
	# Unclobber %rcx
	movq -24(%rbp), %rcx
	# tt = Pointer, type = %"class.std::function"
	# LowerGetelementptr(4242:3): struct-type: %"class.std::function"* ^5 -> ^17, indices=0,1
	movq %r13, %rbx
	addq $24, %rbx
	# LowerGetelementptr(4242:3): type of ^17 is i32 (%"union.std::_Any_data"*, %"class.std::vector"*) ***
	# LowerStore(4243:3).6: load global
	leaq _ZNSt17_Function_handlerIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEPS9_E9_M_invokeERKSt9_Any_dataS8_(%rip), %rax
	# LowerStore(4243:3).9: mov i32 (%"union.std::_Any_data"*, %"class.std::vector"*) ** ^21, (^17)
	movq %rax, (%rbx)
	# LowerBasicConversion(4244:3): %"class.std::function"* ^5 -> %"class.std::_Function_base"* ^18
	movq %r13, %rbx
	# tt = Pointer, type = %"class.std::_Function_base"
	# LowerGetelementptr(4245:3): struct-type: %"class.std::_Function_base"* ^18 -> ^19, indices=0,1
	movq %rbx, %rax
	addq $16, %rax
	# LowerGetelementptr(4245:3): type of ^19 is i1 (%"union.std::_Any_data"*, %"union.std::_Any_data"*, i32) ***
	# LowerStore(4246:3).6: load global
	leaq _ZNSt17_Function_handlerIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEPS9_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation(%rip), %rbx
	# LowerStore(4246:3).9: mov i1 (%"union.std::_Any_data"*, %"union.std::_Any_data"*, i32) ** ^22, (^19)
	movq %rbx, (%rax)
	.___ZNSt8functionIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEEC2IRS9_vEEOT___M151:
	movq -48(%rbp), %r13
	movq -56(%rbp), %r12
	movq -40(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10filesystem12status_knownENS_11file_statusE
.p2align 4, 0x90
_ZNSt10filesystem12status_knownENS_11file_statusE:
	.___ZNSt10filesystem12status_knownENS_11file_statusE__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(3164:3): size = 8, type = %"class.std::filesystem::file_status"*, var = ^2
	leaq -8(%rbp), %rax
	# LowerBasicConversion(3165:3): %"class.std::filesystem::file_status"* ^2 -> i64* ^3
	movq %rax, %rbx
	# LowerStore(3166:3).9: mov i64 %rdi, (^3)
	movq %rdi, (%rbx)
	# Clobber %rax
	movq %rax, -16(%rbp)
	# SetupCalls(3167:3): move argument %"class.std::filesystem::file_status"* nonnull dereferenceable(8) align 4 ^2
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNKSt10filesystem11file_status4typeEv
	# SetupCalls(3167:3): move i8 result from %rax
	movb %al, %bl
	# Unclobber %rax
	movq -16(%rbp), %rax
	# LowerIcmp(3168:3): i8 ^4 vs. intlike 0
	cmpb $0, %bl
	setne %al
	andq $1, %rax
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt8_DestroyIPSt17basic_string_viewIcSt11char_traitsIcEEEvT_S5_
.p2align 4, 0x90
_ZSt8_DestroyIPSt17basic_string_viewIcSt11char_traitsIcEEEvT_S5_:
	.___ZSt8_DestroyIPSt17basic_string_viewIcSt11char_traitsIcEEEvT_S5___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(40 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	# LowerAlloca(5393:3): size = 8, type = %"class.std::basic_string_view"**, var = ^3
	leaq -8(%rbp), %rbx
	# LowerAlloca(5394:3): size = 8, type = %"class.std::basic_string_view"**, var = ^4
	leaq -16(%rbp), %rax
	# LowerStore(5395:3).9: mov %"class.std::basic_string_view"* %rdi, (^3)
	movq %rdi, (%rbx)
	# LowerStore(5396:3).9: mov %"class.std::basic_string_view"* %rsi, (^4)
	movq %rsi, (%rax)
	# LowerLoad(5397:3).2: (^3) into %"class.std::basic_string_view"* ^5
	movq (%rbx), %rcx
	# LowerLoad(5398:3).2: (^4) into %"class.std::basic_string_view"* ^6
	movq (%rax), %rbx
	# Clobber %rcx
	movq %rcx, -24(%rbp)
	# SetupCalls(5399:3): move argument %"class.std::basic_string_view"* ^5
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(5399:3): move argument %"class.std::basic_string_view"* ^6
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZNSt12_Destroy_auxILb1EE9__destroyIPSt17basic_string_viewIcSt11char_traitsIcEEEEvT_S7_
	# Unclobber %rcx
	movq -24(%rbp), %rcx
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISA_EEEEEC2IRA6_KcRSF_Lb1EEEOT_OT0_
.p2align 4, 0x90
_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISA_EEEEEC2IRA6_KcRSF_Lb1EEEOT_OT0_:
	.___ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISA_EEEEEC2IRA6_KcRSF_Lb1EEEOT_OT0___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(128 + 0, 16)
	subq $128, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -80(%rbp)
	movq %r12, -88(%rbp)
	movq %r13, -96(%rbp)
	movq %r14, -104(%rbp)
	movq %r15, -112(%rbp)
	# LowerAlloca(2498:3): size = 8, type = %"class.std::__new_allocator.1"**, var = ^4
	leaq -8(%rbp), %rbx
	# LowerAlloca(2499:3): size = 8, type = %"class.std::allocator.0"**, var = ^5
	leaq -16(%rbp), %r12
	# LowerAlloca(2500:3): size = 8, type = %"class.std::allocator.0"**, var = ^6
	leaq -24(%rbp), %r8
	# LowerAlloca(2501:3): size = 8, type = %"struct.std::pair"**, var = ^7
	leaq -32(%rbp), %rcx
	# LowerAlloca(2502:3): size = 8, type = [6 x i8]**, var = ^8
	leaq -40(%rbp), %rax
	# LowerAlloca(2503:3): size = 8, type = i32 (%"class.std::vector"*) ***, var = ^9
	leaq -48(%rbp), %r13
	# LowerAlloca(2504:3): size = 1, type = %"class.std::allocator.0"*, var = ^10
	leaq -49(%rbp), %r14
	# LowerStore(2505:3).9: mov %"struct.std::pair"* %rdi, (^7)
	movq %rdi, (%rcx)
	# LowerStore(2506:3).9: mov [6 x i8]* %rsi, (^8)
	movq %rsi, (%rax)
	# LowerStore(2507:3).9: mov i32 (%"class.std::vector"*) ** %rdx, (^9)
	movq %rdx, (%r13)
	# LowerLoad(2508:3).2: (^7) into %"struct.std::pair"* ^11
	movq (%rcx), %r15
	# LowerBasicConversion(2509:3): %"struct.std::pair"* ^11 -> %"class.std::__pair_base"* ^12
	movq %r15, %rcx
	# tt = Pointer, type = %"struct.std::pair"
	# LowerGetelementptr(2510:3): struct-type: %"struct.std::pair"* ^11 -> ^13, indices=0,0
	movq %r15, %rcx
	# LowerGetelementptr(2510:3): type of ^13 is %"class.std::__cxx11::basic_string"*
	# LowerLoad(2511:3).2: (^8) into [6 x i8]* ^14
	movq (%rax), %rdx
	# tt = Pointer, type = [6 x i8]
	# LowerGetelementptr(2512:3): struct-type: [6 x i8]* ^14 -> ^15, indices=0,0
	movq %rdx, %rax
	# LowerGetelementptr(2512:3): type of ^15 is i8*
	# LowerStore(2513:3).9: mov %"class.std::allocator.0"* ^10, (^6)
	movq %r14, (%r8)
	# LowerLoad(2514:3).2: (^6) into %"class.std::allocator.0"* ^16
	movq (%r8), %rdx
	# LowerBasicConversion(2515:3): %"class.std::allocator.0"* ^16 -> %"class.std::__new_allocator.1"* ^17
	movq %rdx, %rsi
	# LowerStore(2516:3).9: mov %"class.std::__new_allocator.1"* ^17, (^4)
	movq %rsi, (%rbx)
	# LowerLoad(2517:3).2: (^4) into %"class.std::__new_allocator.1"* ^18
	movq (%rbx), %rdx
	# Clobber %rcx
	movq %rcx, -64(%rbp)
	# Clobber %rax
	movq %rax, -72(%rbp)
	# SetupCalls(2518:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^13
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(2518:3): move argument i8* ^15
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(2518:3): move argument %"class.std::allocator.0"* nonnull dereferenceable(1) align 1 ^10
	# Fixed movzx with identical source and destination widths
	movq %r14, %rdx
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_
	# Unclobber %rax
	movq -72(%rbp), %rax
	# Unclobber %rcx
	movq -64(%rbp), %rcx
	# LowerStore(2519:3).9: mov %"class.std::allocator.0"* ^10, (^5)
	movq %r14, (%r12)
	# LowerLoad(2520:3).2: (^5) into %"class.std::allocator.0"* ^19
	movq (%r12), %rbx
	# LowerBasicConversion(2521:3): %"class.std::allocator.0"* ^19 -> %"class.std::__new_allocator.1"* ^20
	movq %rbx, %rax
	# Clobber %rax
	movq %rax, -72(%rbp)
	# SetupCalls(2522:3): move argument %"class.std::__new_allocator.1"* nonnull dereferenceable(1) align 1 ^20
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt15__new_allocatorIcED2Ev
	# Unclobber %rax
	movq -72(%rbp), %rax
	# tt = Pointer, type = %"struct.std::pair"
	# LowerGetelementptr(2523:3): struct-type: %"struct.std::pair"* ^11 -> ^21, indices=0,1
	movq %r15, %rax
	addq $32, %rax
	# LowerGetelementptr(2523:3): type of ^21 is %"class.std::function"*
	# LowerLoad(2524:3).2: (^9) into i32 (%"class.std::vector"*) ** ^22
	movq (%r13), %rbx
	# Clobber %rax
	movq %rax, -72(%rbp)
	# SetupCalls(2525:3): move argument %"class.std::function"* nonnull dereferenceable(32) align 8 ^21
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(2525:3): move argument i32 (%"class.std::vector"*) ** nonnull ^22
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZNSt8functionIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEEC2IRS9_vEEOT_
	# Unclobber %rax
	movq -72(%rbp), %rax
	movq -112(%rbp), %r15
	movq -104(%rbp), %r14
	movq -96(%rbp), %r13
	movq -88(%rbp), %r12
	movq -80(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE4sizeEv
.p2align 4, 0x90
_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE4sizeEv:
	.___ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE4sizeEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(40 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(10008:3): size = 8, type = %"class.std::_Rb_tree"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(10009:3).9: mov %"class.std::_Rb_tree"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(10010:3).2: (^2) into %"class.std::_Rb_tree"* ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::_Rb_tree"
	# LowerGetelementptr(10011:3): struct-type: %"class.std::_Rb_tree"* ^3 -> ^4, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(10011:3): type of ^4 is %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Rb_tree_impl"*
	# LowerBasicConversion(10012:3): %"class.std::_Rb_tree"* ^4 -> i8* ^5
	movq %rax, %rbx
	# tt = Pointer, type = i8
	# LowerGetelementptr(10013:3): struct-type: i8* ^5 -> ^6, indices=8
	movq %rbx, %rax
	addq $8, %rax
	# LowerGetelementptr(10013:3): type of ^6 is i8*
	# LowerBasicConversion(10014:3): i8* ^6 -> %"struct.std::_Rb_tree_header"* ^7
	movq %rax, %rbx
	# tt = Pointer, type = %"struct.std::_Rb_tree_header"
	# LowerGetelementptr(10015:3): struct-type: %"struct.std::_Rb_tree_header"* ^7 -> ^8, indices=0,1
	movq %rbx, %rax
	addq $32, %rax
	# LowerGetelementptr(10015:3): type of ^8 is i64*
	# LowerLoad(10016:3).2: (^8) into i64 ^9
	movq (%rax), %rbx
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm
.p2align 4, 0x90
_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm:
	.___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(416 + 0, 16)
	subq $416, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -136(%rbp)
	movq %r12, -184(%rbp)
	movq %r13, -176(%rbp)
	movq %r14, -168(%rbp)
	movq %r15, -128(%rbp)
	# LowerAlloca(2860:3): size = 8, type = i64*, var = ^5
	# Fixing source-to-dest leaq -8(%rbp), -80(%rbp)
	leaq -8(%rbp), %r15
	movq %r15, -80(%rbp)
	# LowerAlloca(2861:3): size = 8, type = %"class.std::basic_string_view"**, var = ^6
	leaq -16(%rbp), %rbx
	# LowerAlloca(2862:3): size = 8, type = i8**, var = ^7
	# Fixing source-to-dest leaq -24(%rbp), -88(%rbp)
	leaq -24(%rbp), %r15
	movq %r15, -88(%rbp)
	# LowerAlloca(2863:3): size = 8, type = i64*, var = ^8
	leaq -32(%rbp), %rax
	# LowerAlloca(2864:3): size = 8, type = i64*, var = ^9
	# Fixing source-to-dest leaq -40(%rbp), -96(%rbp)
	leaq -40(%rbp), %r15
	movq %r15, -96(%rbp)
	# LowerAlloca(2865:3): size = 1, type = i8*, var = ^10
	# Fixing source-to-dest leaq -41(%rbp), -104(%rbp)
	leaq -41(%rbp), %r15
	movq %r15, -104(%rbp)
	# LowerAlloca(2866:3): size = 8, type = i8**, var = ^11
	leaq -56(%rbp), %r14
	# LowerAlloca(2867:3): size = 8, type = i8**, var = ^12
	leaq -64(%rbp), %r13
	# LowerAlloca(2868:3): size = 8, type = i64*, var = ^13
	leaq -72(%rbp), %r12
	# LowerStore(2869:3).9: mov %"class.std::basic_string_view"* %rdi, (^6)
	movq %rdi, (%rbx)
	# LowerStore(2870:3).9: mov i8* %rsi, (^7)
	movq -88(%rbp), %rdi
	movq %rsi, (%rdi)
	# LowerStore(2871:3).9: mov i64 %rdx, (^8)
	movq %rdx, (%rax)
	# LowerStore(2872:3).9: mov i64 %rcx, (^9)
	movq -96(%rbp), %rdx
	movq %rcx, (%rdx)
	# LowerLoad(2873:3).2: (^6) into %"class.std::basic_string_view"* ^14
	movq (%rbx), %r15
	# LowerLoad(2874:3).2: (^9) into i64 ^15
	movq -96(%rbp), %rbx
	movq (%rbx), %rcx
	# LowerIcmp(2875:3): i64 ^15 vs. intlike 0
	cmpq $0, %rcx
	sete %bl
	andq $1, %rbx
	cmpb $0, %bl
	jne .___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm__M35
	jmp .___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm__M59
	.___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm__M35:
	# LowerLoad(2879:3).2: (^8) into i64 ^18
	movq (%rax), %rdx
	# tt = Pointer, type = %"class.std::basic_string_view"
	# LowerGetelementptr(2880:3): struct-type: %"class.std::basic_string_view"* ^14 -> ^19, indices=0,0
	movq %r15, %rcx
	# LowerGetelementptr(2880:3): type of ^19 is i64*
	# LowerLoad(2881:3).2: (^19) into i64 ^20
	movq (%rcx), %rbx
	# LowerIcmp(2882:3): i64 ^18 vs. operand i64 ^20
	cmpq %rbx, %rdx
	setbe %bl
	andq $1, %rbx
	cmpb $0, %bl
	jne .___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm__M48
	jmp .___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm__M53
	.___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm__M48:
	# LowerLoad(2886:3).2: (^8) into i64 ^23
	movq (%rax), %rbx
	# MovePhi: ^23 -> ^26
	movq %rbx, %r9
	jmp .___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm__M56
	.___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm__M53:
	# MovePhi: intlike -> ^26
	movq $-1, %r9
	.___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm__M56:
	# LowerStore(2894:3).9: mov i64 ^26, (^5)
	movq -80(%rbp), %rax
	movq %r9, (%rax)
	jmp .___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm__M275
	.___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm__M59:
	# LowerLoad(2898:3).2: (^8) into i64 ^28
	movq (%rax), %rcx
	# tt = Pointer, type = %"class.std::basic_string_view"
	# LowerGetelementptr(2899:3): struct-type: %"class.std::basic_string_view"* ^14 -> ^29, indices=0,0
	movq %r15, %rdx
	# LowerGetelementptr(2899:3): type of ^29 is i64*
	# LowerLoad(2900:3).2: (^29) into i64 ^30
	movq (%rdx), %rbx
	# LowerIcmp(2901:3): i64 ^28 vs. operand i64 ^30
	cmpq %rbx, %rcx
	setae %bl
	andq $1, %rbx
	cmpb $0, %bl
	jne .___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm__M72
	jmp .___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm__M75
	.___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm__M72:
	# LowerStore(2905:3).3: mov $imm, (^5)
	movq -80(%rbp), %rax
	movq $-1, (%rax)
	jmp .___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm__M275
	.___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm__M75:
	# LowerLoad(2909:3).2: (^7) into i8* ^34
	movq -88(%rbp), %rbx
	movq (%rbx), %rcx
	# tt = Pointer, type = i8
	# LowerGetelementptr(2910:3): struct-type: i8* ^34 -> ^35, indices=0
	movq %rcx, %rbx
	# LowerGetelementptr(2910:3): type of ^35 is i8*
	# LowerLoad(2911:3).2: (^35) into i8 ^36
	movb (%rbx), %cl
	# LowerStore(2912:3).9: mov i8 ^36, (^10)
	movq -104(%rbp), %rbx
	movb %cl, (%rbx)
	# tt = Pointer, type = %"class.std::basic_string_view"
	# LowerGetelementptr(2913:3): struct-type: %"class.std::basic_string_view"* ^14 -> ^37, indices=0,1
	movq %r15, %rbx
	addq $8, %rbx
	# LowerGetelementptr(2913:3): type of ^37 is i8**
	# LowerLoad(2914:3).2: (^37) into i8* ^38
	movq (%rbx), %rcx
	# LowerLoad(2915:3).2: (^8) into i64 ^39
	movq (%rax), %rbx
	# tt = Pointer, type = i8
	# LowerGetelementptr(2916:3): pointer-type -> ^40
	movq %rbx, %rdx
	addq %rcx, %rdx
	# LowerStore(2917:3).9: mov i8* ^40, (^11)
	movq %rdx, (%r14)
	# tt = Pointer, type = %"class.std::basic_string_view"
	# LowerGetelementptr(2918:3): struct-type: %"class.std::basic_string_view"* ^14 -> ^41, indices=0,1
	movq %r15, %rbx
	addq $8, %rbx
	# LowerGetelementptr(2918:3): type of ^41 is i8**
	# LowerLoad(2919:3).2: (^41) into i8* ^42
	movq (%rbx), %rcx
	# tt = Pointer, type = %"class.std::basic_string_view"
	# LowerGetelementptr(2920:3): struct-type: %"class.std::basic_string_view"* ^14 -> ^43, indices=0,0
	movq %r15, %rbx
	# LowerGetelementptr(2920:3): type of ^43 is i64*
	# LowerLoad(2921:3).2: (^43) into i64 ^44
	movq (%rbx), %rdx
	# tt = Pointer, type = i8
	# LowerGetelementptr(2922:3): pointer-type -> ^45
	movq %rdx, %rbx
	addq %rcx, %rbx
	# LowerStore(2923:3).9: mov i8* ^45, (^12)
	movq %rbx, (%r13)
	# tt = Pointer, type = %"class.std::basic_string_view"
	# LowerGetelementptr(2924:3): struct-type: %"class.std::basic_string_view"* ^14 -> ^46, indices=0,0
	movq %r15, %rbx
	# LowerGetelementptr(2924:3): type of ^46 is i64*
	# LowerLoad(2925:3).2: (^46) into i64 ^47
	movq (%rbx), %rcx
	# LowerLoad(2926:3).2: (^8) into i64 ^48
	movq (%rax), %rbx
	# LowerMath(2927:3): ^47, ^48 into i64 ^49
	movq %rcx, %rax
	subq %rbx, %rax
	# LowerStore(2928:3).9: mov i64 ^49, (^13)
	movq %rax, (%r12)
	.___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm__M134:
	# LowerLoad(2932:3).2: (^13) into i64 ^51
	movq (%r12), %rbx
	# LowerLoad(2933:3).2: (^9) into i64 ^52
	movq -96(%rbp), %rax
	movq (%rax), %rcx
	# LowerIcmp(2934:3): i64 ^51 vs. operand i64 ^52
	cmpq %rcx, %rbx
	setae %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm__M143
	jmp .___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm__M272
	.___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm__M143:
	# LowerLoad(2938:3).2: (^11) into i8* ^55
	movq (%r14), %rbx
	# LowerLoad(2939:3).2: (^13) into i64 ^56
	movq (%r12), %rax
	# LowerLoad(2940:3).2: (^9) into i64 ^57
	movq -96(%rbp), %rdx
	movq (%rdx), %rcx
	# LowerMath(2941:3): ^56, ^57 into i64 ^58
	movq %rax, %rdx
	subq %rcx, %rdx
	# LowerMath(2942:3): ^58, 1 into i64 ^59
	movq %rdx, %rax
	addq $1, %rax
	# Clobber %rax
	movq %rax, -112(%rbp)
	# SetupCalls(2943:3): move argument i8* ^55
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(2943:3): move argument i64 ^59
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(2943:3): move argument i8* nonnull dereferenceable(1) align 1 ^10
	# Fixed movzx with identical source and destination widths
	movq -104(%rbp), %rdx
	callq _ZNSt11char_traitsIcE4findEPKcmRS1_
	# SetupCalls(2943:3): move i8* result from %rax
	movq %rax, %rbx
	# Unclobber %rax
	movq -112(%rbp), %rax
	# LowerStore(2944:3).9: mov i8* ^60, (^11)
	movq %rbx, (%r14)
	# LowerLoad(2945:3).2: (^11) into i8* ^61
	movq (%r14), %rax
	# LowerIcmp(2946:3): i8* ^61 vs. intlike 0
	cmpq $0, %rax
	setne %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm__M194
	.___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm__M191:
	# LowerStore(2950:3).3: mov $imm, (^5)
	movq -80(%rbp), %rax
	movq $-1, (%rax)
	jmp .___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm__M275
	.___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm__M194:
	# LowerLoad(2954:3).2: (^11) into i8* ^65
	movq (%r14), %rax
	# LowerLoad(2955:3).2: (^7) into i8* ^66
	movq -88(%rbp), %rbx
	movq (%rbx), %rcx
	# LowerLoad(2956:3).2: (^9) into i64 ^67
	movq -96(%rbp), %rdx
	movq (%rdx), %rbx
	# Clobber %rcx
	movq %rcx, -120(%rbp)
	# Clobber %rax
	movq %rax, -112(%rbp)
	# SetupCalls(2957:3): move argument i8* ^65
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(2957:3): move argument i8* ^66
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(2957:3): move argument i64 ^67
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdx
	callq _ZNSt11char_traitsIcE7compareEPKcS2_m
	# SetupCalls(2957:3): move i32 result from %rax
	movl %eax, %ebx
	# Unclobber %rax
	movq -112(%rbp), %rax
	# Unclobber %rcx
	movq -120(%rbp), %rcx
	# LowerIcmp(2958:3): i32 ^68 vs. intlike 0
	cmpl $0, %ebx
	sete %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm__M232
	jmp .___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm__M251
	.___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm__M232:
	# LowerLoad(2962:3).2: (^11) into i8* ^71
	movq (%r14), %rax
	# tt = Pointer, type = %"class.std::basic_string_view"
	# LowerGetelementptr(2963:3): struct-type: %"class.std::basic_string_view"* ^14 -> ^72, indices=0,1
	movq %r15, %rbx
	addq $8, %rbx
	# LowerGetelementptr(2963:3): type of ^72 is i8**
	# LowerLoad(2964:3).2: (^72) into i8* ^73
	movq (%rbx), %rcx
	# LowerBasicConversion(2965:3): i8* ^71 -> i64 ^74
	movq %rax, %rbx
	# LowerBasicConversion(2966:3): i8* ^73 -> i64 ^75
	movq %rcx, %rax
	# LowerMath(2967:3): ^74, ^75 into i64 ^76
	movq %rbx, %rcx
	subq %rax, %rcx
	# LowerStore(2968:3).9: mov i64 ^76, (^5)
	movq -80(%rbp), %rax
	movq %rcx, (%rax)
	jmp .___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm__M275
	.___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm__M251:
	# LowerLoad(2972:3).2: (^12) into i8* ^78
	movq (%r13), %rax
	# LowerLoad(2973:3).2: (^11) into i8* ^79
	movq (%r14), %rbx
	# tt = Pointer, type = i8
	# LowerGetelementptr(2974:3): struct-type: i8* ^79 -> ^80, indices=1
	movq %rbx, %rcx
	addq $1, %rcx
	# LowerGetelementptr(2974:3): type of ^80 is i8*
	# LowerStore(2975:3).9: mov i8* ^80, (^11)
	movq %rcx, (%r14)
	# LowerBasicConversion(2976:3): i8* ^78 -> i64 ^81
	movq %rax, %rbx
	# LowerBasicConversion(2977:3): i8* ^80 -> i64 ^82
	movq %rcx, %rax
	# LowerMath(2978:3): ^81, ^82 into i64 ^83
	movq %rbx, %rcx
	subq %rax, %rcx
	# LowerStore(2979:3).9: mov i64 ^83, (^13)
	movq %rcx, (%r12)
	jmp .___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm__M134
	.___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm__M272:
	# LowerStore(2983:3).3: mov $imm, (^5)
	movq -80(%rbp), %rax
	movq $-1, (%rax)
	.___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm__M275:
	# LowerLoad(2987:3).2: (^5) into i64 ^86
	movq -80(%rbp), %rax
	movq (%rax), %rbx
	movq %rbx, %rax
	movq -128(%rbp), %r15
	movq -168(%rbp), %r14
	movq -176(%rbp), %r13
	movq -184(%rbp), %r12
	movq -136(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE5frontEv
.p2align 4, 0x90
_ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE5frontEv:
	.___ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE5frontEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(56 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	movq %r12, -40(%rbp)
	# LowerAlloca(2650:3): size = 8, type = %"class.std::vector"**, var = ^2
	leaq -8(%rbp), %rbx
	# LowerAlloca(2651:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator.19"*, var = ^3
	leaq -16(%rbp), %r12
	# LowerStore(2652:3).9: mov %"class.std::vector"* %rdi, (^2)
	movq %rdi, (%rbx)
	# LowerLoad(2653:3).2: (^2) into %"class.std::vector"* ^4
	movq (%rbx), %rax
	# Clobber %rax
	movq %rax, -24(%rbp)
	# SetupCalls(2654:3): move argument %"class.std::vector"* nonnull dereferenceable(24) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE5beginEv
	# SetupCalls(2654:3): move %"class.std::basic_string_view"* result from %rax
	movq %rax, %rbx
	# Unclobber %rax
	movq -24(%rbp), %rax
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator.19"
	# LowerGetelementptr(2655:3): struct-type: %"class.__gnu_cxx::__normal_iterator.19"* ^3 -> ^6, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(2655:3): type of ^6 is %"class.std::basic_string_view"**
	# LowerStore(2656:3).9: mov %"class.std::basic_string_view"* ^5, (^6)
	movq %rbx, (%rax)
	# SetupCalls(2657:3): move argument %"class.__gnu_cxx::__normal_iterator.19"* nonnull dereferenceable(8) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIPSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEEdeEv
	# SetupCalls(2657:3): move %"class.std::basic_string_view"* result from %rax
	movq %rax, %rbx
	movq %rbx, %rax
	movq -40(%rbp), %r12
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global main
.p2align 4, 0x90
main:
	.__main__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(1400 + 0, 16)
	subq $1408, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -920(%rbp)
	movq %r12, -880(%rbp)
	movq %r13, -944(%rbp)
	movq %r14, -1064(%rbp)
	movq %r15, -888(%rbp)
	# LowerAlloca(2206:3): size = 8, type = %"class.std::__new_allocator.15"**, var = ^1
	leaq -8(%rbp), %r12
	# LowerAlloca(2207:3): size = 8, type = %"class.std::__new_allocator.1"**, var = ^2
	# Fixing source-to-dest leaq -16(%rbp), -704(%rbp)
	leaq -16(%rbp), %r15
	movq %r15, -704(%rbp)
	# LowerAlloca(2208:3): size = 8, type = %"class.std::allocator.0"**, var = ^3
	# Fixing source-to-dest leaq -24(%rbp), -712(%rbp)
	leaq -24(%rbp), %r15
	movq %r15, -712(%rbp)
	# LowerAlloca(2209:3): size = 8, type = %"class.std::allocator.0"**, var = ^4
	# Fixing source-to-dest leaq -32(%rbp), -720(%rbp)
	leaq -32(%rbp), %r15
	movq %r15, -720(%rbp)
	# LowerAlloca(2210:3): size = 8, type = %"class.std::allocator.14"**, var = ^5
	# Fixing source-to-dest leaq -40(%rbp), -832(%rbp)
	leaq -40(%rbp), %r15
	movq %r15, -832(%rbp)
	# LowerAlloca(2211:3): size = 8, type = %"class.std::allocator.14"**, var = ^6
	leaq -48(%rbp), %rbx
	# LowerAlloca(2212:3): size = 4, type = i32*, var = ^7
	# Fixing source-to-dest leaq -52(%rbp), -688(%rbp)
	leaq -52(%rbp), %r15
	movq %r15, -688(%rbp)
	# LowerAlloca(2213:3): size = 48, type = %"class.std::map"*, var = ^8
	# Fixing source-to-dest leaq -104(%rbp), -696(%rbp)
	leaq -104(%rbp), %r15
	movq %r15, -696(%rbp)
	# LowerAlloca(2214:3): size = 16, type = %"class.std::initializer_list.13"*, var = ^9
	leaq -120(%rbp), %r13
	# LowerAlloca(2215:3): size = 384, type = [6 x %"struct.std::pair"]*, var = ^10
	# Fixing source-to-dest leaq -504(%rbp), -824(%rbp)
	leaq -504(%rbp), %r15
	movq %r15, -824(%rbp)
	# LowerAlloca(2216:3): size = 1, type = %"struct.std::less"*, var = ^11
	# Fixing source-to-dest leaq -505(%rbp), -848(%rbp)
	leaq -505(%rbp), %r15
	movq %r15, -848(%rbp)
	# LowerAlloca(2217:3): size = 1, type = %"class.std::allocator.14"*, var = ^12
	# Fixing source-to-dest leaq -506(%rbp), -840(%rbp)
	leaq -506(%rbp), %r15
	movq %r15, -840(%rbp)
	# LowerAlloca(2218:3): size = 32, type = %"class.std::__cxx11::basic_string"*, var = ^13
	# Fixing source-to-dest leaq -544(%rbp), -728(%rbp)
	leaq -544(%rbp), %r15
	movq %r15, -728(%rbp)
	# LowerAlloca(2219:3): size = 24, type = %"class.std::vector"*, var = ^14
	# Fixing source-to-dest leaq -568(%rbp), -736(%rbp)
	leaq -568(%rbp), %r15
	movq %r15, -736(%rbp)
	# LowerAlloca(2220:3): size = 16, type = %"class.std::basic_string_view"*, var = ^15
	# Fixing source-to-dest leaq -584(%rbp), -744(%rbp)
	leaq -584(%rbp), %r15
	movq %r15, -744(%rbp)
	# LowerAlloca(2221:3): size = 16, type = %"class.std::basic_string_view"*, var = ^16
	# Fixing source-to-dest leaq -600(%rbp), -752(%rbp)
	leaq -600(%rbp), %r15
	movq %r15, -752(%rbp)
	# LowerAlloca(2222:3): size = 4, type = i32*, var = ^17
	# Fixing source-to-dest leaq -604(%rbp), -760(%rbp)
	leaq -604(%rbp), %r15
	movq %r15, -760(%rbp)
	# LowerAlloca(2223:3): size = 8, type = %"struct.std::_Rb_tree_iterator"*, var = ^18
	# Fixing source-to-dest leaq -616(%rbp), -768(%rbp)
	leaq -616(%rbp), %r15
	movq %r15, -768(%rbp)
	# LowerAlloca(2224:3): size = 32, type = %"class.std::__cxx11::basic_string"*, var = ^19
	# Fixing source-to-dest leaq -648(%rbp), -776(%rbp)
	leaq -648(%rbp), %r15
	movq %r15, -776(%rbp)
	# LowerAlloca(2225:3): size = 1, type = %"class.std::allocator.0"*, var = ^20
	# Fixing source-to-dest leaq -649(%rbp), -784(%rbp)
	leaq -649(%rbp), %r15
	movq %r15, -784(%rbp)
	# LowerAlloca(2226:3): size = 1, type = i8*, var = ^21
	# Fixing source-to-dest leaq -650(%rbp), -792(%rbp)
	leaq -650(%rbp), %r15
	movq %r15, -792(%rbp)
	# LowerAlloca(2227:3): size = 8, type = %"struct.std::_Rb_tree_iterator"*, var = ^22
	# Fixing source-to-dest leaq -664(%rbp), -800(%rbp)
	leaq -664(%rbp), %r15
	movq %r15, -800(%rbp)
	# LowerAlloca(2228:3): size = 16, type = %"class.std::basic_string_view"*, var = ^23
	# Fixing source-to-dest leaq -680(%rbp), -808(%rbp)
	leaq -680(%rbp), %r15
	movq %r15, -808(%rbp)
	# LowerStore(2229:3).3: mov $imm, (^7)
	movq -688(%rbp), %rax
	movl $0, (%rax)
	# tt = Pointer, type = [6 x %"struct.std::pair"]
	# LowerGetelementptr(2230:3): struct-type: [6 x %"struct.std::pair"]* ^10 -> ^24, indices=0,0
	movq -824(%rbp), %r14
	# LowerGetelementptr(2230:3): type of ^24 is %"struct.std::pair"*
	# SetupCalls(2231:3): move argument %"struct.std::pair"* nonnull dereferenceable(64) align 8 ^24
	# Fixed movzx with identical source and destination widths
	movq %r14, %rdi
	# SetupCalls(2231:3): move argument [3 x i8]* nonnull dereferenceable(3) align 1 @.str.11
	leaq .str.11(%rip), %rsi
	# SetupCalls(2231:3): move argument i32 (%"class.std::vector"*) ** nonnull @_Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE
	leaq _Z2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE(%rip), %rdx
	callq _ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISA_EEEEEC2IRA3_KcRSF_Lb1EEEOT_OT0_
	# tt = Pointer, type = %"struct.std::pair"
	# LowerGetelementptr(2232:3): struct-type: %"struct.std::pair"* ^24 -> ^25, indices=1
	movq %r14, %r15
	addq $64, %r15
	# LowerGetelementptr(2232:3): type of ^25 is %"struct.std::pair"*
	# SetupCalls(2233:3): move argument %"struct.std::pair"* nonnull dereferenceable(64) align 8 ^25
	# Fixed movzx with identical source and destination widths
	movq %r15, %rdi
	# SetupCalls(2233:3): move argument [4 x i8]* nonnull dereferenceable(4) align 1 @.str.12
	leaq .str.12(%rip), %rsi
	# SetupCalls(2233:3): move argument i32 (%"class.std::vector"*) ** nonnull @_Z3pwdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE
	leaq _Z3pwdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE(%rip), %rdx
	callq _ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISA_EEEEEC2IRA4_KcRSF_Lb1EEEOT_OT0_
	# tt = Pointer, type = %"struct.std::pair"
	# LowerGetelementptr(2234:3): struct-type: %"struct.std::pair"* ^25 -> ^26, indices=1
	movq %r15, %r14
	addq $64, %r14
	# LowerGetelementptr(2234:3): type of ^26 is %"struct.std::pair"*
	# SetupCalls(2235:3): move argument %"struct.std::pair"* nonnull dereferenceable(64) align 8 ^26
	# Fixed movzx with identical source and destination widths
	movq %r14, %rdi
	# SetupCalls(2235:3): move argument [3 x i8]* nonnull dereferenceable(3) align 1 @.str.13
	leaq .str.13(%rip), %rsi
	# SetupCalls(2235:3): move argument i32 (%"class.std::vector"*) ** nonnull @_Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE
	leaq _Z2cdRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE(%rip), %rdx
	callq _ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISA_EEEEEC2IRA3_KcRSF_Lb1EEEOT_OT0_
	# tt = Pointer, type = %"struct.std::pair"
	# LowerGetelementptr(2236:3): struct-type: %"struct.std::pair"* ^26 -> ^27, indices=1
	movq %r14, %r15
	addq $64, %r15
	# LowerGetelementptr(2236:3): type of ^27 is %"struct.std::pair"*
	# SetupCalls(2237:3): move argument %"struct.std::pair"* nonnull dereferenceable(64) align 8 ^27
	# Fixed movzx with identical source and destination widths
	movq %r15, %rdi
	# SetupCalls(2237:3): move argument [5 x i8]* nonnull dereferenceable(5) align 1 @.str.14
	leaq .str.14(%rip), %rsi
	# SetupCalls(2237:3): move argument i32 (%"class.std::vector"*) ** nonnull @_Z4quitRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE
	leaq _Z4quitRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE(%rip), %rdx
	callq _ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISA_EEEEEC2IRA5_KcRSF_Lb1EEEOT_OT0_
	# tt = Pointer, type = %"struct.std::pair"
	# LowerGetelementptr(2238:3): struct-type: %"struct.std::pair"* ^27 -> ^28, indices=1
	movq %r15, %r14
	addq $64, %r14
	# LowerGetelementptr(2238:3): type of ^28 is %"struct.std::pair"*
	# SetupCalls(2239:3): move argument %"struct.std::pair"* nonnull dereferenceable(64) align 8 ^28
	# Fixed movzx with identical source and destination widths
	movq %r14, %rdi
	# SetupCalls(2239:3): move argument [5 x i8]* nonnull dereferenceable(5) align 1 @.str.15
	leaq .str.15(%rip), %rsi
	# SetupCalls(2239:3): move argument i32 (%"class.std::vector"*) ** nonnull @_Z4quitRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE
	leaq _Z4quitRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE(%rip), %rdx
	callq _ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISA_EEEEEC2IRA5_KcRSF_Lb1EEEOT_OT0_
	# tt = Pointer, type = %"struct.std::pair"
	# LowerGetelementptr(2240:3): struct-type: %"struct.std::pair"* ^28 -> ^29, indices=1
	movq %r14, %rax
	addq $64, %rax
	# LowerGetelementptr(2240:3): type of ^29 is %"struct.std::pair"*
	# Clobber %rax
	movq %rax, -856(%rbp)
	# SetupCalls(2241:3): move argument %"struct.std::pair"* nonnull dereferenceable(64) align 8 ^29
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(2241:3): move argument [6 x i8]* nonnull dereferenceable(6) align 1 @.str.16
	leaq .str.16(%rip), %rsi
	# SetupCalls(2241:3): move argument i32 (%"class.std::vector"*) ** nonnull @_Z5clearRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE
	leaq _Z5clearRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE(%rip), %rdx
	callq _ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISA_EEEEEC2IRA6_KcRSF_Lb1EEEOT_OT0_
	# Unclobber %rax
	movq -856(%rbp), %rax
	# tt = Pointer, type = %"class.std::initializer_list.13"
	# LowerGetelementptr(2242:3): struct-type: %"class.std::initializer_list.13"* ^9 -> ^30, indices=0,0
	movq %r13, %rax
	# LowerGetelementptr(2242:3): type of ^30 is %"struct.std::pair"**
	# tt = Pointer, type = [6 x %"struct.std::pair"]
	# LowerGetelementptr(2243:3): struct-type: [6 x %"struct.std::pair"]* ^10 -> ^31, indices=0,0
	movq -824(%rbp), %rcx
	# LowerGetelementptr(2243:3): type of ^31 is %"struct.std::pair"*
	# LowerStore(2244:3).9: mov [6 x %"struct.std::pair"]* ^31, (^30)
	movq %rcx, (%rax)
	# tt = Pointer, type = %"class.std::initializer_list.13"
	# LowerGetelementptr(2245:3): struct-type: %"class.std::initializer_list.13"* ^9 -> ^32, indices=0,1
	movq %r13, %rax
	addq $8, %rax
	# LowerGetelementptr(2245:3): type of ^32 is i64*
	# LowerStore(2246:3).3: mov $imm, (^32)
	movq $6, (%rax)
	# LowerStore(2247:3).9: mov %"class.std::allocator.14"* ^12, (^6)
	# Fixing source-to-dest movq -840(%rbp), (%rbx)
	movq -840(%rbp), %r15
	movq %r15, (%rbx)
	# LowerLoad(2248:3).2: (^6) into %"class.std::allocator.14"* ^33
	movq (%rbx), %rax
	# LowerBasicConversion(2249:3): %"class.std::allocator.14"* ^33 -> %"class.std::__new_allocator.15"* ^34
	movq %rax, %rbx
	# LowerStore(2250:3).9: mov %"class.std::__new_allocator.15"* ^34, (^1)
	movq %rbx, (%r12)
	# LowerLoad(2251:3).2: (^1) into %"class.std::__new_allocator.15"* ^35
	movq (%r12), %rax
	# LowerBasicConversion(2252:3): %"class.std::initializer_list.13"* ^9 -> {%"struct.std::pair"*, i64}* ^36
	movq %r13, %rax
	# tt = Pointer, type = {%"struct.std::pair"*, i64}
	# LowerGetelementptr(2253:3): struct-type: {%"struct.std::pair"*, i64}* ^36 -> ^37, indices=0,0
	movq %rax, %rbx
	# LowerGetelementptr(2253:3): type of ^37 is %"struct.std::pair"**
	# LowerLoad(2254:3).2: (^37) into %"struct.std::pair"* ^38
	movq (%rbx), %rcx
	# tt = Pointer, type = {%"struct.std::pair"*, i64}
	# LowerGetelementptr(2255:3): struct-type: {%"struct.std::pair"*, i64}* ^36 -> ^39, indices=0,1
	movq %rax, %rbx
	addq $8, %rbx
	# LowerGetelementptr(2255:3): type of ^39 is i64*
	# LowerLoad(2256:3).2: (^39) into i64 ^40
	movq (%rbx), %rax
	# Clobber %rcx
	movq %rcx, -864(%rbp)
	# Clobber %rax
	movq %rax, -856(%rbp)
	# SetupCalls(2257:3): move argument %"class.std::map"* nonnull dereferenceable(48) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq -696(%rbp), %rdi
	# SetupCalls(2257:3): move argument %"struct.std::pair"* ^38
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(2257:3): move argument i64 ^40
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdx
	# SetupCalls(2257:3): move argument %"struct.std::less"* nonnull dereferenceable(1) align 1 ^11
	# Fixed movzx with identical source and destination widths
	movq -848(%rbp), %rcx
	# SetupCalls(2257:3): move argument %"class.std::allocator.14"* nonnull dereferenceable(1) align 1 ^12
	# Fixed movzx with identical source and destination widths
	movq -840(%rbp), %r8
	callq _ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaIS9_EEEESt4lessIS5_ESaISt4pairIKS5_SF_EEEC2ESt16initializer_listISK_ERKSH_RKSL_
	# Unclobber %rax
	movq -856(%rbp), %rax
	# Unclobber %rcx
	movq -864(%rbp), %rcx
	# LowerStore(2258:3).9: mov %"class.std::allocator.14"* ^12, (^5)
	movq -832(%rbp), %rax
	# Fixing source-to-dest movq -840(%rbp), (%rax)
	movq -840(%rbp), %r15
	movq %r15, (%rax)
	# LowerLoad(2259:3).2: (^5) into %"class.std::allocator.14"* ^41
	movq -832(%rbp), %rbx
	movq (%rbx), %rax
	# LowerBasicConversion(2260:3): %"class.std::allocator.14"* ^41 -> %"class.std::__new_allocator.15"* ^42
	movq %rax, %rbx
	# SetupCalls(2261:3): move argument %"class.std::__new_allocator.15"* nonnull dereferenceable(1) align 1 ^42
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt15__new_allocatorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEED2Ev
	# tt = Pointer, type = [6 x %"struct.std::pair"]
	# LowerGetelementptr(2262:3): struct-type: [6 x %"struct.std::pair"]* ^10 -> ^43, indices=0,0
	movq -824(%rbp), %rbx
	# LowerGetelementptr(2262:3): type of ^43 is %"struct.std::pair"*
	# tt = Pointer, type = %"struct.std::pair"
	# LowerGetelementptr(2263:3): struct-type: %"struct.std::pair"* ^43 -> ^44, indices=6
	movq %rbx, %rcx
	addq $384, %rcx
	# LowerGetelementptr(2263:3): type of ^44 is %"struct.std::pair"*
	# MovePhi: ^44 -> ^46
	movq %rcx, -816(%rbp)
	.__main__M340:
	# tt = Pointer, type = %"struct.std::pair"
	# LowerGetelementptr(2268:3): struct-type: %"struct.std::pair"* ^46 -> ^47, indices=-1
	movq -816(%rbp), %r12
	addq $-64, %r12
	# LowerGetelementptr(2268:3): type of ^47 is %"struct.std::pair"*
	# SetupCalls(2269:3): move argument %"struct.std::pair"* nonnull dereferenceable(64) align 8 ^47
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	callq _ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISA_EEEEED2Ev
	# LowerIcmp(2270:3): %"struct.std::pair"* ^47 vs. operand [6 x %"struct.std::pair"]* ^43
	cmpq %rbx, %r12
	sete %al
	andq $1, %rax
	cmpb $0, %al
	jne .__main__M374
	.__main__M371:
	# MovePhi: ^47 -> ^46 (in new block 130 whose parent is 45)
	movq %r12, -816(%rbp)
	jmp .__main__M340
	.__main__M374:
	# SetupCalls(2274:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^13
	# Fixed movzx with identical source and destination widths
	movq -728(%rbp), %rdi
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev@PLT
	# SetupCalls(2275:3): move argument %"class.std::basic_ostream"* nonnull dereferenceable(8) align 8 @_ZSt4cout
	leaq _ZSt4cout(%rip), %rdi
	# SetupCalls(2275:3): move argument i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.17, i64 0, i64 0)
	leaq .str.17(%rip), %rsi
	callq _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
	# SetupCalls(2275:3): move %"class.std::basic_ostream"* result from %rax
	movq %rax, %rax
	.__main__M421:
	# SetupCalls(2279:3): move argument %"class.std::basic_istream"* nonnull dereferenceable(16) align 8 @_ZSt3cin
	leaq _ZSt3cin(%rip), %rdi
	# SetupCalls(2279:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^13
	# Fixed movzx with identical source and destination widths
	movq -728(%rbp), %rsi
	callq _ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EE@PLT
	# SetupCalls(2279:3): move %"class.std::basic_istream"* result from %rax
	movq %rax, %r12
	# LowerBasicConversion(2280:3): %"class.std::basic_istream"* ^52 -> i8** ^53
	movq %r12, %rax
	# LowerLoad(2281:3).2: (^53) into i8* ^54
	movq (%rax), %rcx
	# tt = Pointer, type = i8
	# LowerGetelementptr(2282:3): struct-type: i8* ^54 -> ^55, indices=-24
	movq %rcx, %rbx
	addq $-24, %rbx
	# LowerGetelementptr(2282:3): type of ^55 is i8*
	# LowerBasicConversion(2283:3): i8* ^55 -> i64* ^56
	movq %rbx, %rax
	# LowerLoad(2284:3).2: (^56) into i64 ^57
	movq (%rax), %rbx
	# LowerBasicConversion(2285:3): %"class.std::basic_istream"* ^52 -> i8* ^58
	movq %r12, %rax
	# tt = Pointer, type = i8
	# LowerGetelementptr(2286:3): pointer-type -> ^59
	movq %rbx, %rcx
	addq %rax, %rcx
	# LowerBasicConversion(2287:3): i8* ^59 -> %"class.std::basic_ios"* ^60
	movq %rcx, %rax
	# Clobber %rax
	movq %rax, -856(%rbp)
	# SetupCalls(2288:3): move argument %"class.std::basic_ios"* nonnull dereferenceable(264) align 8 ^60
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNKSt9basic_iosIcSt11char_traitsIcEEcvbEv@PLT
	# SetupCalls(2288:3): move i1 result from %rax
	movb %al, %bl
	# Unclobber %rax
	movq -856(%rbp), %rax
	cmpb $0, %bl
	jne .__main__M491
	jmp .__main__M1149
	.__main__M491:
	# SetupCalls(2292:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^13
	# Fixed movzx with identical source and destination widths
	movq -728(%rbp), %rdi
	callq _ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEcvSt17basic_string_viewIcS2_EEv@PLT
	# SetupCalls(2292:3): move 128-bit result from %rax and %rdx
	# Multireg move: <%hax %hdx> -> <%hbx %hr12>
	movq %rax, %rbx
	movq %rdx, %r12
	# LowerBasicConversion(2293:3): %"class.std::basic_string_view"* ^15 -> {i64, i8*}* ^64
	movq -744(%rbp), %rax
	# tt = Pointer, type = {i64, i8*}
	# LowerGetelementptr(2294:3): struct-type: {i64, i8*}* ^64 -> ^65, indices=0,0
	movq %rax, %rcx
	# LowerGetelementptr(2294:3): type of ^65 is i64*
	# LowerExtractvalue(2296:3)
	# PaddedStructs({i64, i8*} -> i64): move from pack ^63 ({i64, i8*}) to ^128 (opaque), index = 0
	movq %rbx, %rsi
	movq %rsi, %rdx
	# LowerStore(2296:3).9: mov i64 ^66, (^65)
	movq %rdx, (%rcx)
	# tt = Pointer, type = {i64, i8*}
	# LowerGetelementptr(2297:3): struct-type: {i64, i8*}* ^64 -> ^67, indices=0,1
	movq %rax, %rcx
	addq $8, %rcx
	# LowerGetelementptr(2297:3): type of ^67 is i8**
	# LowerExtractvalue(2299:3)
	# PaddedStructs({i64, i8*} -> i8*): move from pack ^63 ({i64, i8*}) to ^129 (opaque), index = 1
	movq %r12, %rdx
	movq %rdx, %rax
	# LowerStore(2299:3).9: mov i8* ^68, (^67)
	movq %rax, (%rcx)
	# SetupCalls(2300:3): move argument %"class.std::basic_string_view"* nonnull dereferenceable(16) align 8 ^16
	# Fixed movzx with identical source and destination widths
	movq -752(%rbp), %rdi
	# SetupCalls(2300:3): move argument i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.18, i64 0, i64 0)
	leaq .str.18(%rip), %rsi
	callq _ZNSt17basic_string_viewIcSt11char_traitsIcEEC2EPKc
	# LowerBasicConversion(2301:3): %"class.std::basic_string_view"* ^15 -> {i64, i8*}* ^69
	movq -744(%rbp), %rax
	# tt = Pointer, type = {i64, i8*}
	# LowerGetelementptr(2302:3): struct-type: {i64, i8*}* ^69 -> ^70, indices=0,0
	movq %rax, %rbx
	# LowerGetelementptr(2302:3): type of ^70 is i64*
	# LowerLoad(2303:3).2: (^70) into i64 ^71
	movq (%rbx), %rcx
	# tt = Pointer, type = {i64, i8*}
	# LowerGetelementptr(2304:3): struct-type: {i64, i8*}* ^69 -> ^72, indices=0,1
	movq %rax, %rbx
	addq $8, %rbx
	# LowerGetelementptr(2304:3): type of ^72 is i8**
	# LowerLoad(2305:3).2: (^72) into i8* ^73
	movq (%rbx), %rax
	# LowerBasicConversion(2306:3): %"class.std::basic_string_view"* ^16 -> {i64, i8*}* ^74
	movq -752(%rbp), %rbx
	# tt = Pointer, type = {i64, i8*}
	# LowerGetelementptr(2307:3): struct-type: {i64, i8*}* ^74 -> ^75, indices=0,0
	movq %rbx, %rdx
	# LowerGetelementptr(2307:3): type of ^75 is i64*
	# LowerLoad(2308:3).2: (^75) into i64 ^76
	movq (%rdx), %r8
	# tt = Pointer, type = {i64, i8*}
	# LowerGetelementptr(2309:3): struct-type: {i64, i8*}* ^74 -> ^77, indices=0,1
	movq %rbx, %rdx
	addq $8, %rdx
	# LowerGetelementptr(2309:3): type of ^77 is i8**
	# LowerLoad(2310:3).2: (^77) into i8* ^78
	movq (%rdx), %rbx
	# Clobber %rcx
	movq %rcx, -864(%rbp)
	# Clobber %r8
	movq %r8, -872(%rbp)
	# Clobber %rax
	movq %rax, -856(%rbp)
	# SetupCalls(2311:3): move argument %"class.std::vector"* sret align 8 ^14
	# Fixed movzx with identical source and destination widths
	movq -736(%rbp), %rdi
	# SetupCalls(2311:3): move argument i64 ^71
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(2311:3): move argument i8* ^73
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdx
	# SetupCalls(2311:3): move argument i64 ^76
	# Fixed movzx with identical source and destination widths
	movq %r8, %rcx
	# SetupCalls(2311:3): move argument i8* ^78
	# Fixed movzx with identical source and destination widths
	movq %rbx, %r8
	# SetupCalls(2311:3): move argument i1 zeroext true
	movq $1, %r9
	andq $1, %r9
	callq _Z5splitSt17basic_string_viewIcSt11char_traitsIcEES2_b
	# Unclobber %rax
	movq -856(%rbp), %rax
	# Unclobber %r8
	movq -872(%rbp), %r8
	# Unclobber %rcx
	movq -864(%rbp), %rcx
	# SetupCalls(2312:3): move argument %"class.std::vector"* nonnull dereferenceable(24) align 8 ^14
	# Fixed movzx with identical source and destination widths
	movq -736(%rbp), %rdi
	callq _ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE5emptyEv
	# SetupCalls(2312:3): move i1 result from %rax
	movb %al, %bl
	cmpb $0, %bl
	jne .__main__M647
	jmp .__main__M650
	.__main__M647:
	# LowerStore(2316:3).3: mov $imm, (^17)
	movq -760(%rbp), %rax
	movl $2, (%rax)
	jmp .__main__M1118
	.__main__M650:
	# SetupCalls(2320:3): move argument %"class.std::vector"* nonnull dereferenceable(24) align 8 ^14
	# Fixed movzx with identical source and destination widths
	movq -736(%rbp), %rdi
	callq _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE5frontEv
	# SetupCalls(2320:3): move %"class.std::basic_string_view"* result from %rax
	movq %rax, %rbx
	# LowerStore(2321:3).9: mov %"class.std::allocator.0"* ^20, (^4)
	movq -720(%rbp), %rax
	# Fixing source-to-dest movq -784(%rbp), (%rax)
	movq -784(%rbp), %r15
	movq %r15, (%rax)
	# LowerLoad(2322:3).2: (^4) into %"class.std::allocator.0"* ^83
	movq -720(%rbp), %rcx
	movq (%rcx), %rax
	# LowerBasicConversion(2323:3): %"class.std::allocator.0"* ^83 -> %"class.std::__new_allocator.1"* ^84
	movq %rax, %rcx
	# LowerStore(2324:3).9: mov %"class.std::__new_allocator.1"* ^84, (^2)
	movq -704(%rbp), %rax
	movq %rcx, (%rax)
	# LowerLoad(2325:3).2: (^2) into %"class.std::__new_allocator.1"* ^85
	movq -704(%rbp), %rax
	movq (%rax), %rcx
	# SetupCalls(2326:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^19
	# Fixed movzx with identical source and destination widths
	movq -776(%rbp), %rdi
	# SetupCalls(2326:3): move argument %"class.std::basic_string_view"* nonnull dereferenceable(16) align 8 ^82
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(2326:3): move argument %"class.std::allocator.0"* nonnull dereferenceable(1) align 1 ^20
	# Fixed movzx with identical source and destination widths
	movq -784(%rbp), %rdx
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ISt17basic_string_viewIcS2_EvEERKT_RKS3_
	# SetupCalls(2327:3): move argument %"class.std::map"* nonnull dereferenceable(48) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq -696(%rbp), %rdi
	# SetupCalls(2327:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^19
	# Fixed movzx with identical source and destination widths
	movq -776(%rbp), %rsi
	callq _ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaIS9_EEEESt4lessIS5_ESaISt4pairIKS5_SF_EEE4findERSJ_
	# SetupCalls(2327:3): move %"struct.std::_Rb_tree_node_base"* result from %rax
	movq %rax, %rbx
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(2328:3): struct-type: %"struct.std::_Rb_tree_iterator"* ^18 -> ^87, indices=0,0
	movq -768(%rbp), %rax
	# LowerGetelementptr(2328:3): type of ^87 is %"struct.std::_Rb_tree_node_base"**
	# LowerStore(2329:3).9: mov %"struct.std::_Rb_tree_node_base"* ^86, (^87)
	movq %rbx, (%rax)
	# SetupCalls(2330:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^19
	# Fixed movzx with identical source and destination widths
	movq -776(%rbp), %rdi
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
	# LowerStore(2331:3).9: mov %"class.std::allocator.0"* ^20, (^3)
	movq -712(%rbp), %rax
	# Fixing source-to-dest movq -784(%rbp), (%rax)
	movq -784(%rbp), %r15
	movq %r15, (%rax)
	# LowerLoad(2332:3).2: (^3) into %"class.std::allocator.0"* ^88
	movq -712(%rbp), %rax
	movq (%rax), %rbx
	# LowerBasicConversion(2333:3): %"class.std::allocator.0"* ^88 -> %"class.std::__new_allocator.1"* ^89
	movq %rbx, %rax
	# Clobber %rax
	movq %rax, -856(%rbp)
	# SetupCalls(2334:3): move argument %"class.std::__new_allocator.1"* nonnull dereferenceable(1) align 1 ^89
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt15__new_allocatorIcED2Ev
	# Unclobber %rax
	movq -856(%rbp), %rax
	# LowerStore(2335:3).3: mov $imm, (^21)
	movq -792(%rbp), %rax
	movb $0, (%rax)
	# SetupCalls(2336:3): move argument %"class.std::map"* nonnull dereferenceable(48) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq -696(%rbp), %rdi
	callq _ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaIS9_EEEESt4lessIS5_ESaISt4pairIKS5_SF_EEE3endEv
	# SetupCalls(2336:3): move %"struct.std::_Rb_tree_node_base"* result from %rax
	movq %rax, %rbx
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(2337:3): struct-type: %"struct.std::_Rb_tree_iterator"* ^22 -> ^91, indices=0,0
	movq -800(%rbp), %rax
	# LowerGetelementptr(2337:3): type of ^91 is %"struct.std::_Rb_tree_node_base"**
	# LowerStore(2338:3).9: mov %"struct.std::_Rb_tree_node_base"* ^90, (^91)
	movq %rbx, (%rax)
	# SetupCalls(2339:3): move argument %"struct.std::_Rb_tree_iterator"* nonnull dereferenceable(8) align 8 ^18
	# Fixed movzx with identical source and destination widths
	movq -768(%rbp), %rdi
	# SetupCalls(2339:3): move argument %"struct.std::_Rb_tree_iterator"* nonnull dereferenceable(8) align 8 ^22
	# Fixed movzx with identical source and destination widths
	movq -800(%rbp), %rsi
	callq _ZStneRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEESL_
	# SetupCalls(2339:3): move i1 result from %rax
	movb %al, %bl
	cmpb $0, %bl
	jne .__main__M844
	jmp .__main__M906
	.__main__M844:
	# SetupCalls(2343:3): move argument %"struct.std::_Rb_tree_iterator"* nonnull dereferenceable(8) align 8 ^18
	# Fixed movzx with identical source and destination widths
	movq -768(%rbp), %rdi
	callq _ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEEptEv
	# SetupCalls(2343:3): move %"struct.std::pair"* result from %rax
	movq %rax, %rbx
	# tt = Pointer, type = %"struct.std::pair"
	# LowerGetelementptr(2344:3): struct-type: %"struct.std::pair"* ^94 -> ^95, indices=0,1
	movq %rbx, %rax
	addq $32, %rax
	# LowerGetelementptr(2344:3): type of ^95 is %"class.std::function"*
	# Clobber %rax
	movq %rax, -856(%rbp)
	# SetupCalls(2345:3): move argument %"class.std::function"* nonnull dereferenceable(32) align 8 ^95
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(2345:3): move argument %"class.std::vector"* nonnull dereferenceable(24) align 8 ^14
	# Fixed movzx with identical source and destination widths
	movq -736(%rbp), %rsi
	callq _ZNKSt8functionIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEEclES8_
	# SetupCalls(2345:3): move i32 result from %rax
	movl %eax, %ebx
	# Unclobber %rax
	movq -856(%rbp), %rax
	# LowerIcmp(2346:3): i32 ^96 vs. intlike 0
	cmpl $0, %ebx
	sete %al
	andq $1, %rax
	# LowerBasicConversion(2347:3): i32 ^97 -> i8 ^98
	movb %al, %bl
	# LowerStore(2348:3).9: mov i8 ^98, (^21)
	movq -792(%rbp), %rax
	movb %bl, (%rax)
	jmp .__main__M1026
	.__main__M906:
	# SetupCalls(2352:3): move argument %"class.std::vector"* nonnull dereferenceable(24) align 8 ^14
	# Fixed movzx with identical source and destination widths
	movq -736(%rbp), %rdi
	callq _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE5frontEv
	# SetupCalls(2352:3): move %"class.std::basic_string_view"* result from %rax
	movq %rax, %rbx
	# LowerBasicConversion(2353:3): %"class.std::basic_string_view"* ^23 -> i8* ^101
	movq -808(%rbp), %rax
	# LowerBasicConversion(2354:3): %"class.std::basic_string_view"* ^100 -> i8* ^102
	movq %rbx, %rcx
	# Clobber %rcx
	movq %rcx, -864(%rbp)
	# Clobber %rax
	movq %rax, -856(%rbp)
	# SetupCalls(2355:3): move argument i8* align 8 ^101
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(2355:3): move argument i8* align 8 ^102
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(2355:3): move argument i64 16
	movq $16, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -856(%rbp), %rax
	# Unclobber %rcx
	movq -864(%rbp), %rcx
	# LowerBasicConversion(2356:3): %"class.std::basic_string_view"* ^23 -> {i64, i8*}* ^103
	movq -808(%rbp), %rax
	# tt = Pointer, type = {i64, i8*}
	# LowerGetelementptr(2357:3): struct-type: {i64, i8*}* ^103 -> ^104, indices=0,0
	movq %rax, %rbx
	# LowerGetelementptr(2357:3): type of ^104 is i64*
	# LowerLoad(2358:3).2: (^104) into i64 ^105
	movq (%rbx), %rcx
	# tt = Pointer, type = {i64, i8*}
	# LowerGetelementptr(2359:3): struct-type: {i64, i8*}* ^103 -> ^106, indices=0,1
	movq %rax, %rbx
	addq $8, %rbx
	# LowerGetelementptr(2359:3): type of ^106 is i8**
	# LowerLoad(2360:3).2: (^106) into i8* ^107
	movq (%rbx), %rax
	# Clobber %rcx
	movq %rcx, -864(%rbp)
	# Clobber %rax
	movq %rax, -856(%rbp)
	# SetupCalls(2361:3): move argument %"class.std::basic_ostream"* nonnull dereferenceable(8) align 8 @_ZSt4cerr
	leaq _ZSt4cerr(%rip), %rdi
	# SetupCalls(2361:3): move argument i64 ^105
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(2361:3): move argument i8* ^107
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdx
	callq _ZStlsIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_St17basic_string_viewIS3_S4_E
	# SetupCalls(2361:3): move %"class.std::basic_ostream"* result from %rax
	movq %rax, %rbx
	# Unclobber %rax
	movq -856(%rbp), %rax
	# Unclobber %rcx
	movq -864(%rbp), %rcx
	# SetupCalls(2362:3): move argument %"class.std::basic_ostream"* nonnull dereferenceable(8) align 8 ^108
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(2362:3): move argument i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.19, i64 0, i64 0)
	leaq .str.19(%rip), %rsi
	callq _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
	# SetupCalls(2362:3): move %"class.std::basic_ostream"* result from %rax
	movq %rax, %rax
	.__main__M1026:
	# SetupCalls(2366:3): move argument %"class.std::basic_ostream"* nonnull dereferenceable(8) align 8 @_ZSt4cout
	leaq _ZSt4cout(%rip), %rdi
	# SetupCalls(2366:3): move argument i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.20, i64 0, i64 0)
	leaq .str.20(%rip), %rsi
	callq _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
	# SetupCalls(2366:3): move %"class.std::basic_ostream"* result from %rax
	movq %rax, %rbx
	# LowerLoad(2367:3).2: (^21) into i8 ^112
	movq -792(%rbp), %rcx
	movb (%rcx), %al
	# LowerTrunc(2368:3): 8 to 1, move
	movb %al, %cl
	# LowerTrunc(2368:3): 8 to 1, apply mask
	andq $1, %rcx
	# LowerBasicConversion(2369:3): i1 ^113 -> i64 ^114
	movq %rcx, %rax
	# Truncate value to 8 bits
	andl $255, %eax
	cmpb $0, %cl
	movb $50, %al
	jne .__main__RC0
	movb $49, %al
	.__main__RC0:
	# Clobber %rax
	movq %rax, -856(%rbp)
	# SetupCalls(2371:3): move argument %"class.std::basic_ostream"* nonnull dereferenceable(8) align 8 ^111
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(2371:3): move argument i8 signext ^115
	movzbq %al, %rsi
	movsbq %sil, %rsi
	callq _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@PLT
	# SetupCalls(2371:3): move %"class.std::basic_ostream"* result from %rax
	movq %rax, %rbx
	# Unclobber %rax
	movq -856(%rbp), %rax
	# SetupCalls(2372:3): move argument %"class.std::basic_ostream"* nonnull dereferenceable(8) align 8 ^116
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(2372:3): move argument i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.21, i64 0, i64 0)
	leaq .str.21(%rip), %rsi
	callq _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
	# SetupCalls(2372:3): move %"class.std::basic_ostream"* result from %rax
	movq %rax, %rax
	# LowerStore(2373:3).3: mov $imm, (^17)
	movq -760(%rbp), %rax
	movl $0, (%rax)
	.__main__M1118:
	# SetupCalls(2377:3): move argument %"class.std::vector"* nonnull dereferenceable(24) align 8 ^14
	# Fixed movzx with identical source and destination widths
	movq -736(%rbp), %rdi
	callq _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EED2Ev
	# LowerLoad(2378:3).2: (^17) into i32 ^119
	movq -760(%rbp), %rax
	movl (%rax), %ebx
	# LowerSwitch(2379:3): begin conditions
	cmpl $0, %ebx
	je .__main__M1148
	cmpl $2, %ebx
	je .__main__M421
	# LowerSwitch(2379:3): default
	jmp .__main__M1194
	.__main__M1148:
	jmp .__main__M421
	.__main__M1149:
	# SetupCalls(2388:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^13
	# Fixed movzx with identical source and destination widths
	movq -728(%rbp), %rdi
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
	# SetupCalls(2389:3): move argument %"class.std::map"* nonnull dereferenceable(48) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq -696(%rbp), %rdi
	callq _ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaIS9_EEEESt4lessIS5_ESaISt4pairIKS5_SF_EEED2Ev
	# LowerLoad(2390:3).2: (^7) into i32 ^122
	movq -688(%rbp), %rax
	movl (%rax), %ebx
	movl %ebx, %eax
	movq -888(%rbp), %r15
	movq -1064(%rbp), %r14
	movq -944(%rbp), %r13
	movq -880(%rbp), %r12
	movq -920(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq
	.__main__M1194:

.section .text
.global _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7_
.p2align 4, 0x90
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7_:
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(720 + 0, 16)
	subq $720, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -200(%rbp)
	movq %r12, -256(%rbp)
	movq %r13, -224(%rbp)
	movq %r14, -272(%rbp)
	movq %r15, -192(%rbp)
	# LowerAlloca(9667:3): size = 16, type = %"struct.std::pair.21"*, var = ^4
	# Fixing source-to-dest leaq -16(%rbp), -112(%rbp)
	leaq -16(%rbp), %r15
	movq %r15, -112(%rbp)
	# LowerAlloca(9668:3): size = 8, type = %"struct.std::_Rb_tree_const_iterator"*, var = ^5
	leaq -24(%rbp), %rcx
	# LowerAlloca(9669:3): size = 8, type = %"class.std::_Rb_tree"**, var = ^6
	leaq -32(%rbp), %rbx
	# LowerAlloca(9670:3): size = 8, type = %"class.std::__cxx11::basic_string"**, var = ^7
	# Fixing source-to-dest leaq -40(%rbp), -128(%rbp)
	leaq -40(%rbp), %r15
	movq %r15, -128(%rbp)
	# LowerAlloca(9671:3): size = 8, type = %"struct.std::_Rb_tree_iterator"*, var = ^8
	# Fixing source-to-dest leaq -48(%rbp), -136(%rbp)
	leaq -48(%rbp), %r15
	movq %r15, -136(%rbp)
	# LowerAlloca(9672:3): size = 8, type = %"struct.std::_Rb_tree_node_base"**, var = ^9
	leaq -56(%rbp), %r13
	# LowerAlloca(9673:3): size = 8, type = %"struct.std::_Rb_tree_iterator"*, var = ^10
	# Fixing source-to-dest leaq -64(%rbp), -168(%rbp)
	leaq -64(%rbp), %r15
	movq %r15, -168(%rbp)
	# LowerAlloca(9674:3): size = 8, type = %"struct.std::_Rb_tree_node_base"**, var = ^11
	# Fixing source-to-dest leaq -72(%rbp), -160(%rbp)
	leaq -72(%rbp), %r15
	movq %r15, -160(%rbp)
	# LowerAlloca(9675:3): size = 8, type = %"struct.std::_Rb_tree_iterator"*, var = ^12
	# Fixing source-to-dest leaq -80(%rbp), -152(%rbp)
	leaq -80(%rbp), %r15
	movq %r15, -152(%rbp)
	# LowerAlloca(9676:3): size = 8, type = %"struct.std::_Rb_tree_node_base"**, var = ^13
	leaq -88(%rbp), %r12
	# LowerAlloca(9677:3): size = 8, type = %"struct.std::_Rb_tree_node_base"**, var = ^14
	# Fixing source-to-dest leaq -96(%rbp), -144(%rbp)
	leaq -96(%rbp), %r15
	movq %r15, -144(%rbp)
	# LowerAlloca(9678:3): size = 8, type = %"struct.std::_Rb_tree_node_base"**, var = ^15
	leaq -104(%rbp), %r14
	# tt = Pointer, type = %"struct.std::_Rb_tree_const_iterator"
	# LowerGetelementptr(9679:3): struct-type: %"struct.std::_Rb_tree_const_iterator"* ^5 -> ^16, indices=0,0
	movq %rcx, %rax
	# LowerGetelementptr(9679:3): type of ^16 is %"struct.std::_Rb_tree_node_base"**
	# LowerStore(9680:3).9: mov %"struct.std::_Rb_tree_node_base"* %rsi, (^16)
	movq %rsi, (%rax)
	# LowerStore(9681:3).9: mov %"class.std::_Rb_tree"* %rdi, (^6)
	movq %rdi, (%rbx)
	# LowerStore(9682:3).9: mov %"class.std::__cxx11::basic_string"* %rdx, (^7)
	movq -128(%rbp), %rax
	movq %rdx, (%rax)
	# LowerLoad(9683:3).2: (^6) into %"class.std::_Rb_tree"* ^17
	# Fixing source-to-dest movq (%rbx), -120(%rbp)
	movq (%rbx), %r15
	movq %r15, -120(%rbp)
	# Clobber %rcx
	movq %rcx, -176(%rbp)
	# SetupCalls(9684:3): move argument %"struct.std::_Rb_tree_const_iterator"* nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	callq _ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEE13_M_const_castEv
	# SetupCalls(9684:3): move %"struct.std::_Rb_tree_node_base"* result from %rax
	movq %rax, %rbx
	# Unclobber %rcx
	movq -176(%rbp), %rcx
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(9685:3): struct-type: %"struct.std::_Rb_tree_iterator"* ^8 -> ^19, indices=0,0
	movq -136(%rbp), %rax
	# LowerGetelementptr(9685:3): type of ^19 is %"struct.std::_Rb_tree_node_base"**
	# LowerStore(9686:3).9: mov %"struct.std::_Rb_tree_node_base"* ^18, (^19)
	movq %rbx, (%rax)
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(9687:3): struct-type: %"struct.std::_Rb_tree_iterator"* ^8 -> ^20, indices=0,0
	movq -136(%rbp), %rax
	# LowerGetelementptr(9687:3): type of ^20 is %"struct.std::_Rb_tree_node_base"**
	# LowerLoad(9688:3).2: (^20) into %"struct.std::_Rb_tree_node_base"* ^21
	movq (%rax), %rbx
	# SetupCalls(9689:3): move argument %"class.std::_Rb_tree"* nonnull dereferenceable(48) align 8 ^17
	# Fixed movzx with identical source and destination widths
	movq -120(%rbp), %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE6_M_endEv
	# SetupCalls(9689:3): move %"struct.std::_Rb_tree_node_base"* result from %rax
	movq %rax, %r15
	# LowerIcmp(9690:3): %"struct.std::_Rb_tree_node_base"* ^21 vs. operand %"struct.std::_Rb_tree_node_base"* ^22
	cmpq %r15, %rbx
	sete %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M100
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M318
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M100:
	# SetupCalls(9694:3): move argument %"class.std::_Rb_tree"* nonnull dereferenceable(48) align 8 ^17
	# Fixed movzx with identical source and destination widths
	movq -120(%rbp), %rdi
	callq _ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE4sizeEv
	# SetupCalls(9694:3): move i64 result from %rax
	movq %rax, %rbx
	# LowerIcmp(9695:3): i64 ^25 vs. intlike 0
	cmpq $0, %rbx
	seta %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M128
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M267
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M128:
	# tt = Pointer, type = %"class.std::_Rb_tree"
	# LowerGetelementptr(9699:3): struct-type: %"class.std::_Rb_tree"* ^17 -> ^28, indices=0,0
	movq -120(%rbp), %rax
	# LowerGetelementptr(9699:3): type of ^28 is %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Rb_tree_impl"*
	# LowerBasicConversion(9700:3): %"class.std::_Rb_tree"* ^28 -> %"struct.std::_Rb_tree_key_compare"* ^29
	movq %rax, %rcx
	# tt = Pointer, type = %"struct.std::_Rb_tree_key_compare"
	# LowerGetelementptr(9701:3): struct-type: %"struct.std::_Rb_tree_key_compare"* ^29 -> ^30, indices=0,0
	movq %rcx, %rbx
	# LowerGetelementptr(9701:3): type of ^30 is %"struct.std::less"*
	# SetupCalls(9702:3): move argument %"class.std::_Rb_tree"* nonnull dereferenceable(48) align 8 ^17
	# Fixed movzx with identical source and destination widths
	movq -120(%rbp), %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE12_M_rightmostEv
	# SetupCalls(9702:3): move %"struct.std::_Rb_tree_node_base"** result from %rax
	movq %rax, %r12
	# LowerLoad(9703:3).2: (^31) into %"struct.std::_Rb_tree_node_base"* ^32
	movq (%r12), %rax
	# Clobber %rax
	movq %rax, -184(%rbp)
	# SetupCalls(9704:3): move argument %"struct.std::_Rb_tree_node_base"* ^32
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE6_S_keyEPKSt18_Rb_tree_node_base
	# SetupCalls(9704:3): move %"class.std::__cxx11::basic_string"* result from %rax
	movq %rax, %r12
	# Unclobber %rax
	movq -184(%rbp), %rax
	# LowerLoad(9705:3).2: (^7) into %"class.std::__cxx11::basic_string"* ^34
	movq -128(%rbp), %rax
	movq (%rax), %rcx
	# Clobber %rcx
	movq %rcx, -176(%rbp)
	# SetupCalls(9706:3): move argument %"struct.std::less"* nonnull dereferenceable(1) align 1 ^30
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(9706:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^33
	# Fixed movzx with identical source and destination widths
	movq %r12, %rsi
	# SetupCalls(9706:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^34
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdx
	callq _ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_
	# SetupCalls(9706:3): move i1 result from %rax
	movb %al, %bl
	# Unclobber %rcx
	movq -176(%rbp), %rcx
	cmpb $0, %bl
	jne .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M216
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M267
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M216:
	# LowerStore(9710:3).3: mov $imm, (^9)
	movq $0, (%r13)
	# SetupCalls(9711:3): move argument %"class.std::_Rb_tree"* nonnull dereferenceable(48) align 8 ^17
	# Fixed movzx with identical source and destination widths
	movq -120(%rbp), %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE12_M_rightmostEv
	# SetupCalls(9711:3): move %"struct.std::_Rb_tree_node_base"** result from %rax
	movq %rax, %rbx
	# SetupCalls(9712:3): move argument %"struct.std::pair.21"* nonnull dereferenceable(16) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -112(%rbp), %rdi
	# SetupCalls(9712:3): move argument %"struct.std::_Rb_tree_node_base"** nonnull dereferenceable(8) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq %r13, %rsi
	# SetupCalls(9712:3): move argument %"struct.std::_Rb_tree_node_base"** nonnull dereferenceable(8) align 8 ^37
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdx
	callq _ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IS1_S1_Lb1EEERKS1_S5_
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M1227
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M267:
	# LowerLoad(9716:3).2: (^7) into %"class.std::__cxx11::basic_string"* ^39
	movq -128(%rbp), %rax
	movq (%rax), %rbx
	# SetupCalls(9717:3): move argument %"class.std::_Rb_tree"* nonnull dereferenceable(48) align 8 ^17
	# Fixed movzx with identical source and destination widths
	movq -120(%rbp), %rdi
	# SetupCalls(9717:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^39
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE24_M_get_insert_unique_posERS7_
	# SetupCalls(9717:3): move 128-bit result from %rax and %rdx
	# Multireg move: <%hax %hdx> -> <%hbx %hr12>
	movq %rax, %rbx
	movq %rdx, %r12
	# LowerBasicConversion(9718:3): %"struct.std::pair.21"* ^4 -> {%"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"*}* ^41
	movq -112(%rbp), %rax
	# tt = Pointer, type = {%"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"*}
	# LowerGetelementptr(9719:3): struct-type: {%"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"*}* ^41 -> ^42, indices=0,0
	movq %rax, %rcx
	# LowerGetelementptr(9719:3): type of ^42 is %"struct.std::_Rb_tree_node_base"**
	# LowerExtractvalue(9721:3)
	# PaddedStructs({%"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"*} -> %"struct.std::_Rb_tree_node_base"*): move from pack ^40 ({%"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"*}) to ^147 (opaque), index = 0
	movq %rbx, %rsi
	movq %rsi, %rdx
	# LowerStore(9721:3).9: mov %"struct.std::_Rb_tree_node_base"* ^43, (^42)
	movq %rdx, (%rcx)
	# tt = Pointer, type = {%"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"*}
	# LowerGetelementptr(9722:3): struct-type: {%"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"*}* ^41 -> ^44, indices=0,1
	movq %rax, %rcx
	addq $8, %rcx
	# LowerGetelementptr(9722:3): type of ^44 is %"struct.std::_Rb_tree_node_base"**
	# LowerExtractvalue(9724:3)
	# PaddedStructs({%"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"*} -> %"struct.std::_Rb_tree_node_base"*): move from pack ^40 ({%"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"*}) to ^148 (opaque), index = 1
	movq %r12, %rdx
	movq %rdx, %rax
	# LowerStore(9724:3).9: mov %"struct.std::_Rb_tree_node_base"* ^45, (^44)
	movq %rax, (%rcx)
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M1227
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M318:
	# tt = Pointer, type = %"class.std::_Rb_tree"
	# LowerGetelementptr(9728:3): struct-type: %"class.std::_Rb_tree"* ^17 -> ^47, indices=0,0
	movq -120(%rbp), %rax
	# LowerGetelementptr(9728:3): type of ^47 is %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Rb_tree_impl"*
	# LowerBasicConversion(9729:3): %"class.std::_Rb_tree"* ^47 -> %"struct.std::_Rb_tree_key_compare"* ^48
	movq %rax, %rcx
	# tt = Pointer, type = %"struct.std::_Rb_tree_key_compare"
	# LowerGetelementptr(9730:3): struct-type: %"struct.std::_Rb_tree_key_compare"* ^48 -> ^49, indices=0,0
	movq %rcx, %rbx
	# LowerGetelementptr(9730:3): type of ^49 is %"struct.std::less"*
	# LowerLoad(9731:3).2: (^7) into %"class.std::__cxx11::basic_string"* ^50
	movq -128(%rbp), %rax
	movq (%rax), %r13
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(9732:3): struct-type: %"struct.std::_Rb_tree_iterator"* ^8 -> ^51, indices=0,0
	movq -136(%rbp), %rax
	# LowerGetelementptr(9732:3): type of ^51 is %"struct.std::_Rb_tree_node_base"**
	# LowerLoad(9733:3).2: (^51) into %"struct.std::_Rb_tree_node_base"* ^52
	movq (%rax), %rcx
	# Clobber %rcx
	movq %rcx, -176(%rbp)
	# SetupCalls(9734:3): move argument %"struct.std::_Rb_tree_node_base"* ^52
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE6_S_keyEPKSt18_Rb_tree_node_base
	# SetupCalls(9734:3): move %"class.std::__cxx11::basic_string"* result from %rax
	movq %rax, %r15
	# Unclobber %rcx
	movq -176(%rbp), %rcx
	# SetupCalls(9735:3): move argument %"struct.std::less"* nonnull dereferenceable(1) align 1 ^49
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(9735:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^50
	# Fixed movzx with identical source and destination widths
	movq %r13, %rsi
	# SetupCalls(9735:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^53
	# Fixed movzx with identical source and destination widths
	movq %r15, %rdx
	callq _ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_
	# SetupCalls(9735:3): move i1 result from %rax
	movb %al, %bl
	cmpb $0, %bl
	jne .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M387
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M767
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M387:
	# LowerBasicConversion(9739:3): %"struct.std::_Rb_tree_iterator"* ^10 -> i8* ^56
	movq -168(%rbp), %rax
	# LowerBasicConversion(9740:3): %"struct.std::_Rb_tree_iterator"* ^8 -> i8* ^57
	movq -136(%rbp), %rbx
	# Clobber %rax
	movq %rax, -184(%rbp)
	# SetupCalls(9741:3): move argument i8* align 8 ^56
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(9741:3): move argument i8* align 8 ^57
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(9741:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -184(%rbp), %rax
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(9742:3): struct-type: %"struct.std::_Rb_tree_iterator"* ^8 -> ^58, indices=0,0
	movq -136(%rbp), %rax
	# LowerGetelementptr(9742:3): type of ^58 is %"struct.std::_Rb_tree_node_base"**
	# LowerLoad(9743:3).2: (^58) into %"struct.std::_Rb_tree_node_base"* ^59
	movq (%rax), %rbx
	# SetupCalls(9744:3): move argument %"class.std::_Rb_tree"* nonnull dereferenceable(48) align 8 ^17
	# Fixed movzx with identical source and destination widths
	movq -120(%rbp), %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE11_M_leftmostEv
	# SetupCalls(9744:3): move %"struct.std::_Rb_tree_node_base"** result from %rax
	movq %rax, %r12
	# LowerLoad(9745:3).2: (^60) into %"struct.std::_Rb_tree_node_base"* ^61
	movq (%r12), %rax
	# LowerIcmp(9746:3): %"struct.std::_Rb_tree_node_base"* ^59 vs. operand %"struct.std::_Rb_tree_node_base"* ^61
	cmpq %rax, %rbx
	sete %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M452
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M524
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M452:
	# SetupCalls(9750:3): move argument %"class.std::_Rb_tree"* nonnull dereferenceable(48) align 8 ^17
	# Fixed movzx with identical source and destination widths
	movq -120(%rbp), %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE11_M_leftmostEv
	# SetupCalls(9750:3): move %"struct.std::_Rb_tree_node_base"** result from %rax
	movq %rax, %rbx
	# SetupCalls(9751:3): move argument %"class.std::_Rb_tree"* nonnull dereferenceable(48) align 8 ^17
	# Fixed movzx with identical source and destination widths
	movq -120(%rbp), %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE11_M_leftmostEv
	# SetupCalls(9751:3): move %"struct.std::_Rb_tree_node_base"** result from %rax
	movq %rax, %r12
	# SetupCalls(9752:3): move argument %"struct.std::pair.21"* nonnull dereferenceable(16) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -112(%rbp), %rdi
	# SetupCalls(9752:3): move argument %"struct.std::_Rb_tree_node_base"** nonnull dereferenceable(8) align 8 ^64
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(9752:3): move argument %"struct.std::_Rb_tree_node_base"** nonnull dereferenceable(8) align 8 ^65
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdx
	callq _ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_S4_Lb1EEEOT_OT0_
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M1227
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M524:
	# tt = Pointer, type = %"class.std::_Rb_tree"
	# LowerGetelementptr(9756:3): struct-type: %"class.std::_Rb_tree"* ^17 -> ^67, indices=0,0
	movq -120(%rbp), %rax
	# LowerGetelementptr(9756:3): type of ^67 is %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Rb_tree_impl"*
	# LowerBasicConversion(9757:3): %"class.std::_Rb_tree"* ^67 -> %"struct.std::_Rb_tree_key_compare"* ^68
	movq %rax, %rbx
	# tt = Pointer, type = %"struct.std::_Rb_tree_key_compare"
	# LowerGetelementptr(9758:3): struct-type: %"struct.std::_Rb_tree_key_compare"* ^68 -> ^69, indices=0,0
	movq %rbx, %r12
	# LowerGetelementptr(9758:3): type of ^69 is %"struct.std::less"*
	# SetupCalls(9759:3): move argument %"struct.std::_Rb_tree_iterator"* nonnull dereferenceable(8) align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq -168(%rbp), %rdi
	callq _ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEEmmEv
	# SetupCalls(9759:3): move %"struct.std::_Rb_tree_iterator"* result from %rax
	movq %rax, %rbx
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(9760:3): struct-type: %"struct.std::_Rb_tree_iterator"* ^70 -> ^71, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(9760:3): type of ^71 is %"struct.std::_Rb_tree_node_base"**
	# LowerLoad(9761:3).2: (^71) into %"struct.std::_Rb_tree_node_base"* ^72
	movq (%rax), %rbx
	# SetupCalls(9762:3): move argument %"struct.std::_Rb_tree_node_base"* ^72
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE6_S_keyEPKSt18_Rb_tree_node_base
	# SetupCalls(9762:3): move %"class.std::__cxx11::basic_string"* result from %rax
	movq %rax, %rbx
	# LowerLoad(9763:3).2: (^7) into %"class.std::__cxx11::basic_string"* ^74
	movq -128(%rbp), %rax
	movq (%rax), %rcx
	# Clobber %rcx
	movq %rcx, -176(%rbp)
	# SetupCalls(9764:3): move argument %"struct.std::less"* nonnull dereferenceable(1) align 1 ^69
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(9764:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^73
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(9764:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^74
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdx
	callq _ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_
	# SetupCalls(9764:3): move i1 result from %rax
	movb %al, %bl
	# Unclobber %rcx
	movq -176(%rbp), %rcx
	cmpb $0, %bl
	jne .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M616
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M716
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M616:
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(9768:3): struct-type: %"struct.std::_Rb_tree_iterator"* ^10 -> ^77, indices=0,0
	movq -168(%rbp), %rax
	# LowerGetelementptr(9768:3): type of ^77 is %"struct.std::_Rb_tree_node_base"**
	# LowerLoad(9769:3).2: (^77) into %"struct.std::_Rb_tree_node_base"* ^78
	movq (%rax), %rbx
	# SetupCalls(9770:3): move argument %"struct.std::_Rb_tree_node_base"* ^78
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE8_S_rightEPSt18_Rb_tree_node_base
	# SetupCalls(9770:3): move %"struct.std::_Rb_tree_node"* result from %rax
	movq %rax, %rbx
	# LowerIcmp(9771:3): %"struct.std::_Rb_tree_node"* ^79 vs. intlike 0
	cmpq $0, %rbx
	sete %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M650
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M682
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M650:
	# LowerStore(9775:3).3: mov $imm, (^11)
	movq -160(%rbp), %rax
	movq $0, (%rax)
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(9776:3): struct-type: %"struct.std::_Rb_tree_iterator"* ^10 -> ^82, indices=0,0
	movq -168(%rbp), %rax
	# LowerGetelementptr(9776:3): type of ^82 is %"struct.std::_Rb_tree_node_base"**
	# Clobber %rax
	movq %rax, -184(%rbp)
	# SetupCalls(9777:3): move argument %"struct.std::pair.21"* nonnull dereferenceable(16) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -112(%rbp), %rdi
	# SetupCalls(9777:3): move argument %"struct.std::_Rb_tree_node_base"** nonnull dereferenceable(8) align 8 ^11
	# Fixed movzx with identical source and destination widths
	movq -160(%rbp), %rsi
	# SetupCalls(9777:3): move argument %"struct.std::_Rb_tree_node_base"** nonnull dereferenceable(8) align 8 ^82
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdx
	callq _ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IS1_S1_Lb1EEERKS1_S5_
	# Unclobber %rax
	movq -184(%rbp), %rax
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M1227
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M682:
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(9781:3): struct-type: %"struct.std::_Rb_tree_iterator"* ^8 -> ^84, indices=0,0
	movq -136(%rbp), %rax
	# LowerGetelementptr(9781:3): type of ^84 is %"struct.std::_Rb_tree_node_base"**
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(9782:3): struct-type: %"struct.std::_Rb_tree_iterator"* ^8 -> ^85, indices=0,0
	movq -136(%rbp), %rbx
	# LowerGetelementptr(9782:3): type of ^85 is %"struct.std::_Rb_tree_node_base"**
	# Clobber %rax
	movq %rax, -184(%rbp)
	# SetupCalls(9783:3): move argument %"struct.std::pair.21"* nonnull dereferenceable(16) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -112(%rbp), %rdi
	# SetupCalls(9783:3): move argument %"struct.std::_Rb_tree_node_base"** nonnull dereferenceable(8) align 8 ^84
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(9783:3): move argument %"struct.std::_Rb_tree_node_base"** nonnull dereferenceable(8) align 8 ^85
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdx
	callq _ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_S4_Lb1EEEOT_OT0_
	# Unclobber %rax
	movq -184(%rbp), %rax
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M1227
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M716:
	# LowerLoad(9787:3).2: (^7) into %"class.std::__cxx11::basic_string"* ^87
	movq -128(%rbp), %rax
	movq (%rax), %rbx
	# SetupCalls(9788:3): move argument %"class.std::_Rb_tree"* nonnull dereferenceable(48) align 8 ^17
	# Fixed movzx with identical source and destination widths
	movq -120(%rbp), %rdi
	# SetupCalls(9788:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^87
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE24_M_get_insert_unique_posERS7_
	# SetupCalls(9788:3): move 128-bit result from %rax and %rdx
	# Multireg move: <%hax %hdx> -> <%hbx %hr12>
	movq %rax, %rbx
	movq %rdx, %r12
	# LowerBasicConversion(9789:3): %"struct.std::pair.21"* ^4 -> {%"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"*}* ^89
	movq -112(%rbp), %rax
	# tt = Pointer, type = {%"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"*}
	# LowerGetelementptr(9790:3): struct-type: {%"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"*}* ^89 -> ^90, indices=0,0
	movq %rax, %rcx
	# LowerGetelementptr(9790:3): type of ^90 is %"struct.std::_Rb_tree_node_base"**
	# LowerExtractvalue(9792:3)
	# PaddedStructs({%"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"*} -> %"struct.std::_Rb_tree_node_base"*): move from pack ^88 ({%"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"*}) to ^149 (opaque), index = 0
	movq %rbx, %rsi
	movq %rsi, %rdx
	# LowerStore(9792:3).9: mov %"struct.std::_Rb_tree_node_base"* ^91, (^90)
	movq %rdx, (%rcx)
	# tt = Pointer, type = {%"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"*}
	# LowerGetelementptr(9793:3): struct-type: {%"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"*}* ^89 -> ^92, indices=0,1
	movq %rax, %rcx
	addq $8, %rcx
	# LowerGetelementptr(9793:3): type of ^92 is %"struct.std::_Rb_tree_node_base"**
	# LowerExtractvalue(9795:3)
	# PaddedStructs({%"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"*} -> %"struct.std::_Rb_tree_node_base"*): move from pack ^88 ({%"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"*}) to ^150 (opaque), index = 1
	movq %r12, %rdx
	movq %rdx, %rax
	# LowerStore(9795:3).9: mov %"struct.std::_Rb_tree_node_base"* ^93, (^92)
	movq %rax, (%rcx)
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M1227
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M767:
	# tt = Pointer, type = %"class.std::_Rb_tree"
	# LowerGetelementptr(9799:3): struct-type: %"class.std::_Rb_tree"* ^17 -> ^95, indices=0,0
	movq -120(%rbp), %rax
	# LowerGetelementptr(9799:3): type of ^95 is %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Rb_tree_impl"*
	# LowerBasicConversion(9800:3): %"class.std::_Rb_tree"* ^95 -> %"struct.std::_Rb_tree_key_compare"* ^96
	movq %rax, %rbx
	# tt = Pointer, type = %"struct.std::_Rb_tree_key_compare"
	# LowerGetelementptr(9801:3): struct-type: %"struct.std::_Rb_tree_key_compare"* ^96 -> ^97, indices=0,0
	movq %rbx, %r13
	# LowerGetelementptr(9801:3): type of ^97 is %"struct.std::less"*
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(9802:3): struct-type: %"struct.std::_Rb_tree_iterator"* ^8 -> ^98, indices=0,0
	movq -136(%rbp), %rax
	# LowerGetelementptr(9802:3): type of ^98 is %"struct.std::_Rb_tree_node_base"**
	# LowerLoad(9803:3).2: (^98) into %"struct.std::_Rb_tree_node_base"* ^99
	movq (%rax), %rbx
	# SetupCalls(9804:3): move argument %"struct.std::_Rb_tree_node_base"* ^99
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE6_S_keyEPKSt18_Rb_tree_node_base
	# SetupCalls(9804:3): move %"class.std::__cxx11::basic_string"* result from %rax
	movq %rax, %rbx
	# LowerLoad(9805:3).2: (^7) into %"class.std::__cxx11::basic_string"* ^101
	movq -128(%rbp), %rax
	movq (%rax), %rcx
	# Clobber %rcx
	movq %rcx, -176(%rbp)
	# SetupCalls(9806:3): move argument %"struct.std::less"* nonnull dereferenceable(1) align 1 ^97
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	# SetupCalls(9806:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^100
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(9806:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^101
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdx
	callq _ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_
	# SetupCalls(9806:3): move i1 result from %rax
	movb %al, %bl
	# Unclobber %rcx
	movq -176(%rbp), %rcx
	cmpb $0, %bl
	jne .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M836
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M1195
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M836:
	# LowerBasicConversion(9810:3): %"struct.std::_Rb_tree_iterator"* ^12 -> i8* ^104
	movq -152(%rbp), %rax
	# LowerBasicConversion(9811:3): %"struct.std::_Rb_tree_iterator"* ^8 -> i8* ^105
	movq -136(%rbp), %rbx
	# Clobber %rax
	movq %rax, -184(%rbp)
	# SetupCalls(9812:3): move argument i8* align 8 ^104
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(9812:3): move argument i8* align 8 ^105
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(9812:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -184(%rbp), %rax
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(9813:3): struct-type: %"struct.std::_Rb_tree_iterator"* ^8 -> ^106, indices=0,0
	movq -136(%rbp), %rax
	# LowerGetelementptr(9813:3): type of ^106 is %"struct.std::_Rb_tree_node_base"**
	# LowerLoad(9814:3).2: (^106) into %"struct.std::_Rb_tree_node_base"* ^107
	movq (%rax), %r13
	# SetupCalls(9815:3): move argument %"class.std::_Rb_tree"* nonnull dereferenceable(48) align 8 ^17
	# Fixed movzx with identical source and destination widths
	movq -120(%rbp), %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE12_M_rightmostEv
	# SetupCalls(9815:3): move %"struct.std::_Rb_tree_node_base"** result from %rax
	movq %rax, %rbx
	# LowerLoad(9816:3).2: (^108) into %"struct.std::_Rb_tree_node_base"* ^109
	movq (%rbx), %rax
	# LowerIcmp(9817:3): %"struct.std::_Rb_tree_node_base"* ^107 vs. operand %"struct.std::_Rb_tree_node_base"* ^109
	cmpq %rax, %r13
	sete %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M901
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M952
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M901:
	# LowerStore(9821:3).3: mov $imm, (^13)
	movq $0, (%r12)
	# SetupCalls(9822:3): move argument %"class.std::_Rb_tree"* nonnull dereferenceable(48) align 8 ^17
	# Fixed movzx with identical source and destination widths
	movq -120(%rbp), %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE12_M_rightmostEv
	# SetupCalls(9822:3): move %"struct.std::_Rb_tree_node_base"** result from %rax
	movq %rax, %rbx
	# SetupCalls(9823:3): move argument %"struct.std::pair.21"* nonnull dereferenceable(16) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -112(%rbp), %rdi
	# SetupCalls(9823:3): move argument %"struct.std::_Rb_tree_node_base"** nonnull dereferenceable(8) align 8 ^13
	# Fixed movzx with identical source and destination widths
	movq %r12, %rsi
	# SetupCalls(9823:3): move argument %"struct.std::_Rb_tree_node_base"** nonnull dereferenceable(8) align 8 ^112
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdx
	callq _ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IS1_S1_Lb1EEERKS1_S5_
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M1227
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M952:
	# tt = Pointer, type = %"class.std::_Rb_tree"
	# LowerGetelementptr(9827:3): struct-type: %"class.std::_Rb_tree"* ^17 -> ^114, indices=0,0
	movq -120(%rbp), %rax
	# LowerGetelementptr(9827:3): type of ^114 is %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Rb_tree_impl"*
	# LowerBasicConversion(9828:3): %"class.std::_Rb_tree"* ^114 -> %"struct.std::_Rb_tree_key_compare"* ^115
	movq %rax, %rbx
	# tt = Pointer, type = %"struct.std::_Rb_tree_key_compare"
	# LowerGetelementptr(9829:3): struct-type: %"struct.std::_Rb_tree_key_compare"* ^115 -> ^116, indices=0,0
	movq %rbx, %r12
	# LowerGetelementptr(9829:3): type of ^116 is %"struct.std::less"*
	# LowerLoad(9830:3).2: (^7) into %"class.std::__cxx11::basic_string"* ^117
	movq -128(%rbp), %rax
	movq (%rax), %r13
	# SetupCalls(9831:3): move argument %"struct.std::_Rb_tree_iterator"* nonnull dereferenceable(8) align 8 ^12
	# Fixed movzx with identical source and destination widths
	movq -152(%rbp), %rdi
	callq _ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEEppEv
	# SetupCalls(9831:3): move %"struct.std::_Rb_tree_iterator"* result from %rax
	movq %rax, %rbx
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(9832:3): struct-type: %"struct.std::_Rb_tree_iterator"* ^118 -> ^119, indices=0,0
	movq %rbx, %rcx
	# LowerGetelementptr(9832:3): type of ^119 is %"struct.std::_Rb_tree_node_base"**
	# LowerLoad(9833:3).2: (^119) into %"struct.std::_Rb_tree_node_base"* ^120
	movq (%rcx), %rax
	# Clobber %rax
	movq %rax, -184(%rbp)
	# SetupCalls(9834:3): move argument %"struct.std::_Rb_tree_node_base"* ^120
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE6_S_keyEPKSt18_Rb_tree_node_base
	# SetupCalls(9834:3): move %"class.std::__cxx11::basic_string"* result from %rax
	movq %rax, %rbx
	# Unclobber %rax
	movq -184(%rbp), %rax
	# SetupCalls(9835:3): move argument %"struct.std::less"* nonnull dereferenceable(1) align 1 ^116
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(9835:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^117
	# Fixed movzx with identical source and destination widths
	movq %r13, %rsi
	# SetupCalls(9835:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^121
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdx
	callq _ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_
	# SetupCalls(9835:3): move i1 result from %rax
	movb %al, %bl
	cmpb $0, %bl
	jne .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M1044
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M1144
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M1044:
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(9839:3): struct-type: %"struct.std::_Rb_tree_iterator"* ^8 -> ^124, indices=0,0
	movq -136(%rbp), %rax
	# LowerGetelementptr(9839:3): type of ^124 is %"struct.std::_Rb_tree_node_base"**
	# LowerLoad(9840:3).2: (^124) into %"struct.std::_Rb_tree_node_base"* ^125
	movq (%rax), %rbx
	# SetupCalls(9841:3): move argument %"struct.std::_Rb_tree_node_base"* ^125
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE8_S_rightEPSt18_Rb_tree_node_base
	# SetupCalls(9841:3): move %"struct.std::_Rb_tree_node"* result from %rax
	movq %rax, %rbx
	# LowerIcmp(9842:3): %"struct.std::_Rb_tree_node"* ^126 vs. intlike 0
	cmpq $0, %rbx
	sete %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M1078
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M1110
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M1078:
	# LowerStore(9846:3).3: mov $imm, (^14)
	movq -144(%rbp), %rax
	movq $0, (%rax)
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(9847:3): struct-type: %"struct.std::_Rb_tree_iterator"* ^8 -> ^129, indices=0,0
	movq -136(%rbp), %rax
	# LowerGetelementptr(9847:3): type of ^129 is %"struct.std::_Rb_tree_node_base"**
	# Clobber %rax
	movq %rax, -184(%rbp)
	# SetupCalls(9848:3): move argument %"struct.std::pair.21"* nonnull dereferenceable(16) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -112(%rbp), %rdi
	# SetupCalls(9848:3): move argument %"struct.std::_Rb_tree_node_base"** nonnull dereferenceable(8) align 8 ^14
	# Fixed movzx with identical source and destination widths
	movq -144(%rbp), %rsi
	# SetupCalls(9848:3): move argument %"struct.std::_Rb_tree_node_base"** nonnull dereferenceable(8) align 8 ^129
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdx
	callq _ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IS1_S1_Lb1EEERKS1_S5_
	# Unclobber %rax
	movq -184(%rbp), %rax
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M1227
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M1110:
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(9852:3): struct-type: %"struct.std::_Rb_tree_iterator"* ^12 -> ^131, indices=0,0
	movq -152(%rbp), %rax
	# LowerGetelementptr(9852:3): type of ^131 is %"struct.std::_Rb_tree_node_base"**
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(9853:3): struct-type: %"struct.std::_Rb_tree_iterator"* ^12 -> ^132, indices=0,0
	movq -152(%rbp), %rbx
	# LowerGetelementptr(9853:3): type of ^132 is %"struct.std::_Rb_tree_node_base"**
	# Clobber %rax
	movq %rax, -184(%rbp)
	# SetupCalls(9854:3): move argument %"struct.std::pair.21"* nonnull dereferenceable(16) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -112(%rbp), %rdi
	# SetupCalls(9854:3): move argument %"struct.std::_Rb_tree_node_base"** nonnull dereferenceable(8) align 8 ^131
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(9854:3): move argument %"struct.std::_Rb_tree_node_base"** nonnull dereferenceable(8) align 8 ^132
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdx
	callq _ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_S4_Lb1EEEOT_OT0_
	# Unclobber %rax
	movq -184(%rbp), %rax
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M1227
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M1144:
	# LowerLoad(9858:3).2: (^7) into %"class.std::__cxx11::basic_string"* ^134
	movq -128(%rbp), %rax
	movq (%rax), %rbx
	# SetupCalls(9859:3): move argument %"class.std::_Rb_tree"* nonnull dereferenceable(48) align 8 ^17
	# Fixed movzx with identical source and destination widths
	movq -120(%rbp), %rdi
	# SetupCalls(9859:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^134
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE24_M_get_insert_unique_posERS7_
	# SetupCalls(9859:3): move 128-bit result from %rax and %rdx
	# Multireg move: <%hax %hdx> -> <%hbx %hr12>
	movq %rax, %rbx
	movq %rdx, %r12
	# LowerBasicConversion(9860:3): %"struct.std::pair.21"* ^4 -> {%"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"*}* ^136
	movq -112(%rbp), %rax
	# tt = Pointer, type = {%"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"*}
	# LowerGetelementptr(9861:3): struct-type: {%"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"*}* ^136 -> ^137, indices=0,0
	movq %rax, %rcx
	# LowerGetelementptr(9861:3): type of ^137 is %"struct.std::_Rb_tree_node_base"**
	# LowerExtractvalue(9863:3)
	# PaddedStructs({%"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"*} -> %"struct.std::_Rb_tree_node_base"*): move from pack ^135 ({%"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"*}) to ^151 (opaque), index = 0
	movq %rbx, %rsi
	movq %rsi, %rdx
	# LowerStore(9863:3).9: mov %"struct.std::_Rb_tree_node_base"* ^138, (^137)
	movq %rdx, (%rcx)
	# tt = Pointer, type = {%"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"*}
	# LowerGetelementptr(9864:3): struct-type: {%"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"*}* ^136 -> ^139, indices=0,1
	movq %rax, %rcx
	addq $8, %rcx
	# LowerGetelementptr(9864:3): type of ^139 is %"struct.std::_Rb_tree_node_base"**
	# LowerExtractvalue(9866:3)
	# PaddedStructs({%"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"*} -> %"struct.std::_Rb_tree_node_base"*): move from pack ^135 ({%"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"*}) to ^152 (opaque), index = 1
	movq %r12, %rdx
	movq %rdx, %rax
	# LowerStore(9866:3).9: mov %"struct.std::_Rb_tree_node_base"* ^140, (^139)
	movq %rax, (%rcx)
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M1227
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M1195:
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(9870:3): struct-type: %"struct.std::_Rb_tree_iterator"* ^8 -> ^142, indices=0,0
	movq -136(%rbp), %rax
	# LowerGetelementptr(9870:3): type of ^142 is %"struct.std::_Rb_tree_node_base"**
	# LowerStore(9871:3).3: mov $imm, (^15)
	movq $0, (%r14)
	# Clobber %rax
	movq %rax, -184(%rbp)
	# SetupCalls(9872:3): move argument %"struct.std::pair.21"* nonnull dereferenceable(16) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -112(%rbp), %rdi
	# SetupCalls(9872:3): move argument %"struct.std::_Rb_tree_node_base"** nonnull dereferenceable(8) align 8 ^142
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(9872:3): move argument %"struct.std::_Rb_tree_node_base"** nonnull dereferenceable(8) align 8 ^15
	# Fixed movzx with identical source and destination widths
	movq %r14, %rdx
	callq _ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IS1_S1_Lb1EEERKS1_S5_
	# Unclobber %rax
	movq -184(%rbp), %rax
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISI_ERS7___M1227:
	# LowerBasicConversion(9876:3): %"struct.std::pair.21"* ^4 -> {%"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"*}* ^144
	movq -112(%rbp), %rax
	# LowerLoad(9877:3).2: (^144) into {%"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"*} ^145
	# FinishMultireg: mov (%reg), <%pack...>
	movq (%rax), %rbx
	movq 8(%rax), %rcx
	# LowerRet: two-register return
	movq %rbx, %rax
	movq %rcx, %rdx
	movq -192(%rbp), %r15
	movq -272(%rbp), %r14
	movq -224(%rbp), %r13
	movq -256(%rbp), %r12
	movq -200(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _Z5clearRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE
.p2align 4, 0x90
_Z5clearRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE:
	.___Z5clearRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(8 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	# LowerAlloca(2198:3): size = 8, type = %"class.std::vector"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(2199:3).9: mov %"class.std::vector"* %rdi, (^2)
	movq %rdi, (%rax)
	# SetupCalls(2200:3): move argument %"class.std::basic_ostream"* nonnull dereferenceable(8) align 8 @_ZSt4cout
	leaq _ZSt4cout(%rip), %rdi
	# SetupCalls(2200:3): move argument i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10, i64 0, i64 0)
	leaq .str.10(%rip), %rsi
	callq _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
	# SetupCalls(2200:3): move %"class.std::basic_ostream"* result from %rax
	movq %rax, %rax
	movq $0, %rax
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE8max_sizeEv
.p2align 4, 0x90
_ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE8max_sizeEv:
	.___ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE8max_sizeEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(40 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(5834:3): size = 8, type = %"class.std::vector"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(5835:3).9: mov %"class.std::vector"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(5836:3).2: (^2) into %"class.std::vector"* ^3
	movq (%rax), %rbx
	# LowerBasicConversion(5837:3): %"class.std::vector"* ^3 -> %"struct.std::_Vector_base"* ^4
	movq %rbx, %rax
	# Clobber %rax
	movq %rax, -16(%rbp)
	# SetupCalls(5838:3): move argument %"struct.std::_Vector_base"* nonnull dereferenceable(24) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNKSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE19_M_get_Tp_allocatorEv
	# SetupCalls(5838:3): move %"class.std::allocator"* result from %rax
	movq %rax, %rbx
	# Unclobber %rax
	movq -16(%rbp), %rax
	# SetupCalls(5839:3): move argument %"class.std::allocator"* nonnull dereferenceable(1) align 1 ^5
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE11_S_max_sizeERKS4_
	# SetupCalls(5839:3): move i64 result from %rax
	movq %rax, %rbx
	movq %rbx, %rax
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EclINS_17__normal_iteratorIP6LsItemS2_ISF_SaISF_EEEESJ_EEbT_T0_
.p2align 4, 0x90
_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EclINS_17__normal_iteratorIP6LsItemS2_ISF_SaISF_EEEESJ_EEbT_T0_:
	.___ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EclINS_17__normal_iteratorIP6LsItemS2_ISF_SaISF_EEEESJ_EEbT_T0___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(72 + 0, 16)
	subq $80, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	movq %r12, -40(%rbp)
	movq %r13, -48(%rbp)
	movq %r14, -56(%rbp)
	# LowerAlloca(8051:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^4
	leaq -8(%rbp), %rbx
	# LowerAlloca(8052:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^5
	leaq -16(%rbp), %r12
	# LowerAlloca(8053:3): size = 8, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"**, var = ^6
	leaq -24(%rbp), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8054:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^4 -> ^7, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(8054:3): type of ^7 is %struct.LsItem**
	# LowerStore(8055:3).9: mov %struct.LsItem* %rsi, (^7)
	movq %rsi, (%rax)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8056:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^5 -> ^8, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(8056:3): type of ^8 is %struct.LsItem**
	# LowerStore(8057:3).9: mov %struct.LsItem* %rdx, (^8)
	movq %rdx, (%rax)
	# LowerStore(8058:3).9: mov %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %rdi, (^6)
	movq %rdi, (%rcx)
	# LowerLoad(8059:3).2: (^6) into %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* ^9
	movq (%rcx), %rax
	# tt = Pointer, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"
	# LowerGetelementptr(8060:3): struct-type: %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* ^9 -> ^10, indices=0,0
	movq %rax, %r13
	# LowerGetelementptr(8060:3): type of ^10 is %class.anon*
	# SetupCalls(8061:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEdeEv
	# SetupCalls(8061:3): move %struct.LsItem* result from %rax
	movq %rax, %r14
	# SetupCalls(8062:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEdeEv
	# SetupCalls(8062:3): move %struct.LsItem* result from %rax
	movq %rax, %rbx
	# SetupCalls(8063:3): move argument %class.anon* nonnull dereferenceable(1) align 1 ^10
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	# SetupCalls(8063:3): move argument %struct.LsItem* nonnull dereferenceable(33) align 8 ^11
	# Fixed movzx with identical source and destination widths
	movq %r14, %rsi
	# SetupCalls(8063:3): move argument %struct.LsItem* nonnull dereferenceable(33) align 8 ^12
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdx
	callq _ZZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEENK3$_0clERK6LsItemSB_
	# SetupCalls(8063:3): move i1 result from %rax
	movb %al, %bl
	movb %bl, %al
	movq -56(%rbp), %r14
	movq -48(%rbp), %r13
	movq -40(%rbp), %r12
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt10filesystem7__cxx1115directory_entry4pathEv
.p2align 4, 0x90
_ZNKSt10filesystem7__cxx1115directory_entry4pathEv:
	.___ZNKSt10filesystem7__cxx1115directory_entry4pathEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(1738:3): size = 8, type = %"class.std::filesystem::__cxx11::directory_entry"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(1739:3).9: mov %"class.std::filesystem::__cxx11::directory_entry"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(1740:3).2: (^2) into %"class.std::filesystem::__cxx11::directory_entry"* ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::directory_entry"
	# LowerGetelementptr(1741:3): struct-type: %"class.std::filesystem::__cxx11::directory_entry"* ^3 -> ^4, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(1741:3): type of ^4 is %"class.std::filesystem::__cxx11::path"*
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10filesystem7__cxx118__detail17__effective_rangeIcSt11char_traitsIcEEESt17basic_string_viewIT_S3_IS6_EERKS5_IS6_T0_E
.p2align 4, 0x90
_ZNSt10filesystem7__cxx118__detail17__effective_rangeIcSt11char_traitsIcEEESt17basic_string_viewIT_S3_IS6_EERKS5_IS6_T0_E:
	.___ZNSt10filesystem7__cxx118__detail17__effective_rangeIcSt11char_traitsIcEEESt17basic_string_viewIT_S3_IS6_EERKS5_IS6_T0_E__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(64 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -48(%rbp)
	movq %r12, -40(%rbp)
	# LowerAlloca(6473:3): size = 16, type = %"class.std::basic_string_view"*, var = ^2
	leaq -16(%rbp), %r12
	# LowerAlloca(6474:3): size = 8, type = %"class.std::basic_string_view"**, var = ^3
	leaq -24(%rbp), %rbx
	# LowerStore(6475:3).9: mov %"class.std::basic_string_view"* %rdi, (^3)
	movq %rdi, (%rbx)
	# LowerLoad(6476:3).2: (^3) into %"class.std::basic_string_view"* ^4
	movq (%rbx), %rax
	# LowerBasicConversion(6477:3): %"class.std::basic_string_view"* ^2 -> i8* ^5
	movq %r12, %rcx
	# LowerBasicConversion(6478:3): %"class.std::basic_string_view"* ^4 -> i8* ^6
	movq %rax, %rbx
	# Clobber %rcx
	movq %rcx, -32(%rbp)
	# SetupCalls(6479:3): move argument i8* align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(6479:3): move argument i8* align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(6479:3): move argument i64 16
	movq $16, %rdx
	callq memcpy@PLT
	# Unclobber %rcx
	movq -32(%rbp), %rcx
	# LowerBasicConversion(6480:3): %"class.std::basic_string_view"* ^2 -> {i64, i8*}* ^7
	movq %r12, %rcx
	# LowerLoad(6481:3).2: (^7) into {i64, i8*} ^8
	# FinishMultireg: mov (%reg), <%pack...>
	movq (%rcx), %rax
	movq 8(%rcx), %rbx
	# LowerRet: two-register return
	movq %rax, %rax
	movq %rbx, %rdx
	movq -40(%rbp), %r12
	movq -48(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE19_M_release_last_useEv
.p2align 4, 0x90
_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE19_M_release_last_useEv:
	.___ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE19_M_release_last_useEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(288 + 0, 16)
	subq $288, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -184(%rbp)
	movq %r12, -144(%rbp)
	movq %r13, -152(%rbp)
	movq %r14, -208(%rbp)
	movq %r15, -160(%rbp)
	# LowerAlloca(3492:3): size = 8, type = i32**, var = ^2
	leaq -8(%rbp), %r12
	# LowerAlloca(3493:3): size = 4, type = i32*, var = ^3
	leaq -12(%rbp), %r13
	# LowerAlloca(3494:3): size = 4, type = i32*, var = ^4
	# Fixing source-to-dest leaq -16(%rbp), -112(%rbp)
	leaq -16(%rbp), %r15
	movq %r15, -112(%rbp)
	# LowerAlloca(3495:3): size = 4, type = i32*, var = ^5
	# Fixing source-to-dest leaq -20(%rbp), -96(%rbp)
	leaq -20(%rbp), %r15
	movq %r15, -96(%rbp)
	# LowerAlloca(3496:3): size = 8, type = i32**, var = ^6
	# Fixing source-to-dest leaq -32(%rbp), -120(%rbp)
	leaq -32(%rbp), %r15
	movq %r15, -120(%rbp)
	# LowerAlloca(3497:3): size = 4, type = i32*, var = ^7
	leaq -36(%rbp), %rbx
	# LowerAlloca(3498:3): size = 4, type = i32*, var = ^8
	# Fixing source-to-dest leaq -40(%rbp), -104(%rbp)
	leaq -40(%rbp), %r15
	movq %r15, -104(%rbp)
	# LowerAlloca(3499:3): size = 4, type = i32*, var = ^9
	# Fixing source-to-dest leaq -44(%rbp), -88(%rbp)
	leaq -44(%rbp), %r15
	movq %r15, -88(%rbp)
	# LowerAlloca(3500:3): size = 8, type = i32**, var = ^10
	leaq -56(%rbp), %r14
	# LowerAlloca(3501:3): size = 4, type = i32*, var = ^11
	leaq -60(%rbp), %r15
	# LowerAlloca(3502:3): size = 8, type = %"class.std::_Sp_counted_base"**, var = ^12
	leaq -72(%rbp), %rcx
	# LowerStore(3503:3).9: mov %"class.std::_Sp_counted_base"* %rdi, (^12)
	movq %rdi, (%rcx)
	# LowerLoad(3504:3).2: (^12) into %"class.std::_Sp_counted_base"* ^13
	# Fixing source-to-dest movq (%rcx), -80(%rbp)
	pushq %r15
	movq (%rcx), %r15
	movq %r15, -80(%rbp)
	popq %r15
	# LowerBasicConversion(3505:3): %"class.std::_Sp_counted_base"* ^13 -> void (%"class.std::_Sp_counted_base"*) **** ^14
	movq -80(%rbp), %rax
	# LowerLoad(3506:3).2: (^14) into void (%"class.std::_Sp_counted_base"*) *** ^15
	movq (%rax), %rcx
	# tt = Pointer, type = void (%"class.std::_Sp_counted_base"*) **
	# LowerGetelementptr(3507:3): struct-type: void (%"class.std::_Sp_counted_base"*) *** ^15 -> ^16, indices=2
	movq %rcx, %rax
	addq $16, %rax
	# LowerGetelementptr(3507:3): type of ^16 is void (%"class.std::_Sp_counted_base"*) ***
	# LowerLoad(3508:3).2: (^16) into void (%"class.std::_Sp_counted_base"*) ** ^17
	movq (%rax), %rcx
	# Clobber %rcx
	movq %rcx, -128(%rbp)
	# SetupCalls(3509:3): move argument %"class.std::_Sp_counted_base"* nonnull dereferenceable(16) align 8 ^13
	# Fixed movzx with identical source and destination widths
	movq -80(%rbp), %rdi
	# SetupCalls(3509:3): jump to function operand ^17
	callq *%rcx
	# Unclobber %rcx
	movq -128(%rbp), %rcx
	# tt = Pointer, type = %"class.std::_Sp_counted_base"
	# LowerGetelementptr(3510:3): struct-type: %"class.std::_Sp_counted_base"* ^13 -> ^18, indices=0,2
	movq -80(%rbp), %rax
	addq $12, %rax
	# LowerGetelementptr(3510:3): type of ^18 is i32*
	# LowerStore(3511:3).9: mov %"class.std::_Sp_counted_base"* ^18, (^10)
	movq %rax, (%r14)
	# LowerStore(3512:3).3: mov $imm, (^11)
	movl $-1, (%r15)
	# LowerLoad(3513:3).4: __libc_single_threaded into ^19
	movq __libc_single_threaded(%rip), %rax
	# LowerIcmp(3514:3): i8 ^19 vs. intlike 0
	cmpb $0, %al
	setne %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE19_M_release_last_useEv__M76
	jmp .___ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE19_M_release_last_useEv__M106
	.___ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE19_M_release_last_useEv__M76:
	# LowerLoad(3518:3).2: (^10) into i32* ^22
	movq (%r14), %rax
	# LowerLoad(3519:3).2: (^11) into i32 ^23
	movl (%r15), %ecx
	# LowerStore(3520:3).9: mov i32* ^22, (^6)
	movq -120(%rbp), %rdx
	movq %rax, (%rdx)
	# LowerStore(3521:3).9: mov i32 ^23, (^7)
	movl %ecx, (%rbx)
	# LowerLoad(3522:3).2: (^6) into i32* ^24
	movq -120(%rbp), %rcx
	movq (%rcx), %rax
	# LowerLoad(3523:3).2: (^24) into i32 ^25
	movl (%rax), %ecx
	# LowerStore(3524:3).9: mov i32 ^25, (^8)
	movq -104(%rbp), %rax
	movl %ecx, (%rax)
	# LowerLoad(3525:3).2: (^7) into i32 ^26
	movl (%rbx), %eax
	# LowerLoad(3526:3).2: (^6) into i32* ^27
	movq -120(%rbp), %rcx
	movq (%rcx), %rbx
	# LowerLoad(3527:3).2: (^27) into i32 ^28
	movl (%rbx), %ecx
	# LowerMath(3528:3): ^28, ^26 into i32 ^29
	movl %ecx, %edx
	addl %eax, %edx
	# LowerStore(3529:3).9: mov i32 ^29, (^27)
	movl %edx, (%rbx)
	# LowerLoad(3530:3).2: (^8) into i32 ^30
	movq -104(%rbp), %rax
	movl (%rax), %ebx
	# LowerStore(3531:3).9: mov i32 ^30, (^9)
	movq -88(%rbp), %rax
	movl %ebx, (%rax)
	jmp .___ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE19_M_release_last_useEv__M131
	.___ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE19_M_release_last_useEv__M106:
	# LowerLoad(3535:3).2: (^10) into i32* ^32
	movq (%r14), %rax
	# LowerLoad(3536:3).2: (^11) into i32 ^33
	movl (%r15), %ebx
	# LowerStore(3537:3).9: mov i32* ^32, (^2)
	movq %rax, (%r12)
	# LowerStore(3538:3).9: mov i32 ^33, (^3)
	movl %ebx, (%r13)
	# LowerLoad(3539:3).2: (^2) into i32* ^34
	movq (%r12), %rbx
	# LowerLoad(3540:3).2: (^3) into i32 ^35
	movl (%r13), %ecx
	# LowerStore(3541:3).9: mov i32 ^35, (^4)
	movq -112(%rbp), %rax
	movl %ecx, (%rax)
	# LowerLoad(3542:3).2: (^4) into i32 ^36
	movq -112(%rbp), %rax
	movl (%rax), %ecx
	movl %ecx, %eax
	lock addl %eax, (%rbx)
	# LowerStore(3544:3).9: mov i32 ^37, (^5)
	movq -96(%rbp), %rbx
	movl %eax, (%rbx)
	# LowerLoad(3545:3).2: (^5) into i32 ^38
	movq -96(%rbp), %rax
	movl (%rax), %ebx
	# LowerStore(3546:3).9: mov i32 ^38, (^9)
	movq -88(%rbp), %rax
	movl %ebx, (%rax)
	.___ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE19_M_release_last_useEv__M131:
	# LowerLoad(3550:3).2: (^9) into i32 ^40
	movq -88(%rbp), %rax
	movl (%rax), %ebx
	# LowerIcmp(3551:3): i32 ^40 vs. intlike 1
	cmpl $1, %ebx
	sete %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE19_M_release_last_useEv__M138
	jmp .___ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE19_M_release_last_useEv__M172
	.___ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE19_M_release_last_useEv__M138:
	# LowerBasicConversion(3555:3): %"class.std::_Sp_counted_base"* ^13 -> void (%"class.std::_Sp_counted_base"*) **** ^43
	movq -80(%rbp), %rax
	# LowerLoad(3556:3).2: (^43) into void (%"class.std::_Sp_counted_base"*) *** ^44
	movq (%rax), %rbx
	# tt = Pointer, type = void (%"class.std::_Sp_counted_base"*) **
	# LowerGetelementptr(3557:3): struct-type: void (%"class.std::_Sp_counted_base"*) *** ^44 -> ^45, indices=3
	movq %rbx, %rcx
	addq $24, %rcx
	# LowerGetelementptr(3557:3): type of ^45 is void (%"class.std::_Sp_counted_base"*) ***
	# LowerLoad(3558:3).2: (^45) into void (%"class.std::_Sp_counted_base"*) ** ^46
	movq (%rcx), %rax
	# Clobber %rax
	movq %rax, -136(%rbp)
	# SetupCalls(3559:3): move argument %"class.std::_Sp_counted_base"* nonnull dereferenceable(16) align 8 ^13
	# Fixed movzx with identical source and destination widths
	movq -80(%rbp), %rdi
	# SetupCalls(3559:3): jump to function operand ^46
	callq *%rax
	# Unclobber %rax
	movq -136(%rbp), %rax
	.___ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE19_M_release_last_useEv__M172:
	movq -160(%rbp), %r15
	movq -208(%rbp), %r14
	movq -152(%rbp), %r13
	movq -144(%rbp), %r12
	movq -184(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEE4baseEv
.p2align 4, 0x90
_ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEE4baseEv:
	.___ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEE4baseEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(7151:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(7152:3).9: mov %"class.__gnu_cxx::__normal_iterator"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(7153:3).2: (^2) into %"class.__gnu_cxx::__normal_iterator"* ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7154:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^3 -> ^4, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(7154:3): type of ^4 is %struct.LsItem**
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt11_Tuple_implILm1EJNSt10filesystem7__cxx114path5_List13_Impl_deleterEEE7_M_headERS5_
.p2align 4, 0x90
_ZNSt11_Tuple_implILm1EJNSt10filesystem7__cxx114path5_List13_Impl_deleterEEE7_M_headERS5_:
	.___ZNSt11_Tuple_implILm1EJNSt10filesystem7__cxx114path5_List13_Impl_deleterEEE7_M_headERS5___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(4156:3): size = 8, type = %"struct.std::_Tuple_impl.3"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(4157:3).9: mov %"struct.std::_Tuple_impl.3"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(4158:3).2: (^2) into %"struct.std::_Tuple_impl.3"* ^3
	movq (%rax), %rbx
	# LowerBasicConversion(4159:3): %"struct.std::_Tuple_impl.3"* ^3 -> %"struct.std::_Head_base"* ^4
	movq %rbx, %rax
	# Clobber %rax
	movq %rax, -16(%rbp)
	# SetupCalls(4160:3): move argument %"struct.std::_Head_base"* nonnull dereferenceable(1) align 1 ^4
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt10_Head_baseILm1ENSt10filesystem7__cxx114path5_List13_Impl_deleterELb1EE7_M_headERS5_
	# SetupCalls(4160:3): move %"struct.std::filesystem::__cxx11::path::_List::_Impl_deleter"* result from %rax
	movq %rax, %rbx
	# Unclobber %rax
	movq -16(%rbp), %rax
	movq %rbx, %rax
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt19__relocate_object_aISt17basic_string_viewIcSt11char_traitsIcEES3_SaIS3_EEvPT_PT0_RT1_
.p2align 4, 0x90
_ZSt19__relocate_object_aISt17basic_string_viewIcSt11char_traitsIcEES3_SaIS3_EEvPT_PT0_RT1_:
	.___ZSt19__relocate_object_aISt17basic_string_viewIcSt11char_traitsIcEES3_SaIS3_EEvPT_PT0_RT1___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(208 + 0, 16)
	subq $208, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -168(%rbp)
	movq %r12, -160(%rbp)
	movq %r13, -176(%rbp)
	movq %r14, -184(%rbp)
	movq %r15, -144(%rbp)
	# LowerAlloca(5969:3): size = 8, type = %"class.std::__new_allocator"**, var = ^4
	# Fixing source-to-dest leaq -8(%rbp), -112(%rbp)
	leaq -8(%rbp), %r15
	movq %r15, -112(%rbp)
	# LowerAlloca(5970:3): size = 8, type = %"class.std::basic_string_view"**, var = ^5
	# Fixing source-to-dest leaq -16(%rbp), -120(%rbp)
	leaq -16(%rbp), %r15
	movq %r15, -120(%rbp)
	# LowerAlloca(5971:3): size = 8, type = %"class.std::allocator"**, var = ^6
	leaq -24(%rbp), %r12
	# LowerAlloca(5972:3): size = 8, type = %"class.std::basic_string_view"**, var = ^7
	leaq -32(%rbp), %rbx
	# LowerAlloca(5973:3): size = 8, type = %"class.std::__new_allocator"**, var = ^8
	leaq -40(%rbp), %rax
	# LowerAlloca(5974:3): size = 8, type = %"class.std::basic_string_view"**, var = ^9
	leaq -48(%rbp), %r9
	# LowerAlloca(5975:3): size = 8, type = %"class.std::basic_string_view"**, var = ^10
	leaq -56(%rbp), %r10
	# LowerAlloca(5976:3): size = 8, type = %"class.std::allocator"**, var = ^11
	leaq -64(%rbp), %r11
	# LowerAlloca(5977:3): size = 8, type = %"class.std::basic_string_view"**, var = ^12
	leaq -72(%rbp), %r8
	# LowerAlloca(5978:3): size = 8, type = %"class.std::basic_string_view"**, var = ^13
	leaq -80(%rbp), %rcx
	# LowerAlloca(5979:3): size = 8, type = %"class.std::basic_string_view"**, var = ^14
	leaq -88(%rbp), %r13
	# LowerAlloca(5980:3): size = 8, type = %"class.std::basic_string_view"**, var = ^15
	leaq -96(%rbp), %r14
	# LowerAlloca(5981:3): size = 8, type = %"class.std::allocator"**, var = ^16
	leaq -104(%rbp), %r15
	# LowerStore(5982:3).9: mov %"class.std::basic_string_view"* %rdi, (^14)
	movq %rdi, (%r13)
	# LowerStore(5983:3).9: mov %"class.std::basic_string_view"* %rsi, (^15)
	movq %rsi, (%r14)
	# LowerStore(5984:3).9: mov %"class.std::allocator"* %rdx, (^16)
	movq %rdx, (%r15)
	# LowerLoad(5985:3).2: (^16) into %"class.std::allocator"* ^17
	movq (%r15), %rsi
	# LowerLoad(5986:3).2: (^14) into %"class.std::basic_string_view"* ^18
	movq (%r13), %rdi
	# LowerLoad(5987:3).2: (^15) into %"class.std::basic_string_view"* ^19
	movq (%r14), %rdx
	# LowerStore(5988:3).9: mov %"class.std::allocator"* ^17, (^11)
	movq %rsi, (%r11)
	# LowerStore(5989:3).9: mov %"class.std::basic_string_view"* ^18, (^12)
	movq %rdi, (%r8)
	# LowerStore(5990:3).9: mov %"class.std::basic_string_view"* ^19, (^13)
	movq %rdx, (%rcx)
	# LowerLoad(5991:3).2: (^11) into %"class.std::allocator"* ^20
	movq (%r11), %rdx
	# LowerBasicConversion(5992:3): %"class.std::allocator"* ^20 -> %"class.std::__new_allocator"* ^21
	movq %rdx, %rsi
	# LowerLoad(5993:3).2: (^12) into %"class.std::basic_string_view"* ^22
	movq (%r8), %rdx
	# LowerLoad(5994:3).2: (^13) into %"class.std::basic_string_view"* ^23
	movq (%rcx), %rdi
	# LowerStore(5995:3).9: mov %"class.std::__new_allocator"* ^21, (^8)
	movq %rsi, (%rax)
	# LowerStore(5996:3).9: mov %"class.std::basic_string_view"* ^22, (^9)
	movq %rdx, (%r9)
	# LowerStore(5997:3).9: mov %"class.std::basic_string_view"* ^23, (^10)
	movq %rdi, (%r10)
	# LowerLoad(5998:3).2: (^8) into %"class.std::__new_allocator"* ^24
	movq (%rax), %rcx
	# LowerLoad(5999:3).2: (^9) into %"class.std::basic_string_view"* ^25
	movq (%r9), %rcx
	# LowerBasicConversion(6000:3): %"class.std::basic_string_view"* ^25 -> i8* ^26
	movq %rcx, %rax
	# LowerLoad(6001:3).2: (^10) into %"class.std::basic_string_view"* ^27
	movq (%r10), %rax
	# LowerBasicConversion(6002:3): %"class.std::basic_string_view"* ^25 -> i8* ^28
	movq %rcx, %rdx
	# LowerBasicConversion(6003:3): %"class.std::basic_string_view"* ^27 -> i8* ^29
	movq %rax, %rcx
	# Clobber %rdx
	movq %rdx, -128(%rbp)
	# Clobber %rcx
	movq %rcx, -136(%rbp)
	# SetupCalls(6004:3): move argument i8* align 8 ^28
	# Fixed movzx with identical source and destination widths
	movq %rdx, %rdi
	# SetupCalls(6004:3): move argument i8* align 8 ^29
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(6004:3): move argument i64 16
	movq $16, %rdx
	callq memcpy@PLT
	# Unclobber %rcx
	movq -136(%rbp), %rcx
	# Unclobber %rdx
	movq -128(%rbp), %rdx
	# LowerLoad(6005:3).2: (^16) into %"class.std::allocator"* ^30
	movq (%r15), %rax
	# LowerLoad(6006:3).2: (^15) into %"class.std::basic_string_view"* ^31
	movq (%r14), %rcx
	# LowerStore(6007:3).9: mov %"class.std::allocator"* ^30, (^6)
	movq %rax, (%r12)
	# LowerStore(6008:3).9: mov %"class.std::basic_string_view"* ^31, (^7)
	movq %rcx, (%rbx)
	# LowerLoad(6009:3).2: (^6) into %"class.std::allocator"* ^32
	movq (%r12), %rax
	# LowerBasicConversion(6010:3): %"class.std::allocator"* ^32 -> %"class.std::__new_allocator"* ^33
	movq %rax, %rcx
	# LowerLoad(6011:3).2: (^7) into %"class.std::basic_string_view"* ^34
	movq (%rbx), %rdx
	# LowerStore(6012:3).9: mov %"class.std::__new_allocator"* ^33, (^4)
	movq -112(%rbp), %rax
	movq %rcx, (%rax)
	# LowerStore(6013:3).9: mov %"class.std::basic_string_view"* ^34, (^5)
	movq -120(%rbp), %rax
	movq %rdx, (%rax)
	# LowerLoad(6014:3).2: (^4) into %"class.std::__new_allocator"* ^35
	movq -112(%rbp), %rbx
	movq (%rbx), %rax
	# LowerLoad(6015:3).2: (^5) into %"class.std::basic_string_view"* ^36
	movq -120(%rbp), %rbx
	movq (%rbx), %rax
	movq -144(%rbp), %r15
	movq -184(%rbp), %r14
	movq -176(%rbp), %r13
	movq -160(%rbp), %r12
	movq -168(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISA_EEEEED2Ev
.p2align 4, 0x90
_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISA_EEEEED2Ev:
	.___ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISA_EEEEED2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(2576:3): size = 8, type = %"struct.std::pair"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(2577:3).9: mov %"struct.std::pair"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(2578:3).2: (^2) into %"struct.std::pair"* ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"struct.std::pair"
	# LowerGetelementptr(2579:3): struct-type: %"struct.std::pair"* ^3 -> ^4, indices=0,1
	movq %rbx, %rax
	addq $32, %rax
	# LowerGetelementptr(2579:3): type of ^4 is %"class.std::function"*
	# Clobber %rax
	movq %rax, -16(%rbp)
	# SetupCalls(2580:3): move argument %"class.std::function"* nonnull dereferenceable(32) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt8functionIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEED2Ev
	# Unclobber %rax
	movq -16(%rbp), %rax
	# tt = Pointer, type = %"struct.std::pair"
	# LowerGetelementptr(2581:3): struct-type: %"struct.std::pair"* ^3 -> ^5, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(2581:3): type of ^5 is %"class.std::__cxx11::basic_string"*
	# Clobber %rax
	movq %rax, -16(%rbp)
	# SetupCalls(2582:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
	# Unclobber %rax
	movq -16(%rbp), %rax
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag
.p2align 4, 0x90
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag:
	.___ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(208 + 0, 16)
	subq $208, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -128(%rbp)
	movq %r12, -144(%rbp)
	movq %r13, -136(%rbp)
	movq %r14, -152(%rbp)
	movq %r15, -160(%rbp)
	# LowerAlloca(4271:3): size = 8, type = i8***, var = ^4
	leaq -8(%rbp), %rbx
	# LowerAlloca(4272:3): size = 8, type = i8**, var = ^5
	leaq -16(%rbp), %r9
	# LowerAlloca(4273:3): size = 8, type = i8**, var = ^6
	leaq -24(%rbp), %r8
	# LowerAlloca(4274:3): size = 8, type = %"class.std::__cxx11::basic_string"**, var = ^7
	leaq -32(%rbp), %rcx
	# LowerAlloca(4275:3): size = 8, type = i8**, var = ^8
	leaq -40(%rbp), %rax
	# LowerAlloca(4276:3): size = 8, type = i8**, var = ^9
	leaq -48(%rbp), %r10
	# LowerAlloca(4277:3): size = 1, type = %"struct.std::forward_iterator_tag"*, var = ^10
	leaq -49(%rbp), %r11
	# LowerAlloca(4278:3): size = 8, type = %"class.std::__cxx11::basic_string"**, var = ^11
	leaq -64(%rbp), %r11
	# LowerAlloca(4279:3): size = 8, type = i8**, var = ^12
	leaq -72(%rbp), %r13
	# LowerAlloca(4280:3): size = 8, type = i8**, var = ^13
	leaq -80(%rbp), %r12
	# LowerAlloca(4281:3): size = 8, type = i64*, var = ^14
	leaq -88(%rbp), %r14
	# LowerAlloca(4282:3): size = 8, type = %struct._Guard*, var = ^15
	# Fixing source-to-dest leaq -96(%rbp), -104(%rbp)
	leaq -96(%rbp), %r15
	movq %r15, -104(%rbp)
	# LowerStore(4283:3).9: mov %"class.std::__cxx11::basic_string"* %rdi, (^11)
	movq %rdi, (%r11)
	# LowerStore(4284:3).9: mov i8* %rsi, (^12)
	movq %rsi, (%r13)
	# LowerStore(4285:3).9: mov i8* %rdx, (^13)
	movq %rdx, (%r12)
	# LowerLoad(4286:3).2: (^11) into %"class.std::__cxx11::basic_string"* ^16
	movq (%r11), %r15
	# LowerLoad(4287:3).2: (^12) into i8* ^17
	movq (%r13), %rdx
	# LowerLoad(4288:3).2: (^13) into i8* ^18
	movq (%r12), %rsi
	# LowerStore(4289:3).9: mov i8* ^17, (^8)
	movq %rdx, (%rax)
	# LowerStore(4290:3).9: mov i8* ^18, (^9)
	movq %rsi, (%r10)
	# LowerLoad(4291:3).2: (^8) into i8* ^19
	movq (%rax), %rsi
	# LowerLoad(4292:3).2: (^9) into i8* ^20
	movq (%r10), %rdx
	# LowerStore(4293:3).9: mov i8** ^8, (^4)
	movq %rax, (%rbx)
	# LowerStore(4294:3).9: mov i8* ^19, (^5)
	movq %rsi, (%r9)
	# LowerStore(4295:3).9: mov i8* ^20, (^6)
	movq %rdx, (%r8)
	# LowerLoad(4296:3).2: (^6) into i8* ^21
	movq (%r8), %rax
	# LowerLoad(4297:3).2: (^5) into i8* ^22
	movq (%r9), %rbx
	# LowerBasicConversion(4298:3): i8* ^21 -> i64 ^23
	movq %rax, %rdx
	# LowerBasicConversion(4299:3): i8* ^22 -> i64 ^24
	movq %rbx, %rax
	# LowerMath(4300:3): ^23, ^24 into i64 ^25
	movq %rdx, %rbx
	subq %rax, %rbx
	# LowerStore(4301:3).9: mov i64 ^25, (^14)
	movq %rbx, (%r14)
	# LowerLoad(4302:3).2: (^14) into i64 ^26
	movq (%r14), %rax
	# LowerIcmp(4303:3): i64 ^26 vs. intlike 15
	cmpq $15, %rax
	seta %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag__M71
	jmp .___ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag__M147
	.___ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag__M71:
	# SetupCalls(4307:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^16
	# Fixed movzx with identical source and destination widths
	movq %r15, %rdi
	# SetupCalls(4307:3): move argument i64* nonnull dereferenceable(8) align 8 ^14
	# Fixed movzx with identical source and destination widths
	movq %r14, %rsi
	# SetupCalls(4307:3): move argument i64 0
	movq $0, %rdx
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT
	# SetupCalls(4307:3): move i8* result from %rax
	movq %rax, %rbx
	# SetupCalls(4308:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^16
	# Fixed movzx with identical source and destination widths
	movq %r15, %rdi
	# SetupCalls(4308:3): move argument i8* ^29
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc@PLT
	# LowerLoad(4309:3).2: (^14) into i64 ^30
	movq (%r14), %rax
	# Clobber %rax
	movq %rax, -112(%rbp)
	# SetupCalls(4310:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^16
	# Fixed movzx with identical source and destination widths
	movq %r15, %rdi
	# SetupCalls(4310:3): move argument i64 ^30
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEm@PLT
	# Unclobber %rax
	movq -112(%rbp), %rax
	jmp .___ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag__M175
	.___ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag__M147:
	# LowerStore(4314:3).9: mov %"class.std::__cxx11::basic_string"* ^16, (^7)
	movq %r15, (%rcx)
	# LowerLoad(4315:3).2: (^7) into %"class.std::__cxx11::basic_string"* ^32
	movq (%rcx), %rax
	# Clobber %rax
	movq %rax, -112(%rbp)
	# SetupCalls(4316:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^32
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv@PLT
	# SetupCalls(4316:3): move i8* result from %rax
	movq %rax, %rax
	# Unclobber %rax
	movq -112(%rbp), %rax
	.___ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag__M175:
	# SetupCalls(4320:3): move argument %struct._Guard* nonnull dereferenceable(8) align 8 ^15
	# Fixed movzx with identical source and destination widths
	movq -104(%rbp), %rdi
	# SetupCalls(4320:3): move argument %"class.std::__cxx11::basic_string"* ^16
	# Fixed movzx with identical source and destination widths
	movq %r15, %rsi
	callq _ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardC2EPS4_
	# SetupCalls(4321:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^16
	# Fixed movzx with identical source and destination widths
	movq %r15, %rdi
	callq _ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv@PLT
	# SetupCalls(4321:3): move i8* result from %rax
	movq %rax, %rbx
	# LowerLoad(4322:3).2: (^12) into i8* ^36
	movq (%r13), %rax
	# LowerLoad(4323:3).2: (^13) into i8* ^37
	movq (%r12), %rcx
	# Clobber %rcx
	movq %rcx, -120(%rbp)
	# Clobber %rax
	movq %rax, -112(%rbp)
	# SetupCalls(4324:3): move argument i8* ^35
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(4324:3): move argument i8* ^36
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(4324:3): move argument i8* ^37
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdx
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_@PLT
	# Unclobber %rax
	movq -112(%rbp), %rax
	# Unclobber %rcx
	movq -120(%rbp), %rcx
	# tt = Pointer, type = %struct._Guard
	# LowerGetelementptr(4325:3): struct-type: %struct._Guard* ^15 -> ^38, indices=0,0
	movq -104(%rbp), %rax
	# LowerGetelementptr(4325:3): type of ^38 is %"class.std::__cxx11::basic_string"**
	# LowerStore(4326:3).3: mov $imm, (^38)
	movq $0, (%rax)
	# LowerLoad(4327:3).2: (^14) into i64 ^39
	movq (%r14), %rax
	# Clobber %rax
	movq %rax, -112(%rbp)
	# SetupCalls(4328:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^16
	# Fixed movzx with identical source and destination widths
	movq %r15, %rdi
	# SetupCalls(4328:3): move argument i64 ^39
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm@PLT
	# Unclobber %rax
	movq -112(%rbp), %rax
	# SetupCalls(4329:3): move argument %struct._Guard* nonnull dereferenceable(8) align 8 ^15
	# Fixed movzx with identical source and destination widths
	movq -104(%rbp), %rdi
	callq _ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD2Ev
	movq -160(%rbp), %r15
	movq -152(%rbp), %r14
	movq -136(%rbp), %r13
	movq -144(%rbp), %r12
	movq -128(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEEaSEOS6_
.p2align 4, 0x90
_ZNSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEEaSEOS6_:
	.___ZNSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEEaSEOS6___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(48 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	movq %r12, -48(%rbp)
	movq %r13, -40(%rbp)
	# LowerAlloca(6357:3): size = 8, type = %"class.std::__uniq_ptr_impl"**, var = ^3
	leaq -8(%rbp), %rax
	# LowerAlloca(6358:3): size = 8, type = %"class.std::__uniq_ptr_impl"**, var = ^4
	leaq -16(%rbp), %rbx
	# LowerStore(6359:3).9: mov %"class.std::__uniq_ptr_impl"* %rdi, (^3)
	movq %rdi, (%rax)
	# LowerStore(6360:3).9: mov %"class.std::__uniq_ptr_impl"* %rsi, (^4)
	movq %rsi, (%rbx)
	# LowerLoad(6361:3).2: (^3) into %"class.std::__uniq_ptr_impl"* ^5
	movq (%rax), %r13
	# LowerLoad(6362:3).2: (^4) into %"class.std::__uniq_ptr_impl"* ^6
	movq (%rbx), %rax
	# Clobber %rax
	movq %rax, -24(%rbp)
	# SetupCalls(6363:3): move argument %"class.std::__uniq_ptr_impl"* nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE7releaseEv
	# SetupCalls(6363:3): move %"struct.std::filesystem::__cxx11::path::_List::_Impl"* result from %rax
	movq %rax, %r12
	# Unclobber %rax
	movq -24(%rbp), %rax
	# SetupCalls(6364:3): move argument %"class.std::__uniq_ptr_impl"* nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	# SetupCalls(6364:3): move argument %"struct.std::filesystem::__cxx11::path::_List::_Impl"* ^7
	# Fixed movzx with identical source and destination widths
	movq %r12, %rsi
	callq _ZNSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE5resetEPS4_
	# LowerLoad(6365:3).2: (^4) into %"class.std::__uniq_ptr_impl"* ^8
	movq (%rbx), %rax
	# Clobber %rax
	movq %rax, -24(%rbp)
	# SetupCalls(6366:3): move argument %"class.std::__uniq_ptr_impl"* nonnull dereferenceable(8) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE10_M_deleterEv
	# SetupCalls(6366:3): move %"struct.std::filesystem::__cxx11::path::_List::_Impl_deleter"* result from %rax
	movq %rax, %rax
	# Unclobber %rax
	movq -24(%rbp), %rax
	# SetupCalls(6367:3): move argument %"class.std::__uniq_ptr_impl"* nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	callq _ZNSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE10_M_deleterEv
	# SetupCalls(6367:3): move %"struct.std::filesystem::__cxx11::path::_List::_Impl_deleter"* result from %rax
	movq %rax, %rax
	movq %r13, %rax
	movq -40(%rbp), %r13
	movq -48(%rbp), %r12
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt12_Vector_baseI6LsItemSaIS0_EE11_M_allocateEm
.p2align 4, 0x90
_ZNSt12_Vector_baseI6LsItemSaIS0_EE11_M_allocateEm:
	.___ZNSt12_Vector_baseI6LsItemSaIS0_EE11_M_allocateEm__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(72 + 0, 16)
	subq $80, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -56(%rbp)
	movq %r12, -72(%rbp)
	# LowerAlloca(7100:3): size = 8, type = %"class.std::allocator.7"**, var = ^3
	leaq -8(%rbp), %r8
	# LowerAlloca(7101:3): size = 8, type = i64*, var = ^4
	leaq -16(%rbp), %rbx
	# LowerAlloca(7102:3): size = 8, type = %"struct.std::_Vector_base.6"**, var = ^5
	leaq -24(%rbp), %rax
	# LowerAlloca(7103:3): size = 8, type = i64*, var = ^6
	leaq -32(%rbp), %rdx
	# LowerStore(7104:3).9: mov %"struct.std::_Vector_base.6"* %rdi, (^5)
	movq %rdi, (%rax)
	# LowerStore(7105:3).9: mov i64 %rsi, (^6)
	movq %rsi, (%rdx)
	# LowerLoad(7106:3).2: (^5) into %"struct.std::_Vector_base.6"* ^7
	movq (%rax), %rcx
	# LowerLoad(7107:3).2: (^6) into i64 ^8
	movq (%rdx), %rax
	# LowerIcmp(7108:3): i64 ^8 vs. intlike 0
	cmpq $0, %rax
	setne %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt12_Vector_baseI6LsItemSaIS0_EE11_M_allocateEm__M21
	jmp .___ZNSt12_Vector_baseI6LsItemSaIS0_EE11_M_allocateEm__M69
	.___ZNSt12_Vector_baseI6LsItemSaIS0_EE11_M_allocateEm__M21:
	# tt = Pointer, type = %"struct.std::_Vector_base.6"
	# LowerGetelementptr(7112:3): struct-type: %"struct.std::_Vector_base.6"* ^7 -> ^11, indices=0,0
	movq %rcx, %rax
	# LowerGetelementptr(7112:3): type of ^11 is %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl"*
	# LowerBasicConversion(7113:3): %"struct.std::_Vector_base.6"* ^11 -> %"class.std::allocator.7"* ^12
	movq %rax, %rcx
	# LowerLoad(7114:3).2: (^6) into i64 ^13
	movq (%rdx), %rax
	# LowerStore(7115:3).9: mov %"class.std::allocator.7"* ^12, (^3)
	movq %rcx, (%r8)
	# LowerStore(7116:3).9: mov i64 ^13, (^4)
	movq %rax, (%rbx)
	# LowerLoad(7117:3).2: (^3) into %"class.std::allocator.7"* ^14
	movq (%r8), %rax
	# LowerBasicConversion(7118:3): %"class.std::allocator.7"* ^14 -> %"class.std::__new_allocator.8"* ^15
	movq %rax, %rcx
	# LowerLoad(7119:3).2: (^4) into i64 ^16
	movq (%rbx), %rax
	# Clobber %rcx
	movq %rcx, -40(%rbp)
	# Clobber %rax
	movq %rax, -48(%rbp)
	# SetupCalls(7120:3): move argument %"class.std::__new_allocator.8"* nonnull dereferenceable(1) align 1 ^15
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(7120:3): move argument i64 ^16
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(7120:3): move argument i8* null
	movq $0, %rdx
	callq _ZNSt15__new_allocatorI6LsItemE8allocateEmPKv
	# SetupCalls(7120:3): move %struct.LsItem* result from %rax
	movq %rax, %rbx
	# Unclobber %rax
	movq -48(%rbp), %rax
	# Unclobber %rcx
	movq -40(%rbp), %rcx
	# MovePhi: ^17 -> ^20
	movq %rbx, %r12
	jmp .___ZNSt12_Vector_baseI6LsItemSaIS0_EE11_M_allocateEm__M72
	.___ZNSt12_Vector_baseI6LsItemSaIS0_EE11_M_allocateEm__M69:
	# MovePhi: intlike -> ^20
	movq $0, %r12
	.___ZNSt12_Vector_baseI6LsItemSaIS0_EE11_M_allocateEm__M72:
	movq %r12, %rax
	movq -72(%rbp), %r12
	movq -56(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD2Ev
.p2align 4, 0x90
_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD2Ev:
	.___ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(4364:3): size = 8, type = %struct._Guard**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(4365:3).9: mov %struct._Guard* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(4366:3).2: (^2) into %struct._Guard* ^3
	movq (%rax), %rcx
	# tt = Pointer, type = %struct._Guard
	# LowerGetelementptr(4367:3): struct-type: %struct._Guard* ^3 -> ^4, indices=0,0
	movq %rcx, %rax
	# LowerGetelementptr(4367:3): type of ^4 is %"class.std::__cxx11::basic_string"**
	# LowerLoad(4368:3).2: (^4) into %"class.std::__cxx11::basic_string"* ^5
	movq (%rax), %rbx
	# LowerIcmp(4369:3): %"class.std::__cxx11::basic_string"* ^5 vs. intlike 0
	cmpq $0, %rbx
	setne %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD2Ev__M17
	jmp .___ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD2Ev__M45
	.___ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD2Ev__M17:
	# tt = Pointer, type = %struct._Guard
	# LowerGetelementptr(4373:3): struct-type: %struct._Guard* ^3 -> ^8, indices=0,0
	movq %rcx, %rax
	# LowerGetelementptr(4373:3): type of ^8 is %"class.std::__cxx11::basic_string"**
	# LowerLoad(4374:3).2: (^8) into %"class.std::__cxx11::basic_string"* ^9
	movq (%rax), %rbx
	# SetupCalls(4375:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv@PLT
	.___ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD2Ev__M45:
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt17_Function_handlerIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEPS9_E9_M_invokeERKSt9_Any_dataS8_
.p2align 4, 0x90
_ZNSt17_Function_handlerIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEPS9_E9_M_invokeERKSt9_Any_dataS8_:
	.___ZNSt17_Function_handlerIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEPS9_E9_M_invokeERKSt9_Any_dataS8___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(48 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	movq %r12, -40(%rbp)
	# LowerAlloca(4422:3): size = 8, type = %"union.std::_Any_data"**, var = ^3
	leaq -8(%rbp), %rcx
	# LowerAlloca(4423:3): size = 8, type = %"class.std::vector"**, var = ^4
	leaq -16(%rbp), %rbx
	# LowerStore(4424:3).9: mov %"union.std::_Any_data"* %rdi, (^3)
	movq %rdi, (%rcx)
	# LowerStore(4425:3).9: mov %"class.std::vector"* %rsi, (^4)
	movq %rsi, (%rbx)
	# LowerLoad(4426:3).2: (^3) into %"union.std::_Any_data"* ^5
	movq (%rcx), %rax
	# Clobber %rax
	movq %rax, -24(%rbp)
	# SetupCalls(4427:3): move argument %"union.std::_Any_data"* nonnull dereferenceable(16) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE14_M_get_pointerERKSt9_Any_data
	# SetupCalls(4427:3): move i32 (%"class.std::vector"*) *** result from %rax
	movq %rax, %r12
	# Unclobber %rax
	movq -24(%rbp), %rax
	# LowerLoad(4428:3).2: (^4) into %"class.std::vector"* ^7
	movq (%rbx), %rax
	# Clobber %rax
	movq %rax, -24(%rbp)
	# SetupCalls(4429:3): move argument i32 (%"class.std::vector"*) *** nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(4429:3): move argument %"class.std::vector"* nonnull dereferenceable(24) align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZSt10__invoke_rIiRPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEJS8_EENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EESD_E4typeEOSE_DpOSF_
	# SetupCalls(4429:3): move i32 result from %rax
	movl %eax, %ebx
	# Unclobber %rax
	movq -24(%rbp), %rax
	movl %ebx, %eax
	movq -40(%rbp), %r12
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt14_Function_baseC2Ev
.p2align 4, 0x90
_ZNSt14_Function_baseC2Ev:
	.___ZNSt14_Function_baseC2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(4386:3): size = 8, type = %"class.std::_Function_base"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(4387:3).9: mov %"class.std::_Function_base"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(4388:3).2: (^2) into %"class.std::_Function_base"* ^3
	movq (%rax), %rcx
	# tt = Pointer, type = %"class.std::_Function_base"
	# LowerGetelementptr(4389:3): struct-type: %"class.std::_Function_base"* ^3 -> ^4, indices=0,0
	movq %rcx, %rax
	# LowerGetelementptr(4389:3): type of ^4 is %"union.std::_Any_data"*
	# LowerBasicConversion(4390:3): %"class.std::_Function_base"* ^4 -> %"union.std::_Nocopy_types"* ^5
	movq %rax, %rbx
	# LowerBasicConversion(4391:3): %"union.std::_Nocopy_types"* ^5 -> i8** ^6
	movq %rbx, %rax
	# LowerStore(4392:3).3: mov $imm, (^6)
	movq $0, (%rax)
	# tt = Pointer, type = %"class.std::_Function_base"
	# LowerGetelementptr(4393:3): struct-type: %"class.std::_Function_base"* ^3 -> ^7, indices=0,1
	movq %rcx, %rax
	addq $16, %rax
	# LowerGetelementptr(4393:3): type of ^7 is i1 (%"union.std::_Any_data"*, %"union.std::_Any_data"*, i32) ***
	# LowerStore(4394:3).3: mov $imm, (^7)
	movq $0, (%rax)
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_
.p2align 4, 0x90
_ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_:
	.___ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(640 + 0, 16)
	subq $640, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -272(%rbp)
	movq %r12, -304(%rbp)
	movq %r13, -336(%rbp)
	movq %r14, -344(%rbp)
	movq %r15, -248(%rbp)
	# LowerAlloca(6052:3): size = 8, type = %"class.std::__new_allocator"**, var = ^4
	# Fixing source-to-dest leaq -8(%rbp), -200(%rbp)
	leaq -8(%rbp), %r15
	movq %r15, -200(%rbp)
	# LowerAlloca(6053:3): size = 8, type = %"class.std::basic_string_view"**, var = ^5
	# Fixing source-to-dest leaq -16(%rbp), -208(%rbp)
	leaq -16(%rbp), %r15
	movq %r15, -208(%rbp)
	# LowerAlloca(6054:3): size = 8, type = %"class.std::basic_string_view"**, var = ^6
	# Fixing source-to-dest leaq -24(%rbp), -192(%rbp)
	leaq -24(%rbp), %r15
	movq %r15, -192(%rbp)
	# LowerAlloca(6055:3): size = 8, type = %"class.std::allocator"**, var = ^7
	leaq -32(%rbp), %rbx
	# LowerAlloca(6056:3): size = 8, type = %"class.std::basic_string_view"**, var = ^8
	# Fixing source-to-dest leaq -40(%rbp), -216(%rbp)
	leaq -40(%rbp), %r15
	movq %r15, -216(%rbp)
	# LowerAlloca(6057:3): size = 8, type = %"class.std::basic_string_view"**, var = ^9
	# Fixing source-to-dest leaq -48(%rbp), -224(%rbp)
	leaq -48(%rbp), %r15
	movq %r15, -224(%rbp)
	# LowerAlloca(6058:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator.19"*, var = ^10
	# Fixing source-to-dest leaq -56(%rbp), -184(%rbp)
	leaq -56(%rbp), %r15
	movq %r15, -184(%rbp)
	# LowerAlloca(6059:3): size = 8, type = %"class.std::vector"**, var = ^11
	leaq -64(%rbp), %rcx
	# LowerAlloca(6060:3): size = 8, type = %"class.std::basic_string_view"**, var = ^12
	leaq -72(%rbp), %r12
	# LowerAlloca(6061:3): size = 8, type = i64*, var = ^13
	# Fixing source-to-dest leaq -80(%rbp), -136(%rbp)
	leaq -80(%rbp), %r15
	movq %r15, -136(%rbp)
	# LowerAlloca(6062:3): size = 8, type = %"class.std::basic_string_view"**, var = ^14
	# Fixing source-to-dest leaq -88(%rbp), -168(%rbp)
	leaq -88(%rbp), %r15
	movq %r15, -168(%rbp)
	# LowerAlloca(6063:3): size = 8, type = %"class.std::basic_string_view"**, var = ^15
	# Fixing source-to-dest leaq -96(%rbp), -176(%rbp)
	leaq -96(%rbp), %r15
	movq %r15, -176(%rbp)
	# LowerAlloca(6064:3): size = 8, type = i64*, var = ^16
	leaq -104(%rbp), %r13
	# LowerAlloca(6065:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator.19"*, var = ^17
	leaq -112(%rbp), %r14
	# LowerAlloca(6066:3): size = 8, type = %"class.std::basic_string_view"**, var = ^18
	# Fixing source-to-dest leaq -120(%rbp), -144(%rbp)
	leaq -120(%rbp), %r15
	movq %r15, -144(%rbp)
	# LowerAlloca(6067:3): size = 8, type = %"class.std::basic_string_view"**, var = ^19
	# Fixing source-to-dest leaq -128(%rbp), -160(%rbp)
	leaq -128(%rbp), %r15
	movq %r15, -160(%rbp)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator.19"
	# LowerGetelementptr(6068:3): struct-type: %"class.__gnu_cxx::__normal_iterator.19"* ^10 -> ^20, indices=0,0
	movq -184(%rbp), %rax
	# LowerGetelementptr(6068:3): type of ^20 is %"class.std::basic_string_view"**
	# LowerStore(6069:3).9: mov %"class.std::basic_string_view"* %rsi, (^20)
	movq %rsi, (%rax)
	# LowerStore(6070:3).9: mov %"class.std::vector"* %rdi, (^11)
	movq %rdi, (%rcx)
	# LowerStore(6071:3).9: mov %"class.std::basic_string_view"* %rdx, (^12)
	movq %rdx, (%r12)
	# LowerLoad(6072:3).2: (^11) into %"class.std::vector"* ^21
	# Fixing source-to-dest movq (%rcx), -152(%rbp)
	movq (%rcx), %r15
	movq %r15, -152(%rbp)
	# SetupCalls(6073:3): move argument %"class.std::vector"* nonnull dereferenceable(24) align 8 ^21
	# Fixed movzx with identical source and destination widths
	movq -152(%rbp), %rdi
	# SetupCalls(6073:3): move argument i64 1
	movq $1, %rsi
	# SetupCalls(6073:3): move argument i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.27, i64 0, i64 0)
	leaq .str.27(%rip), %rdx
	callq _ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12_M_check_lenEmPKc
	# SetupCalls(6073:3): move i64 result from %rax
	movq %rax, %r15
	# LowerStore(6074:3).9: mov i64 ^22, (^13)
	movq -136(%rbp), %rax
	movq %r15, (%rax)
	# LowerBasicConversion(6075:3): %"class.std::vector"* ^21 -> %"struct.std::_Vector_base"* ^23
	movq -152(%rbp), %rax
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(6076:3): struct-type: %"struct.std::_Vector_base"* ^23 -> ^24, indices=0,0
	movq %rax, %rcx
	# LowerGetelementptr(6076:3): type of ^24 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# LowerBasicConversion(6077:3): %"struct.std::_Vector_base"* ^24 -> %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^25
	movq %rcx, %rdx
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(6078:3): struct-type: %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^25 -> ^26, indices=0,0
	movq %rdx, %rax
	# LowerGetelementptr(6078:3): type of ^26 is %"class.std::basic_string_view"**
	# LowerLoad(6079:3).2: (^26) into %"class.std::basic_string_view"* ^27
	movq (%rax), %rcx
	# LowerStore(6080:3).9: mov %"class.std::basic_string_view"* ^27, (^14)
	movq -168(%rbp), %rax
	movq %rcx, (%rax)
	# LowerBasicConversion(6081:3): %"class.std::vector"* ^21 -> %"struct.std::_Vector_base"* ^28
	movq -152(%rbp), %rax
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(6082:3): struct-type: %"struct.std::_Vector_base"* ^28 -> ^29, indices=0,0
	movq %rax, %rcx
	# LowerGetelementptr(6082:3): type of ^29 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# LowerBasicConversion(6083:3): %"struct.std::_Vector_base"* ^29 -> %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^30
	movq %rcx, %rax
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(6084:3): struct-type: %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^30 -> ^31, indices=0,1
	movq %rax, %rcx
	addq $8, %rcx
	# LowerGetelementptr(6084:3): type of ^31 is %"class.std::basic_string_view"**
	# LowerLoad(6085:3).2: (^31) into %"class.std::basic_string_view"* ^32
	movq (%rcx), %rax
	# LowerStore(6086:3).9: mov %"class.std::basic_string_view"* ^32, (^15)
	movq -176(%rbp), %rcx
	movq %rax, (%rcx)
	# SetupCalls(6087:3): move argument %"class.std::vector"* nonnull dereferenceable(24) align 8 ^21
	# Fixed movzx with identical source and destination widths
	movq -152(%rbp), %rdi
	callq _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE5beginEv
	# SetupCalls(6087:3): move %"class.std::basic_string_view"* result from %rax
	movq %rax, %r15
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator.19"
	# LowerGetelementptr(6088:3): struct-type: %"class.__gnu_cxx::__normal_iterator.19"* ^17 -> ^34, indices=0,0
	movq %r14, %rax
	# LowerGetelementptr(6088:3): type of ^34 is %"class.std::basic_string_view"**
	# LowerStore(6089:3).9: mov %"class.std::basic_string_view"* ^33, (^34)
	movq %r15, (%rax)
	# SetupCalls(6090:3): move argument %"class.__gnu_cxx::__normal_iterator.19"* nonnull dereferenceable(8) align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq -184(%rbp), %rdi
	# SetupCalls(6090:3): move argument %"class.__gnu_cxx::__normal_iterator.19"* nonnull dereferenceable(8) align 8 ^17
	# Fixed movzx with identical source and destination widths
	movq %r14, %rsi
	callq _ZN9__gnu_cxxmiIPSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_
	# SetupCalls(6090:3): move i64 result from %rax
	movq %rax, %r14
	# LowerStore(6091:3).9: mov i64 ^35, (^16)
	movq %r14, (%r13)
	# LowerBasicConversion(6092:3): %"class.std::vector"* ^21 -> %"struct.std::_Vector_base"* ^36
	movq -152(%rbp), %rax
	# LowerLoad(6093:3).2: (^13) into i64 ^37
	movq -136(%rbp), %rdx
	movq (%rdx), %rcx
	# Clobber %rcx
	movq %rcx, -232(%rbp)
	# Clobber %rax
	movq %rax, -240(%rbp)
	# SetupCalls(6094:3): move argument %"struct.std::_Vector_base"* nonnull dereferenceable(24) align 8 ^36
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(6094:3): move argument i64 ^37
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	callq _ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE11_M_allocateEm
	# SetupCalls(6094:3): move %"class.std::basic_string_view"* result from %rax
	movq %rax, %r14
	# Unclobber %rax
	movq -240(%rbp), %rax
	# Unclobber %rcx
	movq -232(%rbp), %rcx
	# LowerStore(6095:3).9: mov %"class.std::basic_string_view"* ^38, (^18)
	movq -144(%rbp), %rax
	movq %r14, (%rax)
	# LowerLoad(6096:3).2: (^18) into %"class.std::basic_string_view"* ^39
	movq -144(%rbp), %rcx
	movq (%rcx), %rax
	# LowerStore(6097:3).9: mov %"class.std::basic_string_view"* ^39, (^19)
	movq -160(%rbp), %rcx
	movq %rax, (%rcx)
	# LowerBasicConversion(6098:3): %"class.std::vector"* ^21 -> %"struct.std::_Vector_base"* ^40
	movq -152(%rbp), %rax
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(6099:3): struct-type: %"struct.std::_Vector_base"* ^40 -> ^41, indices=0,0
	movq %rax, %rcx
	# LowerGetelementptr(6099:3): type of ^41 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# LowerBasicConversion(6100:3): %"struct.std::_Vector_base"* ^41 -> %"class.std::allocator"* ^42
	movq %rcx, %rdx
	# LowerLoad(6101:3).2: (^18) into %"class.std::basic_string_view"* ^43
	movq -144(%rbp), %rcx
	movq (%rcx), %rax
	# LowerLoad(6102:3).2: (^16) into i64 ^44
	movq (%r13), %rcx
	# tt = Pointer, type = %"class.std::basic_string_view"
	# LowerGetelementptr(6103:3): pointer-type -> ^45
	movq %rcx, %rsi
	shlq $4, %rsi
	addq %rax, %rsi
	# LowerLoad(6104:3).2: (^12) into %"class.std::basic_string_view"* ^46
	movq (%r12), %rax
	# LowerStore(6105:3).9: mov %"class.std::allocator"* ^42, (^7)
	movq %rdx, (%rbx)
	# LowerStore(6106:3).9: mov %"class.std::basic_string_view"* ^45, (^8)
	movq -216(%rbp), %rcx
	movq %rsi, (%rcx)
	# LowerStore(6107:3).9: mov %"class.std::basic_string_view"* ^46, (^9)
	movq -224(%rbp), %rcx
	movq %rax, (%rcx)
	# LowerLoad(6108:3).2: (^7) into %"class.std::allocator"* ^47
	movq (%rbx), %rax
	# LowerBasicConversion(6109:3): %"class.std::allocator"* ^47 -> %"class.std::__new_allocator"* ^48
	movq %rax, %rcx
	# LowerLoad(6110:3).2: (^8) into %"class.std::basic_string_view"* ^49
	movq -216(%rbp), %rbx
	movq (%rbx), %rax
	# LowerLoad(6111:3).2: (^9) into %"class.std::basic_string_view"* ^50
	movq -224(%rbp), %rdx
	movq (%rdx), %rbx
	# LowerStore(6112:3).9: mov %"class.std::__new_allocator"* ^48, (^4)
	movq -200(%rbp), %rdx
	movq %rcx, (%rdx)
	# LowerStore(6113:3).9: mov %"class.std::basic_string_view"* ^49, (^5)
	movq -208(%rbp), %rcx
	movq %rax, (%rcx)
	# LowerStore(6114:3).9: mov %"class.std::basic_string_view"* ^50, (^6)
	movq -192(%rbp), %rax
	movq %rbx, (%rax)
	# LowerLoad(6115:3).2: (^4) into %"class.std::__new_allocator"* ^51
	movq -200(%rbp), %rbx
	movq (%rbx), %rax
	# LowerLoad(6116:3).2: (^5) into %"class.std::basic_string_view"* ^52
	movq -208(%rbp), %rbx
	movq (%rbx), %rax
	# LowerBasicConversion(6117:3): %"class.std::basic_string_view"* ^52 -> i8* ^53
	movq %rax, %rbx
	# LowerLoad(6118:3).2: (^6) into %"class.std::basic_string_view"* ^54
	movq -192(%rbp), %rbx
	movq (%rbx), %rcx
	# LowerBasicConversion(6119:3): %"class.std::basic_string_view"* ^52 -> i8* ^55
	movq %rax, %rbx
	# LowerBasicConversion(6120:3): %"class.std::basic_string_view"* ^54 -> i8* ^56
	movq %rcx, %rax
	# Clobber %rax
	movq %rax, -240(%rbp)
	# SetupCalls(6121:3): move argument i8* align 8 ^55
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(6121:3): move argument i8* align 8 ^56
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(6121:3): move argument i64 16
	movq $16, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -240(%rbp), %rax
	# LowerStore(6122:3).3: mov $imm, (^19)
	movq -160(%rbp), %rax
	movq $0, (%rax)
	# LowerLoad(6123:3).2: (^14) into %"class.std::basic_string_view"* ^57
	movq -168(%rbp), %rax
	movq (%rax), %r12
	# SetupCalls(6124:3): move argument %"class.__gnu_cxx::__normal_iterator.19"* nonnull dereferenceable(8) align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq -184(%rbp), %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIPSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEE4baseEv
	# SetupCalls(6124:3): move %"class.std::basic_string_view"** result from %rax
	movq %rax, %rbx
	# LowerLoad(6125:3).2: (^58) into %"class.std::basic_string_view"* ^59
	movq (%rbx), %r13
	# LowerLoad(6126:3).2: (^18) into %"class.std::basic_string_view"* ^60
	movq -144(%rbp), %rax
	movq (%rax), %r14
	# LowerBasicConversion(6127:3): %"class.std::vector"* ^21 -> %"struct.std::_Vector_base"* ^61
	movq -152(%rbp), %rax
	# Clobber %rax
	movq %rax, -240(%rbp)
	# SetupCalls(6128:3): move argument %"struct.std::_Vector_base"* nonnull dereferenceable(24) align 8 ^61
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE19_M_get_Tp_allocatorEv
	# SetupCalls(6128:3): move %"class.std::allocator"* result from %rax
	movq %rax, %rbx
	# Unclobber %rax
	movq -240(%rbp), %rax
	# SetupCalls(6129:3): move argument %"class.std::basic_string_view"* ^57
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(6129:3): move argument %"class.std::basic_string_view"* ^59
	# Fixed movzx with identical source and destination widths
	movq %r13, %rsi
	# SetupCalls(6129:3): move argument %"class.std::basic_string_view"* ^60
	# Fixed movzx with identical source and destination widths
	movq %r14, %rdx
	# SetupCalls(6129:3): move argument %"class.std::allocator"* nonnull dereferenceable(1) align 1 ^62
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rcx
	callq _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE11_S_relocateEPS3_S6_S6_RS4_
	# SetupCalls(6129:3): move %"class.std::basic_string_view"* result from %rax
	movq %rax, %rbx
	# LowerStore(6130:3).9: mov %"class.std::basic_string_view"* ^63, (^19)
	movq -160(%rbp), %rax
	movq %rbx, (%rax)
	# LowerLoad(6131:3).2: (^19) into %"class.std::basic_string_view"* ^64
	movq -160(%rbp), %rbx
	movq (%rbx), %rax
	# tt = Pointer, type = %"class.std::basic_string_view"
	# LowerGetelementptr(6132:3): struct-type: %"class.std::basic_string_view"* ^64 -> ^65, indices=1
	movq %rax, %rbx
	addq $16, %rbx
	# LowerGetelementptr(6132:3): type of ^65 is %"class.std::basic_string_view"*
	# LowerStore(6133:3).9: mov %"class.std::basic_string_view"* ^65, (^19)
	movq -160(%rbp), %rax
	movq %rbx, (%rax)
	# SetupCalls(6134:3): move argument %"class.__gnu_cxx::__normal_iterator.19"* nonnull dereferenceable(8) align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq -184(%rbp), %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIPSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEE4baseEv
	# SetupCalls(6134:3): move %"class.std::basic_string_view"** result from %rax
	movq %rax, %r12
	# LowerLoad(6135:3).2: (^66) into %"class.std::basic_string_view"* ^67
	movq (%r12), %rbx
	# LowerLoad(6136:3).2: (^15) into %"class.std::basic_string_view"* ^68
	movq -176(%rbp), %rax
	movq (%rax), %r12
	# LowerLoad(6137:3).2: (^19) into %"class.std::basic_string_view"* ^69
	movq -160(%rbp), %rax
	movq (%rax), %r13
	# LowerBasicConversion(6138:3): %"class.std::vector"* ^21 -> %"struct.std::_Vector_base"* ^70
	movq -152(%rbp), %rax
	# Clobber %rax
	movq %rax, -240(%rbp)
	# SetupCalls(6139:3): move argument %"struct.std::_Vector_base"* nonnull dereferenceable(24) align 8 ^70
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE19_M_get_Tp_allocatorEv
	# SetupCalls(6139:3): move %"class.std::allocator"* result from %rax
	movq %rax, %r14
	# Unclobber %rax
	movq -240(%rbp), %rax
	# SetupCalls(6140:3): move argument %"class.std::basic_string_view"* ^67
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(6140:3): move argument %"class.std::basic_string_view"* ^68
	# Fixed movzx with identical source and destination widths
	movq %r12, %rsi
	# SetupCalls(6140:3): move argument %"class.std::basic_string_view"* ^69
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdx
	# SetupCalls(6140:3): move argument %"class.std::allocator"* nonnull dereferenceable(1) align 1 ^71
	# Fixed movzx with identical source and destination widths
	movq %r14, %rcx
	callq _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE11_S_relocateEPS3_S6_S6_RS4_
	# SetupCalls(6140:3): move %"class.std::basic_string_view"* result from %rax
	movq %rax, %rbx
	# LowerStore(6141:3).9: mov %"class.std::basic_string_view"* ^72, (^19)
	movq -160(%rbp), %rax
	movq %rbx, (%rax)
	# LowerBasicConversion(6142:3): %"class.std::vector"* ^21 -> %"struct.std::_Vector_base"* ^73
	movq -152(%rbp), %rax
	# LowerLoad(6143:3).2: (^14) into %"class.std::basic_string_view"* ^74
	movq -168(%rbp), %rcx
	movq (%rcx), %rbx
	# LowerBasicConversion(6144:3): %"class.std::vector"* ^21 -> %"struct.std::_Vector_base"* ^75
	movq -152(%rbp), %rcx
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(6145:3): struct-type: %"struct.std::_Vector_base"* ^75 -> ^76, indices=0,0
	movq %rcx, %rdx
	# LowerGetelementptr(6145:3): type of ^76 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# LowerBasicConversion(6146:3): %"struct.std::_Vector_base"* ^76 -> %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^77
	movq %rdx, %rcx
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(6147:3): struct-type: %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^77 -> ^78, indices=0,2
	movq %rcx, %rdx
	addq $16, %rdx
	# LowerGetelementptr(6147:3): type of ^78 is %"class.std::basic_string_view"**
	# LowerLoad(6148:3).2: (^78) into %"class.std::basic_string_view"* ^79
	movq (%rdx), %rcx
	# LowerLoad(6149:3).2: (^14) into %"class.std::basic_string_view"* ^80
	movq -168(%rbp), %rsi
	movq (%rsi), %rdx
	# LowerBasicConversion(6150:3): %"class.std::basic_string_view"* ^79 -> i64 ^81
	movq %rcx, %rsi
	# LowerBasicConversion(6151:3): %"class.std::basic_string_view"* ^80 -> i64 ^82
	movq %rdx, %rcx
	# LowerMath(6152:3): ^81, ^82 into i64 ^83
	movq %rsi, %rdx
	subq %rcx, %rdx
	# LowerSdiv(6153:3): ^83, 16 into i64 ^84
	movq %rdx, %rcx
	sarq $4, %rcx
	# Clobber %rcx
	movq %rcx, -232(%rbp)
	# Clobber %rax
	movq %rax, -240(%rbp)
	# SetupCalls(6154:3): move argument %"struct.std::_Vector_base"* nonnull dereferenceable(24) align 8 ^73
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(6154:3): move argument %"class.std::basic_string_view"* ^74
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(6154:3): move argument i64 ^84
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdx
	callq _ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE13_M_deallocateEPS3_m
	# Unclobber %rax
	movq -240(%rbp), %rax
	# Unclobber %rcx
	movq -232(%rbp), %rcx
	# LowerLoad(6155:3).2: (^18) into %"class.std::basic_string_view"* ^85
	movq -144(%rbp), %rax
	movq (%rax), %rbx
	# LowerBasicConversion(6156:3): %"class.std::vector"* ^21 -> %"struct.std::_Vector_base"* ^86
	movq -152(%rbp), %rax
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(6157:3): struct-type: %"struct.std::_Vector_base"* ^86 -> ^87, indices=0,0
	movq %rax, %rcx
	# LowerGetelementptr(6157:3): type of ^87 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# LowerBasicConversion(6158:3): %"struct.std::_Vector_base"* ^87 -> %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^88
	movq %rcx, %rax
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(6159:3): struct-type: %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^88 -> ^89, indices=0,0
	movq %rax, %rcx
	# LowerGetelementptr(6159:3): type of ^89 is %"class.std::basic_string_view"**
	# LowerStore(6160:3).9: mov %"class.std::basic_string_view"* ^85, (^89)
	movq %rbx, (%rcx)
	# LowerLoad(6161:3).2: (^19) into %"class.std::basic_string_view"* ^90
	movq -160(%rbp), %rbx
	movq (%rbx), %rax
	# LowerBasicConversion(6162:3): %"class.std::vector"* ^21 -> %"struct.std::_Vector_base"* ^91
	movq -152(%rbp), %rbx
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(6163:3): struct-type: %"struct.std::_Vector_base"* ^91 -> ^92, indices=0,0
	movq %rbx, %rcx
	# LowerGetelementptr(6163:3): type of ^92 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# LowerBasicConversion(6164:3): %"struct.std::_Vector_base"* ^92 -> %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^93
	movq %rcx, %rbx
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(6165:3): struct-type: %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^93 -> ^94, indices=0,1
	movq %rbx, %rcx
	addq $8, %rcx
	# LowerGetelementptr(6165:3): type of ^94 is %"class.std::basic_string_view"**
	# LowerStore(6166:3).9: mov %"class.std::basic_string_view"* ^90, (^94)
	movq %rax, (%rcx)
	# LowerLoad(6167:3).2: (^18) into %"class.std::basic_string_view"* ^95
	movq -144(%rbp), %rbx
	movq (%rbx), %rax
	# LowerLoad(6168:3).2: (^13) into i64 ^96
	movq -136(%rbp), %rcx
	movq (%rcx), %rbx
	# tt = Pointer, type = %"class.std::basic_string_view"
	# LowerGetelementptr(6169:3): pointer-type -> ^97
	movq %rbx, %rcx
	shlq $4, %rcx
	addq %rax, %rcx
	# LowerBasicConversion(6170:3): %"class.std::vector"* ^21 -> %"struct.std::_Vector_base"* ^98
	movq -152(%rbp), %rax
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(6171:3): struct-type: %"struct.std::_Vector_base"* ^98 -> ^99, indices=0,0
	movq %rax, %rbx
	# LowerGetelementptr(6171:3): type of ^99 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# LowerBasicConversion(6172:3): %"struct.std::_Vector_base"* ^99 -> %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^100
	movq %rbx, %rax
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(6173:3): struct-type: %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^100 -> ^101, indices=0,2
	movq %rax, %rbx
	addq $16, %rbx
	# LowerGetelementptr(6173:3): type of ^101 is %"class.std::basic_string_view"**
	# LowerStore(6174:3).9: mov %"class.std::basic_string_view"* ^97, (^101)
	movq %rcx, (%rbx)
	movq -248(%rbp), %r15
	movq -344(%rbp), %r14
	movq -336(%rbp), %r13
	movq -304(%rbp), %r12
	movq -272(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE21_M_not_empty_functionISA_EEbPT_
.p2align 4, 0x90
_ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE21_M_not_empty_functionISA_EEbPT_:
	.___ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE21_M_not_empty_functionISA_EEbPT___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(4400:3): size = 8, type = i32 (%"class.std::vector"*) ***, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(4401:3).9: mov i32 (%"class.std::vector"*) ** %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(4402:3).2: (^2) into i32 (%"class.std::vector"*) ** ^3
	movq (%rax), %rbx
	# LowerIcmp(4403:3): i32 (%"class.std::vector"*) ** ^3 vs. intlike 0
	cmpq $0, %rbx
	setne %al
	andq $1, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEC2ERKS2_
.p2align 4, 0x90
_ZN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEC2ERKS2_:
	.___ZN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEC2ERKS2___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(7428:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"**, var = ^3
	leaq -8(%rbp), %rcx
	# LowerAlloca(7429:3): size = 8, type = %struct.LsItem***, var = ^4
	leaq -16(%rbp), %rax
	# LowerStore(7430:3).9: mov %"class.__gnu_cxx::__normal_iterator"* %rdi, (^3)
	movq %rdi, (%rcx)
	# LowerStore(7431:3).9: mov %struct.LsItem** %rsi, (^4)
	movq %rsi, (%rax)
	# LowerLoad(7432:3).2: (^3) into %"class.__gnu_cxx::__normal_iterator"* ^5
	movq (%rcx), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7433:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^5 -> ^6, indices=0,0
	movq %rbx, %rcx
	# LowerGetelementptr(7433:3): type of ^6 is %struct.LsItem**
	# LowerLoad(7434:3).2: (^4) into %struct.LsItem** ^7
	movq (%rax), %rbx
	# LowerLoad(7435:3).2: (^7) into %struct.LsItem* ^8
	movq (%rbx), %rax
	# LowerStore(7436:3).9: mov %struct.LsItem* ^8, (^6)
	movq %rax, (%rcx)
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE15_M_init_functorIRSA_EEvRSt9_Any_dataOT_
.p2align 4, 0x90
_ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE15_M_init_functorIRSA_EEvRSt9_Any_dataOT_:
	.___ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE15_M_init_functorIRSA_EEvRSt9_Any_dataOT___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(48 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -40(%rbp)
	# LowerAlloca(4409:3): size = 8, type = %"union.std::_Any_data"**, var = ^3
	leaq -8(%rbp), %rdx
	# LowerAlloca(4410:3): size = 8, type = i32 (%"class.std::vector"*) ***, var = ^4
	leaq -16(%rbp), %rax
	# LowerAlloca(4411:3): size = 1, type = %"struct.std::integral_constant"*, var = ^5
	leaq -17(%rbp), %rbx
	# LowerStore(4412:3).9: mov %"union.std::_Any_data"* %rdi, (^3)
	movq %rdi, (%rdx)
	# LowerStore(4413:3).9: mov i32 (%"class.std::vector"*) ** %rsi, (^4)
	movq %rsi, (%rax)
	# LowerLoad(4414:3).2: (^3) into %"union.std::_Any_data"* ^6
	movq (%rdx), %rcx
	# LowerLoad(4415:3).2: (^4) into i32 (%"class.std::vector"*) ** ^7
	movq (%rax), %rbx
	# Clobber %rcx
	movq %rcx, -32(%rbp)
	# SetupCalls(4416:3): move argument %"union.std::_Any_data"* nonnull dereferenceable(16) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(4416:3): move argument i32 (%"class.std::vector"*) ** nonnull ^7
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE9_M_createIRSA_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE
	# Unclobber %rcx
	movq -32(%rbp), %rcx
	movq -40(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt17_Function_handlerIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEPS9_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation
.p2align 4, 0x90
_ZNSt17_Function_handlerIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEPS9_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation:
	.___ZNSt17_Function_handlerIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEPS9_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(80 + 0, 16)
	subq $80, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -48(%rbp)
	movq %r12, -64(%rbp)
	# LowerAlloca(4435:3): size = 8, type = %"union.std::_Any_data"**, var = ^4
	leaq -8(%rbp), %rbx
	# LowerAlloca(4436:3): size = 8, type = %"union.std::_Any_data"**, var = ^5
	leaq -16(%rbp), %r8
	# LowerAlloca(4437:3): size = 4, type = i32*, var = ^6
	leaq -20(%rbp), %rcx
	# LowerStore(4438:3).9: mov %"union.std::_Any_data"* %rdi, (^4)
	movq %rdi, (%rbx)
	# LowerStore(4439:3).9: mov %"union.std::_Any_data"* %rsi, (^5)
	movq %rsi, (%r8)
	# LowerStore(4440:3).9: mov i32 %edx, (^6)
	movl %edx, (%rcx)
	# LowerLoad(4441:3).2: (^6) into i32 ^7
	movl (%rcx), %eax
	# LowerSwitch(4442:3): begin conditions
	cmpl $0, %eax
	je .___ZNSt17_Function_handlerIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEPS9_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation__M21
	cmpl $1, %eax
	je .___ZNSt17_Function_handlerIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEPS9_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation__M51
	# LowerSwitch(4442:3): default
	jmp .___ZNSt17_Function_handlerIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEPS9_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation__M104
	.___ZNSt17_Function_handlerIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEPS9_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation__M21:
	# LowerLoad(4448:3).2: (^4) into %"union.std::_Any_data"* ^9
	movq (%rbx), %rax
	# Clobber %rax
	movq %rax, -32(%rbp)
	# SetupCalls(4449:3): move argument %"union.std::_Any_data"* nonnull dereferenceable(16) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v
	# SetupCalls(4449:3): move %"class.std::type_info"** result from %rax
	movq %rax, %rbx
	# Unclobber %rax
	movq -32(%rbp), %rax
	# LowerStore(4450:3).6: load global
	leaq _ZTIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEE(%rip), %rax
	# LowerStore(4450:3).9: mov %"class.std::type_info"* ^22, (^10)
	movq %rax, (%rbx)
	jmp .___ZNSt17_Function_handlerIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEPS9_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation__M138
	.___ZNSt17_Function_handlerIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEPS9_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation__M51:
	# LowerLoad(4454:3).2: (^5) into %"union.std::_Any_data"* ^12
	movq (%r8), %rax
	# Clobber %rax
	movq %rax, -32(%rbp)
	# SetupCalls(4455:3): move argument %"union.std::_Any_data"* nonnull dereferenceable(16) align 8 ^12
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE14_M_get_pointerERKSt9_Any_data
	# SetupCalls(4455:3): move i32 (%"class.std::vector"*) *** result from %rax
	movq %rax, %r12
	# Unclobber %rax
	movq -32(%rbp), %rax
	# LowerLoad(4456:3).2: (^4) into %"union.std::_Any_data"* ^14
	movq (%rbx), %rax
	# Clobber %rax
	movq %rax, -32(%rbp)
	# SetupCalls(4457:3): move argument %"union.std::_Any_data"* nonnull dereferenceable(16) align 8 ^14
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt9_Any_data9_M_accessIPPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEEERT_v
	# SetupCalls(4457:3): move i32 (%"class.std::vector"*) **** result from %rax
	movq %rax, %rbx
	# Unclobber %rax
	movq -32(%rbp), %rax
	# LowerStore(4458:3).9: mov i32 (%"class.std::vector"*) *** ^13, (^15)
	movq %r12, (%rbx)
	jmp .___ZNSt17_Function_handlerIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEPS9_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation__M138
	.___ZNSt17_Function_handlerIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEPS9_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation__M104:
	# LowerLoad(4462:3).2: (^4) into %"union.std::_Any_data"* ^17
	movq (%rbx), %rdx
	# LowerLoad(4463:3).2: (^5) into %"union.std::_Any_data"* ^18
	movq (%r8), %rbx
	# LowerLoad(4464:3).2: (^6) into i32 ^19
	movl (%rcx), %eax
	# Clobber %rdx
	movq %rdx, -40(%rbp)
	# Clobber %rax
	movq %rax, -32(%rbp)
	# SetupCalls(4465:3): move argument %"union.std::_Any_data"* nonnull dereferenceable(16) align 8 ^17
	# Fixed movzx with identical source and destination widths
	movq %rdx, %rdi
	# SetupCalls(4465:3): move argument %"union.std::_Any_data"* nonnull dereferenceable(16) align 8 ^18
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(4465:3): move argument i32 ^19
	# Fixed movzx with 32-bit source operand
	movl %eax, %edx
	callq _ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE10_M_managerERSt9_Any_dataRKSD_St18_Manager_operation
	# SetupCalls(4465:3): move i1 result from %rax
	movb %al, %al
	# Unclobber %rax
	movq -32(%rbp), %rax
	# Unclobber %rdx
	movq -40(%rbp), %rdx
	.___ZNSt17_Function_handlerIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEPS9_E10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation__M138:
	movq $0, %rax
	movq -64(%rbp), %r12
	movq -48(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_RT0_
.p2align 4, 0x90
_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_RT0_:
	.___ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_RT0___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(288 + 0, 16)
	subq $288, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -208(%rbp)
	movq %r12, -200(%rbp)
	movq %r13, -248(%rbp)
	movq %r14, -192(%rbp)
	movq %r15, -216(%rbp)
	# LowerAlloca(8069:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^5
	leaq -8(%rbp), %r14
	# LowerAlloca(8070:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^6
	leaq -16(%rbp), %r12
	# LowerAlloca(8071:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^7
	leaq -24(%rbp), %rbx
	# LowerAlloca(8072:3): size = 8, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"**, var = ^8
	# Fixing source-to-dest leaq -32(%rbp), -160(%rbp)
	leaq -32(%rbp), %r15
	movq %r15, -160(%rbp)
	# LowerAlloca(8073:3): size = 40, type = %struct.LsItem*, var = ^9
	# Fixing source-to-dest leaq -72(%rbp), -136(%rbp)
	leaq -72(%rbp), %r15
	movq %r15, -136(%rbp)
	# LowerAlloca(8074:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^10
	# Fixing source-to-dest leaq -80(%rbp), -152(%rbp)
	leaq -80(%rbp), %r15
	movq %r15, -152(%rbp)
	# LowerAlloca(8075:3): size = 40, type = %struct.LsItem*, var = ^11
	# Fixing source-to-dest leaq -120(%rbp), -144(%rbp)
	leaq -120(%rbp), %r15
	movq %r15, -144(%rbp)
	# LowerAlloca(8076:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, var = ^12
	leaq -121(%rbp), %r13
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8077:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^5 -> ^13, indices=0,0
	movq %r14, %rax
	# LowerGetelementptr(8077:3): type of ^13 is %struct.LsItem**
	# LowerStore(8078:3).9: mov %struct.LsItem* %rdi, (^13)
	movq %rdi, (%rax)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8079:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^6 -> ^14, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(8079:3): type of ^14 is %struct.LsItem**
	# LowerStore(8080:3).9: mov %struct.LsItem* %rsi, (^14)
	movq %rsi, (%rax)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8081:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^7 -> ^15, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(8081:3): type of ^15 is %struct.LsItem**
	# LowerStore(8082:3).9: mov %struct.LsItem* %rdx, (^15)
	movq %rdx, (%rax)
	# LowerStore(8083:3).9: mov %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %rcx, (^8)
	movq -160(%rbp), %rax
	movq %rcx, (%rax)
	# SetupCalls(8084:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEdeEv
	# SetupCalls(8084:3): move %struct.LsItem* result from %rax
	movq %rax, %r15
	# SetupCalls(8085:3): move argument %struct.LsItem* nonnull dereferenceable(33) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq -136(%rbp), %rdi
	# SetupCalls(8085:3): move argument %struct.LsItem* nonnull dereferenceable(33) align 8 ^16
	# Fixed movzx with identical source and destination widths
	movq %r15, %rsi
	callq _ZN6LsItemC2EOS_
	# SetupCalls(8086:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r14, %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEdeEv
	# SetupCalls(8086:3): move %struct.LsItem* result from %rax
	movq %rax, %r15
	# SetupCalls(8087:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEdeEv
	# SetupCalls(8087:3): move %struct.LsItem* result from %rax
	movq %rax, %rbx
	# SetupCalls(8088:3): move argument %struct.LsItem* nonnull dereferenceable(33) align 8 ^18
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(8088:3): move argument %struct.LsItem* nonnull dereferenceable(33) align 8 ^17
	# Fixed movzx with identical source and destination widths
	movq %r15, %rsi
	callq _ZN6LsItemaSEOS_
	# SetupCalls(8088:3): move %struct.LsItem* result from %rax
	movq %rax, %rax
	# LowerBasicConversion(8089:3): %"class.__gnu_cxx::__normal_iterator"* ^10 -> i8* ^20
	movq -152(%rbp), %rax
	# LowerBasicConversion(8090:3): %"class.__gnu_cxx::__normal_iterator"* ^5 -> i8* ^21
	movq %r14, %rbx
	# Clobber %rax
	movq %rax, -168(%rbp)
	# SetupCalls(8091:3): move argument i8* align 8 ^20
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(8091:3): move argument i8* align 8 ^21
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(8091:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -168(%rbp), %rax
	# SetupCalls(8092:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(8092:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r14, %rsi
	callq _ZN9__gnu_cxxmiIP6LsItemSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_
	# SetupCalls(8092:3): move i64 result from %rax
	movq %rax, %rbx
	# SetupCalls(8093:3): move argument %struct.LsItem* nonnull dereferenceable(33) align 8 ^11
	# Fixed movzx with identical source and destination widths
	movq -144(%rbp), %rdi
	# SetupCalls(8093:3): move argument %struct.LsItem* nonnull dereferenceable(33) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq -136(%rbp), %rsi
	callq _ZN6LsItemC2EOS_
	# LowerLoad(8094:3).2: (^8) into %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* ^23
	movq -160(%rbp), %rcx
	movq (%rcx), %rax
	# LowerBasicConversion(8095:3): %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* ^12 -> i8* ^24
	movq %r13, %rcx
	# LowerBasicConversion(8096:3): %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* ^23 -> i8* ^25
	movq %rax, %rdx
	# Clobber %rdx
	movq %rdx, -176(%rbp)
	# Clobber %rcx
	movq %rcx, -184(%rbp)
	# SetupCalls(8097:3): move argument i8* align 1 ^24
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(8097:3): move argument i8* align 1 ^25
	# Fixed movzx with identical source and destination widths
	movq %rdx, %rsi
	# SetupCalls(8097:3): move argument i64 1
	movq $1, %rdx
	callq memcpy@PLT
	# Unclobber %rcx
	movq -184(%rbp), %rcx
	# Unclobber %rdx
	movq -176(%rbp), %rdx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(8098:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^10 -> ^26, indices=0,0
	movq -152(%rbp), %rax
	# LowerGetelementptr(8098:3): type of ^26 is %struct.LsItem**
	# LowerLoad(8099:3).2: (^26) into %struct.LsItem* ^27
	movq (%rax), %rcx
	# Clobber %rcx
	movq %rcx, -184(%rbp)
	# SetupCalls(8100:3): move argument %struct.LsItem* ^27
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(8100:3): move argument i64 0
	movq $0, %rsi
	# SetupCalls(8100:3): move argument i64 ^22
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdx
	# SetupCalls(8100:3): move argument %struct.LsItem* ^11
	# Fixed movzx with identical source and destination widths
	movq -144(%rbp), %rcx
	callq _ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_T0_SL_T1_T2_
	# Unclobber %rcx
	movq -184(%rbp), %rcx
	# SetupCalls(8101:3): move argument %struct.LsItem* nonnull dereferenceable(33) align 8 ^11
	# Fixed movzx with identical source and destination widths
	movq -144(%rbp), %rdi
	callq _ZN6LsItemD2Ev
	# SetupCalls(8102:3): move argument %struct.LsItem* nonnull dereferenceable(33) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq -136(%rbp), %rdi
	callq _ZN6LsItemD2Ev
	movq -216(%rbp), %r15
	movq -192(%rbp), %r14
	movq -248(%rbp), %r13
	movq -200(%rbp), %r12
	movq -208(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt9_Any_data9_M_accessEv
.p2align 4, 0x90
_ZNSt9_Any_data9_M_accessEv:
	.___ZNSt9_Any_data9_M_accessEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(4489:3): size = 8, type = %"union.std::_Any_data"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(4490:3).9: mov %"union.std::_Any_data"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(4491:3).2: (^2) into %"union.std::_Any_data"* ^3
	movq (%rax), %rbx
	# LowerBasicConversion(4492:3): %"union.std::_Any_data"* ^3 -> [16 x i8]* ^4
	movq %rbx, %rax
	# tt = Pointer, type = [16 x i8]
	# LowerGetelementptr(4493:3): struct-type: [16 x i8]* ^4 -> ^5, indices=0,0
	movq %rax, %rbx
	# LowerGetelementptr(4493:3): type of ^5 is i8*
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt6quotedIcSt11char_traitsIcESaIcEEDaRKNSt7__cxx1112basic_stringIT_T0_T1_EES5_S5_
.p2align 4, 0x90
_ZSt6quotedIcSt11char_traitsIcESaIcEEDaRKNSt7__cxx1112basic_stringIT_T0_T1_EES5_S5_:
	.___ZSt6quotedIcSt11char_traitsIcESaIcEEDaRKNSt7__cxx1112basic_stringIT_T0_T1_EES5_S5___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(72 + 0, 16)
	subq $80, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -64(%rbp)
	# LowerAlloca(6578:3): size = 16, type = %"struct.std::__detail::_Quoted_string"*, var = ^4
	leaq -16(%rbp), %rbx
	# LowerAlloca(6579:3): size = 8, type = %"class.std::__cxx11::basic_string"**, var = ^5
	leaq -24(%rbp), %r9
	# LowerAlloca(6580:3): size = 1, type = i8*, var = ^6
	leaq -25(%rbp), %r8
	# LowerAlloca(6581:3): size = 1, type = i8*, var = ^7
	leaq -26(%rbp), %rcx
	# LowerStore(6582:3).9: mov %"class.std::__cxx11::basic_string"* %rdi, (^5)
	movq %rdi, (%r9)
	# LowerStore(6583:3).9: mov i8 %sil, (^6)
	movb %sil, (%r8)
	# LowerStore(6584:3).9: mov i8 %dl, (^7)
	movb %dl, (%rcx)
	# LowerLoad(6585:3).2: (^5) into %"class.std::__cxx11::basic_string"* ^8
	movq (%r9), %rax
	# LowerLoad(6586:3).2: (^6) into i8 ^9
	movb (%r8), %r9b
	# LowerLoad(6587:3).2: (^7) into i8 ^10
	movb (%rcx), %r8b
	# Clobber %r8
	movq %r8, -40(%rbp)
	# Clobber %r9
	movq %r9, -48(%rbp)
	# Clobber %rax
	movq %rax, -56(%rbp)
	# SetupCalls(6588:3): move argument %"struct.std::__detail::_Quoted_string"* nonnull dereferenceable(10) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(6588:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(6588:3): move argument i8 signext ^9
	movzbq %r9b, %rdx
	movsbq %dl, %rdx
	# SetupCalls(6588:3): move argument i8 signext ^10
	movzbq %r8b, %rcx
	movsbq %cl, %rcx
	callq _ZNSt8__detail14_Quoted_stringIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEC2ES8_cc
	# Unclobber %rax
	movq -56(%rbp), %rax
	# Unclobber %r9
	movq -48(%rbp), %r9
	# Unclobber %r8
	movq -40(%rbp), %r8
	# LowerBasicConversion(6589:3): %"struct.std::__detail::_Quoted_string"* ^4 -> {%"class.std::__cxx11::basic_string"*, i64}* ^11
	movq %rbx, %rcx
	# LowerLoad(6590:3).2: (^11) into {%"class.std::__cxx11::basic_string"*, i64} ^12
	# FinishMultireg: mov (%reg), <%pack...>
	movq (%rcx), %rax
	movq 8(%rcx), %rbx
	# LowerRet: two-register return
	movq %rax, %rax
	movq %rbx, %rdx
	movq -64(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE3endEv
.p2align 4, 0x90
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE3endEv:
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE3endEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(64 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	movq %r12, -24(%rbp)
	# LowerAlloca(9635:3): size = 8, type = %"struct.std::_Rb_tree_iterator"*, var = ^2
	leaq -8(%rbp), %r12
	# LowerAlloca(9636:3): size = 8, type = %"class.std::_Rb_tree"**, var = ^3
	leaq -16(%rbp), %rbx
	# LowerStore(9637:3).9: mov %"class.std::_Rb_tree"* %rdi, (^3)
	movq %rdi, (%rbx)
	# LowerLoad(9638:3).2: (^3) into %"class.std::_Rb_tree"* ^4
	movq (%rbx), %rax
	# tt = Pointer, type = %"class.std::_Rb_tree"
	# LowerGetelementptr(9639:3): struct-type: %"class.std::_Rb_tree"* ^4 -> ^5, indices=0,0
	movq %rax, %rbx
	# LowerGetelementptr(9639:3): type of ^5 is %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Rb_tree_impl"*
	# LowerBasicConversion(9640:3): %"class.std::_Rb_tree"* ^5 -> i8* ^6
	movq %rbx, %rax
	# tt = Pointer, type = i8
	# LowerGetelementptr(9641:3): struct-type: i8* ^6 -> ^7, indices=8
	movq %rax, %rbx
	addq $8, %rbx
	# LowerGetelementptr(9641:3): type of ^7 is i8*
	# LowerBasicConversion(9642:3): i8* ^7 -> %"struct.std::_Rb_tree_header"* ^8
	movq %rbx, %rax
	# tt = Pointer, type = %"struct.std::_Rb_tree_header"
	# LowerGetelementptr(9643:3): struct-type: %"struct.std::_Rb_tree_header"* ^8 -> ^9, indices=0,0
	movq %rax, %rbx
	# LowerGetelementptr(9643:3): type of ^9 is %"struct.std::_Rb_tree_node_base"*
	# SetupCalls(9644:3): move argument %"struct.std::_Rb_tree_iterator"* nonnull dereferenceable(8) align 8 ^2
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(9644:3): move argument %"struct.std::_Rb_tree_node_base"* ^9
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEEC2EPSt18_Rb_tree_node_base
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(9645:3): struct-type: %"struct.std::_Rb_tree_iterator"* ^2 -> ^10, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(9645:3): type of ^10 is %"struct.std::_Rb_tree_node_base"**
	# LowerLoad(9646:3).2: (^10) into %"struct.std::_Rb_tree_node_base"* ^11
	movq (%rax), %rbx
	movq %rbx, %rax
	movq -24(%rbp), %r12
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt10__invoke_rIiRPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEJS8_EENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EESD_E4typeEOSE_DpOSF_
.p2align 4, 0x90
_ZSt10__invoke_rIiRPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEJS8_EENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EESD_E4typeEOSE_DpOSF_:
	.___ZSt10__invoke_rIiRPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEJS8_EENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EESD_E4typeEOSE_DpOSF___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(56 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -40(%rbp)
	# LowerAlloca(4499:3): size = 8, type = i32 (%"class.std::vector"*) ****, var = ^3
	leaq -8(%rbp), %rdx
	# LowerAlloca(4500:3): size = 8, type = %"class.std::vector"**, var = ^4
	leaq -16(%rbp), %rax
	# LowerAlloca(4501:3): size = 1, type = %"struct.std::__invoke_other"*, var = ^5
	leaq -17(%rbp), %rbx
	# LowerStore(4502:3).9: mov i32 (%"class.std::vector"*) *** %rdi, (^3)
	movq %rdi, (%rdx)
	# LowerStore(4503:3).9: mov %"class.std::vector"* %rsi, (^4)
	movq %rsi, (%rax)
	# LowerLoad(4504:3).2: (^3) into i32 (%"class.std::vector"*) *** ^6
	movq (%rdx), %rcx
	# LowerLoad(4505:3).2: (^4) into %"class.std::vector"* ^7
	movq (%rax), %rbx
	# Clobber %rcx
	movq %rcx, -32(%rbp)
	# SetupCalls(4506:3): move argument i32 (%"class.std::vector"*) *** nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(4506:3): move argument %"class.std::vector"* nonnull dereferenceable(24) align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZSt13__invoke_implIiRPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEJS8_EET_St14__invoke_otherOT0_DpOT1_
	# SetupCalls(4506:3): move i32 result from %rax
	movl %eax, %ebx
	# Unclobber %rcx
	movq -32(%rbp), %rcx
	movl %ebx, %eax
	movq -40(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12_M_check_lenEmPKc
.p2align 4, 0x90
_ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12_M_check_lenEmPKc:
	.___ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12_M_check_lenEmPKc__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(216 + 0, 16)
	subq $224, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -96(%rbp)
	movq %r12, -88(%rbp)
	movq %r13, -80(%rbp)
	movq %r14, -128(%rbp)
	movq %r15, -104(%rbp)
	# LowerAlloca(5717:3): size = 8, type = %"class.std::vector"**, var = ^4
	leaq -8(%rbp), %rax
	# LowerAlloca(5718:3): size = 8, type = i64*, var = ^5
	leaq -16(%rbp), %r13
	# LowerAlloca(5719:3): size = 8, type = i8**, var = ^6
	leaq -24(%rbp), %r12
	# LowerAlloca(5720:3): size = 8, type = i64*, var = ^7
	# Fixing source-to-dest leaq -32(%rbp), -56(%rbp)
	leaq -32(%rbp), %r15
	movq %r15, -56(%rbp)
	# LowerAlloca(5721:3): size = 8, type = i64*, var = ^8
	leaq -40(%rbp), %rbx
	# LowerStore(5722:3).9: mov %"class.std::vector"* %rdi, (^4)
	movq %rdi, (%rax)
	# LowerStore(5723:3).9: mov i64 %rsi, (^5)
	movq %rsi, (%r13)
	# LowerStore(5724:3).9: mov i8* %rdx, (^6)
	movq %rdx, (%r12)
	# LowerLoad(5725:3).2: (^4) into %"class.std::vector"* ^9
	# Fixing source-to-dest movq (%rax), -64(%rbp)
	movq (%rax), %r15
	movq %r15, -64(%rbp)
	# SetupCalls(5726:3): move argument %"class.std::vector"* nonnull dereferenceable(24) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq -64(%rbp), %rdi
	callq _ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE8max_sizeEv
	# SetupCalls(5726:3): move i64 result from %rax
	movq %rax, %r14
	# SetupCalls(5727:3): move argument %"class.std::vector"* nonnull dereferenceable(24) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq -64(%rbp), %rdi
	callq _ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE4sizeEv
	# SetupCalls(5727:3): move i64 result from %rax
	movq %rax, %r15
	# LowerMath(5728:3): ^10, ^11 into i64 ^12
	movq %r14, %rcx
	subq %r15, %rcx
	# LowerLoad(5729:3).2: (^5) into i64 ^13
	movq (%r13), %rax
	# LowerIcmp(5730:3): i64 ^12 vs. operand i64 ^13
	cmpq %rax, %rcx
	setb %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12_M_check_lenEmPKc__M74
	jmp .___ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12_M_check_lenEmPKc__M98
	.___ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12_M_check_lenEmPKc__M74:
	# LowerLoad(5734:3).2: (^6) into i8* ^16
	movq (%r12), %rax
	# Clobber %rax
	movq %rax, -72(%rbp)
	# SetupCalls(5735:3): move argument i8* ^16
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZSt20__throw_length_errorPKc@PLT
	# Unclobber %rax
	movq -72(%rbp), %rax
	.___ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12_M_check_lenEmPKc__M98:
	# SetupCalls(5739:3): move argument %"class.std::vector"* nonnull dereferenceable(24) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq -64(%rbp), %rdi
	callq _ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE4sizeEv
	# SetupCalls(5739:3): move i64 result from %rax
	movq %rax, %r14
	# SetupCalls(5740:3): move argument %"class.std::vector"* nonnull dereferenceable(24) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq -64(%rbp), %rdi
	callq _ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE4sizeEv
	# SetupCalls(5740:3): move i64 result from %rax
	movq %rax, %r12
	# LowerStore(5741:3).9: mov i64 ^19, (^8)
	movq %r12, (%rbx)
	# SetupCalls(5742:3): move argument i64* nonnull dereferenceable(8) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(5742:3): move argument i64* nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r13, %rsi
	callq _ZSt3maxImERKT_S2_S2_
	# SetupCalls(5742:3): move i64* result from %rax
	movq %rax, %rbx
	# LowerLoad(5743:3).2: (^20) into i64 ^21
	movq (%rbx), %rax
	# LowerMath(5744:3): ^18, ^21 into i64 ^22
	movq %r14, %rbx
	addq %rax, %rbx
	# LowerStore(5745:3).9: mov i64 ^22, (^7)
	movq -56(%rbp), %rax
	movq %rbx, (%rax)
	# LowerLoad(5746:3).2: (^7) into i64 ^23
	movq -56(%rbp), %rax
	movq (%rax), %rbx
	# SetupCalls(5747:3): move argument %"class.std::vector"* nonnull dereferenceable(24) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq -64(%rbp), %rdi
	callq _ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE4sizeEv
	# SetupCalls(5747:3): move i64 result from %rax
	movq %rax, %r12
	# LowerIcmp(5748:3): i64 ^23 vs. operand i64 ^24
	cmpq %r12, %rbx
	setb %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12_M_check_lenEmPKc__M238
	.___ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12_M_check_lenEmPKc__M208:
	# LowerLoad(5752:3).2: (^7) into i64 ^27
	movq -56(%rbp), %rax
	movq (%rax), %rbx
	# SetupCalls(5753:3): move argument %"class.std::vector"* nonnull dereferenceable(24) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq -64(%rbp), %rdi
	callq _ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE8max_sizeEv
	# SetupCalls(5753:3): move i64 result from %rax
	movq %rax, %r12
	# LowerIcmp(5754:3): i64 ^27 vs. operand i64 ^28
	cmpq %r12, %rbx
	seta %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12_M_check_lenEmPKc__M238
	jmp .___ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12_M_check_lenEmPKc__M264
	.___ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12_M_check_lenEmPKc__M238:
	# SetupCalls(5758:3): move argument %"class.std::vector"* nonnull dereferenceable(24) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq -64(%rbp), %rdi
	callq _ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE8max_sizeEv
	# SetupCalls(5758:3): move i64 result from %rax
	movq %rax, %rbx
	# MovePhi: ^31 -> ^35
	movq %rbx, -48(%rbp)
	jmp .___ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12_M_check_lenEmPKc__M269
	.___ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12_M_check_lenEmPKc__M264:
	# LowerLoad(5762:3).2: (^7) into i64 ^33
	movq -56(%rbp), %rax
	movq (%rax), %rbx
	# MovePhi: ^33 -> ^35
	movq %rbx, -48(%rbp)
	.___ZNKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12_M_check_lenEmPKc__M269:
	movq -48(%rbp), %rax
	movq -104(%rbp), %r15
	movq -128(%rbp), %r14
	movq -80(%rbp), %r13
	movq -88(%rbp), %r12
	movq -96(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt16initializer_listISt17basic_string_viewIcSt11char_traitsIcEEE4sizeEv
.p2align 4, 0x90
_ZNKSt16initializer_listISt17basic_string_viewIcSt11char_traitsIcEEE4sizeEv:
	.___ZNKSt16initializer_listISt17basic_string_viewIcSt11char_traitsIcEEE4sizeEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(5356:3): size = 8, type = %"class.std::initializer_list"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(5357:3).9: mov %"class.std::initializer_list"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(5358:3).2: (^2) into %"class.std::initializer_list"* ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::initializer_list"
	# LowerGetelementptr(5359:3): struct-type: %"class.std::initializer_list"* ^3 -> ^4, indices=0,1
	movq %rbx, %rax
	addq $8, %rax
	# LowerGetelementptr(5359:3): type of ^4 is i64*
	# LowerLoad(5360:3).2: (^4) into i64 ^5
	movq (%rax), %rbx
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt12__niter_baseIPSt17basic_string_viewIcSt11char_traitsIcEEET_S5_
.p2align 4, 0x90
_ZSt12__niter_baseIPSt17basic_string_viewIcSt11char_traitsIcEEET_S5_:
	.___ZSt12__niter_baseIPSt17basic_string_viewIcSt11char_traitsIcEEET_S5___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(5961:3): size = 8, type = %"class.std::basic_string_view"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(5962:3).9: mov %"class.std::basic_string_view"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(5963:3).2: (^2) into %"class.std::basic_string_view"* ^3
	movq (%rax), %rbx
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt6vectorI6LsItemSaIS0_EE12_M_check_lenEmPKc
.p2align 4, 0x90
_ZNKSt6vectorI6LsItemSaIS0_EE12_M_check_lenEmPKc:
	.___ZNKSt6vectorI6LsItemSaIS0_EE12_M_check_lenEmPKc__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(216 + 0, 16)
	subq $224, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -96(%rbp)
	movq %r12, -88(%rbp)
	movq %r13, -80(%rbp)
	movq %r14, -128(%rbp)
	movq %r15, -104(%rbp)
	# LowerAlloca(7026:3): size = 8, type = %"class.std::vector.5"**, var = ^4
	leaq -8(%rbp), %rax
	# LowerAlloca(7027:3): size = 8, type = i64*, var = ^5
	leaq -16(%rbp), %r13
	# LowerAlloca(7028:3): size = 8, type = i8**, var = ^6
	leaq -24(%rbp), %r12
	# LowerAlloca(7029:3): size = 8, type = i64*, var = ^7
	# Fixing source-to-dest leaq -32(%rbp), -56(%rbp)
	leaq -32(%rbp), %r15
	movq %r15, -56(%rbp)
	# LowerAlloca(7030:3): size = 8, type = i64*, var = ^8
	leaq -40(%rbp), %rbx
	# LowerStore(7031:3).9: mov %"class.std::vector.5"* %rdi, (^4)
	movq %rdi, (%rax)
	# LowerStore(7032:3).9: mov i64 %rsi, (^5)
	movq %rsi, (%r13)
	# LowerStore(7033:3).9: mov i8* %rdx, (^6)
	movq %rdx, (%r12)
	# LowerLoad(7034:3).2: (^4) into %"class.std::vector.5"* ^9
	# Fixing source-to-dest movq (%rax), -64(%rbp)
	movq (%rax), %r15
	movq %r15, -64(%rbp)
	# SetupCalls(7035:3): move argument %"class.std::vector.5"* nonnull dereferenceable(24) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq -64(%rbp), %rdi
	callq _ZNKSt6vectorI6LsItemSaIS0_EE8max_sizeEv
	# SetupCalls(7035:3): move i64 result from %rax
	movq %rax, %r14
	# SetupCalls(7036:3): move argument %"class.std::vector.5"* nonnull dereferenceable(24) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq -64(%rbp), %rdi
	callq _ZNKSt6vectorI6LsItemSaIS0_EE4sizeEv
	# SetupCalls(7036:3): move i64 result from %rax
	movq %rax, %r15
	# LowerMath(7037:3): ^10, ^11 into i64 ^12
	movq %r14, %rcx
	subq %r15, %rcx
	# LowerLoad(7038:3).2: (^5) into i64 ^13
	movq (%r13), %rax
	# LowerIcmp(7039:3): i64 ^12 vs. operand i64 ^13
	cmpq %rax, %rcx
	setb %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNKSt6vectorI6LsItemSaIS0_EE12_M_check_lenEmPKc__M74
	jmp .___ZNKSt6vectorI6LsItemSaIS0_EE12_M_check_lenEmPKc__M98
	.___ZNKSt6vectorI6LsItemSaIS0_EE12_M_check_lenEmPKc__M74:
	# LowerLoad(7043:3).2: (^6) into i8* ^16
	movq (%r12), %rax
	# Clobber %rax
	movq %rax, -72(%rbp)
	# SetupCalls(7044:3): move argument i8* ^16
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZSt20__throw_length_errorPKc@PLT
	# Unclobber %rax
	movq -72(%rbp), %rax
	.___ZNKSt6vectorI6LsItemSaIS0_EE12_M_check_lenEmPKc__M98:
	# SetupCalls(7048:3): move argument %"class.std::vector.5"* nonnull dereferenceable(24) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq -64(%rbp), %rdi
	callq _ZNKSt6vectorI6LsItemSaIS0_EE4sizeEv
	# SetupCalls(7048:3): move i64 result from %rax
	movq %rax, %r14
	# SetupCalls(7049:3): move argument %"class.std::vector.5"* nonnull dereferenceable(24) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq -64(%rbp), %rdi
	callq _ZNKSt6vectorI6LsItemSaIS0_EE4sizeEv
	# SetupCalls(7049:3): move i64 result from %rax
	movq %rax, %r12
	# LowerStore(7050:3).9: mov i64 ^19, (^8)
	movq %r12, (%rbx)
	# SetupCalls(7051:3): move argument i64* nonnull dereferenceable(8) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(7051:3): move argument i64* nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r13, %rsi
	callq _ZSt3maxImERKT_S2_S2_
	# SetupCalls(7051:3): move i64* result from %rax
	movq %rax, %rbx
	# LowerLoad(7052:3).2: (^20) into i64 ^21
	movq (%rbx), %rax
	# LowerMath(7053:3): ^18, ^21 into i64 ^22
	movq %r14, %rbx
	addq %rax, %rbx
	# LowerStore(7054:3).9: mov i64 ^22, (^7)
	movq -56(%rbp), %rax
	movq %rbx, (%rax)
	# LowerLoad(7055:3).2: (^7) into i64 ^23
	movq -56(%rbp), %rax
	movq (%rax), %rbx
	# SetupCalls(7056:3): move argument %"class.std::vector.5"* nonnull dereferenceable(24) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq -64(%rbp), %rdi
	callq _ZNKSt6vectorI6LsItemSaIS0_EE4sizeEv
	# SetupCalls(7056:3): move i64 result from %rax
	movq %rax, %r12
	# LowerIcmp(7057:3): i64 ^23 vs. operand i64 ^24
	cmpq %r12, %rbx
	setb %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNKSt6vectorI6LsItemSaIS0_EE12_M_check_lenEmPKc__M238
	.___ZNKSt6vectorI6LsItemSaIS0_EE12_M_check_lenEmPKc__M208:
	# LowerLoad(7061:3).2: (^7) into i64 ^27
	movq -56(%rbp), %rax
	movq (%rax), %rbx
	# SetupCalls(7062:3): move argument %"class.std::vector.5"* nonnull dereferenceable(24) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq -64(%rbp), %rdi
	callq _ZNKSt6vectorI6LsItemSaIS0_EE8max_sizeEv
	# SetupCalls(7062:3): move i64 result from %rax
	movq %rax, %r12
	# LowerIcmp(7063:3): i64 ^27 vs. operand i64 ^28
	cmpq %r12, %rbx
	seta %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNKSt6vectorI6LsItemSaIS0_EE12_M_check_lenEmPKc__M238
	jmp .___ZNKSt6vectorI6LsItemSaIS0_EE12_M_check_lenEmPKc__M264
	.___ZNKSt6vectorI6LsItemSaIS0_EE12_M_check_lenEmPKc__M238:
	# SetupCalls(7067:3): move argument %"class.std::vector.5"* nonnull dereferenceable(24) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq -64(%rbp), %rdi
	callq _ZNKSt6vectorI6LsItemSaIS0_EE8max_sizeEv
	# SetupCalls(7067:3): move i64 result from %rax
	movq %rax, %rbx
	# MovePhi: ^31 -> ^35
	movq %rbx, -48(%rbp)
	jmp .___ZNKSt6vectorI6LsItemSaIS0_EE12_M_check_lenEmPKc__M269
	.___ZNKSt6vectorI6LsItemSaIS0_EE12_M_check_lenEmPKc__M264:
	# LowerLoad(7071:3).2: (^7) into i64 ^33
	movq -56(%rbp), %rax
	movq (%rax), %rbx
	# MovePhi: ^33 -> ^35
	movq %rbx, -48(%rbp)
	.___ZNKSt6vectorI6LsItemSaIS0_EE12_M_check_lenEmPKc__M269:
	movq -48(%rbp), %rax
	movq -104(%rbp), %r15
	movq -128(%rbp), %r14
	movq -80(%rbp), %r13
	movq -88(%rbp), %r12
	movq -96(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE14_M_get_pointerERKSt9_Any_data
.p2align 4, 0x90
_ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE14_M_get_pointerERKSt9_Any_data:
	.___ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE14_M_get_pointerERKSt9_Any_data__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(48 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	movq %r12, -40(%rbp)
	# LowerAlloca(4512:3): size = 8, type = %"union.std::_Any_data"**, var = ^2
	leaq -8(%rbp), %rbx
	# LowerAlloca(4513:3): size = 8, type = i32 (%"class.std::vector"*) ****, var = ^3
	leaq -16(%rbp), %r12
	# LowerStore(4514:3).9: mov %"union.std::_Any_data"* %rdi, (^2)
	movq %rdi, (%rbx)
	# LowerLoad(4515:3).2: (^2) into %"union.std::_Any_data"* ^4
	movq (%rbx), %rax
	# Clobber %rax
	movq %rax, -24(%rbp)
	# SetupCalls(4516:3): move argument %"union.std::_Any_data"* nonnull dereferenceable(16) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNKSt9_Any_data9_M_accessIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEEERKT_v
	# SetupCalls(4516:3): move i32 (%"class.std::vector"*) *** result from %rax
	movq %rax, %rbx
	# Unclobber %rax
	movq -24(%rbp), %rax
	# LowerStore(4517:3).9: mov i32 (%"class.std::vector"*) *** ^5, (^3)
	movq %rbx, (%r12)
	# LowerLoad(4518:3).2: (^3) into i32 (%"class.std::vector"*) *** ^6
	movq (%r12), %rax
	movq -40(%rbp), %r12
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt13__invoke_implIiRPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEJS8_EET_St14__invoke_otherOT0_DpOT1_
.p2align 4, 0x90
_ZSt13__invoke_implIiRPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEJS8_EET_St14__invoke_otherOT0_DpOT1_:
	.___ZSt13__invoke_implIiRPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEJS8_EET_St14__invoke_otherOT0_DpOT1___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(48 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -40(%rbp)
	# LowerAlloca(4524:3): size = 1, type = %"struct.std::__invoke_other"*, var = ^3
	leaq -1(%rbp), %rax
	# LowerAlloca(4525:3): size = 8, type = i32 (%"class.std::vector"*) ****, var = ^4
	leaq -16(%rbp), %rax
	# LowerAlloca(4526:3): size = 8, type = %"class.std::vector"**, var = ^5
	leaq -24(%rbp), %rdx
	# LowerStore(4527:3).9: mov i32 (%"class.std::vector"*) *** %rdi, (^4)
	movq %rdi, (%rax)
	# LowerStore(4528:3).9: mov %"class.std::vector"* %rsi, (^5)
	movq %rsi, (%rdx)
	# LowerLoad(4529:3).2: (^4) into i32 (%"class.std::vector"*) *** ^6
	movq (%rax), %rcx
	# LowerLoad(4530:3).2: (^6) into i32 (%"class.std::vector"*) ** ^7
	movq (%rcx), %rbx
	# LowerLoad(4531:3).2: (^5) into %"class.std::vector"* ^8
	movq (%rdx), %rax
	# Clobber %rax
	movq %rax, -32(%rbp)
	# SetupCalls(4532:3): move argument %"class.std::vector"* nonnull dereferenceable(24) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(4532:3): jump to function operand ^7
	callq *%rbx
	# SetupCalls(4532:3): move i32 result from %rax
	movl %eax, %ebx
	# Unclobber %rax
	movq -32(%rbp), %rax
	movl %ebx, %eax
	movq -40(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt9_Any_data9_M_accessIPPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEEERT_v
.p2align 4, 0x90
_ZNSt9_Any_data9_M_accessIPPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEEERT_v:
	.___ZNSt9_Any_data9_M_accessIPPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEEERT_v__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(4568:3): size = 8, type = %"union.std::_Any_data"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(4569:3).9: mov %"union.std::_Any_data"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(4570:3).2: (^2) into %"union.std::_Any_data"* ^3
	movq (%rax), %rbx
	# SetupCalls(4571:3): move argument %"union.std::_Any_data"* nonnull dereferenceable(16) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt9_Any_data9_M_accessEv
	# SetupCalls(4571:3): move i8* result from %rax
	movq %rax, %rbx
	# LowerBasicConversion(4572:3): i8* ^4 -> i32 (%"class.std::vector"*) **** ^5
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE15_M_init_functorIRKSB_EEvRSt9_Any_dataOT_
.p2align 4, 0x90
_ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE15_M_init_functorIRKSB_EEvRSt9_Any_dataOT_:
	.___ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE15_M_init_functorIRKSB_EEvRSt9_Any_dataOT___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(48 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -40(%rbp)
	# LowerAlloca(4625:3): size = 8, type = %"union.std::_Any_data"**, var = ^3
	leaq -8(%rbp), %rdx
	# LowerAlloca(4626:3): size = 8, type = i32 (%"class.std::vector"*) ****, var = ^4
	leaq -16(%rbp), %rax
	# LowerAlloca(4627:3): size = 1, type = %"struct.std::integral_constant"*, var = ^5
	leaq -17(%rbp), %rbx
	# LowerStore(4628:3).9: mov %"union.std::_Any_data"* %rdi, (^3)
	movq %rdi, (%rdx)
	# LowerStore(4629:3).9: mov i32 (%"class.std::vector"*) *** %rsi, (^4)
	movq %rsi, (%rax)
	# LowerLoad(4630:3).2: (^3) into %"union.std::_Any_data"* ^6
	movq (%rdx), %rcx
	# LowerLoad(4631:3).2: (^4) into i32 (%"class.std::vector"*) *** ^7
	movq (%rax), %rbx
	# Clobber %rcx
	movq %rcx, -32(%rbp)
	# SetupCalls(4632:3): move argument %"union.std::_Any_data"* nonnull dereferenceable(16) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(4632:3): move argument i32 (%"class.std::vector"*) *** nonnull dereferenceable(8) align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE9_M_createIRKSB_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE
	# Unclobber %rcx
	movq -32(%rbp), %rcx
	movq -40(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt15__new_allocatorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEED2Ev
.p2align 4, 0x90
_ZNSt15__new_allocatorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEED2Ev:
	.___ZNSt15__new_allocatorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEED2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(9377:3): size = 8, type = %"class.std::__new_allocator.15"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(9378:3).9: mov %"class.std::__new_allocator.15"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(9379:3).2: (^2) into %"class.std::__new_allocator.15"* ^3
	movq (%rax), %rbx
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE
.p2align 4, 0x90
_ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE:
	.___ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	# LowerAlloca(4638:3): size = 1, type = %"struct.std::integral_constant"*, var = ^2
	leaq -1(%rbp), %rax
	# LowerAlloca(4639:3): size = 8, type = %"union.std::_Any_data"**, var = ^3
	leaq -16(%rbp), %rbx
	# LowerStore(4640:3).9: mov %"union.std::_Any_data"* %rdi, (^3)
	movq %rdi, (%rbx)
	# LowerLoad(4641:3).2: (^3) into %"union.std::_Any_data"* ^4
	movq (%rbx), %rax
	# Clobber %rax
	movq %rax, -24(%rbp)
	# SetupCalls(4642:3): move argument %"union.std::_Any_data"* nonnull dereferenceable(16) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt9_Any_data9_M_accessIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEEERT_v
	# SetupCalls(4642:3): move i32 (%"class.std::vector"*) *** result from %rax
	movq %rax, %rax
	# Unclobber %rax
	movq -24(%rbp), %rax
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10filesystem7__cxx114pathC2Ev
.p2align 4, 0x90
_ZNSt10filesystem7__cxx114pathC2Ev:
	.___ZNSt10filesystem7__cxx114pathC2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(1425:3): size = 8, type = %"class.std::filesystem::__cxx11::path"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(1426:3).9: mov %"class.std::filesystem::__cxx11::path"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(1427:3).2: (^2) into %"class.std::filesystem::__cxx11::path"* ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path"
	# LowerGetelementptr(1428:3): struct-type: %"class.std::filesystem::__cxx11::path"* ^3 -> ^4, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(1428:3): type of ^4 is %"class.std::__cxx11::basic_string"*
	# Clobber %rax
	movq %rax, -16(%rbp)
	# SetupCalls(1429:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev@PLT
	# Unclobber %rax
	movq -16(%rbp), %rax
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path"
	# LowerGetelementptr(1430:3): struct-type: %"class.std::filesystem::__cxx11::path"* ^3 -> ^5, indices=0,1
	movq %rbx, %rax
	addq $32, %rax
	# LowerGetelementptr(1430:3): type of ^5 is %"struct.std::filesystem::__cxx11::path::_List"*
	# Clobber %rax
	movq %rax, -16(%rbp)
	# SetupCalls(1431:3): move argument %"struct.std::filesystem::__cxx11::path::_List"* nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt10filesystem7__cxx114path5_ListC1Ev@PLT
	# Unclobber %rax
	movq -16(%rbp), %rax
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt22__uninitialized_copy_aIPKSt17basic_string_viewIcSt11char_traitsIcEEPS3_S3_ET0_T_S8_S7_RSaIT1_E
.p2align 4, 0x90
_ZSt22__uninitialized_copy_aIPKSt17basic_string_viewIcSt11char_traitsIcEEPS3_S3_ET0_T_S8_S7_RSaIT1_E:
	.___ZSt22__uninitialized_copy_aIPKSt17basic_string_viewIcSt11char_traitsIcEEPS3_S3_ET0_T_S8_S7_RSaIT1_E__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(72 + 0, 16)
	subq $80, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -64(%rbp)
	# LowerAlloca(5177:3): size = 8, type = %"class.std::basic_string_view"**, var = ^5
	leaq -8(%rbp), %r9
	# LowerAlloca(5178:3): size = 8, type = %"class.std::basic_string_view"**, var = ^6
	leaq -16(%rbp), %r8
	# LowerAlloca(5179:3): size = 8, type = %"class.std::basic_string_view"**, var = ^7
	leaq -24(%rbp), %rbx
	# LowerAlloca(5180:3): size = 8, type = %"class.std::allocator"**, var = ^8
	leaq -32(%rbp), %rax
	# LowerStore(5181:3).9: mov %"class.std::basic_string_view"* %rdi, (^5)
	movq %rdi, (%r9)
	# LowerStore(5182:3).9: mov %"class.std::basic_string_view"* %rsi, (^6)
	movq %rsi, (%r8)
	# LowerStore(5183:3).9: mov %"class.std::basic_string_view"* %rdx, (^7)
	movq %rdx, (%rbx)
	# LowerStore(5184:3).9: mov %"class.std::allocator"* %rcx, (^8)
	movq %rcx, (%rax)
	# LowerLoad(5185:3).2: (^5) into %"class.std::basic_string_view"* ^9
	movq (%r9), %rax
	# LowerLoad(5186:3).2: (^6) into %"class.std::basic_string_view"* ^10
	movq (%r8), %rcx
	# LowerLoad(5187:3).2: (^7) into %"class.std::basic_string_view"* ^11
	movq (%rbx), %r8
	# Clobber %rcx
	movq %rcx, -40(%rbp)
	# Clobber %r8
	movq %r8, -48(%rbp)
	# Clobber %rax
	movq %rax, -56(%rbp)
	# SetupCalls(5188:3): move argument %"class.std::basic_string_view"* ^9
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(5188:3): move argument %"class.std::basic_string_view"* ^10
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(5188:3): move argument %"class.std::basic_string_view"* ^11
	# Fixed movzx with identical source and destination widths
	movq %r8, %rdx
	callq _ZSt18uninitialized_copyIPKSt17basic_string_viewIcSt11char_traitsIcEEPS3_ET0_T_S8_S7_
	# SetupCalls(5188:3): move %"class.std::basic_string_view"* result from %rax
	movq %rax, %rbx
	# Unclobber %rax
	movq -56(%rbp), %rax
	# Unclobber %r8
	movq -48(%rbp), %r8
	# Unclobber %rcx
	movq -40(%rbp), %rcx
	movq %rbx, %rax
	movq -64(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZN9__gnu_cxxeqIPKSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESF_
.p2align 4, 0x90
_ZN9__gnu_cxxeqIPKSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESF_:
	.___ZN9__gnu_cxxeqIPKSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESF___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(56 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	movq %r12, -48(%rbp)
	movq %r13, -40(%rbp)
	# LowerAlloca(10589:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator.24"**, var = ^3
	leaq -8(%rbp), %rcx
	# LowerAlloca(10590:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator.24"**, var = ^4
	leaq -16(%rbp), %rbx
	# LowerStore(10591:3).9: mov %"class.__gnu_cxx::__normal_iterator.24"* %rdi, (^3)
	movq %rdi, (%rcx)
	# LowerStore(10592:3).9: mov %"class.__gnu_cxx::__normal_iterator.24"* %rsi, (^4)
	movq %rsi, (%rbx)
	# LowerLoad(10593:3).2: (^3) into %"class.__gnu_cxx::__normal_iterator.24"* ^5
	movq (%rcx), %rax
	# Clobber %rax
	movq %rax, -24(%rbp)
	# SetupCalls(10594:3): move argument %"class.__gnu_cxx::__normal_iterator.24"* nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIPKSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEE4baseEv
	# SetupCalls(10594:3): move %"class.std::basic_string_view"** result from %rax
	movq %rax, %r13
	# Unclobber %rax
	movq -24(%rbp), %rax
	# LowerLoad(10595:3).2: (^6) into %"class.std::basic_string_view"* ^7
	movq (%r13), %r12
	# LowerLoad(10596:3).2: (^4) into %"class.__gnu_cxx::__normal_iterator.24"* ^8
	movq (%rbx), %rax
	# Clobber %rax
	movq %rax, -24(%rbp)
	# SetupCalls(10597:3): move argument %"class.__gnu_cxx::__normal_iterator.24"* nonnull dereferenceable(8) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIPKSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEE4baseEv
	# SetupCalls(10597:3): move %"class.std::basic_string_view"** result from %rax
	movq %rax, %rbx
	# Unclobber %rax
	movq -24(%rbp), %rax
	# LowerLoad(10598:3).2: (^9) into %"class.std::basic_string_view"* ^10
	movq (%rbx), %rax
	# LowerIcmp(10599:3): %"class.std::basic_string_view"* ^7 vs. operand %"class.std::basic_string_view"* ^10
	cmpq %rax, %r12
	sete %al
	andq $1, %rax
	movq -40(%rbp), %r13
	movq -48(%rbp), %r12
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt9_Any_data9_M_accessIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEEERT_v
.p2align 4, 0x90
_ZNSt9_Any_data9_M_accessIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEEERT_v:
	.___ZNSt9_Any_data9_M_accessIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEEERT_v__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(4664:3): size = 8, type = %"union.std::_Any_data"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(4665:3).9: mov %"union.std::_Any_data"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(4666:3).2: (^2) into %"union.std::_Any_data"* ^3
	movq (%rax), %rbx
	# SetupCalls(4667:3): move argument %"union.std::_Any_data"* nonnull dereferenceable(16) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt9_Any_data9_M_accessEv
	# SetupCalls(4667:3): move i8* result from %rax
	movq %rax, %rbx
	# LowerBasicConversion(4668:3): i8* ^4 -> i32 (%"class.std::vector"*) *** ^5
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt14_Function_baseD2Ev
.p2align 4, 0x90
_ZNSt14_Function_baseD2Ev:
	.___ZNSt14_Function_baseD2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(40 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	# LowerAlloca(4684:3): size = 8, type = %"class.std::_Function_base"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(4685:3).9: mov %"class.std::_Function_base"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(4686:3).2: (^2) into %"class.std::_Function_base"* ^3
	movq (%rax), %rcx
	# tt = Pointer, type = %"class.std::_Function_base"
	# LowerGetelementptr(4687:3): struct-type: %"class.std::_Function_base"* ^3 -> ^4, indices=0,1
	movq %rcx, %rax
	addq $16, %rax
	# LowerGetelementptr(4687:3): type of ^4 is i1 (%"union.std::_Any_data"*, %"union.std::_Any_data"*, i32) ***
	# LowerLoad(4688:3).2: (^4) into i1 (%"union.std::_Any_data"*, %"union.std::_Any_data"*, i32) ** ^5
	movq (%rax), %rbx
	# LowerIcmp(4689:3): i1 (%"union.std::_Any_data"*, %"union.std::_Any_data"*, i32) ** ^5 vs. intlike 0
	cmpq $0, %rbx
	setne %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt14_Function_baseD2Ev__M18
	jmp .___ZNSt14_Function_baseD2Ev__M62
	.___ZNSt14_Function_baseD2Ev__M18:
	# tt = Pointer, type = %"class.std::_Function_base"
	# LowerGetelementptr(4693:3): struct-type: %"class.std::_Function_base"* ^3 -> ^8, indices=0,1
	movq %rcx, %rax
	addq $16, %rax
	# LowerGetelementptr(4693:3): type of ^8 is i1 (%"union.std::_Any_data"*, %"union.std::_Any_data"*, i32) ***
	# LowerLoad(4694:3).2: (^8) into i1 (%"union.std::_Any_data"*, %"union.std::_Any_data"*, i32) ** ^9
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::_Function_base"
	# LowerGetelementptr(4695:3): struct-type: %"class.std::_Function_base"* ^3 -> ^10, indices=0,0
	movq %rcx, %rax
	# LowerGetelementptr(4695:3): type of ^10 is %"union.std::_Any_data"*
	# tt = Pointer, type = %"class.std::_Function_base"
	# LowerGetelementptr(4696:3): struct-type: %"class.std::_Function_base"* ^3 -> ^11, indices=0,0
	movq %rcx, %rdx
	# LowerGetelementptr(4696:3): type of ^11 is %"union.std::_Any_data"*
	# Clobber %rdx
	movq %rdx, -16(%rbp)
	# Clobber %rax
	movq %rax, -24(%rbp)
	# SetupCalls(4697:3): move argument %"union.std::_Any_data"* nonnull dereferenceable(16) align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(4697:3): move argument %"union.std::_Any_data"* nonnull dereferenceable(16) align 8 ^11
	# Fixed movzx with identical source and destination widths
	movq %rdx, %rsi
	# SetupCalls(4697:3): move argument i32 3
	movq $3, %rdx
	# SetupCalls(4697:3): jump to function operand ^9
	callq *%rbx
	# SetupCalls(4697:3): move i1 result from %rax
	movb %al, %al
	# Unclobber %rax
	movq -24(%rbp), %rax
	# Unclobber %rdx
	movq -16(%rbp), %rdx
	.___ZNSt14_Function_baseD2Ev__M62:
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEEE8allocateEmPKv
.p2align 4, 0x90
_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEEE8allocateEmPKv:
	.___ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEEE8allocateEmPKv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(80 + 0, 16)
	subq $80, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -40(%rbp)
	movq %r12, -48(%rbp)
	# LowerAlloca(10450:3): size = 8, type = %"class.std::__new_allocator.11"**, var = ^4
	leaq -8(%rbp), %rbx
	# LowerAlloca(10451:3): size = 8, type = %"class.std::__new_allocator.11"**, var = ^5
	leaq -16(%rbp), %rcx
	# LowerAlloca(10452:3): size = 8, type = i64*, var = ^6
	leaq -24(%rbp), %r12
	# LowerAlloca(10453:3): size = 8, type = i8**, var = ^7
	leaq -32(%rbp), %rax
	# LowerStore(10454:3).9: mov %"class.std::__new_allocator.11"* %rdi, (^5)
	movq %rdi, (%rcx)
	# LowerStore(10455:3).9: mov i64 %rsi, (^6)
	movq %rsi, (%r12)
	# LowerStore(10456:3).9: mov i8* %rdx, (^7)
	movq %rdx, (%rax)
	# LowerLoad(10457:3).2: (^5) into %"class.std::__new_allocator.11"* ^8
	movq (%rcx), %rax
	# LowerLoad(10458:3).2: (^6) into i64 ^9
	movq (%r12), %rcx
	# LowerStore(10459:3).9: mov %"class.std::__new_allocator.11"* ^8, (^4)
	movq %rax, (%rbx)
	# LowerLoad(10460:3).2: (^4) into %"class.std::__new_allocator.11"* ^10
	movq (%rbx), %rax
	# LowerIcmp(10461:3): i64 ^9 vs. intlike 96076792050570581
	movabsq $96076792050570581, %rax
	cmpq %rax, %rcx
	seta %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEEE8allocateEmPKv__M28
	jmp .___ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEEE8allocateEmPKv__M76
	.___ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEEE8allocateEmPKv__M28:
	# LowerLoad(10465:3).2: (^6) into i64 ^13
	movq (%r12), %rax
	# LowerIcmp(10466:3): i64 ^13 vs. intlike 192153584101141162
	movabsq $192153584101141162, %rbx
	cmpq %rbx, %rax
	seta %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEEE8allocateEmPKv__M36
	jmp .___ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEEE8allocateEmPKv__M56
	.___ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEEE8allocateEmPKv__M36:
	callq _ZSt28__throw_bad_array_new_lengthv@PLT
	.___ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEEE8allocateEmPKv__M56:
	callq _ZSt17__throw_bad_allocv@PLT
	.___ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEEE8allocateEmPKv__M76:
	# LowerLoad(10478:3).2: (^6) into i64 ^18
	movq (%r12), %rax
	# LowerMath(10479:3): ^18, 96 into i64 ^19
	movq %rax, %rbx
	movq %rbx, %rax
	movq $96, %rbx
	imulq %rbx
	movq %rax, %rbx
	# SetupCalls(10480:3): move argument i64 ^19
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _Znwm@PLT
	# SetupCalls(10480:3): move i8* result from %rax
	movq %rax, %rbx
	# LowerBasicConversion(10481:3): i8* ^20 -> %"struct.std::_Rb_tree_node"* ^21
	movq %rbx, %rax
	movq -48(%rbp), %r12
	movq -40(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12emplace_backIJS3_EEERS3_DpOT_
.p2align 4, 0x90
_ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12emplace_backIJS3_EEERS3_DpOT_:
	.___ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12emplace_backIJS3_EEERS3_DpOT___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(176 + 0, 16)
	subq $176, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -96(%rbp)
	movq %r12, -120(%rbp)
	movq %r13, -104(%rbp)
	movq %r14, -112(%rbp)
	# LowerAlloca(5478:3): size = 8, type = %"class.std::__new_allocator"**, var = ^3
	leaq -8(%rbp), %r9
	# LowerAlloca(5479:3): size = 8, type = %"class.std::basic_string_view"**, var = ^4
	leaq -16(%rbp), %rbx
	# LowerAlloca(5480:3): size = 8, type = %"class.std::basic_string_view"**, var = ^5
	leaq -24(%rbp), %r8
	# LowerAlloca(5481:3): size = 8, type = %"class.std::allocator"**, var = ^6
	leaq -32(%rbp), %rdx
	# LowerAlloca(5482:3): size = 8, type = %"class.std::basic_string_view"**, var = ^7
	leaq -40(%rbp), %rcx
	# LowerAlloca(5483:3): size = 8, type = %"class.std::basic_string_view"**, var = ^8
	leaq -48(%rbp), %rax
	# LowerAlloca(5484:3): size = 8, type = %"class.std::vector"**, var = ^9
	leaq -56(%rbp), %r10
	# LowerAlloca(5485:3): size = 8, type = %"class.std::basic_string_view"**, var = ^10
	leaq -64(%rbp), %r13
	# LowerAlloca(5486:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator.19"*, var = ^11
	leaq -72(%rbp), %r14
	# LowerStore(5487:3).9: mov %"class.std::vector"* %rdi, (^9)
	movq %rdi, (%r10)
	# LowerStore(5488:3).9: mov %"class.std::basic_string_view"* %rsi, (^10)
	movq %rsi, (%r13)
	# LowerLoad(5489:3).2: (^9) into %"class.std::vector"* ^12
	movq (%r10), %r12
	# LowerBasicConversion(5490:3): %"class.std::vector"* ^12 -> %"struct.std::_Vector_base"* ^13
	movq %r12, %rsi
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(5491:3): struct-type: %"struct.std::_Vector_base"* ^13 -> ^14, indices=0,0
	movq %rsi, %rdi
	# LowerGetelementptr(5491:3): type of ^14 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# LowerBasicConversion(5492:3): %"struct.std::_Vector_base"* ^14 -> %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^15
	movq %rdi, %rsi
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(5493:3): struct-type: %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^15 -> ^16, indices=0,1
	movq %rsi, %rdi
	addq $8, %rdi
	# LowerGetelementptr(5493:3): type of ^16 is %"class.std::basic_string_view"**
	# LowerLoad(5494:3).2: (^16) into %"class.std::basic_string_view"* ^17
	movq (%rdi), %r10
	# LowerBasicConversion(5495:3): %"class.std::vector"* ^12 -> %"struct.std::_Vector_base"* ^18
	movq %r12, %rsi
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(5496:3): struct-type: %"struct.std::_Vector_base"* ^18 -> ^19, indices=0,0
	movq %rsi, %rdi
	# LowerGetelementptr(5496:3): type of ^19 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# LowerBasicConversion(5497:3): %"struct.std::_Vector_base"* ^19 -> %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^20
	movq %rdi, %rsi
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(5498:3): struct-type: %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^20 -> ^21, indices=0,2
	movq %rsi, %rdi
	addq $16, %rdi
	# LowerGetelementptr(5498:3): type of ^21 is %"class.std::basic_string_view"**
	# LowerLoad(5499:3).2: (^21) into %"class.std::basic_string_view"* ^22
	movq (%rdi), %rsi
	# LowerIcmp(5500:3): %"class.std::basic_string_view"* ^17 vs. operand %"class.std::basic_string_view"* ^22
	cmpq %rsi, %r10
	setne %sil
	andq $1, %rsi
	cmpb $0, %sil
	jne .___ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12emplace_backIJS3_EEERS3_DpOT___M60
	jmp .___ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12emplace_backIJS3_EEERS3_DpOT___M166
	.___ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12emplace_backIJS3_EEERS3_DpOT___M60:
	# LowerBasicConversion(5504:3): %"class.std::vector"* ^12 -> %"struct.std::_Vector_base"* ^25
	movq %r12, %rdi
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(5505:3): struct-type: %"struct.std::_Vector_base"* ^25 -> ^26, indices=0,0
	movq %rdi, %rsi
	# LowerGetelementptr(5505:3): type of ^26 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# LowerBasicConversion(5506:3): %"struct.std::_Vector_base"* ^26 -> %"class.std::allocator"* ^27
	movq %rsi, %rdi
	# LowerBasicConversion(5507:3): %"class.std::vector"* ^12 -> %"struct.std::_Vector_base"* ^28
	movq %r12, %rsi
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(5508:3): struct-type: %"struct.std::_Vector_base"* ^28 -> ^29, indices=0,0
	movq %rsi, %r10
	# LowerGetelementptr(5508:3): type of ^29 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# LowerBasicConversion(5509:3): %"struct.std::_Vector_base"* ^29 -> %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^30
	movq %r10, %rsi
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(5510:3): struct-type: %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^30 -> ^31, indices=0,1
	movq %rsi, %r10
	addq $8, %r10
	# LowerGetelementptr(5510:3): type of ^31 is %"class.std::basic_string_view"**
	# LowerLoad(5511:3).2: (^31) into %"class.std::basic_string_view"* ^32
	movq (%r10), %rsi
	# LowerLoad(5512:3).2: (^10) into %"class.std::basic_string_view"* ^33
	movq (%r13), %r10
	# LowerStore(5513:3).9: mov %"class.std::allocator"* ^27, (^6)
	movq %rdi, (%rdx)
	# LowerStore(5514:3).9: mov %"class.std::basic_string_view"* ^32, (^7)
	movq %rsi, (%rcx)
	# LowerStore(5515:3).9: mov %"class.std::basic_string_view"* ^33, (^8)
	movq %r10, (%rax)
	# LowerLoad(5516:3).2: (^6) into %"class.std::allocator"* ^34
	movq (%rdx), %rsi
	# LowerBasicConversion(5517:3): %"class.std::allocator"* ^34 -> %"class.std::__new_allocator"* ^35
	movq %rsi, %rdx
	# LowerLoad(5518:3).2: (^7) into %"class.std::basic_string_view"* ^36
	movq (%rcx), %rsi
	# LowerLoad(5519:3).2: (^8) into %"class.std::basic_string_view"* ^37
	movq (%rax), %rcx
	# LowerStore(5520:3).9: mov %"class.std::__new_allocator"* ^35, (^3)
	movq %rdx, (%r9)
	# LowerStore(5521:3).9: mov %"class.std::basic_string_view"* ^36, (^4)
	movq %rsi, (%rbx)
	# LowerStore(5522:3).9: mov %"class.std::basic_string_view"* ^37, (^5)
	movq %rcx, (%r8)
	# LowerLoad(5523:3).2: (^3) into %"class.std::__new_allocator"* ^38
	movq (%r9), %rax
	# LowerLoad(5524:3).2: (^4) into %"class.std::basic_string_view"* ^39
	movq (%rbx), %rax
	# LowerBasicConversion(5525:3): %"class.std::basic_string_view"* ^39 -> i8* ^40
	movq %rax, %rbx
	# LowerLoad(5526:3).2: (^5) into %"class.std::basic_string_view"* ^41
	movq (%r8), %rbx
	# LowerBasicConversion(5527:3): %"class.std::basic_string_view"* ^39 -> i8* ^42
	movq %rax, %rcx
	# LowerBasicConversion(5528:3): %"class.std::basic_string_view"* ^41 -> i8* ^43
	movq %rbx, %rax
	# Clobber %rcx
	movq %rcx, -80(%rbp)
	# Clobber %rax
	movq %rax, -88(%rbp)
	# SetupCalls(5529:3): move argument i8* align 8 ^42
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(5529:3): move argument i8* align 8 ^43
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(5529:3): move argument i64 16
	movq $16, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -88(%rbp), %rax
	# Unclobber %rcx
	movq -80(%rbp), %rcx
	# LowerBasicConversion(5530:3): %"class.std::vector"* ^12 -> %"struct.std::_Vector_base"* ^44
	movq %r12, %rax
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(5531:3): struct-type: %"struct.std::_Vector_base"* ^44 -> ^45, indices=0,0
	movq %rax, %rbx
	# LowerGetelementptr(5531:3): type of ^45 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# LowerBasicConversion(5532:3): %"struct.std::_Vector_base"* ^45 -> %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^46
	movq %rbx, %rax
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(5533:3): struct-type: %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^46 -> ^47, indices=0,1
	movq %rax, %rbx
	addq $8, %rbx
	# LowerGetelementptr(5533:3): type of ^47 is %"class.std::basic_string_view"**
	# LowerLoad(5534:3).2: (^47) into %"class.std::basic_string_view"* ^48
	movq (%rbx), %rcx
	# tt = Pointer, type = %"class.std::basic_string_view"
	# LowerGetelementptr(5535:3): struct-type: %"class.std::basic_string_view"* ^48 -> ^49, indices=1
	movq %rcx, %rax
	addq $16, %rax
	# LowerGetelementptr(5535:3): type of ^49 is %"class.std::basic_string_view"*
	# LowerStore(5536:3).9: mov %"class.std::basic_string_view"* ^49, (^47)
	movq %rax, (%rbx)
	jmp .___ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12emplace_backIJS3_EEERS3_DpOT___M229
	.___ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12emplace_backIJS3_EEERS3_DpOT___M166:
	# SetupCalls(5540:3): move argument %"class.std::vector"* nonnull dereferenceable(24) align 8 ^12
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	callq _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE3endEv
	# SetupCalls(5540:3): move %"class.std::basic_string_view"* result from %rax
	movq %rax, %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator.19"
	# LowerGetelementptr(5541:3): struct-type: %"class.__gnu_cxx::__normal_iterator.19"* ^11 -> ^52, indices=0,0
	movq %r14, %rax
	# LowerGetelementptr(5541:3): type of ^52 is %"class.std::basic_string_view"**
	# LowerStore(5542:3).9: mov %"class.std::basic_string_view"* ^51, (^52)
	movq %rbx, (%rax)
	# LowerLoad(5543:3).2: (^10) into %"class.std::basic_string_view"* ^53
	movq (%r13), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator.19"
	# LowerGetelementptr(5544:3): struct-type: %"class.__gnu_cxx::__normal_iterator.19"* ^11 -> ^54, indices=0,0
	movq %r14, %rcx
	# LowerGetelementptr(5544:3): type of ^54 is %"class.std::basic_string_view"**
	# LowerLoad(5545:3).2: (^54) into %"class.std::basic_string_view"* ^55
	movq (%rcx), %rax
	# Clobber %rax
	movq %rax, -88(%rbp)
	# SetupCalls(5546:3): move argument %"class.std::vector"* nonnull dereferenceable(24) align 8 ^12
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(5546:3): move argument %"class.std::basic_string_view"* ^55
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(5546:3): move argument %"class.std::basic_string_view"* nonnull dereferenceable(16) align 8 ^53
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdx
	callq _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE17_M_realloc_insertIJS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_
	# Unclobber %rax
	movq -88(%rbp), %rax
	.___ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12emplace_backIJS3_EEERS3_DpOT___M229:
	# SetupCalls(5550:3): move argument %"class.std::vector"* nonnull dereferenceable(24) align 8 ^12
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	callq _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE4backEv
	# SetupCalls(5550:3): move %"class.std::basic_string_view"* result from %rax
	movq %rax, %rbx
	movq %rbx, %rax
	movq -112(%rbp), %r14
	movq -104(%rbp), %r13
	movq -120(%rbp), %r12
	movq -96(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt10filesystem7__cxx114path8iteratordeEv
.p2align 4, 0x90
_ZNKSt10filesystem7__cxx114path8iteratordeEv:
	.___ZNKSt10filesystem7__cxx114path8iteratordeEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(56 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	movq %r12, -40(%rbp)
	movq %r13, -24(%rbp)
	# LowerAlloca(3771:3): size = 8, type = %"class.std::filesystem::__cxx11::path"**, var = ^2
	leaq -8(%rbp), %r13
	# LowerAlloca(3772:3): size = 8, type = %"class.std::filesystem::__cxx11::path::iterator"**, var = ^3
	leaq -16(%rbp), %rax
	# LowerStore(3773:3).9: mov %"class.std::filesystem::__cxx11::path::iterator"* %rdi, (^3)
	movq %rdi, (%rax)
	# LowerLoad(3774:3).2: (^3) into %"class.std::filesystem::__cxx11::path::iterator"* ^4
	movq (%rax), %rbx
	# SetupCalls(3781:3): move argument %"class.std::filesystem::__cxx11::path::iterator"* nonnull dereferenceable(17) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNKSt10filesystem7__cxx114path8iterator11_M_is_multiEv
	# SetupCalls(3781:3): move i1 result from %rax
	movb %al, %r12b
	cmpb $0, %r12b
	jne .___ZNKSt10filesystem7__cxx114path8iteratordeEv__M34
	jmp .___ZNKSt10filesystem7__cxx114path8iteratordeEv__M48
	.___ZNKSt10filesystem7__cxx114path8iteratordeEv__M34:
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path::iterator"
	# LowerGetelementptr(3791:3): struct-type: %"class.std::filesystem::__cxx11::path::iterator"* ^4 -> ^11, indices=0,1
	movq %rbx, %rax
	addq $8, %rax
	# LowerGetelementptr(3791:3): type of ^11 is %"struct.std::filesystem::__cxx11::path::_Cmpt"**
	# LowerLoad(3792:3).2: (^11) into %"struct.std::filesystem::__cxx11::path::_Cmpt"* ^12
	movq (%rax), %rbx
	# LowerBasicConversion(3793:3): %"struct.std::filesystem::__cxx11::path::_Cmpt"* ^12 -> %"class.std::filesystem::__cxx11::path"* ^13
	movq %rbx, %rax
	# LowerStore(3794:3).9: mov %"class.std::filesystem::__cxx11::path"* ^13, (^2)
	movq %rax, (%r13)
	jmp .___ZNKSt10filesystem7__cxx114path8iteratordeEv__M57
	.___ZNKSt10filesystem7__cxx114path8iteratordeEv__M48:
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path::iterator"
	# LowerGetelementptr(3798:3): struct-type: %"class.std::filesystem::__cxx11::path::iterator"* ^4 -> ^15, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(3798:3): type of ^15 is %"class.std::filesystem::__cxx11::path"**
	# LowerLoad(3799:3).2: (^15) into %"class.std::filesystem::__cxx11::path"* ^16
	movq (%rax), %rbx
	# LowerStore(3800:3).9: mov %"class.std::filesystem::__cxx11::path"* ^16, (^2)
	movq %rbx, (%r13)
	.___ZNKSt10filesystem7__cxx114path8iteratordeEv__M57:
	# LowerLoad(3804:3).2: (^2) into %"class.std::filesystem::__cxx11::path"* ^18
	movq (%r13), %rax
	movq -24(%rbp), %r13
	movq -40(%rbp), %r12
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE5resetEPS4_
.p2align 4, 0x90
_ZNSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE5resetEPS4_:
	.___ZNSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE5resetEPS4___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(88 + 0, 16)
	subq $96, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -40(%rbp)
	movq %r12, -64(%rbp)
	movq %r13, -56(%rbp)
	movq %r14, -48(%rbp)
	# LowerAlloca(6373:3): size = 8, type = %"class.std::__uniq_ptr_impl"**, var = ^3
	leaq -8(%rbp), %rax
	# LowerAlloca(6374:3): size = 8, type = %"struct.std::filesystem::__cxx11::path::_List::_Impl"**, var = ^4
	leaq -16(%rbp), %rbx
	# LowerAlloca(6375:3): size = 8, type = %"struct.std::filesystem::__cxx11::path::_List::_Impl"**, var = ^5
	leaq -24(%rbp), %r14
	# LowerStore(6376:3).9: mov %"class.std::__uniq_ptr_impl"* %rdi, (^3)
	movq %rdi, (%rax)
	# LowerStore(6377:3).9: mov %"struct.std::filesystem::__cxx11::path::_List::_Impl"* %rsi, (^4)
	movq %rsi, (%rbx)
	# LowerLoad(6378:3).2: (^3) into %"class.std::__uniq_ptr_impl"* ^6
	movq (%rax), %r13
	# SetupCalls(6379:3): move argument %"class.std::__uniq_ptr_impl"* nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	callq _ZNSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE6_M_ptrEv
	# SetupCalls(6379:3): move %"struct.std::filesystem::__cxx11::path::_List::_Impl"** result from %rax
	movq %rax, %r12
	# LowerLoad(6380:3).2: (^7) into %"struct.std::filesystem::__cxx11::path::_List::_Impl"* ^8
	movq (%r12), %rax
	# LowerStore(6381:3).9: mov %"struct.std::filesystem::__cxx11::path::_List::_Impl"* ^8, (^5)
	movq %rax, (%r14)
	# LowerLoad(6382:3).2: (^4) into %"struct.std::filesystem::__cxx11::path::_List::_Impl"* ^9
	movq (%rbx), %r12
	# SetupCalls(6383:3): move argument %"class.std::__uniq_ptr_impl"* nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	callq _ZNSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE6_M_ptrEv
	# SetupCalls(6383:3): move %"struct.std::filesystem::__cxx11::path::_List::_Impl"** result from %rax
	movq %rax, %rbx
	# LowerStore(6384:3).9: mov %"struct.std::filesystem::__cxx11::path::_List::_Impl"* ^9, (^10)
	movq %r12, (%rbx)
	# LowerLoad(6385:3).2: (^5) into %"struct.std::filesystem::__cxx11::path::_List::_Impl"* ^11
	movq (%r14), %rax
	# LowerIcmp(6386:3): %"struct.std::filesystem::__cxx11::path::_List::_Impl"* ^11 vs. intlike 0
	cmpq $0, %rax
	setne %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE5resetEPS4___M73
	jmp .___ZNSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE5resetEPS4___M122
	.___ZNSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE5resetEPS4___M73:
	# SetupCalls(6390:3): move argument %"class.std::__uniq_ptr_impl"* nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	callq _ZNSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE10_M_deleterEv
	# SetupCalls(6390:3): move %"struct.std::filesystem::__cxx11::path::_List::_Impl_deleter"* result from %rax
	movq %rax, %rbx
	# LowerLoad(6391:3).2: (^5) into %"struct.std::filesystem::__cxx11::path::_List::_Impl"* ^15
	movq (%r14), %rax
	# Clobber %rax
	movq %rax, -32(%rbp)
	# SetupCalls(6392:3): move argument %"struct.std::filesystem::__cxx11::path::_List::_Impl_deleter"* nonnull dereferenceable(1) align 1 ^14
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(6392:3): move argument %"struct.std::filesystem::__cxx11::path::_List::_Impl"* ^15
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNKSt10filesystem7__cxx114path5_List13_Impl_deleterclEPNS2_5_ImplE@PLT
	# Unclobber %rax
	movq -32(%rbp), %rax
	.___ZNSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEE5resetEPS4___M122:
	movq -48(%rbp), %r14
	movq -56(%rbp), %r13
	movq -64(%rbp), %r12
	movq -40(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE8_M_eraseEPSt13_Rb_tree_nodeISI_E
.p2align 4, 0x90
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE8_M_eraseEPSt13_Rb_tree_nodeISI_E:
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE8_M_eraseEPSt13_Rb_tree_nodeISI_E__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(80 + 0, 16)
	subq $80, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -48(%rbp)
	movq %r12, -64(%rbp)
	movq %r13, -72(%rbp)
	movq %r14, -56(%rbp)
	# LowerAlloca(4718:3): size = 8, type = %"class.std::_Rb_tree"**, var = ^3
	leaq -8(%rbp), %rax
	# LowerAlloca(4719:3): size = 8, type = %"struct.std::_Rb_tree_node"**, var = ^4
	leaq -16(%rbp), %rbx
	# LowerAlloca(4720:3): size = 8, type = %"struct.std::_Rb_tree_node"**, var = ^5
	leaq -24(%rbp), %r14
	# LowerStore(4721:3).9: mov %"class.std::_Rb_tree"* %rdi, (^3)
	movq %rdi, (%rax)
	# LowerStore(4722:3).9: mov %"struct.std::_Rb_tree_node"* %rsi, (^4)
	movq %rsi, (%rbx)
	# LowerLoad(4723:3).2: (^3) into %"class.std::_Rb_tree"* ^6
	movq (%rax), %r12
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE8_M_eraseEPSt13_Rb_tree_nodeISI_E__M13:
	# LowerLoad(4727:3).2: (^4) into %"struct.std::_Rb_tree_node"* ^8
	movq (%rbx), %rax
	# LowerIcmp(4728:3): %"struct.std::_Rb_tree_node"* ^8 vs. intlike 0
	cmpq $0, %rax
	setne %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE8_M_eraseEPSt13_Rb_tree_nodeISI_E__M20
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE8_M_eraseEPSt13_Rb_tree_nodeISI_E__M129
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE8_M_eraseEPSt13_Rb_tree_nodeISI_E__M20:
	# LowerLoad(4732:3).2: (^4) into %"struct.std::_Rb_tree_node"* ^11
	movq (%rbx), %rcx
	# LowerBasicConversion(4733:3): %"struct.std::_Rb_tree_node"* ^11 -> %"struct.std::_Rb_tree_node_base"* ^12
	movq %rcx, %rax
	# Clobber %rax
	movq %rax, -32(%rbp)
	# SetupCalls(4734:3): move argument %"struct.std::_Rb_tree_node_base"* ^12
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE8_S_rightEPSt18_Rb_tree_node_base
	# SetupCalls(4734:3): move %"struct.std::_Rb_tree_node"* result from %rax
	movq %rax, %r13
	# Unclobber %rax
	movq -32(%rbp), %rax
	# SetupCalls(4735:3): move argument %"class.std::_Rb_tree"* nonnull dereferenceable(48) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(4735:3): move argument %"struct.std::_Rb_tree_node"* ^13
	# Fixed movzx with identical source and destination widths
	movq %r13, %rsi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE8_M_eraseEPSt13_Rb_tree_nodeISI_E
	# LowerLoad(4736:3).2: (^4) into %"struct.std::_Rb_tree_node"* ^14
	movq (%rbx), %rax
	# LowerBasicConversion(4737:3): %"struct.std::_Rb_tree_node"* ^14 -> %"struct.std::_Rb_tree_node_base"* ^15
	movq %rax, %rcx
	# Clobber %rcx
	movq %rcx, -40(%rbp)
	# SetupCalls(4738:3): move argument %"struct.std::_Rb_tree_node_base"* ^15
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE7_S_leftEPSt18_Rb_tree_node_base
	# SetupCalls(4738:3): move %"struct.std::_Rb_tree_node"* result from %rax
	movq %rax, %r13
	# Unclobber %rcx
	movq -40(%rbp), %rcx
	# LowerStore(4739:3).9: mov %"struct.std::_Rb_tree_node"* ^16, (^5)
	movq %r13, (%r14)
	# LowerLoad(4740:3).2: (^4) into %"struct.std::_Rb_tree_node"* ^17
	movq (%rbx), %rax
	# Clobber %rax
	movq %rax, -32(%rbp)
	# SetupCalls(4741:3): move argument %"class.std::_Rb_tree"* nonnull dereferenceable(48) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(4741:3): move argument %"struct.std::_Rb_tree_node"* ^17
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISI_E
	# Unclobber %rax
	movq -32(%rbp), %rax
	# LowerLoad(4742:3).2: (^5) into %"struct.std::_Rb_tree_node"* ^18
	movq (%r14), %rax
	# LowerStore(4743:3).9: mov %"struct.std::_Rb_tree_node"* ^18, (^4)
	movq %rax, (%rbx)
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE8_M_eraseEPSt13_Rb_tree_nodeISI_E__M13
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE8_M_eraseEPSt13_Rb_tree_nodeISI_E__M129:
	movq -56(%rbp), %r14
	movq -72(%rbp), %r13
	movq -64(%rbp), %r12
	movq -48(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_T0_
.p2align 4, 0x90
_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_T0_:
	.___ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_T0___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(376 + 0, 16)
	subq $384, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -216(%rbp)
	movq %r12, -256(%rbp)
	movq %r13, -224(%rbp)
	movq %r14, -264(%rbp)
	movq %r15, -184(%rbp)
	# LowerAlloca(7818:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^4
	# Fixing source-to-dest leaq -8(%rbp), -104(%rbp)
	leaq -8(%rbp), %r15
	movq %r15, -104(%rbp)
	# LowerAlloca(7819:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^5
	# Fixing source-to-dest leaq -16(%rbp), -112(%rbp)
	leaq -16(%rbp), %r15
	movq %r15, -112(%rbp)
	# LowerAlloca(7820:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^6
	# Fixing source-to-dest leaq -24(%rbp), -120(%rbp)
	leaq -24(%rbp), %r15
	movq %r15, -120(%rbp)
	# LowerAlloca(7821:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, var = ^7
	# Fixing source-to-dest leaq -25(%rbp), -128(%rbp)
	leaq -25(%rbp), %r15
	movq %r15, -128(%rbp)
	# LowerAlloca(7822:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^8
	leaq -40(%rbp), %rbx
	# LowerAlloca(7823:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^9
	leaq -48(%rbp), %r13
	# LowerAlloca(7824:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^10
	# Fixing source-to-dest leaq -56(%rbp), -136(%rbp)
	leaq -56(%rbp), %r15
	movq %r15, -136(%rbp)
	# LowerAlloca(7825:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^11
	# Fixing source-to-dest leaq -64(%rbp), -144(%rbp)
	leaq -64(%rbp), %r15
	movq %r15, -144(%rbp)
	# LowerAlloca(7826:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^12
	# Fixing source-to-dest leaq -72(%rbp), -152(%rbp)
	leaq -72(%rbp), %r15
	movq %r15, -152(%rbp)
	# LowerAlloca(7827:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^13
	leaq -80(%rbp), %r12
	# LowerAlloca(7828:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^14
	leaq -88(%rbp), %r14
	# LowerAlloca(7829:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^15
	leaq -96(%rbp), %r15
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7830:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^4 -> ^16, indices=0,0
	movq -104(%rbp), %rax
	# LowerGetelementptr(7830:3): type of ^16 is %struct.LsItem**
	# LowerStore(7831:3).9: mov %struct.LsItem* %rdi, (^16)
	movq %rdi, (%rax)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7832:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^5 -> ^17, indices=0,0
	movq -112(%rbp), %rax
	# LowerGetelementptr(7832:3): type of ^17 is %struct.LsItem**
	# LowerStore(7833:3).9: mov %struct.LsItem* %rsi, (^17)
	movq %rsi, (%rax)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7834:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^6 -> ^18, indices=0,0
	movq -120(%rbp), %rax
	# LowerGetelementptr(7834:3): type of ^18 is %struct.LsItem**
	# LowerStore(7835:3).9: mov %struct.LsItem* %rdx, (^18)
	movq %rdx, (%rax)
	# LowerBasicConversion(7836:3): %"class.__gnu_cxx::__normal_iterator"* ^8 -> i8* ^19
	movq %rbx, %rcx
	# LowerBasicConversion(7837:3): %"class.__gnu_cxx::__normal_iterator"* ^4 -> i8* ^20
	movq -104(%rbp), %rax
	# Clobber %rcx
	movq %rcx, -160(%rbp)
	# Clobber %rax
	movq %rax, -168(%rbp)
	# SetupCalls(7838:3): move argument i8* align 8 ^19
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(7838:3): move argument i8* align 8 ^20
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(7838:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -168(%rbp), %rax
	# Unclobber %rcx
	movq -160(%rbp), %rcx
	# LowerBasicConversion(7839:3): %"class.__gnu_cxx::__normal_iterator"* ^9 -> i8* ^21
	movq %r13, %rax
	# LowerBasicConversion(7840:3): %"class.__gnu_cxx::__normal_iterator"* ^5 -> i8* ^22
	movq -112(%rbp), %rcx
	# Clobber %rcx
	movq %rcx, -160(%rbp)
	# Clobber %rax
	movq %rax, -168(%rbp)
	# SetupCalls(7841:3): move argument i8* align 8 ^21
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(7841:3): move argument i8* align 8 ^22
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(7841:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -168(%rbp), %rax
	# Unclobber %rcx
	movq -160(%rbp), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7842:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^8 -> ^23, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(7842:3): type of ^23 is %struct.LsItem**
	# LowerLoad(7843:3).2: (^23) into %struct.LsItem* ^24
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7844:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^9 -> ^25, indices=0,0
	movq %r13, %rcx
	# LowerGetelementptr(7844:3): type of ^25 is %struct.LsItem**
	# LowerLoad(7845:3).2: (^25) into %struct.LsItem* ^26
	movq (%rcx), %rax
	# Clobber %rax
	movq %rax, -168(%rbp)
	# SetupCalls(7846:3): move argument %struct.LsItem* ^24
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(7846:3): move argument %struct.LsItem* ^26
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(7846:3): move argument %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* nonnull dereferenceable(1) align 1 ^7
	# Fixed movzx with identical source and destination widths
	movq -128(%rbp), %rdx
	callq _ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_RT0_
	# Unclobber %rax
	movq -168(%rbp), %rax
	# LowerBasicConversion(7847:3): %"class.__gnu_cxx::__normal_iterator"* ^10 -> i8* ^27
	movq -136(%rbp), %rax
	# LowerBasicConversion(7848:3): %"class.__gnu_cxx::__normal_iterator"* ^5 -> i8* ^28
	movq -112(%rbp), %rbx
	# Clobber %rax
	movq %rax, -168(%rbp)
	# SetupCalls(7849:3): move argument i8* align 8 ^27
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(7849:3): move argument i8* align 8 ^28
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(7849:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -168(%rbp), %rax
	.___ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_T0___M168:
	# SetupCalls(7853:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq -136(%rbp), %rdi
	# SetupCalls(7853:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq -120(%rbp), %rsi
	callq _ZN9__gnu_cxxltIP6LsItemSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_
	# SetupCalls(7853:3): move i1 result from %rax
	movb %al, %bl
	cmpb $0, %bl
	jne .___ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_T0___M194
	jmp .___ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_T0___M450
	.___ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_T0___M194:
	# LowerBasicConversion(7857:3): %"class.__gnu_cxx::__normal_iterator"* ^11 -> i8* ^32
	movq -144(%rbp), %rax
	# LowerBasicConversion(7858:3): %"class.__gnu_cxx::__normal_iterator"* ^10 -> i8* ^33
	movq -136(%rbp), %rbx
	# Clobber %rax
	movq %rax, -168(%rbp)
	# SetupCalls(7859:3): move argument i8* align 8 ^32
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(7859:3): move argument i8* align 8 ^33
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(7859:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -168(%rbp), %rax
	# LowerBasicConversion(7860:3): %"class.__gnu_cxx::__normal_iterator"* ^12 -> i8* ^34
	movq -152(%rbp), %rax
	# LowerBasicConversion(7861:3): %"class.__gnu_cxx::__normal_iterator"* ^4 -> i8* ^35
	movq -104(%rbp), %rbx
	# Clobber %rax
	movq %rax, -168(%rbp)
	# SetupCalls(7862:3): move argument i8* align 8 ^34
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(7862:3): move argument i8* align 8 ^35
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(7862:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -168(%rbp), %rax
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7863:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^11 -> ^36, indices=0,0
	movq -144(%rbp), %rax
	# LowerGetelementptr(7863:3): type of ^36 is %struct.LsItem**
	# LowerLoad(7864:3).2: (^36) into %struct.LsItem* ^37
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7865:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^12 -> ^38, indices=0,0
	movq -152(%rbp), %rax
	# LowerGetelementptr(7865:3): type of ^38 is %struct.LsItem**
	# LowerLoad(7866:3).2: (^38) into %struct.LsItem* ^39
	movq (%rax), %rcx
	# Clobber %rcx
	movq %rcx, -160(%rbp)
	# SetupCalls(7867:3): move argument %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* nonnull dereferenceable(1) align 1 ^7
	# Fixed movzx with identical source and destination widths
	movq -128(%rbp), %rdi
	# SetupCalls(7867:3): move argument %struct.LsItem* ^37
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(7867:3): move argument %struct.LsItem* ^39
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdx
	callq _ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ2lsRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS6_EEE3$_0EclINS_17__normal_iteratorIP6LsItemS2_ISF_SaISF_EEEESJ_EEbT_T0_
	# SetupCalls(7867:3): move i1 result from %rax
	movb %al, %bl
	# Unclobber %rcx
	movq -160(%rbp), %rcx
	cmpb $0, %bl
	jne .___ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_T0___M292
	jmp .___ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_T0___M425
	.___ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_T0___M292:
	# LowerBasicConversion(7871:3): %"class.__gnu_cxx::__normal_iterator"* ^13 -> i8* ^42
	movq %r12, %rax
	# LowerBasicConversion(7872:3): %"class.__gnu_cxx::__normal_iterator"* ^4 -> i8* ^43
	movq -104(%rbp), %rbx
	# Clobber %rax
	movq %rax, -168(%rbp)
	# SetupCalls(7873:3): move argument i8* align 8 ^42
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(7873:3): move argument i8* align 8 ^43
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(7873:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -168(%rbp), %rax
	# LowerBasicConversion(7874:3): %"class.__gnu_cxx::__normal_iterator"* ^14 -> i8* ^44
	movq %r14, %rax
	# LowerBasicConversion(7875:3): %"class.__gnu_cxx::__normal_iterator"* ^5 -> i8* ^45
	movq -112(%rbp), %rbx
	# Clobber %rax
	movq %rax, -168(%rbp)
	# SetupCalls(7876:3): move argument i8* align 8 ^44
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(7876:3): move argument i8* align 8 ^45
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(7876:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -168(%rbp), %rax
	# LowerBasicConversion(7877:3): %"class.__gnu_cxx::__normal_iterator"* ^15 -> i8* ^46
	movq %r15, %rax
	# LowerBasicConversion(7878:3): %"class.__gnu_cxx::__normal_iterator"* ^10 -> i8* ^47
	movq -136(%rbp), %rbx
	# Clobber %rax
	movq %rax, -168(%rbp)
	# SetupCalls(7879:3): move argument i8* align 8 ^46
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(7879:3): move argument i8* align 8 ^47
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(7879:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -168(%rbp), %rax
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7880:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^13 -> ^48, indices=0,0
	movq %r12, %rbx
	# LowerGetelementptr(7880:3): type of ^48 is %struct.LsItem**
	# LowerLoad(7881:3).2: (^48) into %struct.LsItem* ^49
	movq (%rbx), %rax
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7882:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^14 -> ^50, indices=0,0
	movq %r14, %rbx
	# LowerGetelementptr(7882:3): type of ^50 is %struct.LsItem**
	# LowerLoad(7883:3).2: (^50) into %struct.LsItem* ^51
	movq (%rbx), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7884:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^15 -> ^52, indices=0,0
	movq %r15, %rbx
	# LowerGetelementptr(7884:3): type of ^52 is %struct.LsItem**
	# LowerLoad(7885:3).2: (^52) into %struct.LsItem* ^53
	movq (%rbx), %r8
	# Clobber %rcx
	movq %rcx, -160(%rbp)
	# Clobber %r8
	movq %r8, -176(%rbp)
	# Clobber %rax
	movq %rax, -168(%rbp)
	# SetupCalls(7886:3): move argument %struct.LsItem* ^49
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(7886:3): move argument %struct.LsItem* ^51
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(7886:3): move argument %struct.LsItem* ^53
	# Fixed movzx with identical source and destination widths
	movq %r8, %rdx
	# SetupCalls(7886:3): move argument %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* nonnull dereferenceable(1) align 1 ^7
	# Fixed movzx with identical source and destination widths
	movq -128(%rbp), %rcx
	callq _ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_RT0_
	# Unclobber %rax
	movq -168(%rbp), %rax
	# Unclobber %r8
	movq -176(%rbp), %r8
	# Unclobber %rcx
	movq -160(%rbp), %rcx
	.___ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_T0___M425:
	# SetupCalls(7893:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq -136(%rbp), %rdi
	callq _ZN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEppEv
	# SetupCalls(7893:3): move %"class.__gnu_cxx::__normal_iterator"* result from %rax
	movq %rax, %rax
	jmp .___ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_T0___M168
	.___ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_SK_T0___M450:
	movq -184(%rbp), %r15
	movq -264(%rbp), %r14
	movq -224(%rbp), %r13
	movq -256(%rbp), %r12
	movq -216(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt11char_traitsIcE6lengthEPKc
.p2align 4, 0x90
_ZNSt11char_traitsIcE6lengthEPKc:
	.___ZNSt11char_traitsIcE6lengthEPKc__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(4262:3): size = 8, type = i8**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(4263:3).9: mov i8* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(4264:3).2: (^2) into i8* ^3
	movq (%rax), %rbx
	# SetupCalls(4265:3): move argument i8* ^3
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq strlen@PLT
	# SetupCalls(4265:3): move i64 result from %rax
	movq %rax, %rbx
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE8_M_beginEv
.p2align 4, 0x90
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE8_M_beginEv:
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE8_M_beginEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(4752:3): size = 8, type = %"class.std::_Rb_tree"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(4753:3).9: mov %"class.std::_Rb_tree"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(4754:3).2: (^2) into %"class.std::_Rb_tree"* ^3
	movq (%rax), %rbx
	# SetupCalls(4755:3): move argument %"class.std::_Rb_tree"* nonnull dereferenceable(48) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE9_M_mbeginEv
	# SetupCalls(4755:3): move %"struct.std::_Rb_tree_node"* result from %rax
	movq %rax, %rbx
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt11char_traitsIcE4findEPKcmRS1_
.p2align 4, 0x90
_ZNSt11char_traitsIcE4findEPKcmRS1_:
	.___ZNSt11char_traitsIcE4findEPKcmRS1___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(72 + 0, 16)
	subq $80, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -64(%rbp)
	movq %r12, -72(%rbp)
	# LowerAlloca(2993:3): size = 8, type = i8**, var = ^4
	leaq -8(%rbp), %rbx
	# LowerAlloca(2994:3): size = 8, type = i8**, var = ^5
	leaq -16(%rbp), %r9
	# LowerAlloca(2995:3): size = 8, type = i64*, var = ^6
	leaq -24(%rbp), %r8
	# LowerAlloca(2996:3): size = 8, type = i8**, var = ^7
	leaq -32(%rbp), %rcx
	# LowerStore(2997:3).9: mov i8* %rdi, (^5)
	movq %rdi, (%r9)
	# LowerStore(2998:3).9: mov i64 %rsi, (^6)
	movq %rsi, (%r8)
	# LowerStore(2999:3).9: mov i8* %rdx, (^7)
	movq %rdx, (%rcx)
	# LowerLoad(3000:3).2: (^6) into i64 ^8
	movq (%r8), %rax
	# LowerIcmp(3001:3): i64 ^8 vs. intlike 0
	cmpq $0, %rax
	sete %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt11char_traitsIcE4findEPKcmRS1___M21
	jmp .___ZNSt11char_traitsIcE4findEPKcmRS1___M24
	.___ZNSt11char_traitsIcE4findEPKcmRS1___M21:
	# LowerStore(3005:3).3: mov $imm, (^4)
	movq $0, (%rbx)
	jmp .___ZNSt11char_traitsIcE4findEPKcmRS1___M63
	.___ZNSt11char_traitsIcE4findEPKcmRS1___M24:
	# LowerLoad(3009:3).2: (^5) into i8* ^12
	movq (%r9), %rdx
	# LowerLoad(3010:3).2: (^7) into i8* ^13
	movq (%rcx), %rax
	# LowerLoad(3011:3).2: (^13) into i8 ^14
	movb (%rax), %cl
	movsbl %cl, %eax
	# LowerLoad(3013:3).2: (^6) into i64 ^16
	movq (%r8), %rcx
	# Clobber %rdx
	movq %rdx, -40(%rbp)
	# Clobber %rcx
	movq %rcx, -48(%rbp)
	# Clobber %rax
	movq %rax, -56(%rbp)
	# SetupCalls(3014:3): move argument i8* ^12
	# Fixed movzx with identical source and destination widths
	movq %rdx, %rdi
	# SetupCalls(3014:3): move argument i32 ^15
	# Fixed movzx with 32-bit source operand
	movl %eax, %esi
	# SetupCalls(3014:3): move argument i64 ^16
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdx
	callq memchr@PLT
	# SetupCalls(3014:3): move i8* result from %rax
	movq %rax, %r12
	# Unclobber %rax
	movq -56(%rbp), %rax
	# Unclobber %rcx
	movq -48(%rbp), %rcx
	# Unclobber %rdx
	movq -40(%rbp), %rdx
	# LowerStore(3015:3).9: mov i8* ^17, (^4)
	movq %r12, (%rbx)
	.___ZNSt11char_traitsIcE4findEPKcmRS1___M63:
	# LowerLoad(3019:3).2: (^4) into i8* ^19
	movq (%rbx), %rax
	movq -72(%rbp), %r12
	movq -64(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE5beginEv
.p2align 4, 0x90
_ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE5beginEv:
	.___ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE5beginEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(64 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -40(%rbp)
	movq %r12, -32(%rbp)
	# LowerAlloca(5791:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator.19"*, var = ^2
	leaq -8(%rbp), %r12
	# LowerAlloca(5792:3): size = 8, type = %"class.std::vector"**, var = ^3
	leaq -16(%rbp), %rbx
	# LowerStore(5793:3).9: mov %"class.std::vector"* %rdi, (^3)
	movq %rdi, (%rbx)
	# LowerLoad(5794:3).2: (^3) into %"class.std::vector"* ^4
	movq (%rbx), %rax
	# LowerBasicConversion(5795:3): %"class.std::vector"* ^4 -> %"struct.std::_Vector_base"* ^5
	movq %rax, %rbx
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(5796:3): struct-type: %"struct.std::_Vector_base"* ^5 -> ^6, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(5796:3): type of ^6 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# LowerBasicConversion(5797:3): %"struct.std::_Vector_base"* ^6 -> %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^7
	movq %rax, %rbx
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(5798:3): struct-type: %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^7 -> ^8, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(5798:3): type of ^8 is %"class.std::basic_string_view"**
	# Clobber %rax
	movq %rax, -24(%rbp)
	# SetupCalls(5799:3): move argument %"class.__gnu_cxx::__normal_iterator.19"* nonnull dereferenceable(8) align 8 ^2
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(5799:3): move argument %"class.std::basic_string_view"** nonnull dereferenceable(8) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZN9__gnu_cxx17__normal_iteratorIPSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEEC2ERKS5_
	# Unclobber %rax
	movq -24(%rbp), %rax
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator.19"
	# LowerGetelementptr(5800:3): struct-type: %"class.__gnu_cxx::__normal_iterator.19"* ^2 -> ^9, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(5800:3): type of ^9 is %"class.std::basic_string_view"**
	# LowerLoad(5801:3).2: (^9) into %"class.std::basic_string_view"* ^10
	movq (%rax), %rbx
	movq %rbx, %rax
	movq -32(%rbp), %r12
	movq -40(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt6__sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0_
.p2align 4, 0x90
_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0_:
	.___ZSt6__sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(296 + 0, 16)
	subq $304, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -184(%rbp)
	movq %r12, -176(%rbp)
	movq %r13, -168(%rbp)
	movq %r14, -216(%rbp)
	movq %r15, -144(%rbp)
	# LowerAlloca(7442:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^3
	# Fixing source-to-dest leaq -8(%rbp), -120(%rbp)
	leaq -8(%rbp), %r15
	movq %r15, -120(%rbp)
	# LowerAlloca(7443:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^4
	# Fixing source-to-dest leaq -16(%rbp), -112(%rbp)
	leaq -16(%rbp), %r15
	movq %r15, -112(%rbp)
	# LowerAlloca(7444:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, var = ^5
	# Fixing source-to-dest leaq -17(%rbp), -96(%rbp)
	leaq -17(%rbp), %r15
	movq %r15, -96(%rbp)
	# LowerAlloca(7445:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^6
	leaq -32(%rbp), %r13
	# LowerAlloca(7446:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^7
	leaq -40(%rbp), %r12
	# LowerAlloca(7447:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, var = ^8
	leaq -41(%rbp), %rbx
	# LowerAlloca(7448:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^9
	# Fixing source-to-dest leaq -56(%rbp), -88(%rbp)
	leaq -56(%rbp), %r15
	movq %r15, -88(%rbp)
	# LowerAlloca(7449:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^10
	# Fixing source-to-dest leaq -64(%rbp), -80(%rbp)
	leaq -64(%rbp), %r15
	movq %r15, -80(%rbp)
	# LowerAlloca(7450:3): size = 1, type = %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, var = ^11
	# Fixing source-to-dest leaq -65(%rbp), -104(%rbp)
	leaq -65(%rbp), %r15
	movq %r15, -104(%rbp)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7451:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^3 -> ^12, indices=0,0
	movq -120(%rbp), %rax
	# LowerGetelementptr(7451:3): type of ^12 is %struct.LsItem**
	# LowerStore(7452:3).9: mov %struct.LsItem* %rdi, (^12)
	movq %rdi, (%rax)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7453:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^4 -> ^13, indices=0,0
	movq -112(%rbp), %rax
	# LowerGetelementptr(7453:3): type of ^13 is %struct.LsItem**
	# LowerStore(7454:3).9: mov %struct.LsItem* %rsi, (^13)
	movq %rsi, (%rax)
	# SetupCalls(7455:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq -120(%rbp), %rdi
	# SetupCalls(7455:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -112(%rbp), %rsi
	callq _ZN9__gnu_cxxneIP6LsItemSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_
	# SetupCalls(7455:3): move i1 result from %rax
	movb %al, %r14b
	cmpb $0, %r14b
	jne .___ZSt6__sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M56
	jmp .___ZSt6__sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M355
	.___ZSt6__sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M56:
	# LowerBasicConversion(7459:3): %"class.__gnu_cxx::__normal_iterator"* ^6 -> i8* ^16
	movq %r13, %rax
	# LowerBasicConversion(7460:3): %"class.__gnu_cxx::__normal_iterator"* ^3 -> i8* ^17
	movq -120(%rbp), %rcx
	# Clobber %rcx
	movq %rcx, -128(%rbp)
	# Clobber %rax
	movq %rax, -136(%rbp)
	# SetupCalls(7461:3): move argument i8* align 8 ^16
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(7461:3): move argument i8* align 8 ^17
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(7461:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -136(%rbp), %rax
	# Unclobber %rcx
	movq -128(%rbp), %rcx
	# LowerBasicConversion(7462:3): %"class.__gnu_cxx::__normal_iterator"* ^7 -> i8* ^18
	movq %r12, %rcx
	# LowerBasicConversion(7463:3): %"class.__gnu_cxx::__normal_iterator"* ^4 -> i8* ^19
	movq -112(%rbp), %rax
	# Clobber %rcx
	movq %rcx, -128(%rbp)
	# Clobber %rax
	movq %rax, -136(%rbp)
	# SetupCalls(7464:3): move argument i8* align 8 ^18
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(7464:3): move argument i8* align 8 ^19
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(7464:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -136(%rbp), %rax
	# Unclobber %rcx
	movq -128(%rbp), %rcx
	# SetupCalls(7465:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq -112(%rbp), %rdi
	# SetupCalls(7465:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq -120(%rbp), %rsi
	callq _ZN9__gnu_cxxmiIP6LsItemSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_
	# SetupCalls(7465:3): move i64 result from %rax
	movq %rax, %r14
	# SetupCalls(7466:3): move argument i64 ^20
	# Fixed movzx with identical source and destination widths
	movq %r14, %rdi
	callq _ZSt4__lgIlET_S0_
	# SetupCalls(7466:3): move i64 result from %rax
	movq %rax, %r14
	# LowerMath(7467:3): ^21, 2 into i64 ^22
	movq %r14, %r15
	shlq $1, %r15
	# LowerBasicConversion(7468:3): %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* ^8 -> i8* ^23
	movq %rbx, %rax
	# LowerBasicConversion(7469:3): %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* ^5 -> i8* ^24
	movq -96(%rbp), %rbx
	# Clobber %rax
	movq %rax, -136(%rbp)
	# SetupCalls(7470:3): move argument i8* align 1 ^23
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(7470:3): move argument i8* align 1 ^24
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(7470:3): move argument i64 1
	movq $1, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -136(%rbp), %rax
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7471:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^6 -> ^25, indices=0,0
	movq %r13, %rbx
	# LowerGetelementptr(7471:3): type of ^25 is %struct.LsItem**
	# LowerLoad(7472:3).2: (^25) into %struct.LsItem* ^26
	movq (%rbx), %rax
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7473:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^7 -> ^27, indices=0,0
	movq %r12, %rbx
	# LowerGetelementptr(7473:3): type of ^27 is %struct.LsItem**
	# LowerLoad(7474:3).2: (^27) into %struct.LsItem* ^28
	movq (%rbx), %rcx
	# Clobber %rcx
	movq %rcx, -128(%rbp)
	# Clobber %rax
	movq %rax, -136(%rbp)
	# SetupCalls(7475:3): move argument %struct.LsItem* ^26
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(7475:3): move argument %struct.LsItem* ^28
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(7475:3): move argument i64 ^22
	# Fixed movzx with identical source and destination widths
	movq %r15, %rdx
	callq _ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEElNS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0_T1_
	# Unclobber %rax
	movq -136(%rbp), %rax
	# Unclobber %rcx
	movq -128(%rbp), %rcx
	# LowerBasicConversion(7476:3): %"class.__gnu_cxx::__normal_iterator"* ^9 -> i8* ^29
	movq -88(%rbp), %rbx
	# LowerBasicConversion(7477:3): %"class.__gnu_cxx::__normal_iterator"* ^3 -> i8* ^30
	movq -120(%rbp), %rax
	# Clobber %rax
	movq %rax, -136(%rbp)
	# SetupCalls(7478:3): move argument i8* align 8 ^29
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(7478:3): move argument i8* align 8 ^30
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(7478:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -136(%rbp), %rax
	# LowerBasicConversion(7479:3): %"class.__gnu_cxx::__normal_iterator"* ^10 -> i8* ^31
	movq -80(%rbp), %rax
	# LowerBasicConversion(7480:3): %"class.__gnu_cxx::__normal_iterator"* ^4 -> i8* ^32
	movq -112(%rbp), %rbx
	# Clobber %rax
	movq %rax, -136(%rbp)
	# SetupCalls(7481:3): move argument i8* align 8 ^31
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(7481:3): move argument i8* align 8 ^32
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(7481:3): move argument i64 8
	movq $8, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -136(%rbp), %rax
	# LowerBasicConversion(7482:3): %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* ^11 -> i8* ^33
	movq -104(%rbp), %rax
	# LowerBasicConversion(7483:3): %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* ^5 -> i8* ^34
	movq -96(%rbp), %rbx
	# Clobber %rax
	movq %rax, -136(%rbp)
	# SetupCalls(7484:3): move argument i8* align 1 ^33
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(7484:3): move argument i8* align 1 ^34
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(7484:3): move argument i64 1
	movq $1, %rdx
	callq memcpy@PLT
	# Unclobber %rax
	movq -136(%rbp), %rax
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7485:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^9 -> ^35, indices=0,0
	movq -88(%rbp), %rax
	# LowerGetelementptr(7485:3): type of ^35 is %struct.LsItem**
	# LowerLoad(7486:3).2: (^35) into %struct.LsItem* ^36
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7487:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^10 -> ^37, indices=0,0
	movq -80(%rbp), %rax
	# LowerGetelementptr(7487:3): type of ^37 is %struct.LsItem**
	# LowerLoad(7488:3).2: (^37) into %struct.LsItem* ^38
	movq (%rax), %rcx
	# Clobber %rcx
	movq %rcx, -128(%rbp)
	# SetupCalls(7489:3): move argument %struct.LsItem* ^36
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(7489:3): move argument %struct.LsItem* ^38
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	callq _ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0_
	# Unclobber %rcx
	movq -128(%rbp), %rcx
	.___ZSt6__sortIN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIZ2lsRKS4_ISt17basic_string_viewIcSt11char_traitsIcEESaISD_EEE3$_0EEEvT_SK_T0___M355:
	movq -144(%rbp), %r15
	movq -216(%rbp), %r14
	movq -168(%rbp), %r13
	movq -176(%rbp), %r12
	movq -184(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE8_S_rightEPSt18_Rb_tree_node_base
.p2align 4, 0x90
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE8_S_rightEPSt18_Rb_tree_node_base:
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE8_S_rightEPSt18_Rb_tree_node_base__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(4775:3): size = 8, type = %"struct.std::_Rb_tree_node_base"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(4776:3).9: mov %"struct.std::_Rb_tree_node_base"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(4777:3).2: (^2) into %"struct.std::_Rb_tree_node_base"* ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"struct.std::_Rb_tree_node_base"
	# LowerGetelementptr(4778:3): struct-type: %"struct.std::_Rb_tree_node_base"* ^3 -> ^4, indices=0,3
	movq %rbx, %rax
	addq $24, %rax
	# LowerGetelementptr(4778:3): type of ^4 is %"struct.std::_Rb_tree_node_base"**
	# LowerLoad(4779:3).2: (^4) into %"struct.std::_Rb_tree_node_base"* ^5
	movq (%rax), %rbx
	# LowerBasicConversion(4780:3): %"struct.std::_Rb_tree_node_base"* ^5 -> %"struct.std::_Rb_tree_node"* ^6
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISI_E
.p2align 4, 0x90
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISI_E:
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISI_E__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(40 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	movq %r12, -40(%rbp)
	# LowerAlloca(4797:3): size = 8, type = %"class.std::_Rb_tree"**, var = ^3
	leaq -8(%rbp), %rax
	# LowerAlloca(4798:3): size = 8, type = %"struct.std::_Rb_tree_node"**, var = ^4
	leaq -16(%rbp), %rbx
	# LowerStore(4799:3).9: mov %"class.std::_Rb_tree"* %rdi, (^3)
	movq %rdi, (%rax)
	# LowerStore(4800:3).9: mov %"struct.std::_Rb_tree_node"* %rsi, (^4)
	movq %rsi, (%rbx)
	# LowerLoad(4801:3).2: (^3) into %"class.std::_Rb_tree"* ^5
	movq (%rax), %r12
	# LowerLoad(4802:3).2: (^4) into %"struct.std::_Rb_tree_node"* ^6
	movq (%rbx), %rax
	# Clobber %rax
	movq %rax, -24(%rbp)
	# SetupCalls(4803:3): move argument %"class.std::_Rb_tree"* nonnull dereferenceable(48) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(4803:3): move argument %"struct.std::_Rb_tree_node"* ^6
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeISI_E
	# Unclobber %rax
	movq -24(%rbp), %rax
	# LowerLoad(4804:3).2: (^4) into %"struct.std::_Rb_tree_node"* ^7
	movq (%rbx), %rax
	# Clobber %rax
	movq %rax, -24(%rbp)
	# SetupCalls(4805:3): move argument %"class.std::_Rb_tree"* nonnull dereferenceable(48) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(4805:3): move argument %"struct.std::_Rb_tree_node"* ^7
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE11_M_put_nodeEPSt13_Rb_tree_nodeISI_E
	# Unclobber %rax
	movq -24(%rbp), %rax
	movq -40(%rbp), %r12
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaIS9_EEEESt4lessIS5_ESaISt4pairIKS5_SF_EEE4findERSJ_
.p2align 4, 0x90
_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaIS9_EEEESt4lessIS5_ESaISt4pairIKS5_SF_EEE4findERSJ_:
	.___ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaIS9_EEEESt4lessIS5_ESaISt4pairIKS5_SF_EEE4findERSJ___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(64 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -48(%rbp)
	movq %r12, -40(%rbp)
	# LowerAlloca(2632:3): size = 8, type = %"struct.std::_Rb_tree_iterator"*, var = ^3
	leaq -8(%rbp), %r12
	# LowerAlloca(2633:3): size = 8, type = %"class.std::map"**, var = ^4
	leaq -16(%rbp), %rax
	# LowerAlloca(2634:3): size = 8, type = %"class.std::__cxx11::basic_string"**, var = ^5
	leaq -24(%rbp), %rdx
	# LowerStore(2635:3).9: mov %"class.std::map"* %rdi, (^4)
	movq %rdi, (%rax)
	# LowerStore(2636:3).9: mov %"class.std::__cxx11::basic_string"* %rsi, (^5)
	movq %rsi, (%rdx)
	# LowerLoad(2637:3).2: (^4) into %"class.std::map"* ^6
	movq (%rax), %rcx
	# tt = Pointer, type = %"class.std::map"
	# LowerGetelementptr(2638:3): struct-type: %"class.std::map"* ^6 -> ^7, indices=0,0
	movq %rcx, %rbx
	# LowerGetelementptr(2638:3): type of ^7 is %"class.std::_Rb_tree"*
	# LowerLoad(2639:3).2: (^5) into %"class.std::__cxx11::basic_string"* ^8
	movq (%rdx), %rax
	# Clobber %rax
	movq %rax, -32(%rbp)
	# SetupCalls(2640:3): move argument %"class.std::_Rb_tree"* nonnull dereferenceable(48) align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(2640:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE4findERS7_
	# SetupCalls(2640:3): move %"struct.std::_Rb_tree_node_base"* result from %rax
	movq %rax, %rbx
	# Unclobber %rax
	movq -32(%rbp), %rax
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(2641:3): struct-type: %"struct.std::_Rb_tree_iterator"* ^3 -> ^10, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(2641:3): type of ^10 is %"struct.std::_Rb_tree_node_base"**
	# LowerStore(2642:3).9: mov %"struct.std::_Rb_tree_node_base"* ^9, (^10)
	movq %rbx, (%rax)
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(2643:3): struct-type: %"struct.std::_Rb_tree_iterator"* ^3 -> ^11, indices=0,0
	movq %r12, %rbx
	# LowerGetelementptr(2643:3): type of ^11 is %"struct.std::_Rb_tree_node_base"**
	# LowerLoad(2644:3).2: (^11) into %"struct.std::_Rb_tree_node_base"* ^12
	movq (%rbx), %rax
	movq -40(%rbp), %r12
	movq -48(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE11_S_relocateEPS3_S6_S6_RS4_
.p2align 4, 0x90
_ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE11_S_relocateEPS3_S6_S6_RS4_:
	.___ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE11_S_relocateEPS3_S6_S6_RS4___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(80 + 0, 16)
	subq $80, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -64(%rbp)
	# LowerAlloca(5807:3): size = 8, type = %"class.std::basic_string_view"**, var = ^5
	leaq -8(%rbp), %r9
	# LowerAlloca(5808:3): size = 8, type = %"class.std::basic_string_view"**, var = ^6
	leaq -16(%rbp), %r8
	# LowerAlloca(5809:3): size = 8, type = %"class.std::basic_string_view"**, var = ^7
	leaq -24(%rbp), %rbx
	# LowerAlloca(5810:3): size = 8, type = %"class.std::allocator"**, var = ^8
	leaq -32(%rbp), %rax
	# LowerStore(5811:3).9: mov %"class.std::basic_string_view"* %rdi, (^5)
	movq %rdi, (%r9)
	# LowerStore(5812:3).9: mov %"class.std::basic_string_view"* %rsi, (^6)
	movq %rsi, (%r8)
	# LowerStore(5813:3).9: mov %"class.std::basic_string_view"* %rdx, (^7)
	movq %rdx, (%rbx)
	# LowerStore(5814:3).9: mov %"class.std::allocator"* %rcx, (^8)
	movq %rcx, (%rax)
	# LowerLoad(5815:3).2: (^5) into %"class.std::basic_string_view"* ^9
	movq (%r9), %rcx
	# LowerLoad(5816:3).2: (^6) into %"class.std::basic_string_view"* ^10
	movq (%r8), %rdx
	# LowerLoad(5817:3).2: (^7) into %"class.std::basic_string_view"* ^11
	movq (%rbx), %r8
	# LowerLoad(5818:3).2: (^8) into %"class.std::allocator"* ^12
	movq (%rax), %rbx
	# Clobber %rdx
	movq %rdx, -40(%rbp)
	# Clobber %rcx
	movq %rcx, -48(%rbp)
	# Clobber %r8
	movq %r8, -56(%rbp)
	# SetupCalls(5819:3): move argument %"class.std::basic_string_view"* ^9
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(5819:3): move argument %"class.std::basic_string_view"* ^10
	# Fixed movzx with identical source and destination widths
	movq %rdx, %rsi
	# SetupCalls(5819:3): move argument %"class.std::basic_string_view"* ^11
	# Fixed movzx with identical source and destination widths
	movq %r8, %rdx
	# SetupCalls(5819:3): move argument %"class.std::allocator"* nonnull dereferenceable(1) align 1 ^12
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rcx
	callq _ZSt12__relocate_aIPSt17basic_string_viewIcSt11char_traitsIcEES4_SaIS3_EET0_T_S7_S6_RT1_
	# SetupCalls(5819:3): move %"class.std::basic_string_view"* result from %rax
	movq %rax, %rbx
	# Unclobber %r8
	movq -56(%rbp), %r8
	# Unclobber %rcx
	movq -48(%rbp), %rcx
	# Unclobber %rdx
	movq -40(%rbp), %rdx
	movq %rbx, %rax
	movq -64(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE7_S_leftEPSt18_Rb_tree_node_base
.p2align 4, 0x90
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE7_S_leftEPSt18_Rb_tree_node_base:
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE7_S_leftEPSt18_Rb_tree_node_base__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(4786:3): size = 8, type = %"struct.std::_Rb_tree_node_base"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(4787:3).9: mov %"struct.std::_Rb_tree_node_base"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(4788:3).2: (^2) into %"struct.std::_Rb_tree_node_base"* ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"struct.std::_Rb_tree_node_base"
	# LowerGetelementptr(4789:3): struct-type: %"struct.std::_Rb_tree_node_base"* ^3 -> ^4, indices=0,2
	movq %rbx, %rax
	addq $16, %rax
	# LowerGetelementptr(4789:3): type of ^4 is %"struct.std::_Rb_tree_node_base"**
	# LowerLoad(4790:3).2: (^4) into %"struct.std::_Rb_tree_node_base"* ^5
	movq (%rax), %rbx
	# LowerBasicConversion(4791:3): %"struct.std::_Rb_tree_node_base"* ^5 -> %"struct.std::_Rb_tree_node"* ^6
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE21_M_get_Node_allocatorEv
.p2align 4, 0x90
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE21_M_get_Node_allocatorEv:
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE21_M_get_Node_allocatorEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(4862:3): size = 8, type = %"class.std::_Rb_tree"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(4863:3).9: mov %"class.std::_Rb_tree"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(4864:3).2: (^2) into %"class.std::_Rb_tree"* ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::_Rb_tree"
	# LowerGetelementptr(4865:3): struct-type: %"class.std::_Rb_tree"* ^3 -> ^4, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(4865:3): type of ^4 is %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Rb_tree_impl"*
	# LowerBasicConversion(4866:3): %"class.std::_Rb_tree"* ^4 -> %"class.std::allocator.10"* ^5
	movq %rax, %rbx
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEE9_M_valptrEv
.p2align 4, 0x90
_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEE9_M_valptrEv:
	.___ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEE9_M_valptrEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(4872:3): size = 8, type = %"struct.std::_Rb_tree_node"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(4873:3).9: mov %"struct.std::_Rb_tree_node"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(4874:3).2: (^2) into %"struct.std::_Rb_tree_node"* ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"struct.std::_Rb_tree_node"
	# LowerGetelementptr(4875:3): struct-type: %"struct.std::_Rb_tree_node"* ^3 -> ^4, indices=0,1
	movq %rbx, %rax
	addq $32, %rax
	# LowerGetelementptr(4875:3): type of ^4 is %"struct.__gnu_cxx::__aligned_membuf"*
	# Clobber %rax
	movq %rax, -16(%rbp)
	# SetupCalls(4876:3): move argument %"struct.__gnu_cxx::__aligned_membuf"* nonnull dereferenceable(64) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEE6_M_ptrEv
	# SetupCalls(4876:3): move %"struct.std::pair"* result from %rax
	movq %rax, %rbx
	# Unclobber %rax
	movq -16(%rbp), %rax
	movq %rbx, %rax
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt3minImERKT_S2_S2_
.p2align 4, 0x90
_ZSt3minImERKT_S2_S2_:
	.___ZSt3minImERKT_S2_S2___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	# LowerAlloca(3086:3): size = 8, type = i64**, var = ^3
	leaq -8(%rbp), %r8
	# LowerAlloca(3087:3): size = 8, type = i64**, var = ^4
	leaq -16(%rbp), %rbx
	# LowerAlloca(3088:3): size = 8, type = i64**, var = ^5
	leaq -24(%rbp), %rdx
	# LowerStore(3089:3).9: mov i64* %rdi, (^4)
	movq %rdi, (%rbx)
	# LowerStore(3090:3).9: mov i64* %rsi, (^5)
	movq %rsi, (%rdx)
	# LowerLoad(3091:3).2: (^5) into i64* ^6
	movq (%rdx), %rax
	# LowerLoad(3092:3).2: (^6) into i64 ^7
	movq (%rax), %rcx
	# LowerLoad(3093:3).2: (^4) into i64* ^8
	movq (%rbx), %rax
	# LowerLoad(3094:3).2: (^8) into i64 ^9
	movq (%rax), %rsi
	# LowerIcmp(3095:3): i64 ^7 vs. operand i64 ^9
	cmpq %rsi, %rcx
	setb %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZSt3minImERKT_S2_S2___M23
	jmp .___ZSt3minImERKT_S2_S2___M28
	.___ZSt3minImERKT_S2_S2___M23:
	# LowerLoad(3099:3).2: (^5) into i64* ^12
	movq (%rdx), %rax
	# LowerStore(3100:3).9: mov i64* ^12, (^3)
	movq %rax, (%r8)
	jmp .___ZSt3minImERKT_S2_S2___M33
	.___ZSt3minImERKT_S2_S2___M28:
	# LowerLoad(3104:3).2: (^4) into i64* ^14
	movq (%rbx), %rax
	# LowerStore(3105:3).9: mov i64* ^14, (^3)
	movq %rax, (%r8)
	.___ZSt3minImERKT_S2_S2___M33:
	# LowerLoad(3109:3).2: (^3) into i64* ^16
	movq (%r8), %rax
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEEE10deallocateEPSK_m
.p2align 4, 0x90
_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEEE10deallocateEPSK_m:
	.___ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEEE10deallocateEPSK_m__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(48 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	# LowerAlloca(4902:3): size = 8, type = %"class.std::__new_allocator.11"**, var = ^4
	leaq -8(%rbp), %rax
	# LowerAlloca(4903:3): size = 8, type = %"struct.std::_Rb_tree_node"**, var = ^5
	leaq -16(%rbp), %rcx
	# LowerAlloca(4904:3): size = 8, type = i64*, var = ^6
	leaq -24(%rbp), %rbx
	# LowerStore(4905:3).9: mov %"class.std::__new_allocator.11"* %rdi, (^4)
	movq %rdi, (%rax)
	# LowerStore(4906:3).9: mov %"struct.std::_Rb_tree_node"* %rsi, (^5)
	movq %rsi, (%rcx)
	# LowerStore(4907:3).9: mov i64 %rdx, (^6)
	movq %rdx, (%rbx)
	# LowerLoad(4908:3).2: (^4) into %"class.std::__new_allocator.11"* ^7
	movq (%rax), %rbx
	# LowerLoad(4909:3).2: (^5) into %"struct.std::_Rb_tree_node"* ^8
	movq (%rcx), %rax
	# LowerBasicConversion(4910:3): %"struct.std::_Rb_tree_node"* ^8 -> i8* ^9
	movq %rax, %rbx
	# SetupCalls(4911:3): move argument i8* ^9
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZdlPv@PLT
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE9_M_mbeginEv
.p2align 4, 0x90
_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE9_M_mbeginEv:
	.___ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE9_M_mbeginEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(48 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(4920:3): size = 8, type = %"class.std::_Rb_tree"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(4921:3).9: mov %"class.std::_Rb_tree"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(4922:3).2: (^2) into %"class.std::_Rb_tree"* ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::_Rb_tree"
	# LowerGetelementptr(4923:3): struct-type: %"class.std::_Rb_tree"* ^3 -> ^4, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(4923:3): type of ^4 is %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Rb_tree_impl"*
	# LowerBasicConversion(4924:3): %"class.std::_Rb_tree"* ^4 -> i8* ^5
	movq %rax, %rbx
	# tt = Pointer, type = i8
	# LowerGetelementptr(4925:3): struct-type: i8* ^5 -> ^6, indices=8
	movq %rbx, %rax
	addq $8, %rax
	# LowerGetelementptr(4925:3): type of ^6 is i8*
	# LowerBasicConversion(4926:3): i8* ^6 -> %"struct.std::_Rb_tree_header"* ^7
	movq %rax, %rbx
	# tt = Pointer, type = %"struct.std::_Rb_tree_header"
	# LowerGetelementptr(4927:3): struct-type: %"struct.std::_Rb_tree_header"* ^7 -> ^8, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(4927:3): type of ^8 is %"struct.std::_Rb_tree_node_base"*
	# tt = Pointer, type = %"struct.std::_Rb_tree_node_base"
	# LowerGetelementptr(4928:3): struct-type: %"struct.std::_Rb_tree_node_base"* ^8 -> ^9, indices=0,1
	movq %rax, %rbx
	addq $8, %rbx
	# LowerGetelementptr(4928:3): type of ^9 is %"struct.std::_Rb_tree_node_base"**
	# LowerLoad(4929:3).2: (^9) into %"struct.std::_Rb_tree_node_base"* ^10
	movq (%rbx), %rax
	# LowerBasicConversion(4930:3): %"struct.std::_Rb_tree_node_base"* ^10 -> %"struct.std::_Rb_tree_node"* ^11
	movq %rax, %rbx
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEEED2Ev
.p2align 4, 0x90
_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEEED2Ev:
	.___ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEEED2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(4936:3): size = 8, type = %"class.std::__new_allocator.11"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(4937:3).9: mov %"class.std::__new_allocator.11"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(4938:3).2: (^2) into %"class.std::__new_allocator.11"* ^3
	movq (%rax), %rbx
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv
.p2align 4, 0x90
_ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv:
	.___ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(6647:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator.20"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(6648:3).9: mov %"class.__gnu_cxx::__normal_iterator.20"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(6649:3).2: (^2) into %"class.__gnu_cxx::__normal_iterator.20"* ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator.20"
	# LowerGetelementptr(6650:3): struct-type: %"class.__gnu_cxx::__normal_iterator.20"* ^3 -> ^4, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(6650:3): type of ^4 is i8**
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt12__relocate_aIPSt17basic_string_viewIcSt11char_traitsIcEES4_SaIS3_EET0_T_S7_S6_RT1_
.p2align 4, 0x90
_ZSt12__relocate_aIPSt17basic_string_viewIcSt11char_traitsIcEES4_SaIS3_EET0_T_S7_S6_RT1_:
	.___ZSt12__relocate_aIPSt17basic_string_viewIcSt11char_traitsIcEES4_SaIS3_EET0_T_S7_S6_RT1___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(104 + 0, 16)
	subq $112, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -72(%rbp)
	movq %r12, -64(%rbp)
	movq %r13, -56(%rbp)
	movq %r14, -80(%rbp)
	# LowerAlloca(5898:3): size = 8, type = %"class.std::basic_string_view"**, var = ^5
	leaq -8(%rbp), %rax
	# LowerAlloca(5899:3): size = 8, type = %"class.std::basic_string_view"**, var = ^6
	leaq -16(%rbp), %r13
	# LowerAlloca(5900:3): size = 8, type = %"class.std::basic_string_view"**, var = ^7
	leaq -24(%rbp), %r12
	# LowerAlloca(5901:3): size = 8, type = %"class.std::allocator"**, var = ^8
	leaq -32(%rbp), %rbx
	# LowerStore(5902:3).9: mov %"class.std::basic_string_view"* %rdi, (^5)
	movq %rdi, (%rax)
	# LowerStore(5903:3).9: mov %"class.std::basic_string_view"* %rsi, (^6)
	movq %rsi, (%r13)
	# LowerStore(5904:3).9: mov %"class.std::basic_string_view"* %rdx, (^7)
	movq %rdx, (%r12)
	# LowerStore(5905:3).9: mov %"class.std::allocator"* %rcx, (^8)
	movq %rcx, (%rbx)
	# LowerLoad(5906:3).2: (^5) into %"class.std::basic_string_view"* ^9
	movq (%rax), %rcx
	# Clobber %rcx
	movq %rcx, -40(%rbp)
	# SetupCalls(5907:3): move argument %"class.std::basic_string_view"* ^9
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	callq _ZSt12__niter_baseIPSt17basic_string_viewIcSt11char_traitsIcEEET_S5_
	# SetupCalls(5907:3): move %"class.std::basic_string_view"* result from %rax
	movq %rax, %r14
	# Unclobber %rcx
	movq -40(%rbp), %rcx
	# LowerLoad(5908:3).2: (^6) into %"class.std::basic_string_view"* ^11
	movq (%r13), %rax
	# Clobber %rax
	movq %rax, -48(%rbp)
	# SetupCalls(5909:3): move argument %"class.std::basic_string_view"* ^11
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZSt12__niter_baseIPSt17basic_string_viewIcSt11char_traitsIcEEET_S5_
	# SetupCalls(5909:3): move %"class.std::basic_string_view"* result from %rax
	movq %rax, %r13
	# Unclobber %rax
	movq -48(%rbp), %rax
	# LowerLoad(5910:3).2: (^7) into %"class.std::basic_string_view"* ^13
	movq (%r12), %rax
	# Clobber %rax
	movq %rax, -48(%rbp)
	# SetupCalls(5911:3): move argument %"class.std::basic_string_view"* ^13
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZSt12__niter_baseIPSt17basic_string_viewIcSt11char_traitsIcEEET_S5_
	# SetupCalls(5911:3): move %"class.std::basic_string_view"* result from %rax
	movq %rax, %r12
	# Unclobber %rax
	movq -48(%rbp), %rax
	# LowerLoad(5912:3).2: (^8) into %"class.std::allocator"* ^15
	movq (%rbx), %rax
	# Clobber %rax
	movq %rax, -48(%rbp)
	# SetupCalls(5913:3): move argument %"class.std::basic_string_view"* ^10
	# Fixed movzx with identical source and destination widths
	movq %r14, %rdi
	# SetupCalls(5913:3): move argument %"class.std::basic_string_view"* ^12
	# Fixed movzx with identical source and destination widths
	movq %r13, %rsi
	# SetupCalls(5913:3): move argument %"class.std::basic_string_view"* ^14
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdx
	# SetupCalls(5913:3): move argument %"class.std::allocator"* nonnull dereferenceable(1) align 1 ^15
	# Fixed movzx with identical source and destination widths
	movq %rax, %rcx
	callq _ZSt14__relocate_a_1IPSt17basic_string_viewIcSt11char_traitsIcEES4_SaIS3_EET0_T_S7_S6_RT1_
	# SetupCalls(5913:3): move %"class.std::basic_string_view"* result from %rax
	movq %rax, %rbx
	# Unclobber %rax
	movq -48(%rbp), %rax
	movq %rbx, %rax
	movq -80(%rbp), %r14
	movq -56(%rbp), %r13
	movq -64(%rbp), %r12
	movq -72(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeISI_E
.p2align 4, 0x90
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeISI_E:
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeISI_E__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(168 + 0, 16)
	subq $176, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -112(%rbp)
	movq %r12, -104(%rbp)
	movq %r13, -96(%rbp)
	movq %r14, -80(%rbp)
	movq %r15, -88(%rbp)
	# LowerAlloca(4811:3): size = 8, type = %"class.std::__new_allocator.11"**, var = ^3
	leaq -8(%rbp), %r14
	# LowerAlloca(4812:3): size = 8, type = %"struct.std::pair"**, var = ^4
	# Fixing source-to-dest leaq -16(%rbp), -64(%rbp)
	leaq -16(%rbp), %r15
	movq %r15, -64(%rbp)
	# LowerAlloca(4813:3): size = 8, type = %"class.std::allocator.10"**, var = ^5
	leaq -24(%rbp), %r13
	# LowerAlloca(4814:3): size = 8, type = %"struct.std::pair"**, var = ^6
	leaq -32(%rbp), %r12
	# LowerAlloca(4815:3): size = 8, type = %"class.std::_Rb_tree"**, var = ^7
	leaq -40(%rbp), %rbx
	# LowerAlloca(4816:3): size = 8, type = %"struct.std::_Rb_tree_node"**, var = ^8
	# Fixing source-to-dest leaq -48(%rbp), -56(%rbp)
	leaq -48(%rbp), %r15
	movq %r15, -56(%rbp)
	# LowerStore(4817:3).9: mov %"class.std::_Rb_tree"* %rdi, (^7)
	movq %rdi, (%rbx)
	# LowerStore(4818:3).9: mov %"struct.std::_Rb_tree_node"* %rsi, (^8)
	movq -56(%rbp), %rax
	movq %rsi, (%rax)
	# LowerLoad(4819:3).2: (^7) into %"class.std::_Rb_tree"* ^9
	movq (%rbx), %rax
	# Clobber %rax
	movq %rax, -72(%rbp)
	# SetupCalls(4820:3): move argument %"class.std::_Rb_tree"* nonnull dereferenceable(48) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE21_M_get_Node_allocatorEv
	# SetupCalls(4820:3): move %"class.std::allocator.10"* result from %rax
	movq %rax, %r15
	# Unclobber %rax
	movq -72(%rbp), %rax
	# LowerLoad(4821:3).2: (^8) into %"struct.std::_Rb_tree_node"* ^11
	movq -56(%rbp), %rax
	movq (%rax), %rbx
	# SetupCalls(4822:3): move argument %"struct.std::_Rb_tree_node"* nonnull dereferenceable(96) align 8 ^11
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEE9_M_valptrEv
	# SetupCalls(4822:3): move %"struct.std::pair"* result from %rax
	movq %rax, %rbx
	# LowerStore(4823:3).9: mov %"class.std::allocator.10"* ^10, (^5)
	movq %r15, (%r13)
	# LowerStore(4824:3).9: mov %"struct.std::pair"* ^12, (^6)
	movq %rbx, (%r12)
	# LowerLoad(4825:3).2: (^5) into %"class.std::allocator.10"* ^13
	movq (%r13), %rax
	# LowerBasicConversion(4826:3): %"class.std::allocator.10"* ^13 -> %"class.std::__new_allocator.11"* ^14
	movq %rax, %rbx
	# LowerLoad(4827:3).2: (^6) into %"struct.std::pair"* ^15
	movq (%r12), %rcx
	# LowerStore(4828:3).9: mov %"class.std::__new_allocator.11"* ^14, (^3)
	movq %rbx, (%r14)
	# LowerStore(4829:3).9: mov %"struct.std::pair"* ^15, (^4)
	movq -64(%rbp), %rax
	movq %rcx, (%rax)
	# LowerLoad(4830:3).2: (^3) into %"class.std::__new_allocator.11"* ^16
	movq (%r14), %rax
	# LowerLoad(4831:3).2: (^4) into %"struct.std::pair"* ^17
	movq -64(%rbp), %rbx
	movq (%rbx), %rax
	# Clobber %rax
	movq %rax, -72(%rbp)
	# SetupCalls(4832:3): move argument %"struct.std::pair"* nonnull dereferenceable(64) align 8 ^17
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISA_EEEEED2Ev
	# Unclobber %rax
	movq -72(%rbp), %rax
	# LowerLoad(4833:3).2: (^8) into %"struct.std::_Rb_tree_node"* ^18
	movq -56(%rbp), %rax
	movq (%rax), %rbx
	movq -88(%rbp), %r15
	movq -80(%rbp), %r14
	movq -96(%rbp), %r13
	movq -104(%rbp), %r12
	movq -112(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEC2ERKS4_
.p2align 4, 0x90
_ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEC2ERKS4_:
	.___ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EEC2ERKS4___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(40 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	# LowerAlloca(4960:3): size = 8, type = %"struct.std::_Vector_base"**, var = ^3
	leaq -8(%rbp), %rcx
	# LowerAlloca(4961:3): size = 8, type = %"class.std::allocator"**, var = ^4
	leaq -16(%rbp), %rax
	# LowerStore(4962:3).9: mov %"struct.std::_Vector_base"* %rdi, (^3)
	movq %rdi, (%rcx)
	# LowerStore(4963:3).9: mov %"class.std::allocator"* %rsi, (^4)
	movq %rsi, (%rax)
	# LowerLoad(4964:3).2: (^3) into %"struct.std::_Vector_base"* ^5
	movq (%rcx), %rbx
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(4965:3): struct-type: %"struct.std::_Vector_base"* ^5 -> ^6, indices=0,0
	movq %rbx, %rcx
	# LowerGetelementptr(4965:3): type of ^6 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# LowerLoad(4966:3).2: (^4) into %"class.std::allocator"* ^7
	movq (%rax), %rbx
	# Clobber %rcx
	movq %rcx, -24(%rbp)
	# SetupCalls(4967:3): move argument %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"* nonnull dereferenceable(24) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(4967:3): move argument %"class.std::allocator"* nonnull dereferenceable(1) align 1 ^7
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12_Vector_implC2ERKS4_
	# Unclobber %rcx
	movq -24(%rbp), %rcx
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt16initializer_listISt17basic_string_viewIcSt11char_traitsIcEEE5beginEv
.p2align 4, 0x90
_ZNKSt16initializer_listISt17basic_string_viewIcSt11char_traitsIcEEE5beginEv:
	.___ZNKSt16initializer_listISt17basic_string_viewIcSt11char_traitsIcEEE5beginEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(5046:3): size = 8, type = %"class.std::initializer_list"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(5047:3).9: mov %"class.std::initializer_list"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(5048:3).2: (^2) into %"class.std::initializer_list"* ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::initializer_list"
	# LowerGetelementptr(5049:3): struct-type: %"class.std::initializer_list"* ^3 -> ^4, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(5049:3): type of ^4 is %"class.std::basic_string_view"**
	# LowerLoad(5050:3).2: (^4) into %"class.std::basic_string_view"* ^5
	movq (%rax), %rbx
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12_Vector_implC2ERKS4_
.p2align 4, 0x90
_ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12_Vector_implC2ERKS4_:
	.___ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12_Vector_implC2ERKS4___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(64 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -64(%rbp)
	# LowerAlloca(5067:3): size = 8, type = %"class.std::__new_allocator"**, var = ^3
	leaq -8(%rbp), %r9
	# LowerAlloca(5068:3): size = 8, type = %"class.std::__new_allocator"**, var = ^4
	leaq -16(%rbp), %rbx
	# LowerAlloca(5069:3): size = 8, type = %"class.std::allocator"**, var = ^5
	leaq -24(%rbp), %r8
	# LowerAlloca(5070:3): size = 8, type = %"class.std::allocator"**, var = ^6
	leaq -32(%rbp), %rdx
	# LowerAlloca(5071:3): size = 8, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"**, var = ^7
	leaq -40(%rbp), %rcx
	# LowerAlloca(5072:3): size = 8, type = %"class.std::allocator"**, var = ^8
	leaq -48(%rbp), %rax
	# LowerStore(5073:3).9: mov %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"* %rdi, (^7)
	movq %rdi, (%rcx)
	# LowerStore(5074:3).9: mov %"class.std::allocator"* %rsi, (^8)
	movq %rsi, (%rax)
	# LowerLoad(5075:3).2: (^7) into %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"* ^9
	movq (%rcx), %rsi
	# LowerBasicConversion(5076:3): %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"* ^9 -> %"class.std::allocator"* ^10
	movq %rsi, %rcx
	# LowerLoad(5077:3).2: (^8) into %"class.std::allocator"* ^11
	movq (%rax), %rdi
	# LowerStore(5078:3).9: mov %"class.std::allocator"* ^10, (^5)
	movq %rcx, (%r8)
	# LowerStore(5079:3).9: mov %"class.std::allocator"* ^11, (^6)
	movq %rdi, (%rdx)
	# LowerLoad(5080:3).2: (^5) into %"class.std::allocator"* ^12
	movq (%r8), %rcx
	# LowerBasicConversion(5081:3): %"class.std::allocator"* ^12 -> %"class.std::__new_allocator"* ^13
	movq %rcx, %rax
	# LowerLoad(5082:3).2: (^6) into %"class.std::allocator"* ^14
	movq (%rdx), %rcx
	# LowerBasicConversion(5083:3): %"class.std::allocator"* ^14 -> %"class.std::__new_allocator"* ^15
	movq %rcx, %rdx
	# LowerStore(5084:3).9: mov %"class.std::__new_allocator"* ^13, (^3)
	movq %rax, (%r9)
	# LowerStore(5085:3).9: mov %"class.std::__new_allocator"* ^15, (^4)
	movq %rdx, (%rbx)
	# LowerLoad(5086:3).2: (^3) into %"class.std::__new_allocator"* ^16
	movq (%r9), %rax
	# LowerBasicConversion(5087:3): %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"* ^9 -> %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^17
	movq %rsi, %rax
	# Clobber %rax
	movq %rax, -56(%rbp)
	# SetupCalls(5088:3): move argument %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* nonnull dereferenceable(24) align 8 ^17
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE17_Vector_impl_dataC2Ev
	# Unclobber %rax
	movq -56(%rbp), %rax
	movq -64(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE11_M_allocateEm
.p2align 4, 0x90
_ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE11_M_allocateEm:
	.___ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE11_M_allocateEm__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(72 + 0, 16)
	subq $80, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -56(%rbp)
	movq %r12, -72(%rbp)
	# LowerAlloca(5094:3): size = 8, type = %"class.std::allocator"**, var = ^3
	leaq -8(%rbp), %r8
	# LowerAlloca(5095:3): size = 8, type = i64*, var = ^4
	leaq -16(%rbp), %rbx
	# LowerAlloca(5096:3): size = 8, type = %"struct.std::_Vector_base"**, var = ^5
	leaq -24(%rbp), %rax
	# LowerAlloca(5097:3): size = 8, type = i64*, var = ^6
	leaq -32(%rbp), %rdx
	# LowerStore(5098:3).9: mov %"struct.std::_Vector_base"* %rdi, (^5)
	movq %rdi, (%rax)
	# LowerStore(5099:3).9: mov i64 %rsi, (^6)
	movq %rsi, (%rdx)
	# LowerLoad(5100:3).2: (^5) into %"struct.std::_Vector_base"* ^7
	movq (%rax), %rcx
	# LowerLoad(5101:3).2: (^6) into i64 ^8
	movq (%rdx), %rax
	# LowerIcmp(5102:3): i64 ^8 vs. intlike 0
	cmpq $0, %rax
	setne %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE11_M_allocateEm__M21
	jmp .___ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE11_M_allocateEm__M69
	.___ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE11_M_allocateEm__M21:
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(5106:3): struct-type: %"struct.std::_Vector_base"* ^7 -> ^11, indices=0,0
	movq %rcx, %rax
	# LowerGetelementptr(5106:3): type of ^11 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# LowerBasicConversion(5107:3): %"struct.std::_Vector_base"* ^11 -> %"class.std::allocator"* ^12
	movq %rax, %rcx
	# LowerLoad(5108:3).2: (^6) into i64 ^13
	movq (%rdx), %rax
	# LowerStore(5109:3).9: mov %"class.std::allocator"* ^12, (^3)
	movq %rcx, (%r8)
	# LowerStore(5110:3).9: mov i64 ^13, (^4)
	movq %rax, (%rbx)
	# LowerLoad(5111:3).2: (^3) into %"class.std::allocator"* ^14
	movq (%r8), %rax
	# LowerBasicConversion(5112:3): %"class.std::allocator"* ^14 -> %"class.std::__new_allocator"* ^15
	movq %rax, %rcx
	# LowerLoad(5113:3).2: (^4) into i64 ^16
	movq (%rbx), %rax
	# Clobber %rcx
	movq %rcx, -40(%rbp)
	# Clobber %rax
	movq %rax, -48(%rbp)
	# SetupCalls(5114:3): move argument %"class.std::__new_allocator"* nonnull dereferenceable(1) align 1 ^15
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(5114:3): move argument i64 ^16
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(5114:3): move argument i8* null
	movq $0, %rdx
	callq _ZNSt15__new_allocatorISt17basic_string_viewIcSt11char_traitsIcEEE8allocateEmPKv
	# SetupCalls(5114:3): move %"class.std::basic_string_view"* result from %rax
	movq %rax, %rbx
	# Unclobber %rax
	movq -48(%rbp), %rax
	# Unclobber %rcx
	movq -40(%rbp), %rcx
	# MovePhi: ^17 -> ^20
	movq %rbx, %r12
	jmp .___ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE11_M_allocateEm__M72
	.___ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE11_M_allocateEm__M69:
	# MovePhi: intlike -> ^20
	movq $0, %r12
	.___ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE11_M_allocateEm__M72:
	movq %r12, %rax
	movq -72(%rbp), %r12
	movq -56(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE17_S_check_init_lenEmRKS4_
.p2align 4, 0x90
_ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE17_S_check_init_lenEmRKS4_:
	.___ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE17_S_check_init_lenEmRKS4___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(120 + 0, 16)
	subq $128, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -88(%rbp)
	movq %r12, -80(%rbp)
	movq %r13, -104(%rbp)
	movq %r14, -96(%rbp)
	movq %r15, -112(%rbp)
	# LowerAlloca(5127:3): size = 8, type = %"class.std::__new_allocator"**, var = ^3
	leaq -8(%rbp), %r9
	# LowerAlloca(5128:3): size = 8, type = %"class.std::__new_allocator"**, var = ^4
	leaq -16(%rbp), %rax
	# LowerAlloca(5129:3): size = 8, type = %"class.std::allocator"**, var = ^5
	leaq -24(%rbp), %r8
	# LowerAlloca(5130:3): size = 8, type = %"class.std::allocator"**, var = ^6
	leaq -32(%rbp), %rcx
	# LowerAlloca(5131:3): size = 8, type = %"class.std::allocator"**, var = ^7
	leaq -40(%rbp), %r12
	# LowerAlloca(5132:3): size = 8, type = i64*, var = ^8
	leaq -48(%rbp), %rbx
	# LowerAlloca(5133:3): size = 8, type = %"class.std::allocator"**, var = ^9
	leaq -56(%rbp), %r10
	# LowerAlloca(5134:3): size = 1, type = %"class.std::allocator"*, var = ^10
	leaq -57(%rbp), %r14
	# LowerStore(5135:3).9: mov i64 %rdi, (^8)
	movq %rdi, (%rbx)
	# LowerStore(5136:3).9: mov %"class.std::allocator"* %rsi, (^9)
	movq %rsi, (%r10)
	# LowerLoad(5137:3).2: (^8) into i64 ^11
	movq (%rbx), %r13
	# LowerLoad(5138:3).2: (^9) into %"class.std::allocator"* ^12
	movq (%r10), %rdx
	# LowerStore(5139:3).9: mov %"class.std::allocator"* ^10, (^5)
	movq %r14, (%r8)
	# LowerStore(5140:3).9: mov %"class.std::allocator"* ^12, (^6)
	movq %rdx, (%rcx)
	# LowerLoad(5141:3).2: (^5) into %"class.std::allocator"* ^13
	movq (%r8), %rdx
	# LowerBasicConversion(5142:3): %"class.std::allocator"* ^13 -> %"class.std::__new_allocator"* ^14
	movq %rdx, %rsi
	# LowerLoad(5143:3).2: (^6) into %"class.std::allocator"* ^15
	movq (%rcx), %rdx
	# LowerBasicConversion(5144:3): %"class.std::allocator"* ^15 -> %"class.std::__new_allocator"* ^16
	movq %rdx, %rcx
	# LowerStore(5145:3).9: mov %"class.std::__new_allocator"* ^14, (^3)
	movq %rsi, (%r9)
	# LowerStore(5146:3).9: mov %"class.std::__new_allocator"* ^16, (^4)
	movq %rcx, (%rax)
	# LowerLoad(5147:3).2: (^3) into %"class.std::__new_allocator"* ^17
	movq (%r9), %rax
	# SetupCalls(5148:3): move argument %"class.std::allocator"* nonnull dereferenceable(1) align 1 ^10
	# Fixed movzx with identical source and destination widths
	movq %r14, %rdi
	callq _ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE11_S_max_sizeERKS4_
	# SetupCalls(5148:3): move i64 result from %rax
	movq %rax, %r15
	# LowerIcmp(5149:3): i64 ^11 vs. operand i64 ^18
	cmpq %r15, %r13
	seta %r13b
	andq $1, %r13
	# LowerStore(5150:3).9: mov %"class.std::allocator"* ^10, (^7)
	movq %r14, (%r12)
	# LowerLoad(5151:3).2: (^7) into %"class.std::allocator"* ^20
	movq (%r12), %rax
	# LowerBasicConversion(5152:3): %"class.std::allocator"* ^20 -> %"class.std::__new_allocator"* ^21
	movq %rax, %rcx
	# Clobber %rcx
	movq %rcx, -72(%rbp)
	# SetupCalls(5153:3): move argument %"class.std::__new_allocator"* nonnull dereferenceable(1) align 1 ^21
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	callq _ZNSt15__new_allocatorISt17basic_string_viewIcSt11char_traitsIcEEED2Ev
	# Unclobber %rcx
	movq -72(%rbp), %rcx
	cmpb $0, %r13b
	jne .___ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE17_S_check_init_lenEmRKS4___M98
	jmp .___ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE17_S_check_init_lenEmRKS4___M120
	.___ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE17_S_check_init_lenEmRKS4___M98:
	# SetupCalls(5157:3): move argument i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.26, i64 0, i64 0)
	leaq .str.26(%rip), %rdi
	callq _ZSt20__throw_length_errorPKc@PLT
	.___ZNSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE17_S_check_init_lenEmRKS4___M120:
	# LowerLoad(5161:3).2: (^8) into i64 ^24
	movq (%rbx), %rax
	movq -112(%rbp), %r15
	movq -96(%rbp), %r14
	movq -104(%rbp), %r13
	movq -80(%rbp), %r12
	movq -88(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKSt17basic_string_viewIcSt11char_traitsIcEEPS5_EET0_T_SA_S9_
.p2align 4, 0x90
_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKSt17basic_string_viewIcSt11char_traitsIcEEPS5_EET0_T_SA_S9_:
	.___ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKSt17basic_string_viewIcSt11char_traitsIcEEPS5_EET0_T_SA_S9___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(56 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -48(%rbp)
	# LowerAlloca(5286:3): size = 8, type = %"class.std::basic_string_view"**, var = ^4
	leaq -8(%rbp), %rax
	# LowerAlloca(5287:3): size = 8, type = %"class.std::basic_string_view"**, var = ^5
	leaq -16(%rbp), %r8
	# LowerAlloca(5288:3): size = 8, type = %"class.std::basic_string_view"**, var = ^6
	leaq -24(%rbp), %rcx
	# LowerStore(5289:3).9: mov %"class.std::basic_string_view"* %rdi, (^4)
	movq %rdi, (%rax)
	# LowerStore(5290:3).9: mov %"class.std::basic_string_view"* %rsi, (^5)
	movq %rsi, (%r8)
	# LowerStore(5291:3).9: mov %"class.std::basic_string_view"* %rdx, (^6)
	movq %rdx, (%rcx)
	# LowerLoad(5292:3).2: (^4) into %"class.std::basic_string_view"* ^7
	movq (%rax), %rbx
	# LowerLoad(5293:3).2: (^5) into %"class.std::basic_string_view"* ^8
	movq (%r8), %rax
	# LowerLoad(5294:3).2: (^6) into %"class.std::basic_string_view"* ^9
	movq (%rcx), %r8
	# Clobber %r8
	movq %r8, -32(%rbp)
	# Clobber %rax
	movq %rax, -40(%rbp)
	# SetupCalls(5295:3): move argument %"class.std::basic_string_view"* ^7
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(5295:3): move argument %"class.std::basic_string_view"* ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(5295:3): move argument %"class.std::basic_string_view"* ^9
	# Fixed movzx with identical source and destination widths
	movq %r8, %rdx
	callq _ZSt16__do_uninit_copyIPKSt17basic_string_viewIcSt11char_traitsIcEEPS3_ET0_T_S8_S7_
	# SetupCalls(5295:3): move %"class.std::basic_string_view"* result from %rax
	movq %rax, %rbx
	# Unclobber %rax
	movq -40(%rbp), %rax
	# Unclobber %r8
	movq -32(%rbp), %r8
	movq %rbx, %rax
	movq -48(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt16__do_uninit_copyIPKSt17basic_string_viewIcSt11char_traitsIcEEPS3_ET0_T_S8_S7_
.p2align 4, 0x90
_ZSt16__do_uninit_copyIPKSt17basic_string_viewIcSt11char_traitsIcEEPS3_ET0_T_S8_S7_:
	.___ZSt16__do_uninit_copyIPKSt17basic_string_viewIcSt11char_traitsIcEEPS3_ET0_T_S8_S7___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(72 + 0, 16)
	subq $80, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -56(%rbp)
	movq %r12, -72(%rbp)
	movq %r13, -64(%rbp)
	# LowerAlloca(5301:3): size = 8, type = %"class.std::basic_string_view"**, var = ^4
	leaq -8(%rbp), %rbx
	# LowerAlloca(5302:3): size = 8, type = %"class.std::basic_string_view"**, var = ^5
	leaq -16(%rbp), %r13
	# LowerAlloca(5303:3): size = 8, type = %"class.std::basic_string_view"**, var = ^6
	leaq -24(%rbp), %rcx
	# LowerAlloca(5304:3): size = 8, type = %"class.std::basic_string_view"**, var = ^7
	leaq -32(%rbp), %r12
	# LowerStore(5305:3).9: mov %"class.std::basic_string_view"* %rdi, (^4)
	movq %rdi, (%rbx)
	# LowerStore(5306:3).9: mov %"class.std::basic_string_view"* %rsi, (^5)
	movq %rsi, (%r13)
	# LowerStore(5307:3).9: mov %"class.std::basic_string_view"* %rdx, (^6)
	movq %rdx, (%rcx)
	# LowerLoad(5308:3).2: (^6) into %"class.std::basic_string_view"* ^8
	movq (%rcx), %rax
	# LowerStore(5309:3).9: mov %"class.std::basic_string_view"* ^8, (^7)
	movq %rax, (%r12)
	.___ZSt16__do_uninit_copyIPKSt17basic_string_viewIcSt11char_traitsIcEEPS3_ET0_T_S8_S7___M19:
	# LowerLoad(5313:3).2: (^4) into %"class.std::basic_string_view"* ^10
	movq (%rbx), %rax
	# LowerLoad(5314:3).2: (^5) into %"class.std::basic_string_view"* ^11
	movq (%r13), %rcx
	# LowerIcmp(5315:3): %"class.std::basic_string_view"* ^10 vs. operand %"class.std::basic_string_view"* ^11
	cmpq %rcx, %rax
	setne %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZSt16__do_uninit_copyIPKSt17basic_string_viewIcSt11char_traitsIcEEPS3_ET0_T_S8_S7___M28
	jmp .___ZSt16__do_uninit_copyIPKSt17basic_string_viewIcSt11char_traitsIcEEPS3_ET0_T_S8_S7___M75
	.___ZSt16__do_uninit_copyIPKSt17basic_string_viewIcSt11char_traitsIcEEPS3_ET0_T_S8_S7___M28:
	# LowerLoad(5319:3).2: (^7) into %"class.std::basic_string_view"* ^14
	movq (%r12), %rax
	# LowerLoad(5320:3).2: (^4) into %"class.std::basic_string_view"* ^15
	movq (%rbx), %rcx
	# Clobber %rcx
	movq %rcx, -40(%rbp)
	# Clobber %rax
	movq %rax, -48(%rbp)
	# SetupCalls(5321:3): move argument %"class.std::basic_string_view"* ^14
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(5321:3): move argument %"class.std::basic_string_view"* nonnull dereferenceable(16) align 8 ^15
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	callq _ZSt10_ConstructISt17basic_string_viewIcSt11char_traitsIcEEJRKS3_EEvPT_DpOT0_
	# Unclobber %rax
	movq -48(%rbp), %rax
	# Unclobber %rcx
	movq -40(%rbp), %rcx
	# LowerLoad(5325:3).2: (^4) into %"class.std::basic_string_view"* ^17
	movq (%rbx), %rax
	# tt = Pointer, type = %"class.std::basic_string_view"
	# LowerGetelementptr(5326:3): struct-type: %"class.std::basic_string_view"* ^17 -> ^18, indices=1
	movq %rax, %rcx
	addq $16, %rcx
	# LowerGetelementptr(5326:3): type of ^18 is %"class.std::basic_string_view"*
	# LowerStore(5327:3).9: mov %"class.std::basic_string_view"* ^18, (^4)
	movq %rcx, (%rbx)
	# LowerLoad(5328:3).2: (^7) into %"class.std::basic_string_view"* ^19
	movq (%r12), %rcx
	# tt = Pointer, type = %"class.std::basic_string_view"
	# LowerGetelementptr(5329:3): struct-type: %"class.std::basic_string_view"* ^19 -> ^20, indices=1
	movq %rcx, %rax
	addq $16, %rax
	# LowerGetelementptr(5329:3): type of ^20 is %"class.std::basic_string_view"*
	# LowerStore(5330:3).9: mov %"class.std::basic_string_view"* ^20, (^7)
	movq %rax, (%r12)
	jmp .___ZSt16__do_uninit_copyIPKSt17basic_string_viewIcSt11char_traitsIcEEPS3_ET0_T_S8_S7___M19
	.___ZSt16__do_uninit_copyIPKSt17basic_string_viewIcSt11char_traitsIcEEPS3_ET0_T_S8_S7___M75:
	# LowerLoad(5334:3).2: (^7) into %"class.std::basic_string_view"* ^22
	movq (%r12), %rax
	movq -64(%rbp), %r13
	movq -72(%rbp), %r12
	movq -56(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt12_Vector_baseI6LsItemSaIS0_EE12_Vector_implD2Ev
.p2align 4, 0x90
_ZNSt12_Vector_baseI6LsItemSaIS0_EE12_Vector_implD2Ev:
	.___ZNSt12_Vector_baseI6LsItemSaIS0_EE12_Vector_implD2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(48 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	# LowerAlloca(6811:3): size = 8, type = %"class.std::allocator.7"**, var = ^2
	leaq -8(%rbp), %rcx
	# LowerAlloca(6812:3): size = 8, type = %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl"**, var = ^3
	leaq -16(%rbp), %rbx
	# LowerStore(6813:3).9: mov %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl"* %rdi, (^3)
	movq %rdi, (%rbx)
	# LowerLoad(6814:3).2: (^3) into %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl"* ^4
	movq (%rbx), %rax
	# LowerBasicConversion(6815:3): %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl"* ^4 -> %"class.std::allocator.7"* ^5
	movq %rax, %rbx
	# LowerStore(6816:3).9: mov %"class.std::allocator.7"* ^5, (^2)
	movq %rbx, (%rcx)
	# LowerLoad(6817:3).2: (^2) into %"class.std::allocator.7"* ^6
	movq (%rcx), %rbx
	# LowerBasicConversion(6818:3): %"class.std::allocator.7"* ^6 -> %"class.std::__new_allocator.8"* ^7
	movq %rbx, %rax
	# Clobber %rax
	movq %rax, -24(%rbp)
	# SetupCalls(6819:3): move argument %"class.std::__new_allocator.8"* nonnull dereferenceable(1) align 1 ^7
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt15__new_allocatorI6LsItemED2Ev
	# Unclobber %rax
	movq -24(%rbp), %rax
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt6vectorI6LsItemSaIS0_EE17_M_realloc_insertIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbEEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_
.p2align 4, 0x90
_ZNSt6vectorI6LsItemSaIS0_EE17_M_realloc_insertIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbEEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_:
	.___ZNSt6vectorI6LsItemSaIS0_EE17_M_realloc_insertIJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbEEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(808 + 0, 16)
	subq $816, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -464(%rbp)
	movq %r12, -424(%rbp)
	movq %r13, -432(%rbp)
	movq %r14, -472(%rbp)
	movq %r15, -344(%rbp)
	# LowerAlloca(6848:3): size = 8, type = %"class.std::__new_allocator.8"**, var = ^5
	# Fixing source-to-dest leaq -8(%rbp), -280(%rbp)
	leaq -8(%rbp), %r15
	movq %r15, -280(%rbp)
	# LowerAlloca(6849:3): size = 8, type = %struct.LsItem**, var = ^6
	# Fixing source-to-dest leaq -16(%rbp), -272(%rbp)
	leaq -16(%rbp), %r15
	movq %r15, -272(%rbp)
	# LowerAlloca(6850:3): size = 8, type = %"class.std::__cxx11::basic_string"**, var = ^7
	# Fixing source-to-dest leaq -24(%rbp), -264(%rbp)
	leaq -24(%rbp), %r15
	movq %r15, -264(%rbp)
	# LowerAlloca(6851:3): size = 8, type = i8**, var = ^8
	# Fixing source-to-dest leaq -32(%rbp), -256(%rbp)
	leaq -32(%rbp), %r15
	movq %r15, -256(%rbp)
	# LowerAlloca(6852:3): size = 32, type = %"class.std::__cxx11::basic_string"*, var = ^9
	# Fixing source-to-dest leaq -64(%rbp), -248(%rbp)
	leaq -64(%rbp), %r15
	movq %r15, -248(%rbp)
	# LowerAlloca(6853:3): size = 8, type = %"class.std::allocator.7"**, var = ^10
	# Fixing source-to-dest leaq -72(%rbp), -312(%rbp)
	leaq -72(%rbp), %r15
	movq %r15, -312(%rbp)
	# LowerAlloca(6854:3): size = 8, type = %struct.LsItem**, var = ^11
	# Fixing source-to-dest leaq -80(%rbp), -304(%rbp)
	leaq -80(%rbp), %r15
	movq %r15, -304(%rbp)
	# LowerAlloca(6855:3): size = 8, type = %"class.std::__cxx11::basic_string"**, var = ^12
	# Fixing source-to-dest leaq -88(%rbp), -296(%rbp)
	leaq -88(%rbp), %r15
	movq %r15, -296(%rbp)
	# LowerAlloca(6856:3): size = 8, type = i8**, var = ^13
	# Fixing source-to-dest leaq -96(%rbp), -288(%rbp)
	leaq -96(%rbp), %r15
	movq %r15, -288(%rbp)
	# LowerAlloca(6857:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^14
	# Fixing source-to-dest leaq -104(%rbp), -240(%rbp)
	leaq -104(%rbp), %r15
	movq %r15, -240(%rbp)
	# LowerAlloca(6858:3): size = 8, type = %"class.std::vector.5"**, var = ^15
	leaq -112(%rbp), %r8
	# LowerAlloca(6859:3): size = 8, type = %"class.std::__cxx11::basic_string"**, var = ^16
	leaq -120(%rbp), %r12
	# LowerAlloca(6860:3): size = 8, type = i8**, var = ^17
	leaq -128(%rbp), %r13
	# LowerAlloca(6861:3): size = 8, type = i64*, var = ^18
	# Fixing source-to-dest leaq -136(%rbp), -192(%rbp)
	leaq -136(%rbp), %r15
	movq %r15, -192(%rbp)
	# LowerAlloca(6862:3): size = 8, type = %struct.LsItem**, var = ^19
	# Fixing source-to-dest leaq -144(%rbp), -224(%rbp)
	leaq -144(%rbp), %r15
	movq %r15, -224(%rbp)
	# LowerAlloca(6863:3): size = 8, type = %struct.LsItem**, var = ^20
	# Fixing source-to-dest leaq -152(%rbp), -232(%rbp)
	leaq -152(%rbp), %r15
	movq %r15, -232(%rbp)
	# LowerAlloca(6864:3): size = 8, type = i64*, var = ^21
	leaq -160(%rbp), %rbx
	# LowerAlloca(6865:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^22
	leaq -168(%rbp), %r14
	# LowerAlloca(6866:3): size = 8, type = %struct.LsItem**, var = ^23
	# Fixing source-to-dest leaq -176(%rbp), -208(%rbp)
	leaq -176(%rbp), %r15
	movq %r15, -208(%rbp)
	# LowerAlloca(6867:3): size = 8, type = %struct.LsItem**, var = ^24
	# Fixing source-to-dest leaq -184(%rbp), -216(%rbp)
	leaq -184(%rbp), %r15
	movq %r15, -216(%rbp)
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(6868:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^14 -> ^25, indices=0,0
	movq -240(%rbp), %rax
	# LowerGetelementptr(6868:3): type of ^25 is %struct.LsItem**
	# LowerStore(6869:3).9: mov %struct.LsItem* %rsi, (^25)
	movq %rsi, (%rax)
	# LowerStore(6870:3).9: mov %"class.std::vector.5"* %rdi, (^15)
	movq %rdi, (%r8)
	# LowerStore(6871:3).9: mov %"class.std::__cxx11::basic_string"* %rdx, (^16)
	movq %rdx, (%r12)
	# LowerStore(6872:3).9: mov i8* %rcx, (^17)
	movq %rcx, (%r13)
	# LowerLoad(6873:3).2: (^15) into %"class.std::vector.5"* ^26
	# Fixing source-to-dest movq (%r8), -200(%rbp)
	movq (%r8), %r15
	movq %r15, -200(%rbp)
	# SetupCalls(6874:3): move argument %"class.std::vector.5"* nonnull dereferenceable(24) align 8 ^26
	# Fixed movzx with identical source and destination widths
	movq -200(%rbp), %rdi
	# SetupCalls(6874:3): move argument i64 1
	movq $1, %rsi
	# SetupCalls(6874:3): move argument i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.27, i64 0, i64 0)
	leaq .str.27(%rip), %rdx
	callq _ZNKSt6vectorI6LsItemSaIS0_EE12_M_check_lenEmPKc
	# SetupCalls(6874:3): move i64 result from %rax
	movq %rax, %r15
	# LowerStore(6875:3).9: mov i64 ^27, (^18)
	movq -192(%rbp), %rax
	movq %r15, (%rax)
	# LowerBasicConversion(6876:3): %"class.std::vector.5"* ^26 -> %"struct.std::_Vector_base.6"* ^28
	movq -200(%rbp), %rax
	# tt = Pointer, type = %"struct.std::_Vector_base.6"
	# LowerGetelementptr(6877:3): struct-type: %"struct.std::_Vector_base.6"* ^28 -> ^29, indices=0,0
	movq %rax, %rcx
	# LowerGetelementptr(6877:3): type of ^29 is %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl"*
	# LowerBasicConversion(6878:3): %"struct.std::_Vector_base.6"* ^29 -> %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"* ^30
	movq %rcx, %rax
	# tt = Pointer, type = %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"
	# LowerGetelementptr(6879:3): struct-type: %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"* ^30 -> ^31, indices=0,0
	movq %rax, %rcx
	# LowerGetelementptr(6879:3): type of ^31 is %struct.LsItem**
	# LowerLoad(6880:3).2: (^31) into %struct.LsItem* ^32
	movq (%rcx), %rax
	# LowerStore(6881:3).9: mov %struct.LsItem* ^32, (^19)
	movq -224(%rbp), %rcx
	movq %rax, (%rcx)
	# LowerBasicConversion(6882:3): %"class.std::vector.5"* ^26 -> %"struct.std::_Vector_base.6"* ^33
	movq -200(%rbp), %rax
	# tt = Pointer, type = %"struct.std::_Vector_base.6"
	# LowerGetelementptr(6883:3): struct-type: %"struct.std::_Vector_base.6"* ^33 -> ^34, indices=0,0
	movq %rax, %rcx
	# LowerGetelementptr(6883:3): type of ^34 is %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl"*
	# LowerBasicConversion(6884:3): %"struct.std::_Vector_base.6"* ^34 -> %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"* ^35
	movq %rcx, %rax
	# tt = Pointer, type = %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"
	# LowerGetelementptr(6885:3): struct-type: %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"* ^35 -> ^36, indices=0,1
	movq %rax, %rcx
	addq $8, %rcx
	# LowerGetelementptr(6885:3): type of ^36 is %struct.LsItem**
	# LowerLoad(6886:3).2: (^36) into %struct.LsItem* ^37
	movq (%rcx), %rax
	# LowerStore(6887:3).9: mov %struct.LsItem* ^37, (^20)
	movq -232(%rbp), %rcx
	movq %rax, (%rcx)
	# SetupCalls(6888:3): move argument %"class.std::vector.5"* nonnull dereferenceable(24) align 8 ^26
	# Fixed movzx with identical source and destination widths
	movq -200(%rbp), %rdi
	callq _ZNSt6vectorI6LsItemSaIS0_EE5beginEv
	# SetupCalls(6888:3): move %struct.LsItem* result from %rax
	movq %rax, %r15
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(6889:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^22 -> ^39, indices=0,0
	movq %r14, %rax
	# LowerGetelementptr(6889:3): type of ^39 is %struct.LsItem**
	# LowerStore(6890:3).9: mov %struct.LsItem* ^38, (^39)
	movq %r15, (%rax)
	# SetupCalls(6891:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^14
	# Fixed movzx with identical source and destination widths
	movq -240(%rbp), %rdi
	# SetupCalls(6891:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^22
	# Fixed movzx with identical source and destination widths
	movq %r14, %rsi
	callq _ZN9__gnu_cxxmiIP6LsItemSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_
	# SetupCalls(6891:3): move i64 result from %rax
	movq %rax, %r14
	# LowerStore(6892:3).9: mov i64 ^40, (^21)
	movq %r14, (%rbx)
	# LowerBasicConversion(6893:3): %"class.std::vector.5"* ^26 -> %"struct.std::_Vector_base.6"* ^41
	movq -200(%rbp), %rax
	# LowerLoad(6894:3).2: (^18) into i64 ^42
	movq -192(%rbp), %rdx
	movq (%rdx), %rcx
	# Clobber %rcx
	movq %rcx, -320(%rbp)
	# Clobber %rax
	movq %rax, -328(%rbp)
	# SetupCalls(6895:3): move argument %"struct.std::_Vector_base.6"* nonnull dereferenceable(24) align 8 ^41
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(6895:3): move argument i64 ^42
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	callq _ZNSt12_Vector_baseI6LsItemSaIS0_EE11_M_allocateEm
	# SetupCalls(6895:3): move %struct.LsItem* result from %rax
	movq %rax, %r14
	# Unclobber %rax
	movq -328(%rbp), %rax
	# Unclobber %rcx
	movq -320(%rbp), %rcx
	# LowerStore(6896:3).9: mov %struct.LsItem* ^43, (^23)
	movq -208(%rbp), %rax
	movq %r14, (%rax)
	# LowerLoad(6897:3).2: (^23) into %struct.LsItem* ^44
	movq -208(%rbp), %rcx
	movq (%rcx), %rax
	# LowerStore(6898:3).9: mov %struct.LsItem* ^44, (^24)
	movq -216(%rbp), %rcx
	movq %rax, (%rcx)
	# LowerBasicConversion(6899:3): %"class.std::vector.5"* ^26 -> %"struct.std::_Vector_base.6"* ^45
	movq -200(%rbp), %rcx
	# tt = Pointer, type = %"struct.std::_Vector_base.6"
	# LowerGetelementptr(6900:3): struct-type: %"struct.std::_Vector_base.6"* ^45 -> ^46, indices=0,0
	movq %rcx, %rax
	# LowerGetelementptr(6900:3): type of ^46 is %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl"*
	# LowerBasicConversion(6901:3): %"struct.std::_Vector_base.6"* ^46 -> %"class.std::allocator.7"* ^47
	movq %rax, %rcx
	# LowerLoad(6902:3).2: (^23) into %struct.LsItem* ^48
	movq -208(%rbp), %rax
	movq (%rax), %rsi
	# LowerLoad(6903:3).2: (^21) into i64 ^49
	movq (%rbx), %rax
	# tt = Pointer, type = %struct.LsItem
	# LowerGetelementptr(6904:3): pointer-type -> ^50
	movq %rax, %rbx
	movq %rbx, %rax
	movq $40, %rbx
	imulq %rbx
	movq %rax, %rbx
	addq %rsi, %rbx
	# LowerLoad(6905:3).2: (^16) into %"class.std::__cxx11::basic_string"* ^51
	movq (%r12), %rax
	# LowerLoad(6906:3).2: (^17) into i8* ^52
	movq (%r13), %rdx
	# LowerStore(6907:3).9: mov %"class.std::allocator.7"* ^47, (^10)
	movq -312(%rbp), %rsi
	movq %rcx, (%rsi)
	# LowerStore(6908:3).9: mov %struct.LsItem* ^50, (^11)
	movq -304(%rbp), %rcx
	movq %rbx, (%rcx)
	# LowerStore(6909:3).9: mov %"class.std::__cxx11::basic_string"* ^51, (^12)
	movq -296(%rbp), %rbx
	movq %rax, (%rbx)
	# LowerStore(6910:3).9: mov i8* ^52, (^13)
	movq -288(%rbp), %rax
	movq %rdx, (%rax)
	# LowerLoad(6911:3).2: (^10) into %"class.std::allocator.7"* ^53
	movq -312(%rbp), %rbx
	movq (%rbx), %rax
	# LowerBasicConversion(6912:3): %"class.std::allocator.7"* ^53 -> %"class.std::__new_allocator.8"* ^54
	movq %rax, %rcx
	# LowerLoad(6913:3).2: (^11) into %struct.LsItem* ^55
	movq -304(%rbp), %rax
	movq (%rax), %rbx
	# LowerLoad(6914:3).2: (^12) into %"class.std::__cxx11::basic_string"* ^56
	movq -296(%rbp), %rdx
	movq (%rdx), %rax
	# LowerLoad(6915:3).2: (^13) into i8* ^57
	movq -288(%rbp), %rsi
	movq (%rsi), %rdx
	# LowerStore(6916:3).9: mov %"class.std::__new_allocator.8"* ^54, (^5)
	movq -280(%rbp), %rsi
	movq %rcx, (%rsi)
	# LowerStore(6917:3).9: mov %struct.LsItem* ^55, (^6)
	movq -272(%rbp), %rcx
	movq %rbx, (%rcx)
	# LowerStore(6918:3).9: mov %"class.std::__cxx11::basic_string"* ^56, (^7)
	movq -264(%rbp), %rbx
	movq %rax, (%rbx)
	# LowerStore(6919:3).9: mov i8* ^57, (^8)
	movq -256(%rbp), %rax
	movq %rdx, (%rax)
	# LowerLoad(6920:3).2: (^5) into %"class.std::__new_allocator.8"* ^58
	movq -280(%rbp), %rbx
	movq (%rbx), %rax
	# LowerLoad(6921:3).2: (^6) into %struct.LsItem* ^59
	movq -272(%rbp), %rax
	movq (%rax), %r12
	# LowerBasicConversion(6922:3): %struct.LsItem* ^59 -> i8* ^60
	movq %r12, %rax
	# LowerLoad(6923:3).2: (^7) into %"class.std::__cxx11::basic_string"* ^61
	movq -264(%rbp), %rbx
	movq (%rbx), %rax
	# Clobber %rax
	movq %rax, -328(%rbp)
	# SetupCalls(6924:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq -248(%rbp), %rdi
	# SetupCalls(6924:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^61
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_@PLT
	# Unclobber %rax
	movq -328(%rbp), %rax
	# LowerLoad(6925:3).2: (^8) into i8* ^62
	movq -256(%rbp), %rbx
	movq (%rbx), %rax
	# LowerLoad(6926:3).2: (^62) into i8 ^63
	movb (%rax), %bl
	# LowerTrunc(6927:3): 8 to 1, move
	movb %bl, %al
	# LowerTrunc(6927:3): 8 to 1, apply mask
	andq $1, %rax
	# Clobber %rax
	movq %rax, -328(%rbp)
	# SetupCalls(6928:3): move argument %struct.LsItem* nonnull dereferenceable(33) align 8 ^59
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(6928:3): move argument %"class.std::__cxx11::basic_string"* ^9
	# Fixed movzx with identical source and destination widths
	movq -248(%rbp), %rsi
	# SetupCalls(6928:3): move argument i1 zeroext ^64
	movzbq %al, %rdx
	andq $1, %rdx
	callq _ZN6LsItemC2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
	# Unclobber %rax
	movq -328(%rbp), %rax
	# SetupCalls(6929:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq -248(%rbp), %rdi
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
	# LowerStore(6930:3).3: mov $imm, (^24)
	movq -216(%rbp), %rax
	movq $0, (%rax)
	# LowerLoad(6931:3).2: (^19) into %struct.LsItem* ^65
	movq -224(%rbp), %rax
	movq (%rax), %rbx
	# SetupCalls(6932:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^14
	# Fixed movzx with identical source and destination widths
	movq -240(%rbp), %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEE4baseEv
	# SetupCalls(6932:3): move %struct.LsItem** result from %rax
	movq %rax, %r13
	# LowerLoad(6933:3).2: (^66) into %struct.LsItem* ^67
	movq (%r13), %r12
	# LowerLoad(6934:3).2: (^23) into %struct.LsItem* ^68
	movq -208(%rbp), %rax
	movq (%rax), %r13
	# LowerBasicConversion(6935:3): %"class.std::vector.5"* ^26 -> %"struct.std::_Vector_base.6"* ^69
	movq -200(%rbp), %rax
	# Clobber %rax
	movq %rax, -328(%rbp)
	# SetupCalls(6936:3): move argument %"struct.std::_Vector_base.6"* nonnull dereferenceable(24) align 8 ^69
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt12_Vector_baseI6LsItemSaIS0_EE19_M_get_Tp_allocatorEv
	# SetupCalls(6936:3): move %"class.std::allocator.7"* result from %rax
	movq %rax, %r14
	# Unclobber %rax
	movq -328(%rbp), %rax
	# SetupCalls(6937:3): move argument %struct.LsItem* ^65
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(6937:3): move argument %struct.LsItem* ^67
	# Fixed movzx with identical source and destination widths
	movq %r12, %rsi
	# SetupCalls(6937:3): move argument %struct.LsItem* ^68
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdx
	# SetupCalls(6937:3): move argument %"class.std::allocator.7"* nonnull dereferenceable(1) align 1 ^70
	# Fixed movzx with identical source and destination widths
	movq %r14, %rcx
	callq _ZNSt6vectorI6LsItemSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_
	# SetupCalls(6937:3): move %struct.LsItem* result from %rax
	movq %rax, %rbx
	# LowerStore(6938:3).9: mov %struct.LsItem* ^71, (^24)
	movq -216(%rbp), %rax
	movq %rbx, (%rax)
	# LowerLoad(6939:3).2: (^24) into %struct.LsItem* ^72
	movq -216(%rbp), %rbx
	movq (%rbx), %rax
	# tt = Pointer, type = %struct.LsItem
	# LowerGetelementptr(6940:3): struct-type: %struct.LsItem* ^72 -> ^73, indices=1
	movq %rax, %rbx
	addq $40, %rbx
	# LowerGetelementptr(6940:3): type of ^73 is %struct.LsItem*
	# LowerStore(6941:3).9: mov %struct.LsItem* ^73, (^24)
	movq -216(%rbp), %rax
	movq %rbx, (%rax)
	# SetupCalls(6942:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^14
	# Fixed movzx with identical source and destination widths
	movq -240(%rbp), %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEE4baseEv
	# SetupCalls(6942:3): move %struct.LsItem** result from %rax
	movq %rax, %rbx
	# LowerLoad(6943:3).2: (^74) into %struct.LsItem* ^75
	movq (%rbx), %r12
	# LowerLoad(6944:3).2: (^20) into %struct.LsItem* ^76
	movq -232(%rbp), %rax
	movq (%rax), %rbx
	# LowerLoad(6945:3).2: (^24) into %struct.LsItem* ^77
	movq -216(%rbp), %rax
	movq (%rax), %r13
	# LowerBasicConversion(6946:3): %"class.std::vector.5"* ^26 -> %"struct.std::_Vector_base.6"* ^78
	movq -200(%rbp), %rax
	# Clobber %rax
	movq %rax, -328(%rbp)
	# SetupCalls(6947:3): move argument %"struct.std::_Vector_base.6"* nonnull dereferenceable(24) align 8 ^78
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt12_Vector_baseI6LsItemSaIS0_EE19_M_get_Tp_allocatorEv
	# SetupCalls(6947:3): move %"class.std::allocator.7"* result from %rax
	movq %rax, %r14
	# Unclobber %rax
	movq -328(%rbp), %rax
	# SetupCalls(6948:3): move argument %struct.LsItem* ^75
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(6948:3): move argument %struct.LsItem* ^76
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(6948:3): move argument %struct.LsItem* ^77
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdx
	# SetupCalls(6948:3): move argument %"class.std::allocator.7"* nonnull dereferenceable(1) align 1 ^79
	# Fixed movzx with identical source and destination widths
	movq %r14, %rcx
	callq _ZNSt6vectorI6LsItemSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_
	# SetupCalls(6948:3): move %struct.LsItem* result from %rax
	movq %rax, %rbx
	# LowerStore(6949:3).9: mov %struct.LsItem* ^80, (^24)
	movq -216(%rbp), %rax
	movq %rbx, (%rax)
	# LowerBasicConversion(6950:3): %"class.std::vector.5"* ^26 -> %"struct.std::_Vector_base.6"* ^81
	movq -200(%rbp), %rbx
	# LowerLoad(6951:3).2: (^19) into %struct.LsItem* ^82
	movq -224(%rbp), %rax
	movq (%rax), %rcx
	# LowerBasicConversion(6952:3): %"class.std::vector.5"* ^26 -> %"struct.std::_Vector_base.6"* ^83
	movq -200(%rbp), %rax
	# tt = Pointer, type = %"struct.std::_Vector_base.6"
	# LowerGetelementptr(6953:3): struct-type: %"struct.std::_Vector_base.6"* ^83 -> ^84, indices=0,0
	movq %rax, %rdx
	# LowerGetelementptr(6953:3): type of ^84 is %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl"*
	# LowerBasicConversion(6954:3): %"struct.std::_Vector_base.6"* ^84 -> %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"* ^85
	movq %rdx, %rax
	# tt = Pointer, type = %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"
	# LowerGetelementptr(6955:3): struct-type: %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"* ^85 -> ^86, indices=0,2
	movq %rax, %rdx
	addq $16, %rdx
	# LowerGetelementptr(6955:3): type of ^86 is %struct.LsItem**
	# LowerLoad(6956:3).2: (^86) into %struct.LsItem* ^87
	movq (%rdx), %rax
	# LowerLoad(6957:3).2: (^19) into %struct.LsItem* ^88
	movq -224(%rbp), %rsi
	movq (%rsi), %rdx
	# LowerBasicConversion(6958:3): %struct.LsItem* ^87 -> i64 ^89
	movq %rax, %rsi
	# LowerBasicConversion(6959:3): %struct.LsItem* ^88 -> i64 ^90
	movq %rdx, %rax
	# LowerMath(6960:3): ^89, ^90 into i64 ^91
	movq %rsi, %rdx
	subq %rax, %rdx
	# LowerSdiv(6961:3): ^91, 40 into i64 ^92
	movq %rdx, %r8
	movq $0, %rdx
	movq %r8, %rax
	movq $40, %rsi
	idivq %rsi
	movq %rax, %r8
	# Clobber %rcx
	movq %rcx, -320(%rbp)
	# Clobber %r8
	movq %r8, -336(%rbp)
	# SetupCalls(6962:3): move argument %"struct.std::_Vector_base.6"* nonnull dereferenceable(24) align 8 ^81
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(6962:3): move argument %struct.LsItem* ^82
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(6962:3): move argument i64 ^92
	# Fixed movzx with identical source and destination widths
	movq %r8, %rdx
	callq _ZNSt12_Vector_baseI6LsItemSaIS0_EE13_M_deallocateEPS0_m
	# Unclobber %r8
	movq -336(%rbp), %r8
	# Unclobber %rcx
	movq -320(%rbp), %rcx
	# LowerLoad(6963:3).2: (^23) into %struct.LsItem* ^93
	movq -208(%rbp), %rbx
	movq (%rbx), %rax
	# LowerBasicConversion(6964:3): %"class.std::vector.5"* ^26 -> %"struct.std::_Vector_base.6"* ^94
	movq -200(%rbp), %rbx
	# tt = Pointer, type = %"struct.std::_Vector_base.6"
	# LowerGetelementptr(6965:3): struct-type: %"struct.std::_Vector_base.6"* ^94 -> ^95, indices=0,0
	movq %rbx, %rcx
	# LowerGetelementptr(6965:3): type of ^95 is %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl"*
	# LowerBasicConversion(6966:3): %"struct.std::_Vector_base.6"* ^95 -> %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"* ^96
	movq %rcx, %rbx
	# tt = Pointer, type = %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"
	# LowerGetelementptr(6967:3): struct-type: %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"* ^96 -> ^97, indices=0,0
	movq %rbx, %rcx
	# LowerGetelementptr(6967:3): type of ^97 is %struct.LsItem**
	# LowerStore(6968:3).9: mov %struct.LsItem* ^93, (^97)
	movq %rax, (%rcx)
	# LowerLoad(6969:3).2: (^24) into %struct.LsItem* ^98
	movq -216(%rbp), %rbx
	movq (%rbx), %rax
	# LowerBasicConversion(6970:3): %"class.std::vector.5"* ^26 -> %"struct.std::_Vector_base.6"* ^99
	movq -200(%rbp), %rbx
	# tt = Pointer, type = %"struct.std::_Vector_base.6"
	# LowerGetelementptr(6971:3): struct-type: %"struct.std::_Vector_base.6"* ^99 -> ^100, indices=0,0
	movq %rbx, %rcx
	# LowerGetelementptr(6971:3): type of ^100 is %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl"*
	# LowerBasicConversion(6972:3): %"struct.std::_Vector_base.6"* ^100 -> %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"* ^101
	movq %rcx, %rbx
	# tt = Pointer, type = %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"
	# LowerGetelementptr(6973:3): struct-type: %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"* ^101 -> ^102, indices=0,1
	movq %rbx, %rcx
	addq $8, %rcx
	# LowerGetelementptr(6973:3): type of ^102 is %struct.LsItem**
	# LowerStore(6974:3).9: mov %struct.LsItem* ^98, (^102)
	movq %rax, (%rcx)
	# LowerLoad(6975:3).2: (^23) into %struct.LsItem* ^103
	movq -208(%rbp), %rax
	movq (%rax), %rbx
	# LowerLoad(6976:3).2: (^18) into i64 ^104
	movq -192(%rbp), %rcx
	movq (%rcx), %rax
	# tt = Pointer, type = %struct.LsItem
	# LowerGetelementptr(6977:3): pointer-type -> ^105
	movq %rax, %rcx
	movq %rcx, %rax
	movq $40, %rcx
	imulq %rcx
	movq %rax, %rcx
	addq %rbx, %rcx
	# LowerBasicConversion(6978:3): %"class.std::vector.5"* ^26 -> %"struct.std::_Vector_base.6"* ^106
	movq -200(%rbp), %rax
	# tt = Pointer, type = %"struct.std::_Vector_base.6"
	# LowerGetelementptr(6979:3): struct-type: %"struct.std::_Vector_base.6"* ^106 -> ^107, indices=0,0
	movq %rax, %rbx
	# LowerGetelementptr(6979:3): type of ^107 is %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl"*
	# LowerBasicConversion(6980:3): %"struct.std::_Vector_base.6"* ^107 -> %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"* ^108
	movq %rbx, %rax
	# tt = Pointer, type = %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"
	# LowerGetelementptr(6981:3): struct-type: %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"* ^108 -> ^109, indices=0,2
	movq %rax, %rbx
	addq $16, %rbx
	# LowerGetelementptr(6981:3): type of ^109 is %struct.LsItem**
	# LowerStore(6982:3).9: mov %struct.LsItem* ^105, (^109)
	movq %rcx, (%rbx)
	movq -344(%rbp), %r15
	movq -472(%rbp), %r14
	movq -432(%rbp), %r13
	movq -424(%rbp), %r12
	movq -464(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EED2Ev
.p2align 4, 0x90
_ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EED2Ev:
	.___ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EED2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(40 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	movq %r12, -24(%rbp)
	# LowerAlloca(5366:3): size = 8, type = %"struct.std::_Vector_base"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(5367:3).9: mov %"struct.std::_Vector_base"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(5368:3).2: (^2) into %"struct.std::_Vector_base"* ^3
	movq (%rax), %r12
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(5369:3): struct-type: %"struct.std::_Vector_base"* ^3 -> ^4, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(5369:3): type of ^4 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# LowerBasicConversion(5370:3): %"struct.std::_Vector_base"* ^4 -> %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^5
	movq %rax, %rbx
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(5371:3): struct-type: %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^5 -> ^6, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(5371:3): type of ^6 is %"class.std::basic_string_view"**
	# LowerLoad(5372:3).2: (^6) into %"class.std::basic_string_view"* ^7
	movq (%rax), %rbx
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(5373:3): struct-type: %"struct.std::_Vector_base"* ^3 -> ^8, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(5373:3): type of ^8 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# LowerBasicConversion(5374:3): %"struct.std::_Vector_base"* ^8 -> %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^9
	movq %rax, %rcx
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(5375:3): struct-type: %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^9 -> ^10, indices=0,2
	movq %rcx, %rax
	addq $16, %rax
	# LowerGetelementptr(5375:3): type of ^10 is %"class.std::basic_string_view"**
	# LowerLoad(5376:3).2: (^10) into %"class.std::basic_string_view"* ^11
	movq (%rax), %rdx
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(5377:3): struct-type: %"struct.std::_Vector_base"* ^3 -> ^12, indices=0,0
	movq %r12, %rcx
	# LowerGetelementptr(5377:3): type of ^12 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# LowerBasicConversion(5378:3): %"struct.std::_Vector_base"* ^12 -> %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^13
	movq %rcx, %rax
	# tt = Pointer, type = %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"
	# LowerGetelementptr(5379:3): struct-type: %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl_data"* ^13 -> ^14, indices=0,0
	movq %rax, %rcx
	# LowerGetelementptr(5379:3): type of ^14 is %"class.std::basic_string_view"**
	# LowerLoad(5380:3).2: (^14) into %"class.std::basic_string_view"* ^15
	movq (%rcx), %rax
	# LowerBasicConversion(5381:3): %"class.std::basic_string_view"* ^11 -> i64 ^16
	movq %rdx, %rcx
	# LowerBasicConversion(5382:3): %"class.std::basic_string_view"* ^15 -> i64 ^17
	movq %rax, %rdx
	# LowerMath(5383:3): ^16, ^17 into i64 ^18
	movq %rcx, %rsi
	subq %rdx, %rsi
	# LowerSdiv(5384:3): ^18, 16 into i64 ^19
	movq %rsi, %rax
	sarq $4, %rax
	# Clobber %rax
	movq %rax, -16(%rbp)
	# SetupCalls(5385:3): move argument %"struct.std::_Vector_base"* nonnull dereferenceable(24) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(5385:3): move argument %"class.std::basic_string_view"* ^7
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(5385:3): move argument i64 ^19
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdx
	callq _ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE13_M_deallocateEPS3_m
	# Unclobber %rax
	movq -16(%rbp), %rax
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(5386:3): struct-type: %"struct.std::_Vector_base"* ^3 -> ^20, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(5386:3): type of ^20 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# Clobber %rax
	movq %rax, -16(%rbp)
	# SetupCalls(5387:3): move argument %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"* nonnull dereferenceable(24) align 8 ^20
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE12_Vector_implD2Ev
	# Unclobber %rax
	movq -16(%rbp), %rax
	movq -24(%rbp), %r12
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEmiEl
.p2align 4, 0x90
_ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEmiEl:
	.___ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEmiEl__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(80 + 0, 16)
	subq $80, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -56(%rbp)
	movq %r12, -48(%rbp)
	# LowerAlloca(7407:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"*, var = ^3
	leaq -8(%rbp), %r12
	# LowerAlloca(7408:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"**, var = ^4
	leaq -16(%rbp), %rax
	# LowerAlloca(7409:3): size = 8, type = i64*, var = ^5
	leaq -24(%rbp), %rdx
	# LowerAlloca(7410:3): size = 8, type = %struct.LsItem**, var = ^6
	leaq -32(%rbp), %rcx
	# LowerStore(7411:3).9: mov %"class.__gnu_cxx::__normal_iterator"* %rdi, (^4)
	movq %rdi, (%rax)
	# LowerStore(7412:3).9: mov i64 %rsi, (^5)
	movq %rsi, (%rdx)
	# LowerLoad(7413:3).2: (^4) into %"class.__gnu_cxx::__normal_iterator"* ^7
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7414:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^7 -> ^8, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(7414:3): type of ^8 is %struct.LsItem**
	# LowerLoad(7415:3).2: (^8) into %struct.LsItem* ^9
	movq (%rax), %rsi
	# LowerLoad(7416:3).2: (^5) into i64 ^10
	movq (%rdx), %rax
	# LowerMath(7417:3): 0, ^10 into i64 ^11
	movq $0, %rdx
	subq %rax, %rdx
	# tt = Pointer, type = %struct.LsItem
	# LowerGetelementptr(7418:3): pointer-type -> ^12
	movq %rdx, %rbx
	movq %rbx, %rax
	movq $40, %rbx
	imulq %rbx
	movq %rax, %rbx
	addq %rsi, %rbx
	# LowerStore(7419:3).9: mov %struct.LsItem* ^12, (^6)
	movq %rbx, (%rcx)
	# Clobber %rcx
	movq %rcx, -40(%rbp)
	# SetupCalls(7420:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(7420:3): move argument %struct.LsItem** nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	callq _ZN9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEEC2ERKS2_
	# Unclobber %rcx
	movq -40(%rbp), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator"
	# LowerGetelementptr(7421:3): struct-type: %"class.__gnu_cxx::__normal_iterator"* ^3 -> ^13, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(7421:3): type of ^13 is %struct.LsItem**
	# LowerLoad(7422:3).2: (^13) into %struct.LsItem* ^14
	movq (%rax), %rbx
	movq %rbx, %rax
	movq -48(%rbp), %r12
	movq -56(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt8__detaillsIcSt11char_traitsIcERKNSt7__cxx1112basic_stringIcS2_SaIcEEEEERSt13basic_ostreamIT_T0_ESD_RKNS_14_Quoted_stringIT1_SA_EE
.p2align 4, 0x90
_ZNSt8__detaillsIcSt11char_traitsIcERKNSt7__cxx1112basic_stringIcS2_SaIcEEEEERSt13basic_ostreamIT_T0_ESD_RKNS_14_Quoted_stringIT1_SA_EE:
	.___ZNSt8__detaillsIcSt11char_traitsIcERKNSt7__cxx1112basic_stringIcS2_SaIcEEEEERSt13basic_ostreamIT_T0_ESD_RKNS_14_Quoted_stringIT1_SA_EE__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(632 + 0, 16)
	subq $640, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -560(%rbp)
	movq %r12, -552(%rbp)
	movq %r13, -544(%rbp)
	movq %r14, -584(%rbp)
	movq %r15, -520(%rbp)
	# LowerAlloca(6487:3): size = 8, type = %"class.std::basic_ostream"**, var = ^3
	# Fixing source-to-dest leaq -8(%rbp), -480(%rbp)
	leaq -8(%rbp), %r15
	movq %r15, -480(%rbp)
	# LowerAlloca(6488:3): size = 8, type = %"struct.std::__detail::_Quoted_string"**, var = ^4
	# Fixing source-to-dest leaq -16(%rbp), -488(%rbp)
	leaq -16(%rbp), %r15
	movq %r15, -488(%rbp)
	# LowerAlloca(6489:3): size = 376, type = %"class.std::__cxx11::basic_ostringstream"*, var = ^5
	# Fixing source-to-dest leaq -392(%rbp), -464(%rbp)
	leaq -392(%rbp), %r15
	movq %r15, -464(%rbp)
	# LowerAlloca(6490:3): size = 8, type = %"class.std::__cxx11::basic_string"**, var = ^6
	leaq -400(%rbp), %r13
	# LowerAlloca(6491:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator.20"*, var = ^7
	leaq -408(%rbp), %r12
	# LowerAlloca(6492:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator.20"*, var = ^8
	leaq -416(%rbp), %rbx
	# LowerAlloca(6493:3): size = 1, type = i8*, var = ^9
	leaq -417(%rbp), %r15
	# LowerAlloca(6494:3): size = 32, type = %"class.std::__cxx11::basic_string"*, var = ^10
	# Fixing source-to-dest leaq -456(%rbp), -472(%rbp)
	pushq %r15
	leaq -456(%rbp), %r15
	movq %r15, -472(%rbp)
	popq %r15
	# LowerStore(6495:3).9: mov %"class.std::basic_ostream"* %rdi, (^3)
	movq -480(%rbp), %rax
	movq %rdi, (%rax)
	# LowerStore(6496:3).9: mov %"struct.std::__detail::_Quoted_string"* %rsi, (^4)
	movq -488(%rbp), %rax
	movq %rsi, (%rax)
	# SetupCalls(6497:3): move argument %"class.std::__cxx11::basic_ostringstream"* nonnull dereferenceable(112) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq -464(%rbp), %rdi
	callq _ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEC1Ev@PLT
	# LowerBasicConversion(6498:3): %"class.std::__cxx11::basic_ostringstream"* ^5 -> %"class.std::basic_ostream"* ^11
	movq -464(%rbp), %rdx
	# LowerLoad(6499:3).2: (^4) into %"struct.std::__detail::_Quoted_string"* ^12
	movq -488(%rbp), %rax
	movq (%rax), %rcx
	# tt = Pointer, type = %"struct.std::__detail::_Quoted_string"
	# LowerGetelementptr(6500:3): struct-type: %"struct.std::__detail::_Quoted_string"* ^12 -> ^13, indices=0,1
	movq %rcx, %rax
	addq $8, %rax
	# LowerGetelementptr(6500:3): type of ^13 is i8*
	# LowerLoad(6501:3).2: (^13) into i8 ^14
	movb (%rax), %cl
	# Clobber %rdx
	movq %rdx, -496(%rbp)
	# Clobber %rcx
	movq %rcx, -504(%rbp)
	# SetupCalls(6502:3): move argument %"class.std::basic_ostream"* nonnull dereferenceable(8) align 8 ^11
	# Fixed movzx with identical source and destination widths
	movq %rdx, %rdi
	# SetupCalls(6502:3): move argument i8 signext ^14
	movzbq %cl, %rsi
	movsbq %sil, %rsi
	callq _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@PLT
	# SetupCalls(6502:3): move %"class.std::basic_ostream"* result from %rax
	movq %rax, %rax
	# Unclobber %rcx
	movq -504(%rbp), %rcx
	# Unclobber %rdx
	movq -496(%rbp), %rdx
	# LowerLoad(6503:3).2: (^4) into %"struct.std::__detail::_Quoted_string"* ^16
	movq -488(%rbp), %rcx
	movq (%rcx), %rax
	# tt = Pointer, type = %"struct.std::__detail::_Quoted_string"
	# LowerGetelementptr(6504:3): struct-type: %"struct.std::__detail::_Quoted_string"* ^16 -> ^17, indices=0,0
	movq %rax, %rcx
	# LowerGetelementptr(6504:3): type of ^17 is %"class.std::__cxx11::basic_string"**
	# LowerLoad(6505:3).2: (^17) into %"class.std::__cxx11::basic_string"* ^18
	movq (%rcx), %rax
	# LowerStore(6506:3).9: mov %"class.std::__cxx11::basic_string"* ^18, (^6)
	movq %rax, (%r13)
	# LowerLoad(6507:3).2: (^6) into %"class.std::__cxx11::basic_string"* ^19
	movq (%r13), %rax
	# Clobber %rax
	movq %rax, -512(%rbp)
	# SetupCalls(6508:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^19
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv@PLT
	# SetupCalls(6508:3): move i8* result from %rax
	movq %rax, %r14
	# Unclobber %rax
	movq -512(%rbp), %rax
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator.20"
	# LowerGetelementptr(6509:3): struct-type: %"class.__gnu_cxx::__normal_iterator.20"* ^7 -> ^21, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(6509:3): type of ^21 is i8**
	# LowerStore(6510:3).9: mov i8* ^20, (^21)
	movq %r14, (%rax)
	# LowerLoad(6511:3).2: (^6) into %"class.std::__cxx11::basic_string"* ^22
	movq (%r13), %rax
	# Clobber %rax
	movq %rax, -512(%rbp)
	# SetupCalls(6512:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^22
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE3endEv@PLT
	# SetupCalls(6512:3): move i8* result from %rax
	movq %rax, %r13
	# Unclobber %rax
	movq -512(%rbp), %rax
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator.20"
	# LowerGetelementptr(6513:3): struct-type: %"class.__gnu_cxx::__normal_iterator.20"* ^8 -> ^24, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(6513:3): type of ^24 is i8**
	# LowerStore(6514:3).9: mov i8* ^23, (^24)
	movq %r13, (%rax)
	.___ZNSt8__detaillsIcSt11char_traitsIcERKNSt7__cxx1112basic_stringIcS2_SaIcEEEEERSt13basic_ostreamIT_T0_ESD_RKNS_14_Quoted_stringIT1_SA_EE__M152:
	# SetupCalls(6518:3): move argument %"class.__gnu_cxx::__normal_iterator.20"* nonnull dereferenceable(8) align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(6518:3): move argument %"class.__gnu_cxx::__normal_iterator.20"* nonnull dereferenceable(8) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZN9__gnu_cxxneIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKNS_17__normal_iteratorIT_T0_EESE_
	# SetupCalls(6518:3): move i1 result from %rax
	movb %al, %r13b
	cmpb $0, %r13b
	jne .___ZNSt8__detaillsIcSt11char_traitsIcERKNSt7__cxx1112basic_stringIcS2_SaIcEEEEERSt13basic_ostreamIT_T0_ESD_RKNS_14_Quoted_stringIT1_SA_EE__M178
	jmp .___ZNSt8__detaillsIcSt11char_traitsIcERKNSt7__cxx1112basic_stringIcS2_SaIcEEEEERSt13basic_ostreamIT_T0_ESD_RKNS_14_Quoted_stringIT1_SA_EE__M334
	.___ZNSt8__detaillsIcSt11char_traitsIcERKNSt7__cxx1112basic_stringIcS2_SaIcEEEEERSt13basic_ostreamIT_T0_ESD_RKNS_14_Quoted_stringIT1_SA_EE__M178:
	# SetupCalls(6522:3): move argument %"class.__gnu_cxx::__normal_iterator.20"* nonnull dereferenceable(8) align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv
	# SetupCalls(6522:3): move i8* result from %rax
	movq %rax, %r13
	# LowerLoad(6523:3).2: (^28) into i8 ^29
	movb (%r13), %al
	# LowerStore(6524:3).9: mov i8 ^29, (^9)
	movb %al, (%r15)
	# LowerLoad(6525:3).2: (^9) into i8 ^30
	movb (%r15), %al
	movsbl %al, %ecx
	# LowerLoad(6527:3).2: (^4) into %"struct.std::__detail::_Quoted_string"* ^32
	movq -488(%rbp), %rdx
	movq (%rdx), %rax
	# tt = Pointer, type = %"struct.std::__detail::_Quoted_string"
	# LowerGetelementptr(6528:3): struct-type: %"struct.std::__detail::_Quoted_string"* ^32 -> ^33, indices=0,1
	movq %rax, %rdx
	addq $8, %rdx
	# LowerGetelementptr(6528:3): type of ^33 is i8*
	# LowerLoad(6529:3).2: (^33) into i8 ^34
	movb (%rdx), %al
	movsbl %al, %edx
	# LowerIcmp(6531:3): i32 ^31 vs. operand i32 ^35
	cmpl %edx, %ecx
	sete %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt8__detaillsIcSt11char_traitsIcERKNSt7__cxx1112basic_stringIcS2_SaIcEEEEERSt13basic_ostreamIT_T0_ESD_RKNS_14_Quoted_stringIT1_SA_EE__M241
	.___ZNSt8__detaillsIcSt11char_traitsIcERKNSt7__cxx1112basic_stringIcS2_SaIcEEEEERSt13basic_ostreamIT_T0_ESD_RKNS_14_Quoted_stringIT1_SA_EE__M223:
	# LowerLoad(6535:3).2: (^9) into i8 ^38
	movb (%r15), %al
	movsbl %al, %ecx
	# LowerLoad(6537:3).2: (^4) into %"struct.std::__detail::_Quoted_string"* ^40
	movq -488(%rbp), %rax
	movq (%rax), %rdx
	# tt = Pointer, type = %"struct.std::__detail::_Quoted_string"
	# LowerGetelementptr(6538:3): struct-type: %"struct.std::__detail::_Quoted_string"* ^40 -> ^41, indices=0,2
	movq %rdx, %rax
	addq $9, %rax
	# LowerGetelementptr(6538:3): type of ^41 is i8*
	# LowerLoad(6539:3).2: (^41) into i8 ^42
	movb (%rax), %dl
	movsbl %dl, %eax
	# LowerIcmp(6541:3): i32 ^39 vs. operand i32 ^43
	cmpl %eax, %ecx
	sete %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt8__detaillsIcSt11char_traitsIcERKNSt7__cxx1112basic_stringIcS2_SaIcEEEEERSt13basic_ostreamIT_T0_ESD_RKNS_14_Quoted_stringIT1_SA_EE__M241
	jmp .___ZNSt8__detaillsIcSt11char_traitsIcERKNSt7__cxx1112basic_stringIcS2_SaIcEEEEERSt13basic_ostreamIT_T0_ESD_RKNS_14_Quoted_stringIT1_SA_EE__M279
	.___ZNSt8__detaillsIcSt11char_traitsIcERKNSt7__cxx1112basic_stringIcS2_SaIcEEEEERSt13basic_ostreamIT_T0_ESD_RKNS_14_Quoted_stringIT1_SA_EE__M241:
	# LowerBasicConversion(6545:3): %"class.std::__cxx11::basic_ostringstream"* ^5 -> %"class.std::basic_ostream"* ^46
	movq -464(%rbp), %rax
	# LowerLoad(6546:3).2: (^4) into %"struct.std::__detail::_Quoted_string"* ^47
	movq -488(%rbp), %rdx
	movq (%rdx), %rcx
	# tt = Pointer, type = %"struct.std::__detail::_Quoted_string"
	# LowerGetelementptr(6547:3): struct-type: %"struct.std::__detail::_Quoted_string"* ^47 -> ^48, indices=0,2
	movq %rcx, %rdx
	addq $9, %rdx
	# LowerGetelementptr(6547:3): type of ^48 is i8*
	# LowerLoad(6548:3).2: (^48) into i8 ^49
	movb (%rdx), %cl
	# Clobber %rcx
	movq %rcx, -504(%rbp)
	# Clobber %rax
	movq %rax, -512(%rbp)
	# SetupCalls(6549:3): move argument %"class.std::basic_ostream"* nonnull dereferenceable(8) align 8 ^46
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(6549:3): move argument i8 signext ^49
	movzbq %cl, %rsi
	movsbq %sil, %rsi
	callq _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@PLT
	# SetupCalls(6549:3): move %"class.std::basic_ostream"* result from %rax
	movq %rax, %rax
	# Unclobber %rax
	movq -512(%rbp), %rax
	# Unclobber %rcx
	movq -504(%rbp), %rcx
	.___ZNSt8__detaillsIcSt11char_traitsIcERKNSt7__cxx1112basic_stringIcS2_SaIcEEEEERSt13basic_ostreamIT_T0_ESD_RKNS_14_Quoted_stringIT1_SA_EE__M279:
	# LowerBasicConversion(6553:3): %"class.std::__cxx11::basic_ostringstream"* ^5 -> %"class.std::basic_ostream"* ^52
	movq -464(%rbp), %rax
	# LowerLoad(6554:3).2: (^9) into i8 ^53
	movb (%r15), %cl
	# Clobber %rcx
	movq %rcx, -504(%rbp)
	# Clobber %rax
	movq %rax, -512(%rbp)
	# SetupCalls(6555:3): move argument %"class.std::basic_ostream"* nonnull dereferenceable(8) align 8 ^52
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(6555:3): move argument i8 signext ^53
	movzbq %cl, %rsi
	movsbq %sil, %rsi
	callq _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@PLT
	# SetupCalls(6555:3): move %"class.std::basic_ostream"* result from %rax
	movq %rax, %rax
	# Unclobber %rax
	movq -512(%rbp), %rax
	# Unclobber %rcx
	movq -504(%rbp), %rcx
	# SetupCalls(6559:3): move argument %"class.__gnu_cxx::__normal_iterator.20"* nonnull dereferenceable(8) align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	callq _ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv
	# SetupCalls(6559:3): move %"class.__gnu_cxx::__normal_iterator.20"* result from %rax
	movq %rax, %rax
	jmp .___ZNSt8__detaillsIcSt11char_traitsIcERKNSt7__cxx1112basic_stringIcS2_SaIcEEEEERSt13basic_ostreamIT_T0_ESD_RKNS_14_Quoted_stringIT1_SA_EE__M152
	.___ZNSt8__detaillsIcSt11char_traitsIcERKNSt7__cxx1112basic_stringIcS2_SaIcEEEEERSt13basic_ostreamIT_T0_ESD_RKNS_14_Quoted_stringIT1_SA_EE__M334:
	# LowerBasicConversion(6563:3): %"class.std::__cxx11::basic_ostringstream"* ^5 -> %"class.std::basic_ostream"* ^58
	movq -464(%rbp), %rbx
	# LowerLoad(6564:3).2: (^4) into %"struct.std::__detail::_Quoted_string"* ^59
	movq -488(%rbp), %rax
	movq (%rax), %rcx
	# tt = Pointer, type = %"struct.std::__detail::_Quoted_string"
	# LowerGetelementptr(6565:3): struct-type: %"struct.std::__detail::_Quoted_string"* ^59 -> ^60, indices=0,1
	movq %rcx, %rax
	addq $8, %rax
	# LowerGetelementptr(6565:3): type of ^60 is i8*
	# LowerLoad(6566:3).2: (^60) into i8 ^61
	movb (%rax), %cl
	# Clobber %rcx
	movq %rcx, -504(%rbp)
	# SetupCalls(6567:3): move argument %"class.std::basic_ostream"* nonnull dereferenceable(8) align 8 ^58
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(6567:3): move argument i8 signext ^61
	movzbq %cl, %rsi
	movsbq %sil, %rsi
	callq _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@PLT
	# SetupCalls(6567:3): move %"class.std::basic_ostream"* result from %rax
	movq %rax, %rax
	# Unclobber %rcx
	movq -504(%rbp), %rcx
	# LowerLoad(6568:3).2: (^3) into %"class.std::basic_ostream"* ^63
	movq -480(%rbp), %rax
	movq (%rax), %rbx
	# SetupCalls(6569:3): move argument %"class.std::__cxx11::basic_string"* sret align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq -472(%rbp), %rdi
	# SetupCalls(6569:3): move argument %"class.std::__cxx11::basic_ostringstream"* nonnull dereferenceable(112) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq -464(%rbp), %rsi
	callq _ZNKSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEE3strEv@PLT
	# SetupCalls(6570:3): move argument %"class.std::basic_ostream"* nonnull dereferenceable(8) align 8 ^63
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(6570:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq -472(%rbp), %rsi
	callq _ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKNSt7__cxx1112basic_stringIS4_S5_T1_EE@PLT
	# SetupCalls(6570:3): move %"class.std::basic_ostream"* result from %rax
	movq %rax, %rbx
	# SetupCalls(6571:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq -472(%rbp), %rdi
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
	# SetupCalls(6572:3): move argument %"class.std::__cxx11::basic_ostringstream"* nonnull dereferenceable(112) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq -464(%rbp), %rdi
	callq _ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEED1Ev@PLT
	movq %rbx, %rax
	movq -520(%rbp), %r15
	movq -584(%rbp), %r14
	movq -544(%rbp), %r13
	movq -552(%rbp), %r12
	movq -560(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt8_DestroyI6LsItemEvPT_
.p2align 4, 0x90
_ZSt8_DestroyI6LsItemEvPT_:
	.___ZSt8_DestroyI6LsItemEvPT___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(6757:3): size = 8, type = %struct.LsItem**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(6758:3).9: mov %struct.LsItem* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(6759:3).2: (^2) into %struct.LsItem* ^3
	movq (%rax), %rbx
	# SetupCalls(6760:3): move argument %struct.LsItem* nonnull dereferenceable(33) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZN6LsItemD2Ev
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt12_Destroy_auxILb1EE9__destroyIPSt17basic_string_viewIcSt11char_traitsIcEEEEvT_S7_
.p2align 4, 0x90
_ZNSt12_Destroy_auxILb1EE9__destroyIPSt17basic_string_viewIcSt11char_traitsIcEEEEvT_S7_:
	.___ZNSt12_Destroy_auxILb1EE9__destroyIPSt17basic_string_viewIcSt11char_traitsIcEEEEvT_S7___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(5405:3): size = 8, type = %"class.std::basic_string_view"**, var = ^3
	leaq -8(%rbp), %rbx
	# LowerAlloca(5406:3): size = 8, type = %"class.std::basic_string_view"**, var = ^4
	leaq -16(%rbp), %rax
	# LowerStore(5407:3).9: mov %"class.std::basic_string_view"* %rdi, (^3)
	movq %rdi, (%rbx)
	# LowerStore(5408:3).9: mov %"class.std::basic_string_view"* %rsi, (^4)
	movq %rsi, (%rax)
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE13_M_deallocateEPS3_m
.p2align 4, 0x90
_ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE13_M_deallocateEPS3_m:
	.___ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE13_M_deallocateEPS3_m__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(80 + 0, 16)
	subq $80, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -72(%rbp)
	# LowerAlloca(5414:3): size = 8, type = %"class.std::allocator"**, var = ^4
	leaq -8(%rbp), %rbx
	# LowerAlloca(5415:3): size = 8, type = %"class.std::basic_string_view"**, var = ^5
	leaq -16(%rbp), %r9
	# LowerAlloca(5416:3): size = 8, type = i64*, var = ^6
	leaq -24(%rbp), %r8
	# LowerAlloca(5417:3): size = 8, type = %"struct.std::_Vector_base"**, var = ^7
	leaq -32(%rbp), %rcx
	# LowerAlloca(5418:3): size = 8, type = %"class.std::basic_string_view"**, var = ^8
	leaq -40(%rbp), %rax
	# LowerAlloca(5419:3): size = 8, type = i64*, var = ^9
	leaq -48(%rbp), %r10
	# LowerStore(5420:3).9: mov %"struct.std::_Vector_base"* %rdi, (^7)
	movq %rdi, (%rcx)
	# LowerStore(5421:3).9: mov %"class.std::basic_string_view"* %rsi, (^8)
	movq %rsi, (%rax)
	# LowerStore(5422:3).9: mov i64 %rdx, (^9)
	movq %rdx, (%r10)
	# LowerLoad(5423:3).2: (^7) into %"struct.std::_Vector_base"* ^10
	movq (%rcx), %rdx
	# LowerLoad(5424:3).2: (^8) into %"class.std::basic_string_view"* ^11
	movq (%rax), %rcx
	# LowerIcmp(5425:3): %"class.std::basic_string_view"* ^11 vs. intlike 0
	cmpq $0, %rcx
	setne %cl
	andq $1, %rcx
	cmpb $0, %cl
	jne .___ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE13_M_deallocateEPS3_m__M27
	jmp .___ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE13_M_deallocateEPS3_m__M77
	.___ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE13_M_deallocateEPS3_m__M27:
	# tt = Pointer, type = %"struct.std::_Vector_base"
	# LowerGetelementptr(5429:3): struct-type: %"struct.std::_Vector_base"* ^10 -> ^14, indices=0,0
	movq %rdx, %rcx
	# LowerGetelementptr(5429:3): type of ^14 is %"struct.std::_Vector_base<std::basic_string_view<char>, std::allocator<std::basic_string_view<char>>>::_Vector_impl"*
	# LowerBasicConversion(5430:3): %"struct.std::_Vector_base"* ^14 -> %"class.std::allocator"* ^15
	movq %rcx, %rdx
	# LowerLoad(5431:3).2: (^8) into %"class.std::basic_string_view"* ^16
	movq (%rax), %rcx
	# LowerLoad(5432:3).2: (^9) into i64 ^17
	movq (%r10), %rax
	# LowerStore(5433:3).9: mov %"class.std::allocator"* ^15, (^4)
	movq %rdx, (%rbx)
	# LowerStore(5434:3).9: mov %"class.std::basic_string_view"* ^16, (^5)
	movq %rcx, (%r9)
	# LowerStore(5435:3).9: mov i64 ^17, (^6)
	movq %rax, (%r8)
	# LowerLoad(5436:3).2: (^4) into %"class.std::allocator"* ^18
	movq (%rbx), %rax
	# LowerBasicConversion(5437:3): %"class.std::allocator"* ^18 -> %"class.std::__new_allocator"* ^19
	movq %rax, %rbx
	# LowerLoad(5438:3).2: (^5) into %"class.std::basic_string_view"* ^20
	movq (%r9), %rax
	# LowerLoad(5439:3).2: (^6) into i64 ^21
	movq (%r8), %rcx
	# Clobber %rcx
	movq %rcx, -56(%rbp)
	# Clobber %rax
	movq %rax, -64(%rbp)
	# SetupCalls(5440:3): move argument %"class.std::__new_allocator"* nonnull dereferenceable(1) align 1 ^19
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(5440:3): move argument %"class.std::basic_string_view"* ^20
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(5440:3): move argument i64 ^21
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdx
	callq _ZNSt15__new_allocatorISt17basic_string_viewIcSt11char_traitsIcEEE10deallocateEPS3_m
	# Unclobber %rax
	movq -64(%rbp), %rax
	# Unclobber %rcx
	movq -56(%rbp), %rcx
	.___ZNSt12_Vector_baseISt17basic_string_viewIcSt11char_traitsIcEESaIS3_EE13_M_deallocateEPS3_m__M77:
	movq -72(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt15__new_allocatorISt17basic_string_viewIcSt11char_traitsIcEEE10deallocateEPS3_m
.p2align 4, 0x90
_ZNSt15__new_allocatorISt17basic_string_viewIcSt11char_traitsIcEEE10deallocateEPS3_m:
	.___ZNSt15__new_allocatorISt17basic_string_viewIcSt11char_traitsIcEEE10deallocateEPS3_m__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(48 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	# LowerAlloca(5463:3): size = 8, type = %"class.std::__new_allocator"**, var = ^4
	leaq -8(%rbp), %rax
	# LowerAlloca(5464:3): size = 8, type = %"class.std::basic_string_view"**, var = ^5
	leaq -16(%rbp), %rcx
	# LowerAlloca(5465:3): size = 8, type = i64*, var = ^6
	leaq -24(%rbp), %rbx
	# LowerStore(5466:3).9: mov %"class.std::__new_allocator"* %rdi, (^4)
	movq %rdi, (%rax)
	# LowerStore(5467:3).9: mov %"class.std::basic_string_view"* %rsi, (^5)
	movq %rsi, (%rcx)
	# LowerStore(5468:3).9: mov i64 %rdx, (^6)
	movq %rdx, (%rbx)
	# LowerLoad(5469:3).2: (^4) into %"class.std::__new_allocator"* ^7
	movq (%rax), %rbx
	# LowerLoad(5470:3).2: (^5) into %"class.std::basic_string_view"* ^8
	movq (%rcx), %rax
	# LowerBasicConversion(5471:3): %"class.std::basic_string_view"* ^8 -> i8* ^9
	movq %rax, %rbx
	# SetupCalls(5472:3): move argument i8* ^9
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZdlPv@PLT
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZN9__gnu_cxxmiIPSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_
.p2align 4, 0x90
_ZN9__gnu_cxxmiIPSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_:
	.___ZN9__gnu_cxxmiIPSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(72 + 0, 16)
	subq $80, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	movq %r12, -48(%rbp)
	movq %r13, -40(%rbp)
	# LowerAlloca(5772:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator.19"**, var = ^3
	leaq -8(%rbp), %rcx
	# LowerAlloca(5773:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator.19"**, var = ^4
	leaq -16(%rbp), %rbx
	# LowerStore(5774:3).9: mov %"class.__gnu_cxx::__normal_iterator.19"* %rdi, (^3)
	movq %rdi, (%rcx)
	# LowerStore(5775:3).9: mov %"class.__gnu_cxx::__normal_iterator.19"* %rsi, (^4)
	movq %rsi, (%rbx)
	# LowerLoad(5776:3).2: (^3) into %"class.__gnu_cxx::__normal_iterator.19"* ^5
	movq (%rcx), %rax
	# Clobber %rax
	movq %rax, -24(%rbp)
	# SetupCalls(5777:3): move argument %"class.__gnu_cxx::__normal_iterator.19"* nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIPSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEE4baseEv
	# SetupCalls(5777:3): move %"class.std::basic_string_view"** result from %rax
	movq %rax, %r13
	# Unclobber %rax
	movq -24(%rbp), %rax
	# LowerLoad(5778:3).2: (^6) into %"class.std::basic_string_view"* ^7
	movq (%r13), %r12
	# LowerLoad(5779:3).2: (^4) into %"class.__gnu_cxx::__normal_iterator.19"* ^8
	movq (%rbx), %rax
	# Clobber %rax
	movq %rax, -24(%rbp)
	# SetupCalls(5780:3): move argument %"class.__gnu_cxx::__normal_iterator.19"* nonnull dereferenceable(8) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIPSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEE4baseEv
	# SetupCalls(5780:3): move %"class.std::basic_string_view"** result from %rax
	movq %rax, %rbx
	# Unclobber %rax
	movq -24(%rbp), %rax
	# LowerLoad(5781:3).2: (^9) into %"class.std::basic_string_view"* ^10
	movq (%rbx), %rax
	# LowerBasicConversion(5782:3): %"class.std::basic_string_view"* ^7 -> i64 ^11
	movq %r12, %rcx
	# LowerBasicConversion(5783:3): %"class.std::basic_string_view"* ^10 -> i64 ^12
	movq %rax, %rbx
	# LowerMath(5784:3): ^11, ^12 into i64 ^13
	movq %rcx, %rax
	subq %rbx, %rax
	# LowerSdiv(5785:3): ^13, 16 into i64 ^14
	movq %rax, %rbx
	sarq $4, %rbx
	movq %rbx, %rax
	movq -40(%rbp), %r13
	movq -48(%rbp), %r12
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE6_S_keyEPKSt18_Rb_tree_node_base
.p2align 4, 0x90
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE6_S_keyEPKSt18_Rb_tree_node_base:
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE6_S_keyEPKSt18_Rb_tree_node_base__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(10037:3): size = 8, type = %"struct.std::_Rb_tree_node_base"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(10038:3).9: mov %"struct.std::_Rb_tree_node_base"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(10039:3).2: (^2) into %"struct.std::_Rb_tree_node_base"* ^3
	movq (%rax), %rbx
	# LowerBasicConversion(10040:3): %"struct.std::_Rb_tree_node_base"* ^3 -> %"struct.std::_Rb_tree_node"* ^4
	movq %rbx, %rax
	# Clobber %rax
	movq %rax, -16(%rbp)
	# SetupCalls(10041:3): move argument %"struct.std::_Rb_tree_node"* ^4
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE6_S_keyEPKSt13_Rb_tree_nodeISI_E
	# SetupCalls(10041:3): move %"class.std::__cxx11::basic_string"* result from %rax
	movq %rax, %rbx
	# Unclobber %rax
	movq -16(%rbp), %rax
	movq %rbx, %rax
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEE13_M_const_castEv
.p2align 4, 0x90
_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEE13_M_const_castEv:
	.___ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEE13_M_const_castEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(56 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -40(%rbp)
	movq %r12, -32(%rbp)
	# LowerAlloca(9981:3): size = 8, type = %"struct.std::_Rb_tree_iterator"*, var = ^2
	leaq -8(%rbp), %r12
	# LowerAlloca(9982:3): size = 8, type = %"struct.std::_Rb_tree_const_iterator"**, var = ^3
	leaq -16(%rbp), %rbx
	# LowerStore(9983:3).9: mov %"struct.std::_Rb_tree_const_iterator"* %rdi, (^3)
	movq %rdi, (%rbx)
	# LowerLoad(9984:3).2: (^3) into %"struct.std::_Rb_tree_const_iterator"* ^4
	movq (%rbx), %rax
	# tt = Pointer, type = %"struct.std::_Rb_tree_const_iterator"
	# LowerGetelementptr(9985:3): struct-type: %"struct.std::_Rb_tree_const_iterator"* ^4 -> ^5, indices=0,0
	movq %rax, %rbx
	# LowerGetelementptr(9985:3): type of ^5 is %"struct.std::_Rb_tree_node_base"**
	# LowerLoad(9986:3).2: (^5) into %"struct.std::_Rb_tree_node_base"* ^6
	movq (%rbx), %rax
	# Clobber %rax
	movq %rax, -24(%rbp)
	# SetupCalls(9987:3): move argument %"struct.std::_Rb_tree_iterator"* nonnull dereferenceable(8) align 8 ^2
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(9987:3): move argument %"struct.std::_Rb_tree_node_base"* ^6
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEEC2EPSt18_Rb_tree_node_base
	# Unclobber %rax
	movq -24(%rbp), %rax
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(9988:3): struct-type: %"struct.std::_Rb_tree_iterator"* ^2 -> ^7, indices=0,0
	movq %r12, %rbx
	# LowerGetelementptr(9988:3): type of ^7 is %"struct.std::_Rb_tree_node_base"**
	# LowerLoad(9989:3).2: (^7) into %"struct.std::_Rb_tree_node_base"* ^8
	movq (%rbx), %rax
	movq -32(%rbp), %r12
	movq -40(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v
.p2align 4, 0x90
_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v:
	.___ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(4558:3): size = 8, type = %"union.std::_Any_data"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(4559:3).9: mov %"union.std::_Any_data"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(4560:3).2: (^2) into %"union.std::_Any_data"* ^3
	movq (%rax), %rbx
	# SetupCalls(4561:3): move argument %"union.std::_Any_data"* nonnull dereferenceable(16) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt9_Any_data9_M_accessEv
	# SetupCalls(4561:3): move i8* result from %rax
	movq %rax, %rbx
	# LowerBasicConversion(4562:3): i8* ^4 -> %"class.std::type_info"** ^5
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt3maxImERKT_S2_S2_
.p2align 4, 0x90
_ZSt3maxImERKT_S2_S2_:
	.___ZSt3maxImERKT_S2_S2___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	# LowerAlloca(5845:3): size = 8, type = i64**, var = ^3
	leaq -8(%rbp), %r8
	# LowerAlloca(5846:3): size = 8, type = i64**, var = ^4
	leaq -16(%rbp), %rbx
	# LowerAlloca(5847:3): size = 8, type = i64**, var = ^5
	leaq -24(%rbp), %rdx
	# LowerStore(5848:3).9: mov i64* %rdi, (^4)
	movq %rdi, (%rbx)
	# LowerStore(5849:3).9: mov i64* %rsi, (^5)
	movq %rsi, (%rdx)
	# LowerLoad(5850:3).2: (^4) into i64* ^6
	movq (%rbx), %rax
	# LowerLoad(5851:3).2: (^6) into i64 ^7
	movq (%rax), %rcx
	# LowerLoad(5852:3).2: (^5) into i64* ^8
	movq (%rdx), %rax
	# LowerLoad(5853:3).2: (^8) into i64 ^9
	movq (%rax), %rsi
	# LowerIcmp(5854:3): i64 ^7 vs. operand i64 ^9
	cmpq %rsi, %rcx
	setb %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZSt3maxImERKT_S2_S2___M23
	jmp .___ZSt3maxImERKT_S2_S2___M28
	.___ZSt3maxImERKT_S2_S2___M23:
	# LowerLoad(5858:3).2: (^5) into i64* ^12
	movq (%rdx), %rax
	# LowerStore(5859:3).9: mov i64* ^12, (^3)
	movq %rax, (%r8)
	jmp .___ZSt3maxImERKT_S2_S2___M33
	.___ZSt3maxImERKT_S2_S2___M28:
	# LowerLoad(5863:3).2: (^4) into i64* ^14
	movq (%rbx), %rax
	# LowerStore(5864:3).9: mov i64* ^14, (^3)
	movq %rax, (%r8)
	.___ZSt3maxImERKT_S2_S2___M33:
	# LowerLoad(5868:3).2: (^3) into i64* ^16
	movq (%r8), %rax
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt3getILm0EJPNSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSB_
.p2align 4, 0x90
_ZSt3getILm0EJPNSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSB_:
	.___ZSt3getILm0EJPNSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSB___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(4089:3): size = 8, type = %"class.std::tuple"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(4090:3).9: mov %"class.std::tuple"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(4091:3).2: (^2) into %"class.std::tuple"* ^3
	movq (%rax), %rbx
	# LowerBasicConversion(4092:3): %"class.std::tuple"* ^3 -> %"struct.std::_Tuple_impl"* ^4
	movq %rbx, %rax
	# Clobber %rax
	movq %rax, -16(%rbp)
	# SetupCalls(4093:3): move argument %"struct.std::_Tuple_impl"* nonnull dereferenceable(8) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZSt12__get_helperILm0EPNSt10filesystem7__cxx114path5_List5_ImplEJNS3_13_Impl_deleterEEERT0_RSt11_Tuple_implIXT_EJS7_DpT1_EE
	# SetupCalls(4093:3): move %"struct.std::filesystem::__cxx11::path::_List::_Impl"** result from %rax
	movq %rax, %rbx
	# Unclobber %rax
	movq -16(%rbp), %rax
	movq %rbx, %rax
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNK9__gnu_cxx17__normal_iteratorIPSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEEmiEl
.p2align 4, 0x90
_ZNK9__gnu_cxx17__normal_iteratorIPSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEEmiEl:
	.___ZNK9__gnu_cxx17__normal_iteratorIPSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEEmiEl__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(72 + 0, 16)
	subq $80, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -56(%rbp)
	movq %r12, -48(%rbp)
	# LowerAlloca(6021:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator.19"*, var = ^3
	leaq -8(%rbp), %r12
	# LowerAlloca(6022:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator.19"**, var = ^4
	leaq -16(%rbp), %rax
	# LowerAlloca(6023:3): size = 8, type = i64*, var = ^5
	leaq -24(%rbp), %rdx
	# LowerAlloca(6024:3): size = 8, type = %"class.std::basic_string_view"**, var = ^6
	leaq -32(%rbp), %rcx
	# LowerStore(6025:3).9: mov %"class.__gnu_cxx::__normal_iterator.19"* %rdi, (^4)
	movq %rdi, (%rax)
	# LowerStore(6026:3).9: mov i64 %rsi, (^5)
	movq %rsi, (%rdx)
	# LowerLoad(6027:3).2: (^4) into %"class.__gnu_cxx::__normal_iterator.19"* ^7
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator.19"
	# LowerGetelementptr(6028:3): struct-type: %"class.__gnu_cxx::__normal_iterator.19"* ^7 -> ^8, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(6028:3): type of ^8 is %"class.std::basic_string_view"**
	# LowerLoad(6029:3).2: (^8) into %"class.std::basic_string_view"* ^9
	movq (%rax), %rbx
	# LowerLoad(6030:3).2: (^5) into i64 ^10
	movq (%rdx), %rax
	# LowerMath(6031:3): 0, ^10 into i64 ^11
	movq $0, %rdx
	subq %rax, %rdx
	# tt = Pointer, type = %"class.std::basic_string_view"
	# LowerGetelementptr(6032:3): pointer-type -> ^12
	movq %rdx, %rax
	shlq $4, %rax
	addq %rbx, %rax
	# LowerStore(6033:3).9: mov %"class.std::basic_string_view"* ^12, (^6)
	movq %rax, (%rcx)
	# Clobber %rcx
	movq %rcx, -40(%rbp)
	# SetupCalls(6034:3): move argument %"class.__gnu_cxx::__normal_iterator.19"* nonnull dereferenceable(8) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(6034:3): move argument %"class.std::basic_string_view"** nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	callq _ZN9__gnu_cxx17__normal_iteratorIPSt17basic_string_viewIcSt11char_traitsIcEESt6vectorIS4_SaIS4_EEEC2ERKS5_
	# Unclobber %rcx
	movq -40(%rbp), %rcx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator.19"
	# LowerGetelementptr(6035:3): struct-type: %"class.__gnu_cxx::__normal_iterator.19"* ^3 -> ^13, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(6035:3): type of ^13 is %"class.std::basic_string_view"**
	# LowerLoad(6036:3).2: (^13) into %"class.std::basic_string_view"* ^14
	movq (%rax), %rbx
	movq %rbx, %rax
	movq -48(%rbp), %r12
	movq -56(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10filesystem7__cxx114pathaSEOS1_
.p2align 4, 0x90
_ZNSt10filesystem7__cxx114pathaSEOS1_:
	.___ZNSt10filesystem7__cxx114pathaSEOS1___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(64 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -64(%rbp)
	movq %r12, -56(%rbp)
	movq %r13, -48(%rbp)
	# LowerAlloca(6234:3): size = 8, type = %"class.std::filesystem::__cxx11::path"**, var = ^3
	leaq -8(%rbp), %r13
	# LowerAlloca(6235:3): size = 8, type = %"class.std::filesystem::__cxx11::path"**, var = ^4
	leaq -16(%rbp), %rax
	# LowerAlloca(6236:3): size = 8, type = %"class.std::filesystem::__cxx11::path"**, var = ^5
	leaq -24(%rbp), %r12
	# LowerStore(6237:3).9: mov %"class.std::filesystem::__cxx11::path"* %rdi, (^4)
	movq %rdi, (%rax)
	# LowerStore(6238:3).9: mov %"class.std::filesystem::__cxx11::path"* %rsi, (^5)
	movq %rsi, (%r12)
	# LowerLoad(6239:3).2: (^4) into %"class.std::filesystem::__cxx11::path"* ^6
	movq (%rax), %rbx
	# LowerLoad(6240:3).2: (^5) into %"class.std::filesystem::__cxx11::path"* ^7
	movq (%r12), %rax
	# LowerIcmp(6241:3): %"class.std::filesystem::__cxx11::path"* ^7 vs. operand %"class.std::filesystem::__cxx11::path"* ^6
	cmpq %rbx, %rax
	sete %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt10filesystem7__cxx114pathaSEOS1___M19
	jmp .___ZNSt10filesystem7__cxx114pathaSEOS1___M22
	.___ZNSt10filesystem7__cxx114pathaSEOS1___M19:
	# LowerStore(6245:3).9: mov %"class.std::filesystem::__cxx11::path"* ^6, (^3)
	movq %rbx, (%r13)
	jmp .___ZNSt10filesystem7__cxx114pathaSEOS1___M120
	.___ZNSt10filesystem7__cxx114pathaSEOS1___M22:
	# LowerLoad(6249:3).2: (^5) into %"class.std::filesystem::__cxx11::path"* ^11
	movq (%r12), %rax
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path"
	# LowerGetelementptr(6250:3): struct-type: %"class.std::filesystem::__cxx11::path"* ^11 -> ^12, indices=0,0
	movq %rax, %rcx
	# LowerGetelementptr(6250:3): type of ^12 is %"class.std::__cxx11::basic_string"*
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path"
	# LowerGetelementptr(6251:3): struct-type: %"class.std::filesystem::__cxx11::path"* ^6 -> ^13, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(6251:3): type of ^13 is %"class.std::__cxx11::basic_string"*
	# Clobber %rcx
	movq %rcx, -32(%rbp)
	# Clobber %rax
	movq %rax, -40(%rbp)
	# SetupCalls(6252:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^13
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(6252:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^12
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_@PLT
	# SetupCalls(6252:3): move %"class.std::__cxx11::basic_string"* result from %rax
	movq %rax, %rax
	# Unclobber %rax
	movq -40(%rbp), %rax
	# Unclobber %rcx
	movq -32(%rbp), %rcx
	# LowerLoad(6253:3).2: (^5) into %"class.std::filesystem::__cxx11::path"* ^15
	movq (%r12), %rax
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path"
	# LowerGetelementptr(6254:3): struct-type: %"class.std::filesystem::__cxx11::path"* ^15 -> ^16, indices=0,1
	movq %rax, %rcx
	addq $32, %rcx
	# LowerGetelementptr(6254:3): type of ^16 is %"struct.std::filesystem::__cxx11::path::_List"*
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path"
	# LowerGetelementptr(6255:3): struct-type: %"class.std::filesystem::__cxx11::path"* ^6 -> ^17, indices=0,1
	movq %rbx, %rax
	addq $32, %rax
	# LowerGetelementptr(6255:3): type of ^17 is %"struct.std::filesystem::__cxx11::path::_List"*
	# Clobber %rcx
	movq %rcx, -32(%rbp)
	# Clobber %rax
	movq %rax, -40(%rbp)
	# SetupCalls(6256:3): move argument %"struct.std::filesystem::__cxx11::path::_List"* nonnull dereferenceable(8) align 8 ^17
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(6256:3): move argument %"struct.std::filesystem::__cxx11::path::_List"* nonnull dereferenceable(8) align 8 ^16
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	callq _ZNSt10filesystem7__cxx114path5_ListaSEOS2_
	# SetupCalls(6256:3): move %"struct.std::filesystem::__cxx11::path::_List"* result from %rax
	movq %rax, %rax
	# Unclobber %rax
	movq -40(%rbp), %rax
	# Unclobber %rcx
	movq -32(%rbp), %rcx
	# LowerLoad(6257:3).2: (^5) into %"class.std::filesystem::__cxx11::path"* ^19
	movq (%r12), %rax
	# Clobber %rax
	movq %rax, -40(%rbp)
	# SetupCalls(6258:3): move argument %"class.std::filesystem::__cxx11::path"* nonnull dereferenceable(40) align 8 ^19
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt10filesystem7__cxx114path5clearEv
	# Unclobber %rax
	movq -40(%rbp), %rax
	# LowerStore(6259:3).9: mov %"class.std::filesystem::__cxx11::path"* ^6, (^3)
	movq %rbx, (%r13)
	.___ZNSt10filesystem7__cxx114pathaSEOS1___M120:
	# LowerLoad(6263:3).2: (^3) into %"class.std::filesystem::__cxx11::path"* ^21
	movq (%r13), %rax
	movq -48(%rbp), %r13
	movq -56(%rbp), %r12
	movq -64(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10filesystem7__cxx114path5clearEv
.p2align 4, 0x90
_ZNSt10filesystem7__cxx114path5clearEv:
	.___ZNSt10filesystem7__cxx114path5clearEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(6318:3): size = 8, type = %"class.std::filesystem::__cxx11::path"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(6319:3).9: mov %"class.std::filesystem::__cxx11::path"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(6320:3).2: (^2) into %"class.std::filesystem::__cxx11::path"* ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path"
	# LowerGetelementptr(6321:3): struct-type: %"class.std::filesystem::__cxx11::path"* ^3 -> ^4, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(6321:3): type of ^4 is %"class.std::__cxx11::basic_string"*
	# Clobber %rax
	movq %rax, -16(%rbp)
	# SetupCalls(6322:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv@PLT
	# Unclobber %rax
	movq -16(%rbp), %rax
	# SetupCalls(6323:3): move argument %"class.std::filesystem::__cxx11::path"* nonnull dereferenceable(40) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt10filesystem7__cxx114path14_M_split_cmptsEv@PLT
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZN9__gnu_cxxltIP6LsItemSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_
.p2align 4, 0x90
_ZN9__gnu_cxxltIP6LsItemSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_:
	.___ZN9__gnu_cxxltIP6LsItemSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(56 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	movq %r12, -48(%rbp)
	movq %r13, -40(%rbp)
	# LowerAlloca(8035:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"**, var = ^3
	leaq -8(%rbp), %rcx
	# LowerAlloca(8036:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"**, var = ^4
	leaq -16(%rbp), %rbx
	# LowerStore(8037:3).9: mov %"class.__gnu_cxx::__normal_iterator"* %rdi, (^3)
	movq %rdi, (%rcx)
	# LowerStore(8038:3).9: mov %"class.__gnu_cxx::__normal_iterator"* %rsi, (^4)
	movq %rsi, (%rbx)
	# LowerLoad(8039:3).2: (^3) into %"class.__gnu_cxx::__normal_iterator"* ^5
	movq (%rcx), %rax
	# Clobber %rax
	movq %rax, -24(%rbp)
	# SetupCalls(8040:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEE4baseEv
	# SetupCalls(8040:3): move %struct.LsItem** result from %rax
	movq %rax, %r13
	# Unclobber %rax
	movq -24(%rbp), %rax
	# LowerLoad(8041:3).2: (^6) into %struct.LsItem* ^7
	movq (%r13), %r12
	# LowerLoad(8042:3).2: (^4) into %"class.__gnu_cxx::__normal_iterator"* ^8
	movq (%rbx), %rax
	# Clobber %rax
	movq %rax, -24(%rbp)
	# SetupCalls(8043:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEE4baseEv
	# SetupCalls(8043:3): move %struct.LsItem** result from %rax
	movq %rax, %rbx
	# Unclobber %rax
	movq -24(%rbp), %rax
	# LowerLoad(8044:3).2: (^9) into %struct.LsItem* ^10
	movq (%rbx), %rax
	# LowerIcmp(8045:3): %struct.LsItem* ^7 vs. operand %struct.LsItem* ^10
	cmpq %rax, %r12
	setb %al
	andq $1, %rax
	movq -40(%rbp), %r13
	movq -48(%rbp), %r12
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE9_M_createIRKSB_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE
.p2align 4, 0x90
_ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE9_M_createIRKSB_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE:
	.___ZNSt14_Function_base13_Base_managerIPFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS5_EEEE9_M_createIRKSB_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(56 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -40(%rbp)
	movq %r12, -32(%rbp)
	# LowerAlloca(4648:3): size = 1, type = %"struct.std::integral_constant"*, var = ^3
	leaq -1(%rbp), %rax
	# LowerAlloca(4649:3): size = 8, type = %"union.std::_Any_data"**, var = ^4
	leaq -16(%rbp), %rax
	# LowerAlloca(4650:3): size = 8, type = i32 (%"class.std::vector"*) ****, var = ^5
	leaq -24(%rbp), %r12
	# LowerStore(4651:3).9: mov %"union.std::_Any_data"* %rdi, (^4)
	movq %rdi, (%rax)
	# LowerStore(4652:3).9: mov i32 (%"class.std::vector"*) *** %rsi, (^5)
	movq %rsi, (%r12)
	# LowerLoad(4653:3).2: (^4) into %"union.std::_Any_data"* ^6
	movq (%rax), %rbx
	# SetupCalls(4654:3): move argument %"union.std::_Any_data"* nonnull dereferenceable(16) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt9_Any_data9_M_accessEv
	# SetupCalls(4654:3): move i8* result from %rax
	movq %rax, %rbx
	# LowerBasicConversion(4655:3): i8* ^7 -> i32 (%"class.std::vector"*) *** ^8
	movq %rbx, %rax
	# LowerLoad(4656:3).2: (^5) into i32 (%"class.std::vector"*) *** ^9
	movq (%r12), %rbx
	# LowerLoad(4657:3).2: (^9) into i32 (%"class.std::vector"*) ** ^10
	movq (%rbx), %rcx
	# LowerStore(4658:3).9: mov i32 (%"class.std::vector"*) ** ^10, (^8)
	movq %rcx, (%rax)
	movq -32(%rbp), %r12
	movq -40(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt6vectorI6LsItemSaIS0_EE4sizeEv
.p2align 4, 0x90
_ZNKSt6vectorI6LsItemSaIS0_EE4sizeEv:
	.___ZNKSt6vectorI6LsItemSaIS0_EE4sizeEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(64 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(7171:3): size = 8, type = %"class.std::vector.5"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(7172:3).9: mov %"class.std::vector.5"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(7173:3).2: (^2) into %"class.std::vector.5"* ^3
	movq (%rax), %rcx
	# LowerBasicConversion(7174:3): %"class.std::vector.5"* ^3 -> %"struct.std::_Vector_base.6"* ^4
	movq %rcx, %rax
	# tt = Pointer, type = %"struct.std::_Vector_base.6"
	# LowerGetelementptr(7175:3): struct-type: %"struct.std::_Vector_base.6"* ^4 -> ^5, indices=0,0
	movq %rax, %rbx
	# LowerGetelementptr(7175:3): type of ^5 is %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl"*
	# LowerBasicConversion(7176:3): %"struct.std::_Vector_base.6"* ^5 -> %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"* ^6
	movq %rbx, %rax
	# tt = Pointer, type = %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"
	# LowerGetelementptr(7177:3): struct-type: %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"* ^6 -> ^7, indices=0,1
	movq %rax, %rbx
	addq $8, %rbx
	# LowerGetelementptr(7177:3): type of ^7 is %struct.LsItem**
	# LowerLoad(7178:3).2: (^7) into %struct.LsItem* ^8
	movq (%rbx), %rax
	# LowerBasicConversion(7179:3): %"class.std::vector.5"* ^3 -> %"struct.std::_Vector_base.6"* ^9
	movq %rcx, %rbx
	# tt = Pointer, type = %"struct.std::_Vector_base.6"
	# LowerGetelementptr(7180:3): struct-type: %"struct.std::_Vector_base.6"* ^9 -> ^10, indices=0,0
	movq %rbx, %rcx
	# LowerGetelementptr(7180:3): type of ^10 is %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl"*
	# LowerBasicConversion(7181:3): %"struct.std::_Vector_base.6"* ^10 -> %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"* ^11
	movq %rcx, %rbx
	# tt = Pointer, type = %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"
	# LowerGetelementptr(7182:3): struct-type: %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"* ^11 -> ^12, indices=0,0
	movq %rbx, %rcx
	# LowerGetelementptr(7182:3): type of ^12 is %struct.LsItem**
	# LowerLoad(7183:3).2: (^12) into %struct.LsItem* ^13
	movq (%rcx), %rbx
	# LowerBasicConversion(7184:3): %struct.LsItem* ^8 -> i64 ^14
	movq %rax, %rcx
	# LowerBasicConversion(7185:3): %struct.LsItem* ^13 -> i64 ^15
	movq %rbx, %rax
	# LowerMath(7186:3): ^14, ^15 into i64 ^16
	movq %rcx, %rbx
	subq %rax, %rbx
	# LowerSdiv(7187:3): ^16, 40 into i64 ^17
	movq %rbx, %rcx
	movq $0, %rdx
	movq %rcx, %rax
	movq $40, %rbx
	idivq %rbx
	movq %rax, %rcx
	movq %rcx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt15__uniq_ptr_dataINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterELb1ELb1EEaSEOS6_
.p2align 4, 0x90
_ZNSt15__uniq_ptr_dataINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterELb1ELb1EEaSEOS6_:
	.___ZNSt15__uniq_ptr_dataINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterELb1ELb1EEaSEOS6___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(56 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -40(%rbp)
	movq %r12, -48(%rbp)
	# LowerAlloca(6343:3): size = 8, type = %"struct.std::__uniq_ptr_data"**, var = ^3
	leaq -8(%rbp), %rbx
	# LowerAlloca(6344:3): size = 8, type = %"struct.std::__uniq_ptr_data"**, var = ^4
	leaq -16(%rbp), %rax
	# LowerStore(6345:3).9: mov %"struct.std::__uniq_ptr_data"* %rdi, (^3)
	movq %rdi, (%rbx)
	# LowerStore(6346:3).9: mov %"struct.std::__uniq_ptr_data"* %rsi, (^4)
	movq %rsi, (%rax)
	# LowerLoad(6347:3).2: (^3) into %"struct.std::__uniq_ptr_data"* ^5
	movq (%rbx), %r12
	# LowerBasicConversion(6348:3): %"struct.std::__uniq_ptr_data"* ^5 -> %"class.std::__uniq_ptr_impl"* ^6
	movq %r12, %rcx
	# LowerLoad(6349:3).2: (^4) into %"struct.std::__uniq_ptr_data"* ^7
	movq (%rax), %rbx
	# LowerBasicConversion(6350:3): %"struct.std::__uniq_ptr_data"* ^7 -> %"class.std::__uniq_ptr_impl"* ^8
	movq %rbx, %rax
	# Clobber %rcx
	movq %rcx, -24(%rbp)
	# Clobber %rax
	movq %rax, -32(%rbp)
	# SetupCalls(6351:3): move argument %"class.std::__uniq_ptr_impl"* nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(6351:3): move argument %"class.std::__uniq_ptr_impl"* nonnull dereferenceable(8) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNSt15__uniq_ptr_implINSt10filesystem7__cxx114path5_List5_ImplENS3_13_Impl_deleterEEaSEOS6_
	# SetupCalls(6351:3): move %"class.std::__uniq_ptr_impl"* result from %rax
	movq %rax, %rax
	# Unclobber %rax
	movq -32(%rbp), %rax
	# Unclobber %rcx
	movq -24(%rbp), %rcx
	movq %r12, %rax
	movq -48(%rbp), %r12
	movq -40(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt17basic_string_viewIcSt11char_traitsIcEE5emptyEv
.p2align 4, 0x90
_ZNKSt17basic_string_viewIcSt11char_traitsIcEE5emptyEv:
	.___ZNKSt17basic_string_viewIcSt11char_traitsIcEE5emptyEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(999:3): size = 8, type = %"class.std::basic_string_view"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(1000:3).9: mov %"class.std::basic_string_view"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(1001:3).2: (^2) into %"class.std::basic_string_view"* ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::basic_string_view"
	# LowerGetelementptr(1002:3): struct-type: %"class.std::basic_string_view"* ^3 -> ^4, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(1002:3): type of ^4 is i64*
	# LowerLoad(1003:3).2: (^4) into i64 ^5
	movq (%rax), %rbx
	# LowerIcmp(1004:3): i64 ^5 vs. intlike 0
	cmpq $0, %rbx
	sete %al
	andq $1, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt10filesystem7__cxx114pathC2ISt17basic_string_viewIcSt11char_traitsIcEES1_EERKT_NS1_6formatE
.p2align 4, 0x90
_ZNSt10filesystem7__cxx114pathC2ISt17basic_string_viewIcSt11char_traitsIcEES1_EERKT_NS1_6formatE:
	.___ZNSt10filesystem7__cxx114pathC2ISt17basic_string_viewIcSt11char_traitsIcEES1_EERKT_NS1_6formatE__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(336 + 0, 16)
	subq $336, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -176(%rbp)
	movq %r12, -168(%rbp)
	movq %r13, -192(%rbp)
	movq %r14, -216(%rbp)
	movq %r15, -152(%rbp)
	# LowerAlloca(6419:3): size = 8, type = %"class.std::__new_allocator.1"**, var = ^4
	# Fixing source-to-dest leaq -8(%rbp), -128(%rbp)
	leaq -8(%rbp), %r15
	movq %r15, -128(%rbp)
	# LowerAlloca(6420:3): size = 8, type = %"class.std::allocator.0"**, var = ^5
	# Fixing source-to-dest leaq -16(%rbp), -104(%rbp)
	leaq -16(%rbp), %r15
	movq %r15, -104(%rbp)
	# LowerAlloca(6421:3): size = 8, type = %"class.std::allocator.0"**, var = ^6
	leaq -24(%rbp), %r12
	# LowerAlloca(6422:3): size = 8, type = %"class.std::filesystem::__cxx11::path"**, var = ^7
	leaq -32(%rbp), %rbx
	# LowerAlloca(6423:3): size = 8, type = %"class.std::basic_string_view"**, var = ^8
	leaq -40(%rbp), %rax
	# LowerAlloca(6424:3): size = 1, type = i8*, var = ^9
	leaq -41(%rbp), %r8
	# LowerAlloca(6425:3): size = 16, type = %"class.std::basic_string_view"*, var = ^10
	# Fixing source-to-dest leaq -64(%rbp), -120(%rbp)
	leaq -64(%rbp), %r15
	movq %r15, -120(%rbp)
	# LowerAlloca(6426:3): size = 16, type = %"class.std::basic_string_view"*, var = ^11
	leaq -80(%rbp), %r13
	# LowerAlloca(6427:3): size = 1, type = %"class.std::allocator.0"*, var = ^12
	# Fixing source-to-dest leaq -81(%rbp), -112(%rbp)
	leaq -81(%rbp), %r15
	movq %r15, -112(%rbp)
	# LowerStore(6428:3).9: mov %"class.std::filesystem::__cxx11::path"* %rdi, (^7)
	movq %rdi, (%rbx)
	# LowerStore(6429:3).9: mov %"class.std::basic_string_view"* %rsi, (^8)
	movq %rsi, (%rax)
	# LowerStore(6430:3).9: mov i8 %dl, (^9)
	movb %dl, (%r8)
	# LowerLoad(6431:3).2: (^7) into %"class.std::filesystem::__cxx11::path"* ^13
	# Fixing source-to-dest movq (%rbx), -96(%rbp)
	movq (%rbx), %r15
	movq %r15, -96(%rbp)
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path"
	# LowerGetelementptr(6432:3): struct-type: %"class.std::filesystem::__cxx11::path"* ^13 -> ^14, indices=0,0
	movq -96(%rbp), %r14
	# LowerGetelementptr(6432:3): type of ^14 is %"class.std::__cxx11::basic_string"*
	# LowerLoad(6433:3).2: (^8) into %"class.std::basic_string_view"* ^15
	movq (%rax), %rbx
	# SetupCalls(6434:3): move argument %"class.std::basic_string_view"* nonnull dereferenceable(16) align 8 ^15
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt10filesystem7__cxx118__detail17__effective_rangeIcSt11char_traitsIcEEESt17basic_string_viewIT_S3_IS6_EERKS5_IS6_T0_E
	# SetupCalls(6434:3): move 128-bit result from %rax and %rdx
	# Multireg move: <%hax %hdx> -> <%hbx %hr15>
	movq %rax, %rbx
	movq %rdx, %r15
	# LowerBasicConversion(6435:3): %"class.std::basic_string_view"* ^11 -> {i64, i8*}* ^17
	movq %r13, %rcx
	# tt = Pointer, type = {i64, i8*}
	# LowerGetelementptr(6436:3): struct-type: {i64, i8*}* ^17 -> ^18, indices=0,0
	movq %rcx, %rdx
	# LowerGetelementptr(6436:3): type of ^18 is i64*
	# LowerExtractvalue(6438:3)
	# PaddedStructs({i64, i8*} -> i64): move from pack ^16 ({i64, i8*}) to ^41 (opaque), index = 0
	movq %rbx, %rsi
	movq %rsi, %rax
	# LowerStore(6438:3).9: mov i64 ^19, (^18)
	movq %rax, (%rdx)
	# tt = Pointer, type = {i64, i8*}
	# LowerGetelementptr(6439:3): struct-type: {i64, i8*}* ^17 -> ^20, indices=0,1
	movq %rcx, %rax
	addq $8, %rax
	# LowerGetelementptr(6439:3): type of ^20 is i8**
	# LowerExtractvalue(6441:3)
	# PaddedStructs({i64, i8*} -> i8*): move from pack ^16 ({i64, i8*}) to ^42 (opaque), index = 1
	movq %r15, %rcx
	movq %rcx, %rbx
	# LowerStore(6441:3).9: mov i8* ^21, (^20)
	movq %rbx, (%rax)
	# LowerBasicConversion(6442:3): %"class.std::basic_string_view"* ^11 -> {i64, i8*}* ^22
	movq %r13, %rax
	# tt = Pointer, type = {i64, i8*}
	# LowerGetelementptr(6443:3): struct-type: {i64, i8*}* ^22 -> ^23, indices=0,0
	movq %rax, %rbx
	# LowerGetelementptr(6443:3): type of ^23 is i64*
	# LowerLoad(6444:3).2: (^23) into i64 ^24
	movq (%rbx), %rcx
	# tt = Pointer, type = {i64, i8*}
	# LowerGetelementptr(6445:3): struct-type: {i64, i8*}* ^22 -> ^25, indices=0,1
	movq %rax, %rbx
	addq $8, %rbx
	# LowerGetelementptr(6445:3): type of ^25 is i8**
	# LowerLoad(6446:3).2: (^25) into i8* ^26
	movq (%rbx), %rax
	# Clobber %rcx
	movq %rcx, -136(%rbp)
	# Clobber %rax
	movq %rax, -144(%rbp)
	# SetupCalls(6447:3): move argument i64 ^24
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(6447:3): move argument i8* ^26
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNSt10filesystem7__cxx114path10_S_convertISt17basic_string_viewIcSt11char_traitsIcEEEEDaT_
	# SetupCalls(6447:3): move 128-bit result from %rax and %rdx
	# Multireg move: <%hax %hdx> -> <%hbx %hr13>
	movq %rax, %rbx
	movq %rdx, %r13
	# Unclobber %rax
	movq -144(%rbp), %rax
	# Unclobber %rcx
	movq -136(%rbp), %rcx
	# LowerBasicConversion(6448:3): %"class.std::basic_string_view"* ^10 -> {i64, i8*}* ^28
	movq -120(%rbp), %rcx
	# tt = Pointer, type = {i64, i8*}
	# LowerGetelementptr(6449:3): struct-type: {i64, i8*}* ^28 -> ^29, indices=0,0
	movq %rcx, %rdx
	# LowerGetelementptr(6449:3): type of ^29 is i64*
	# LowerExtractvalue(6451:3)
	# PaddedStructs({i64, i8*} -> i64): move from pack ^27 ({i64, i8*}) to ^43 (opaque), index = 0
	movq %rbx, %rsi
	movq %rsi, %rax
	# LowerStore(6451:3).9: mov i64 ^30, (^29)
	movq %rax, (%rdx)
	# tt = Pointer, type = {i64, i8*}
	# LowerGetelementptr(6452:3): struct-type: {i64, i8*}* ^28 -> ^31, indices=0,1
	movq %rcx, %rax
	addq $8, %rax
	# LowerGetelementptr(6452:3): type of ^31 is i8**
	# LowerExtractvalue(6454:3)
	# PaddedStructs({i64, i8*} -> i8*): move from pack ^27 ({i64, i8*}) to ^44 (opaque), index = 1
	movq %r13, %rcx
	movq %rcx, %rbx
	# LowerStore(6454:3).9: mov i8* ^32, (^31)
	movq %rbx, (%rax)
	# LowerStore(6455:3).9: mov %"class.std::allocator.0"* ^12, (^6)
	# Fixing source-to-dest movq -112(%rbp), (%r12)
	movq -112(%rbp), %r15
	movq %r15, (%r12)
	# LowerLoad(6456:3).2: (^6) into %"class.std::allocator.0"* ^33
	movq (%r12), %rax
	# LowerBasicConversion(6457:3): %"class.std::allocator.0"* ^33 -> %"class.std::__new_allocator.1"* ^34
	movq %rax, %rbx
	# LowerStore(6458:3).9: mov %"class.std::__new_allocator.1"* ^34, (^4)
	movq -128(%rbp), %rax
	movq %rbx, (%rax)
	# LowerLoad(6459:3).2: (^4) into %"class.std::__new_allocator.1"* ^35
	movq -128(%rbp), %rbx
	movq (%rbx), %rax
	# SetupCalls(6460:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^14
	# Fixed movzx with identical source and destination widths
	movq %r14, %rdi
	# SetupCalls(6460:3): move argument %"class.std::basic_string_view"* nonnull dereferenceable(16) align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq -120(%rbp), %rsi
	# SetupCalls(6460:3): move argument %"class.std::allocator.0"* nonnull dereferenceable(1) align 1 ^12
	# Fixed movzx with identical source and destination widths
	movq -112(%rbp), %rdx
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ISt17basic_string_viewIcS2_EvEERKT_RKS3_
	# LowerStore(6461:3).9: mov %"class.std::allocator.0"* ^12, (^5)
	movq -104(%rbp), %rax
	# Fixing source-to-dest movq -112(%rbp), (%rax)
	movq -112(%rbp), %r15
	movq %r15, (%rax)
	# LowerLoad(6462:3).2: (^5) into %"class.std::allocator.0"* ^36
	movq -104(%rbp), %rbx
	movq (%rbx), %rax
	# LowerBasicConversion(6463:3): %"class.std::allocator.0"* ^36 -> %"class.std::__new_allocator.1"* ^37
	movq %rax, %rbx
	# SetupCalls(6464:3): move argument %"class.std::__new_allocator.1"* nonnull dereferenceable(1) align 1 ^37
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _ZNSt15__new_allocatorIcED2Ev
	# tt = Pointer, type = %"class.std::filesystem::__cxx11::path"
	# LowerGetelementptr(6465:3): struct-type: %"class.std::filesystem::__cxx11::path"* ^13 -> ^38, indices=0,1
	movq -96(%rbp), %rax
	addq $32, %rax
	# LowerGetelementptr(6465:3): type of ^38 is %"struct.std::filesystem::__cxx11::path::_List"*
	# Clobber %rax
	movq %rax, -144(%rbp)
	# SetupCalls(6466:3): move argument %"struct.std::filesystem::__cxx11::path::_List"* nonnull dereferenceable(8) align 8 ^38
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt10filesystem7__cxx114path5_ListC1Ev@PLT
	# Unclobber %rax
	movq -144(%rbp), %rax
	# SetupCalls(6467:3): move argument %"class.std::filesystem::__cxx11::path"* nonnull dereferenceable(40) align 8 ^13
	# Fixed movzx with identical source and destination widths
	movq -96(%rbp), %rdi
	callq _ZNSt10filesystem7__cxx114path14_M_split_cmptsEv@PLT
	movq -152(%rbp), %r15
	movq -216(%rbp), %r14
	movq -192(%rbp), %r13
	movq -168(%rbp), %r12
	movq -176(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt9_Any_data9_M_accessEv
.p2align 4, 0x90
_ZNKSt9_Any_data9_M_accessEv:
	.___ZNKSt9_Any_data9_M_accessEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(4548:3): size = 8, type = %"union.std::_Any_data"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(4549:3).9: mov %"union.std::_Any_data"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(4550:3).2: (^2) into %"union.std::_Any_data"* ^3
	movq (%rax), %rbx
	# LowerBasicConversion(4551:3): %"union.std::_Any_data"* ^3 -> [16 x i8]* ^4
	movq %rbx, %rax
	# tt = Pointer, type = [16 x i8]
	# LowerGetelementptr(4552:3): struct-type: [16 x i8]* ^4 -> ^5, indices=0,0
	movq %rax, %rbx
	# LowerGetelementptr(4552:3): type of ^5 is i8*
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv
.p2align 4, 0x90
_ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv:
	.___ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(6620:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator.20"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(6621:3).9: mov %"class.__gnu_cxx::__normal_iterator.20"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(6622:3).2: (^2) into %"class.__gnu_cxx::__normal_iterator.20"* ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.__gnu_cxx::__normal_iterator.20"
	# LowerGetelementptr(6623:3): struct-type: %"class.__gnu_cxx::__normal_iterator.20"* ^3 -> ^4, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(6623:3): type of ^4 is i8**
	# LowerLoad(6624:3).2: (^4) into i8* ^5
	movq (%rax), %rbx
	movq %rbx, %rax
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE10_M_insert_IRKSI_NSO_11_Alloc_nodeEEESt17_Rb_tree_iteratorISI_EPSt18_Rb_tree_node_baseSW_OT_RT0_
.p2align 4, 0x90
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE10_M_insert_IRKSI_NSO_11_Alloc_nodeEEESt17_Rb_tree_iteratorISI_EPSt18_Rb_tree_node_baseSW_OT_RT0_:
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE10_M_insert_IRKSI_NSO_11_Alloc_nodeEEESt17_Rb_tree_iteratorISI_EPSt18_Rb_tree_node_baseSW_OT_RT0___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(360 + 0, 16)
	subq $368, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -152(%rbp)
	movq %r12, -192(%rbp)
	movq %r13, -224(%rbp)
	movq %r14, -168(%rbp)
	movq %r15, -144(%rbp)
	# LowerAlloca(9895:3): size = 8, type = %"struct.std::_Rb_tree_iterator"*, var = ^6
	# Fixing source-to-dest leaq -8(%rbp), -72(%rbp)
	leaq -8(%rbp), %r15
	movq %r15, -72(%rbp)
	# LowerAlloca(9896:3): size = 8, type = %"class.std::_Rb_tree"**, var = ^7
	leaq -16(%rbp), %rbx
	# LowerAlloca(9897:3): size = 8, type = %"struct.std::_Rb_tree_node_base"**, var = ^8
	leaq -24(%rbp), %rax
	# LowerAlloca(9898:3): size = 8, type = %"struct.std::_Rb_tree_node_base"**, var = ^9
	# Fixing source-to-dest leaq -32(%rbp), -96(%rbp)
	leaq -32(%rbp), %r15
	movq %r15, -96(%rbp)
	# LowerAlloca(9899:3): size = 8, type = %"struct.std::pair"**, var = ^10
	leaq -40(%rbp), %r14
	# LowerAlloca(9900:3): size = 8, type = %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Alloc_node"**, var = ^11
	leaq -48(%rbp), %r15
	# LowerAlloca(9901:3): size = 1, type = i8*, var = ^12
	# Fixing source-to-dest leaq -49(%rbp), -104(%rbp)
	pushq %r15
	leaq -49(%rbp), %r15
	movq %r15, -104(%rbp)
	popq %r15
	# LowerAlloca(9902:3): size = 1, type = %"struct.std::_Select1st"*, var = ^13
	leaq -50(%rbp), %r12
	# LowerAlloca(9903:3): size = 8, type = %"struct.std::_Rb_tree_node"**, var = ^14
	# Fixing source-to-dest leaq -64(%rbp), -80(%rbp)
	pushq %r15
	leaq -64(%rbp), %r15
	movq %r15, -80(%rbp)
	popq %r15
	# LowerStore(9904:3).9: mov %"class.std::_Rb_tree"* %rdi, (^7)
	movq %rdi, (%rbx)
	# LowerStore(9905:3).9: mov %"struct.std::_Rb_tree_node_base"* %rsi, (^8)
	movq %rsi, (%rax)
	# LowerStore(9906:3).9: mov %"struct.std::_Rb_tree_node_base"* %rdx, (^9)
	movq -96(%rbp), %rsi
	movq %rdx, (%rsi)
	# LowerStore(9907:3).9: mov %"struct.std::pair"* %rcx, (^10)
	movq %rcx, (%r14)
	# LowerStore(9908:3).9: mov %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Alloc_node"* %r8, (^11)
	movq %r8, (%r15)
	# LowerLoad(9909:3).2: (^7) into %"class.std::_Rb_tree"* ^15
	# Fixing source-to-dest movq (%rbx), -88(%rbp)
	pushq %r15
	movq (%rbx), %r15
	movq %r15, -88(%rbp)
	popq %r15
	# LowerLoad(9910:3).2: (^8) into %"struct.std::_Rb_tree_node_base"* ^16
	movq (%rax), %rbx
	# LowerIcmp(9911:3): %"struct.std::_Rb_tree_node_base"* ^16 vs. intlike 0
	cmpq $0, %rbx
	setne %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE10_M_insert_IRKSI_NSO_11_Alloc_nodeEEESt17_Rb_tree_iteratorISI_EPSt18_Rb_tree_node_baseSW_OT_RT0___M37
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE10_M_insert_IRKSI_NSO_11_Alloc_nodeEEESt17_Rb_tree_iteratorISI_EPSt18_Rb_tree_node_baseSW_OT_RT0___M40
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE10_M_insert_IRKSI_NSO_11_Alloc_nodeEEESt17_Rb_tree_iteratorISI_EPSt18_Rb_tree_node_baseSW_OT_RT0___M37:
	# MovePhi: intlike -> ^32 (in new block 60 whose parent is 5)
	movb $1, -112(%rbp)
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE10_M_insert_IRKSI_NSO_11_Alloc_nodeEEESt17_Rb_tree_iteratorISI_EPSt18_Rb_tree_node_baseSW_OT_RT0___M165
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE10_M_insert_IRKSI_NSO_11_Alloc_nodeEEESt17_Rb_tree_iteratorISI_EPSt18_Rb_tree_node_baseSW_OT_RT0___M40:
	# LowerLoad(9915:3).2: (^9) into %"struct.std::_Rb_tree_node_base"* ^19
	movq -96(%rbp), %rax
	movq (%rax), %r13
	# SetupCalls(9916:3): move argument %"class.std::_Rb_tree"* nonnull dereferenceable(48) align 8 ^15
	# Fixed movzx with identical source and destination widths
	movq -88(%rbp), %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE6_M_endEv
	# SetupCalls(9916:3): move %"struct.std::_Rb_tree_node_base"* result from %rax
	movq %rax, %rbx
	# LowerIcmp(9917:3): %"struct.std::_Rb_tree_node_base"* ^19 vs. operand %"struct.std::_Rb_tree_node_base"* ^20
	cmpq %rbx, %r13
	sete %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE10_M_insert_IRKSI_NSO_11_Alloc_nodeEEESt17_Rb_tree_iteratorISI_EPSt18_Rb_tree_node_baseSW_OT_RT0___M70
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE10_M_insert_IRKSI_NSO_11_Alloc_nodeEEESt17_Rb_tree_iteratorISI_EPSt18_Rb_tree_node_baseSW_OT_RT0___M73
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE10_M_insert_IRKSI_NSO_11_Alloc_nodeEEESt17_Rb_tree_iteratorISI_EPSt18_Rb_tree_node_baseSW_OT_RT0___M70:
	# MovePhi: intlike -> ^32 (in new block 59 whose parent is 18)
	movb $1, -112(%rbp)
	jmp .___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE10_M_insert_IRKSI_NSO_11_Alloc_nodeEEESt17_Rb_tree_iteratorISI_EPSt18_Rb_tree_node_baseSW_OT_RT0___M165
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE10_M_insert_IRKSI_NSO_11_Alloc_nodeEEESt17_Rb_tree_iteratorISI_EPSt18_Rb_tree_node_baseSW_OT_RT0___M73:
	# tt = Pointer, type = %"class.std::_Rb_tree"
	# LowerGetelementptr(9921:3): struct-type: %"class.std::_Rb_tree"* ^15 -> ^23, indices=0,0
	movq -88(%rbp), %rax
	# LowerGetelementptr(9921:3): type of ^23 is %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Rb_tree_impl"*
	# LowerBasicConversion(9922:3): %"class.std::_Rb_tree"* ^23 -> %"struct.std::_Rb_tree_key_compare"* ^24
	movq %rax, %rbx
	# tt = Pointer, type = %"struct.std::_Rb_tree_key_compare"
	# LowerGetelementptr(9923:3): struct-type: %"struct.std::_Rb_tree_key_compare"* ^24 -> ^25, indices=0,0
	movq %rbx, %r13
	# LowerGetelementptr(9923:3): type of ^25 is %"struct.std::less"*
	# LowerLoad(9924:3).2: (^10) into %"struct.std::pair"* ^26
	movq (%r14), %rax
	# Clobber %rax
	movq %rax, -120(%rbp)
	# SetupCalls(9925:3): move argument %"struct.std::_Select1st"* nonnull dereferenceable(1) align 1 ^13
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(9925:3): move argument %"struct.std::pair"* nonnull dereferenceable(64) align 8 ^26
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEEclERKSI_
	# SetupCalls(9925:3): move %"class.std::__cxx11::basic_string"* result from %rax
	movq %rax, %rbx
	# Unclobber %rax
	movq -120(%rbp), %rax
	# LowerLoad(9926:3).2: (^9) into %"struct.std::_Rb_tree_node_base"* ^28
	movq -96(%rbp), %rcx
	movq (%rcx), %rax
	# Clobber %rax
	movq %rax, -120(%rbp)
	# SetupCalls(9927:3): move argument %"struct.std::_Rb_tree_node_base"* ^28
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE6_S_keyEPKSt18_Rb_tree_node_base
	# SetupCalls(9927:3): move %"class.std::__cxx11::basic_string"* result from %rax
	movq %rax, %r12
	# Unclobber %rax
	movq -120(%rbp), %rax
	# SetupCalls(9928:3): move argument %"struct.std::less"* nonnull dereferenceable(1) align 1 ^25
	# Fixed movzx with identical source and destination widths
	movq %r13, %rdi
	# SetupCalls(9928:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^27
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(9928:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^29
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdx
	callq _ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_
	# SetupCalls(9928:3): move i1 result from %rax
	movb %al, %bl
	# MovePhi: ^30 -> ^32
	movb %bl, -112(%rbp)
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE10_M_insert_IRKSI_NSO_11_Alloc_nodeEEESt17_Rb_tree_iteratorISI_EPSt18_Rb_tree_node_baseSW_OT_RT0___M165:
	# LowerBasicConversion(9933:3): i1 ^32 -> i8 ^33
	movb -112(%rbp), %al
	# LowerStore(9934:3).9: mov i8 ^33, (^12)
	movq -104(%rbp), %rbx
	movb %al, (%rbx)
	# LowerLoad(9935:3).2: (^11) into %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Alloc_node"* ^34
	movq (%r15), %rax
	# LowerLoad(9936:3).2: (^10) into %"struct.std::pair"* ^35
	movq (%r14), %rbx
	# Clobber %rax
	movq %rax, -120(%rbp)
	# SetupCalls(9937:3): move argument %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Alloc_node"* nonnull dereferenceable(8) align 8 ^34
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(9937:3): move argument %"struct.std::pair"* nonnull dereferenceable(64) align 8 ^35
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE11_Alloc_nodeclIRKSI_EEPSt13_Rb_tree_nodeISI_EOT_
	# SetupCalls(9937:3): move %"struct.std::_Rb_tree_node"* result from %rax
	movq %rax, %rbx
	# Unclobber %rax
	movq -120(%rbp), %rax
	# LowerStore(9938:3).9: mov %"struct.std::_Rb_tree_node"* ^36, (^14)
	movq -80(%rbp), %rax
	movq %rbx, (%rax)
	# LowerLoad(9939:3).2: (^12) into i8 ^37
	movq -104(%rbp), %rax
	movb (%rax), %bl
	# LowerTrunc(9940:3): 8 to 1, move
	movb %bl, %cl
	# LowerTrunc(9940:3): 8 to 1, apply mask
	andq $1, %rcx
	# LowerLoad(9941:3).2: (^14) into %"struct.std::_Rb_tree_node"* ^39
	movq -80(%rbp), %rax
	movq (%rax), %rbx
	# LowerBasicConversion(9942:3): %"struct.std::_Rb_tree_node"* ^39 -> %"struct.std::_Rb_tree_node_base"* ^40
	movq %rbx, %rdx
	# LowerLoad(9943:3).2: (^9) into %"struct.std::_Rb_tree_node_base"* ^41
	movq -96(%rbp), %rax
	movq (%rax), %rbx
	# tt = Pointer, type = %"class.std::_Rb_tree"
	# LowerGetelementptr(9944:3): struct-type: %"class.std::_Rb_tree"* ^15 -> ^42, indices=0,0
	movq -88(%rbp), %rax
	# LowerGetelementptr(9944:3): type of ^42 is %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Rb_tree_impl"*
	# LowerBasicConversion(9945:3): %"class.std::_Rb_tree"* ^42 -> i8* ^43
	movq %rax, %rsi
	# tt = Pointer, type = i8
	# LowerGetelementptr(9946:3): struct-type: i8* ^43 -> ^44, indices=8
	movq %rsi, %rax
	addq $8, %rax
	# LowerGetelementptr(9946:3): type of ^44 is i8*
	# LowerBasicConversion(9947:3): i8* ^44 -> %"struct.std::_Rb_tree_header"* ^45
	movq %rax, %rsi
	# tt = Pointer, type = %"struct.std::_Rb_tree_header"
	# LowerGetelementptr(9948:3): struct-type: %"struct.std::_Rb_tree_header"* ^45 -> ^46, indices=0,0
	movq %rsi, %rax
	# LowerGetelementptr(9948:3): type of ^46 is %"struct.std::_Rb_tree_node_base"*
	# Clobber %rdx
	movq %rdx, -128(%rbp)
	# Clobber %rcx
	movq %rcx, -136(%rbp)
	# Clobber %rax
	movq %rax, -120(%rbp)
	# SetupCalls(9949:3): move argument i1 zeroext ^38
	movzbq %cl, %rdi
	andq $1, %rdi
	# SetupCalls(9949:3): move argument %"struct.std::_Rb_tree_node_base"* ^40
	# Fixed movzx with identical source and destination widths
	movq %rdx, %rsi
	# SetupCalls(9949:3): move argument %"struct.std::_Rb_tree_node_base"* ^41
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdx
	# SetupCalls(9949:3): move argument %"struct.std::_Rb_tree_node_base"* nonnull dereferenceable(32) align 8 ^46
	# Fixed movzx with identical source and destination widths
	movq %rax, %rcx
	callq _ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_@PLT
	# Unclobber %rax
	movq -120(%rbp), %rax
	# Unclobber %rcx
	movq -136(%rbp), %rcx
	# Unclobber %rdx
	movq -128(%rbp), %rdx
	# tt = Pointer, type = %"class.std::_Rb_tree"
	# LowerGetelementptr(9950:3): struct-type: %"class.std::_Rb_tree"* ^15 -> ^47, indices=0,0
	movq -88(%rbp), %rax
	# LowerGetelementptr(9950:3): type of ^47 is %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::function<int (const std::vector<std::basic_string_view<char>> &)>>>, std::less<std::__cxx11::basic_string<char>>>::_Rb_tree_impl"*
	# LowerBasicConversion(9951:3): %"class.std::_Rb_tree"* ^47 -> i8* ^48
	movq %rax, %rbx
	# tt = Pointer, type = i8
	# LowerGetelementptr(9952:3): struct-type: i8* ^48 -> ^49, indices=8
	movq %rbx, %rax
	addq $8, %rax
	# LowerGetelementptr(9952:3): type of ^49 is i8*
	# LowerBasicConversion(9953:3): i8* ^49 -> %"struct.std::_Rb_tree_header"* ^50
	movq %rax, %rbx
	# tt = Pointer, type = %"struct.std::_Rb_tree_header"
	# LowerGetelementptr(9954:3): struct-type: %"struct.std::_Rb_tree_header"* ^50 -> ^51, indices=0,1
	movq %rbx, %rax
	addq $32, %rax
	# LowerGetelementptr(9954:3): type of ^51 is i64*
	# LowerLoad(9955:3).2: (^51) into i64 ^52
	movq (%rax), %rbx
	# LowerMath(9956:3): ^52, 1 into i64 ^53
	movq %rbx, %rcx
	addq $1, %rcx
	# LowerStore(9957:3).9: mov i64 ^53, (^51)
	movq %rcx, (%rax)
	# LowerLoad(9958:3).2: (^14) into %"struct.std::_Rb_tree_node"* ^54
	movq -80(%rbp), %rax
	movq (%rax), %rbx
	# LowerBasicConversion(9959:3): %"struct.std::_Rb_tree_node"* ^54 -> %"struct.std::_Rb_tree_node_base"* ^55
	movq %rbx, %rax
	# Clobber %rax
	movq %rax, -120(%rbp)
	# SetupCalls(9960:3): move argument %"struct.std::_Rb_tree_iterator"* nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq -72(%rbp), %rdi
	# SetupCalls(9960:3): move argument %"struct.std::_Rb_tree_node_base"* ^55
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEEC2EPSt18_Rb_tree_node_base
	# Unclobber %rax
	movq -120(%rbp), %rax
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(9961:3): struct-type: %"struct.std::_Rb_tree_iterator"* ^6 -> ^56, indices=0,0
	movq -72(%rbp), %rax
	# LowerGetelementptr(9961:3): type of ^56 is %"struct.std::_Rb_tree_node_base"**
	# LowerLoad(9962:3).2: (^56) into %"struct.std::_Rb_tree_node_base"* ^57
	movq (%rax), %rbx
	movq %rbx, %rax
	movq -144(%rbp), %r15
	movq -168(%rbp), %r14
	movq -224(%rbp), %r13
	movq -192(%rbp), %r12
	movq -152(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt8__detail14_Quoted_stringIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEC2ES8_cc
.p2align 4, 0x90
_ZNSt8__detail14_Quoted_stringIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEC2ES8_cc:
	.___ZNSt8__detail14_Quoted_stringIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEC2ES8_cc__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(40 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	# LowerAlloca(6656:3): size = 8, type = %"struct.std::__detail::_Quoted_string"**, var = ^5
	leaq -8(%rbp), %r9
	# LowerAlloca(6657:3): size = 8, type = %"class.std::__cxx11::basic_string"**, var = ^6
	leaq -16(%rbp), %r8
	# LowerAlloca(6658:3): size = 1, type = i8*, var = ^7
	leaq -17(%rbp), %rbx
	# LowerAlloca(6659:3): size = 1, type = i8*, var = ^8
	leaq -18(%rbp), %rax
	# LowerStore(6660:3).9: mov %"struct.std::__detail::_Quoted_string"* %rdi, (^5)
	movq %rdi, (%r9)
	# LowerStore(6661:3).9: mov %"class.std::__cxx11::basic_string"* %rsi, (^6)
	movq %rsi, (%r8)
	# LowerStore(6662:3).9: mov i8 %dl, (^7)
	movb %dl, (%rbx)
	# LowerStore(6663:3).9: mov i8 %cl, (^8)
	movb %cl, (%rax)
	# LowerLoad(6664:3).2: (^5) into %"struct.std::__detail::_Quoted_string"* ^9
	movq (%r9), %rsi
	# tt = Pointer, type = %"struct.std::__detail::_Quoted_string"
	# LowerGetelementptr(6665:3): struct-type: %"struct.std::__detail::_Quoted_string"* ^9 -> ^10, indices=0,0
	movq %rsi, %rcx
	# LowerGetelementptr(6665:3): type of ^10 is %"class.std::__cxx11::basic_string"**
	# LowerLoad(6666:3).2: (^6) into %"class.std::__cxx11::basic_string"* ^11
	movq (%r8), %rdx
	# LowerStore(6667:3).9: mov %"class.std::__cxx11::basic_string"* ^11, (^10)
	movq %rdx, (%rcx)
	# tt = Pointer, type = %"struct.std::__detail::_Quoted_string"
	# LowerGetelementptr(6668:3): struct-type: %"struct.std::__detail::_Quoted_string"* ^9 -> ^12, indices=0,1
	movq %rsi, %rdx
	addq $8, %rdx
	# LowerGetelementptr(6668:3): type of ^12 is i8*
	# LowerLoad(6669:3).2: (^7) into i8 ^13
	movb (%rbx), %cl
	# LowerStore(6670:3).9: mov i8 ^13, (^12)
	movb %cl, (%rdx)
	# tt = Pointer, type = %"struct.std::__detail::_Quoted_string"
	# LowerGetelementptr(6671:3): struct-type: %"struct.std::__detail::_Quoted_string"* ^9 -> ^14, indices=0,2
	movq %rsi, %rbx
	addq $9, %rbx
	# LowerGetelementptr(6671:3): type of ^14 is i8*
	# LowerLoad(6672:3).2: (^8) into i8 ^15
	movb (%rax), %cl
	# LowerStore(6673:3).9: mov i8 ^15, (^14)
	movb %cl, (%rbx)
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt12_Vector_baseI6LsItemSaIS0_EED2Ev
.p2align 4, 0x90
_ZNSt12_Vector_baseI6LsItemSaIS0_EED2Ev:
	.___ZNSt12_Vector_baseI6LsItemSaIS0_EED2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(48 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -40(%rbp)
	movq %r12, -32(%rbp)
	# LowerAlloca(6689:3): size = 8, type = %"struct.std::_Vector_base.6"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(6690:3).9: mov %"struct.std::_Vector_base.6"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(6691:3).2: (^2) into %"struct.std::_Vector_base.6"* ^3
	movq (%rax), %r12
	# tt = Pointer, type = %"struct.std::_Vector_base.6"
	# LowerGetelementptr(6692:3): struct-type: %"struct.std::_Vector_base.6"* ^3 -> ^4, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(6692:3): type of ^4 is %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl"*
	# LowerBasicConversion(6693:3): %"struct.std::_Vector_base.6"* ^4 -> %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"* ^5
	movq %rax, %rbx
	# tt = Pointer, type = %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"
	# LowerGetelementptr(6694:3): struct-type: %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"* ^5 -> ^6, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(6694:3): type of ^6 is %struct.LsItem**
	# LowerLoad(6695:3).2: (^6) into %struct.LsItem* ^7
	movq (%rax), %rbx
	# tt = Pointer, type = %"struct.std::_Vector_base.6"
	# LowerGetelementptr(6696:3): struct-type: %"struct.std::_Vector_base.6"* ^3 -> ^8, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(6696:3): type of ^8 is %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl"*
	# LowerBasicConversion(6697:3): %"struct.std::_Vector_base.6"* ^8 -> %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"* ^9
	movq %rax, %rcx
	# tt = Pointer, type = %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"
	# LowerGetelementptr(6698:3): struct-type: %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"* ^9 -> ^10, indices=0,2
	movq %rcx, %rax
	addq $16, %rax
	# LowerGetelementptr(6698:3): type of ^10 is %struct.LsItem**
	# LowerLoad(6699:3).2: (^10) into %struct.LsItem* ^11
	movq (%rax), %rdx
	# tt = Pointer, type = %"struct.std::_Vector_base.6"
	# LowerGetelementptr(6700:3): struct-type: %"struct.std::_Vector_base.6"* ^3 -> ^12, indices=0,0
	movq %r12, %rcx
	# LowerGetelementptr(6700:3): type of ^12 is %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl"*
	# LowerBasicConversion(6701:3): %"struct.std::_Vector_base.6"* ^12 -> %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"* ^13
	movq %rcx, %rax
	# tt = Pointer, type = %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"
	# LowerGetelementptr(6702:3): struct-type: %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"* ^13 -> ^14, indices=0,0
	movq %rax, %rcx
	# LowerGetelementptr(6702:3): type of ^14 is %struct.LsItem**
	# LowerLoad(6703:3).2: (^14) into %struct.LsItem* ^15
	movq (%rcx), %rax
	# LowerBasicConversion(6704:3): %struct.LsItem* ^11 -> i64 ^16
	movq %rdx, %rcx
	# LowerBasicConversion(6705:3): %struct.LsItem* ^15 -> i64 ^17
	movq %rax, %rdx
	# LowerMath(6706:3): ^16, ^17 into i64 ^18
	movq %rcx, %rax
	subq %rdx, %rax
	# LowerSdiv(6707:3): ^18, 40 into i64 ^19
	movq %rax, %rcx
	movq $0, %rdx
	movq %rcx, %rax
	movq $40, %rcx
	idivq %rcx
	movq %rax, %rcx
	# Clobber %rcx
	movq %rcx, -16(%rbp)
	# SetupCalls(6708:3): move argument %"struct.std::_Vector_base.6"* nonnull dereferenceable(24) align 8 ^3
	# Fixed movzx with identical source and destination widths
	movq %r12, %rdi
	# SetupCalls(6708:3): move argument %struct.LsItem* ^7
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	# SetupCalls(6708:3): move argument i64 ^19
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdx
	callq _ZNSt12_Vector_baseI6LsItemSaIS0_EE13_M_deallocateEPS0_m
	# Unclobber %rcx
	movq -16(%rbp), %rcx
	# tt = Pointer, type = %"struct.std::_Vector_base.6"
	# LowerGetelementptr(6709:3): struct-type: %"struct.std::_Vector_base.6"* ^3 -> ^20, indices=0,0
	movq %r12, %rax
	# LowerGetelementptr(6709:3): type of ^20 is %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl"*
	# Clobber %rax
	movq %rax, -24(%rbp)
	# SetupCalls(6710:3): move argument %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl"* nonnull dereferenceable(24) align 8 ^20
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt12_Vector_baseI6LsItemSaIS0_EE12_Vector_implD2Ev
	# Unclobber %rax
	movq -24(%rbp), %rax
	movq -32(%rbp), %r12
	movq -40(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findES2_m
.p2align 4, 0x90
_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findES2_m:
	.___ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findES2_m__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(88 + 0, 16)
	subq $96, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -72(%rbp)
	# LowerAlloca(1023:3): size = 16, type = %"class.std::basic_string_view"*, var = ^5
	leaq -16(%rbp), %r9
	# LowerAlloca(1024:3): size = 8, type = %"class.std::basic_string_view"**, var = ^6
	leaq -24(%rbp), %r8
	# LowerAlloca(1025:3): size = 8, type = i64*, var = ^7
	leaq -32(%rbp), %rbx
	# LowerBasicConversion(1026:3): %"class.std::basic_string_view"* ^5 -> {i64, i8*}* ^8
	movq %r9, %rax
	# tt = Pointer, type = {i64, i8*}
	# LowerGetelementptr(1027:3): struct-type: {i64, i8*}* ^8 -> ^9, indices=0,0
	movq %rax, %r10
	# LowerGetelementptr(1027:3): type of ^9 is i64*
	# LowerStore(1028:3).9: mov i64 %rsi, (^9)
	movq %rsi, (%r10)
	# tt = Pointer, type = {i64, i8*}
	# LowerGetelementptr(1029:3): struct-type: {i64, i8*}* ^8 -> ^10, indices=0,1
	movq %rax, %rsi
	addq $8, %rsi
	# LowerGetelementptr(1029:3): type of ^10 is i8**
	# LowerStore(1030:3).9: mov i8* %rdx, (^10)
	movq %rdx, (%rsi)
	# LowerStore(1031:3).9: mov %"class.std::basic_string_view"* %rdi, (^6)
	movq %rdi, (%r8)
	# LowerStore(1032:3).9: mov i64 %rcx, (^7)
	movq %rcx, (%rbx)
	# LowerLoad(1033:3).2: (^6) into %"class.std::basic_string_view"* ^11
	movq (%r8), %rdx
	# tt = Pointer, type = %"class.std::basic_string_view"
	# LowerGetelementptr(1034:3): struct-type: %"class.std::basic_string_view"* ^5 -> ^12, indices=0,1
	movq %r9, %rcx
	addq $8, %rcx
	# LowerGetelementptr(1034:3): type of ^12 is i8**
	# LowerLoad(1035:3).2: (^12) into i8* ^13
	movq (%rcx), %rax
	# LowerLoad(1036:3).2: (^7) into i64 ^14
	movq (%rbx), %rcx
	# tt = Pointer, type = %"class.std::basic_string_view"
	# LowerGetelementptr(1037:3): struct-type: %"class.std::basic_string_view"* ^5 -> ^15, indices=0,0
	movq %r9, %rbx
	# LowerGetelementptr(1037:3): type of ^15 is i64*
	# LowerLoad(1038:3).2: (^15) into i64 ^16
	movq (%rbx), %r8
	# Clobber %rdx
	movq %rdx, -40(%rbp)
	# Clobber %rcx
	movq %rcx, -48(%rbp)
	# Clobber %r8
	movq %r8, -56(%rbp)
	# Clobber %rax
	movq %rax, -64(%rbp)
	# SetupCalls(1039:3): move argument %"class.std::basic_string_view"* nonnull dereferenceable(16) align 8 ^11
	# Fixed movzx with identical source and destination widths
	movq %rdx, %rdi
	# SetupCalls(1039:3): move argument i8* ^13
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(1039:3): move argument i64 ^14
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdx
	# SetupCalls(1039:3): move argument i64 ^16
	# Fixed movzx with identical source and destination widths
	movq %r8, %rcx
	callq _ZNKSt17basic_string_viewIcSt11char_traitsIcEE4findEPKcmm
	# SetupCalls(1039:3): move i64 result from %rax
	movq %rax, %rbx
	# Unclobber %rax
	movq -64(%rbp), %rax
	# Unclobber %r8
	movq -56(%rbp), %r8
	# Unclobber %rcx
	movq -48(%rbp), %rcx
	# Unclobber %rdx
	movq -40(%rbp), %rdx
	movq %rbx, %rax
	movq -72(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt8_DestroyIP6LsItemEvT_S2_
.p2align 4, 0x90
_ZSt8_DestroyIP6LsItemEvT_S2_:
	.___ZSt8_DestroyIP6LsItemEvT_S2___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(40 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	# LowerAlloca(6716:3): size = 8, type = %struct.LsItem**, var = ^3
	leaq -8(%rbp), %rbx
	# LowerAlloca(6717:3): size = 8, type = %struct.LsItem**, var = ^4
	leaq -16(%rbp), %rax
	# LowerStore(6718:3).9: mov %struct.LsItem* %rdi, (^3)
	movq %rdi, (%rbx)
	# LowerStore(6719:3).9: mov %struct.LsItem* %rsi, (^4)
	movq %rsi, (%rax)
	# LowerLoad(6720:3).2: (^3) into %struct.LsItem* ^5
	movq (%rbx), %rcx
	# LowerLoad(6721:3).2: (^4) into %struct.LsItem* ^6
	movq (%rax), %rbx
	# Clobber %rcx
	movq %rcx, -24(%rbp)
	# SetupCalls(6722:3): move argument %struct.LsItem* ^5
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(6722:3): move argument %struct.LsItem* ^6
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZNSt12_Destroy_auxILb0EE9__destroyIP6LsItemEEvT_S4_
	# Unclobber %rcx
	movq -24(%rbp), %rcx
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt12_Destroy_auxILb0EE9__destroyIP6LsItemEEvT_S4_
.p2align 4, 0x90
_ZNSt12_Destroy_auxILb0EE9__destroyIP6LsItemEEvT_S4_:
	.___ZNSt12_Destroy_auxILb0EE9__destroyIP6LsItemEEvT_S4___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(40 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -40(%rbp)
	movq %r12, -32(%rbp)
	# LowerAlloca(6728:3): size = 8, type = %struct.LsItem**, var = ^3
	leaq -8(%rbp), %r12
	# LowerAlloca(6729:3): size = 8, type = %struct.LsItem**, var = ^4
	leaq -16(%rbp), %rbx
	# LowerStore(6730:3).9: mov %struct.LsItem* %rdi, (^3)
	movq %rdi, (%r12)
	# LowerStore(6731:3).9: mov %struct.LsItem* %rsi, (^4)
	movq %rsi, (%rbx)
	.___ZNSt12_Destroy_auxILb0EE9__destroyIP6LsItemEEvT_S4___M9:
	# LowerLoad(6735:3).2: (^3) into %struct.LsItem* ^6
	movq (%r12), %rcx
	# LowerLoad(6736:3).2: (^4) into %struct.LsItem* ^7
	movq (%rbx), %rax
	# LowerIcmp(6737:3): %struct.LsItem* ^6 vs. operand %struct.LsItem* ^7
	cmpq %rax, %rcx
	setne %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt12_Destroy_auxILb0EE9__destroyIP6LsItemEEvT_S4___M18
	jmp .___ZNSt12_Destroy_auxILb0EE9__destroyIP6LsItemEEvT_S4___M52
	.___ZNSt12_Destroy_auxILb0EE9__destroyIP6LsItemEEvT_S4___M18:
	# LowerLoad(6741:3).2: (^3) into %struct.LsItem* ^10
	movq (%r12), %rax
	# Clobber %rax
	movq %rax, -24(%rbp)
	# SetupCalls(6742:3): move argument %struct.LsItem* ^10
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZSt8_DestroyI6LsItemEvPT_
	# Unclobber %rax
	movq -24(%rbp), %rax
	# LowerLoad(6746:3).2: (^3) into %struct.LsItem* ^12
	movq (%r12), %rcx
	# tt = Pointer, type = %struct.LsItem
	# LowerGetelementptr(6747:3): struct-type: %struct.LsItem* ^12 -> ^13, indices=1
	movq %rcx, %rax
	addq $40, %rax
	# LowerGetelementptr(6747:3): type of ^13 is %struct.LsItem*
	# LowerStore(6748:3).9: mov %struct.LsItem* ^13, (^3)
	movq %rax, (%r12)
	jmp .___ZNSt12_Destroy_auxILb0EE9__destroyIP6LsItemEEvT_S4___M9
	.___ZNSt12_Destroy_auxILb0EE9__destroyIP6LsItemEEvT_S4___M52:
	movq -32(%rbp), %r12
	movq -40(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZSt10_ConstructISt17basic_string_viewIcSt11char_traitsIcEEJRKS3_EEvPT_DpOT0_
.p2align 4, 0x90
_ZSt10_ConstructISt17basic_string_viewIcSt11char_traitsIcEEJRKS3_EEvPT_DpOT0_:
	.___ZSt10_ConstructISt17basic_string_viewIcSt11char_traitsIcEEJRKS3_EEvPT_DpOT0___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(40 + 0, 16)
	subq $48, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	# LowerAlloca(5340:3): size = 8, type = %"class.std::basic_string_view"**, var = ^3
	leaq -8(%rbp), %rax
	# LowerAlloca(5341:3): size = 8, type = %"class.std::basic_string_view"**, var = ^4
	leaq -16(%rbp), %rbx
	# LowerStore(5342:3).9: mov %"class.std::basic_string_view"* %rdi, (^3)
	movq %rdi, (%rax)
	# LowerStore(5343:3).9: mov %"class.std::basic_string_view"* %rsi, (^4)
	movq %rsi, (%rbx)
	# LowerLoad(5344:3).2: (^3) into %"class.std::basic_string_view"* ^5
	movq (%rax), %rcx
	# LowerBasicConversion(5345:3): %"class.std::basic_string_view"* ^5 -> i8* ^6
	movq %rcx, %rax
	# LowerBasicConversion(5346:3): i8* ^6 -> %"class.std::basic_string_view"* ^7
	movq %rax, %rcx
	# LowerLoad(5347:3).2: (^4) into %"class.std::basic_string_view"* ^8
	movq (%rbx), %rax
	# LowerBasicConversion(5348:3): %"class.std::basic_string_view"* ^7 -> i8* ^9
	movq %rcx, %rbx
	# LowerBasicConversion(5349:3): %"class.std::basic_string_view"* ^8 -> i8* ^10
	movq %rax, %rcx
	# Clobber %rcx
	movq %rcx, -24(%rbp)
	# SetupCalls(5350:3): move argument i8* align 8 ^9
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(5350:3): move argument i8* align 8 ^10
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(5350:3): move argument i64 16
	movq $16, %rdx
	callq memcpy@PLT
	# Unclobber %rcx
	movq -24(%rbp), %rcx
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZN6LsItemD2Ev
.p2align 4, 0x90
_ZN6LsItemD2Ev:
	.___ZN6LsItemD2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(24 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(6766:3): size = 8, type = %struct.LsItem**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(6767:3).9: mov %struct.LsItem* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(6768:3).2: (^2) into %struct.LsItem* ^3
	movq (%rax), %rbx
	# tt = Pointer, type = %struct.LsItem
	# LowerGetelementptr(6769:3): struct-type: %struct.LsItem* ^3 -> ^4, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(6769:3): type of ^4 is %"class.std::__cxx11::basic_string"*
	# Clobber %rax
	movq %rax, -16(%rbp)
	# SetupCalls(6770:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^4
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
	# Unclobber %rax
	movq -16(%rbp), %rax
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNKSt8functionIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEEclES8_
.p2align 4, 0x90
_ZNKSt8functionIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEEclES8_:
	.___ZNKSt8functionIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEEclES8___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(72 + 0, 16)
	subq $80, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -48(%rbp)
	movq %r12, -64(%rbp)
	movq %r13, -56(%rbp)
	# LowerAlloca(2751:3): size = 8, type = %"class.std::function"**, var = ^3
	leaq -8(%rbp), %rax
	# LowerAlloca(2752:3): size = 8, type = %"class.std::vector"**, var = ^4
	leaq -16(%rbp), %rbx
	# LowerStore(2753:3).9: mov %"class.std::function"* %rdi, (^3)
	movq %rdi, (%rax)
	# LowerStore(2754:3).9: mov %"class.std::vector"* %rsi, (^4)
	movq %rsi, (%rbx)
	# LowerLoad(2755:3).2: (^3) into %"class.std::function"* ^5
	movq (%rax), %r13
	# LowerBasicConversion(2756:3): %"class.std::function"* ^5 -> %"class.std::_Function_base"* ^6
	movq %r13, %rax
	# Clobber %rax
	movq %rax, -24(%rbp)
	# SetupCalls(2757:3): move argument %"class.std::_Function_base"* nonnull dereferenceable(24) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNKSt14_Function_base8_M_emptyEv
	# SetupCalls(2757:3): move i1 result from %rax
	movb %al, %r12b
	# Unclobber %rax
	movq -24(%rbp), %rax
	cmpb $0, %r12b
	jne .___ZNKSt8functionIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEEclES8___M36
	jmp .___ZNKSt8functionIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEEclES8___M56
	.___ZNKSt8functionIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEEclES8___M36:
	callq _ZSt25__throw_bad_function_callv@PLT
	.___ZNKSt8functionIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEEclES8___M56:
	# tt = Pointer, type = %"class.std::function"
	# LowerGetelementptr(2765:3): struct-type: %"class.std::function"* ^5 -> ^10, indices=0,1
	movq %r13, %rax
	addq $24, %rax
	# LowerGetelementptr(2765:3): type of ^10 is i32 (%"union.std::_Any_data"*, %"class.std::vector"*) ***
	# LowerLoad(2766:3).2: (^10) into i32 (%"union.std::_Any_data"*, %"class.std::vector"*) ** ^11
	movq (%rax), %rdx
	# LowerBasicConversion(2767:3): %"class.std::function"* ^5 -> %"class.std::_Function_base"* ^12
	movq %r13, %rcx
	# tt = Pointer, type = %"class.std::_Function_base"
	# LowerGetelementptr(2768:3): struct-type: %"class.std::_Function_base"* ^12 -> ^13, indices=0,0
	movq %rcx, %rax
	# LowerGetelementptr(2768:3): type of ^13 is %"union.std::_Any_data"*
	# LowerLoad(2769:3).2: (^4) into %"class.std::vector"* ^14
	movq (%rbx), %rcx
	# Clobber %rdx
	movq %rdx, -32(%rbp)
	# Clobber %rcx
	movq %rcx, -40(%rbp)
	# Clobber %rax
	movq %rax, -24(%rbp)
	# SetupCalls(2770:3): move argument %"union.std::_Any_data"* nonnull dereferenceable(16) align 8 ^13
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(2770:3): move argument %"class.std::vector"* nonnull dereferenceable(24) align 8 ^14
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	# SetupCalls(2770:3): jump to function operand ^11
	callq *%rdx
	# SetupCalls(2770:3): move i32 result from %rax
	movl %eax, %ebx
	# Unclobber %rax
	movq -24(%rbp), %rax
	# Unclobber %rcx
	movq -40(%rbp), %rcx
	# Unclobber %rdx
	movq -32(%rbp), %rdx
	movl %ebx, %eax
	movq -56(%rbp), %r13
	movq -64(%rbp), %r12
	movq -48(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZStneRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEESL_
.p2align 4, 0x90
_ZStneRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEESL_:
	.___ZStneRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS4_ESaISB_EEEEEESL___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(32 + 0, 16)
	subq $32, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -24(%rbp)
	# LowerAlloca(2708:3): size = 8, type = %"struct.std::_Rb_tree_iterator"**, var = ^3
	leaq -8(%rbp), %rax
	# LowerAlloca(2709:3): size = 8, type = %"struct.std::_Rb_tree_iterator"**, var = ^4
	leaq -16(%rbp), %rbx
	# LowerStore(2710:3).9: mov %"struct.std::_Rb_tree_iterator"* %rdi, (^3)
	movq %rdi, (%rax)
	# LowerStore(2711:3).9: mov %"struct.std::_Rb_tree_iterator"* %rsi, (^4)
	movq %rsi, (%rbx)
	# LowerLoad(2712:3).2: (^3) into %"struct.std::_Rb_tree_iterator"* ^5
	movq (%rax), %rcx
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(2713:3): struct-type: %"struct.std::_Rb_tree_iterator"* ^5 -> ^6, indices=0,0
	movq %rcx, %rax
	# LowerGetelementptr(2713:3): type of ^6 is %"struct.std::_Rb_tree_node_base"**
	# LowerLoad(2714:3).2: (^6) into %"struct.std::_Rb_tree_node_base"* ^7
	movq (%rax), %rcx
	# LowerLoad(2715:3).2: (^4) into %"struct.std::_Rb_tree_iterator"* ^8
	movq (%rbx), %rax
	# tt = Pointer, type = %"struct.std::_Rb_tree_iterator"
	# LowerGetelementptr(2716:3): struct-type: %"struct.std::_Rb_tree_iterator"* ^8 -> ^9, indices=0,0
	movq %rax, %rbx
	# LowerGetelementptr(2716:3): type of ^9 is %"struct.std::_Rb_tree_node_base"**
	# LowerLoad(2717:3).2: (^9) into %"struct.std::_Rb_tree_node_base"* ^10
	movq (%rbx), %rax
	# LowerIcmp(2718:3): %"struct.std::_Rb_tree_node_base"* ^7 vs. operand %"struct.std::_Rb_tree_node_base"* ^10
	cmpq %rax, %rcx
	setne %al
	andq $1, %rax
	movq -24(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt12_Vector_baseI6LsItemSaIS0_EE13_M_deallocateEPS0_m
.p2align 4, 0x90
_ZNSt12_Vector_baseI6LsItemSaIS0_EE13_M_deallocateEPS0_m:
	.___ZNSt12_Vector_baseI6LsItemSaIS0_EE13_M_deallocateEPS0_m__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(80 + 0, 16)
	subq $80, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -72(%rbp)
	# LowerAlloca(6776:3): size = 8, type = %"class.std::allocator.7"**, var = ^4
	leaq -8(%rbp), %rbx
	# LowerAlloca(6777:3): size = 8, type = %struct.LsItem**, var = ^5
	leaq -16(%rbp), %r9
	# LowerAlloca(6778:3): size = 8, type = i64*, var = ^6
	leaq -24(%rbp), %r8
	# LowerAlloca(6779:3): size = 8, type = %"struct.std::_Vector_base.6"**, var = ^7
	leaq -32(%rbp), %rcx
	# LowerAlloca(6780:3): size = 8, type = %struct.LsItem**, var = ^8
	leaq -40(%rbp), %rax
	# LowerAlloca(6781:3): size = 8, type = i64*, var = ^9
	leaq -48(%rbp), %r10
	# LowerStore(6782:3).9: mov %"struct.std::_Vector_base.6"* %rdi, (^7)
	movq %rdi, (%rcx)
	# LowerStore(6783:3).9: mov %struct.LsItem* %rsi, (^8)
	movq %rsi, (%rax)
	# LowerStore(6784:3).9: mov i64 %rdx, (^9)
	movq %rdx, (%r10)
	# LowerLoad(6785:3).2: (^7) into %"struct.std::_Vector_base.6"* ^10
	movq (%rcx), %rdx
	# LowerLoad(6786:3).2: (^8) into %struct.LsItem* ^11
	movq (%rax), %rcx
	# LowerIcmp(6787:3): %struct.LsItem* ^11 vs. intlike 0
	cmpq $0, %rcx
	setne %cl
	andq $1, %rcx
	cmpb $0, %cl
	jne .___ZNSt12_Vector_baseI6LsItemSaIS0_EE13_M_deallocateEPS0_m__M27
	jmp .___ZNSt12_Vector_baseI6LsItemSaIS0_EE13_M_deallocateEPS0_m__M77
	.___ZNSt12_Vector_baseI6LsItemSaIS0_EE13_M_deallocateEPS0_m__M27:
	# tt = Pointer, type = %"struct.std::_Vector_base.6"
	# LowerGetelementptr(6791:3): struct-type: %"struct.std::_Vector_base.6"* ^10 -> ^14, indices=0,0
	movq %rdx, %rcx
	# LowerGetelementptr(6791:3): type of ^14 is %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl"*
	# LowerBasicConversion(6792:3): %"struct.std::_Vector_base.6"* ^14 -> %"class.std::allocator.7"* ^15
	movq %rcx, %rdx
	# LowerLoad(6793:3).2: (^8) into %struct.LsItem* ^16
	movq (%rax), %rcx
	# LowerLoad(6794:3).2: (^9) into i64 ^17
	movq (%r10), %rax
	# LowerStore(6795:3).9: mov %"class.std::allocator.7"* ^15, (^4)
	movq %rdx, (%rbx)
	# LowerStore(6796:3).9: mov %struct.LsItem* ^16, (^5)
	movq %rcx, (%r9)
	# LowerStore(6797:3).9: mov i64 ^17, (^6)
	movq %rax, (%r8)
	# LowerLoad(6798:3).2: (^4) into %"class.std::allocator.7"* ^18
	movq (%rbx), %rax
	# LowerBasicConversion(6799:3): %"class.std::allocator.7"* ^18 -> %"class.std::__new_allocator.8"* ^19
	movq %rax, %rbx
	# LowerLoad(6800:3).2: (^5) into %struct.LsItem* ^20
	movq (%r9), %rax
	# LowerLoad(6801:3).2: (^6) into i64 ^21
	movq (%r8), %rcx
	# Clobber %rcx
	movq %rcx, -56(%rbp)
	# Clobber %rax
	movq %rax, -64(%rbp)
	# SetupCalls(6802:3): move argument %"class.std::__new_allocator.8"* nonnull dereferenceable(1) align 1 ^19
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(6802:3): move argument %struct.LsItem* ^20
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(6802:3): move argument i64 ^21
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdx
	callq _ZNSt15__new_allocatorI6LsItemE10deallocateEPS0_m
	# Unclobber %rax
	movq -64(%rbp), %rax
	# Unclobber %rcx
	movq -56(%rbp), %rcx
	.___ZNSt12_Vector_baseI6LsItemSaIS0_EE13_M_deallocateEPS0_m__M77:
	movq -72(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt6vectorI6LsItemSaIS0_EED2Ev
.p2align 4, 0x90
_ZNSt6vectorI6LsItemSaIS0_EED2Ev:
	.___ZNSt6vectorI6LsItemSaIS0_EED2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(120 + 0, 16)
	subq $128, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -80(%rbp)
	movq %r12, -72(%rbp)
	movq %r13, -96(%rbp)
	movq %r14, -104(%rbp)
	movq %r15, -64(%rbp)
	# LowerAlloca(1976:3): size = 8, type = %struct.LsItem**, var = ^2
	# Fixing source-to-dest leaq -8(%rbp), -48(%rbp)
	leaq -8(%rbp), %r15
	movq %r15, -48(%rbp)
	# LowerAlloca(1977:3): size = 8, type = %struct.LsItem**, var = ^3
	leaq -16(%rbp), %r12
	# LowerAlloca(1978:3): size = 8, type = %"class.std::allocator.7"**, var = ^4
	leaq -24(%rbp), %rbx
	# LowerAlloca(1979:3): size = 8, type = %"class.std::vector.5"**, var = ^5
	leaq -32(%rbp), %rcx
	# LowerStore(1980:3).9: mov %"class.std::vector.5"* %rdi, (^5)
	movq %rdi, (%rcx)
	# LowerLoad(1981:3).2: (^5) into %"class.std::vector.5"* ^6
	# Fixing source-to-dest movq (%rcx), -40(%rbp)
	movq (%rcx), %r15
	movq %r15, -40(%rbp)
	# LowerBasicConversion(1982:3): %"class.std::vector.5"* ^6 -> %"struct.std::_Vector_base.6"* ^7
	movq -40(%rbp), %rcx
	# tt = Pointer, type = %"struct.std::_Vector_base.6"
	# LowerGetelementptr(1983:3): struct-type: %"struct.std::_Vector_base.6"* ^7 -> ^8, indices=0,0
	movq %rcx, %rax
	# LowerGetelementptr(1983:3): type of ^8 is %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl"*
	# LowerBasicConversion(1984:3): %"struct.std::_Vector_base.6"* ^8 -> %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"* ^9
	movq %rax, %rcx
	# tt = Pointer, type = %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"
	# LowerGetelementptr(1985:3): struct-type: %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"* ^9 -> ^10, indices=0,0
	movq %rcx, %rax
	# LowerGetelementptr(1985:3): type of ^10 is %struct.LsItem**
	# LowerLoad(1986:3).2: (^10) into %struct.LsItem* ^11
	movq (%rax), %r13
	# LowerBasicConversion(1987:3): %"class.std::vector.5"* ^6 -> %"struct.std::_Vector_base.6"* ^12
	movq -40(%rbp), %rcx
	# tt = Pointer, type = %"struct.std::_Vector_base.6"
	# LowerGetelementptr(1988:3): struct-type: %"struct.std::_Vector_base.6"* ^12 -> ^13, indices=0,0
	movq %rcx, %rax
	# LowerGetelementptr(1988:3): type of ^13 is %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl"*
	# LowerBasicConversion(1989:3): %"struct.std::_Vector_base.6"* ^13 -> %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"* ^14
	movq %rax, %rcx
	# tt = Pointer, type = %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"
	# LowerGetelementptr(1990:3): struct-type: %"struct.std::_Vector_base<LsItem, std::allocator<LsItem>>::_Vector_impl_data"* ^14 -> ^15, indices=0,1
	movq %rcx, %rax
	addq $8, %rax
	# LowerGetelementptr(1990:3): type of ^15 is %struct.LsItem**
	# LowerLoad(1991:3).2: (^15) into %struct.LsItem* ^16
	movq (%rax), %r14
	# LowerBasicConversion(1992:3): %"class.std::vector.5"* ^6 -> %"struct.std::_Vector_base.6"* ^17
	movq -40(%rbp), %rax
	# Clobber %rax
	movq %rax, -56(%rbp)
	# SetupCalls(1993:3): move argument %"struct.std::_Vector_base.6"* nonnull dereferenceable(24) align 8 ^17
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt12_Vector_baseI6LsItemSaIS0_EE19_M_get_Tp_allocatorEv
	# SetupCalls(1993:3): move %"class.std::allocator.7"* result from %rax
	movq %rax, %r15
	# Unclobber %rax
	movq -56(%rbp), %rax
	# LowerStore(1994:3).9: mov %struct.LsItem* ^11, (^2)
	movq -48(%rbp), %rax
	movq %r13, (%rax)
	# LowerStore(1995:3).9: mov %struct.LsItem* ^16, (^3)
	movq %r14, (%r12)
	# LowerStore(1996:3).9: mov %"class.std::allocator.7"* ^18, (^4)
	movq %r15, (%rbx)
	# LowerLoad(1997:3).2: (^2) into %struct.LsItem* ^19
	movq -48(%rbp), %rax
	movq (%rax), %rbx
	# LowerLoad(1998:3).2: (^3) into %struct.LsItem* ^20
	movq (%r12), %rax
	# Clobber %rax
	movq %rax, -56(%rbp)
	# SetupCalls(1999:3): move argument %struct.LsItem* ^19
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	# SetupCalls(1999:3): move argument %struct.LsItem* ^20
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	callq _ZSt8_DestroyIP6LsItemEvT_S2_
	# Unclobber %rax
	movq -56(%rbp), %rax
	# LowerBasicConversion(2000:3): %"class.std::vector.5"* ^6 -> %"struct.std::_Vector_base.6"* ^21
	movq -40(%rbp), %rax
	# Clobber %rax
	movq %rax, -56(%rbp)
	# SetupCalls(2001:3): move argument %"struct.std::_Vector_base.6"* nonnull dereferenceable(24) align 8 ^21
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt12_Vector_baseI6LsItemSaIS0_EED2Ev
	# Unclobber %rax
	movq -56(%rbp), %rax
	movq -64(%rbp), %r15
	movq -104(%rbp), %r14
	movq -96(%rbp), %r13
	movq -72(%rbp), %r12
	movq -80(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZN6LsItemC2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
.p2align 4, 0x90
_ZN6LsItemC2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb:
	.___ZN6LsItemC2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(64 + 0, 16)
	subq $64, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -48(%rbp)
	movq %r12, -40(%rbp)
	# LowerAlloca(7008:3): size = 8, type = %struct.LsItem**, var = ^4
	leaq -8(%rbp), %rax
	# LowerAlloca(7009:3): size = 1, type = i8*, var = ^5
	leaq -9(%rbp), %r12
	# LowerStore(7010:3).9: mov %struct.LsItem* %rdi, (^4)
	movq %rdi, (%rax)
	# LowerBasicConversion(7011:3): i1 %dl -> i8 ^6
	movb %dl, %bl
	# LowerStore(7012:3).9: mov i8 ^6, (^5)
	movb %bl, (%r12)
	# LowerLoad(7013:3).2: (^4) into %struct.LsItem* ^7
	movq (%rax), %rbx
	# tt = Pointer, type = %struct.LsItem
	# LowerGetelementptr(7014:3): struct-type: %struct.LsItem* ^7 -> ^8, indices=0,0
	movq %rbx, %rax
	# LowerGetelementptr(7014:3): type of ^8 is %"class.std::__cxx11::basic_string"*
	# Clobber %rsi
	movq %rsi, -24(%rbp)
	# Clobber %rax
	movq %rax, -32(%rbp)
	# SetupCalls(7015:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(7015:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 %rsi
	# Semiunclobber live %rsi into %rsi
	movq -24(%rbp), %rsi
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_@PLT
	# Unclobber %rax
	movq -32(%rbp), %rax
	# Unclobber %rsi
	movq -24(%rbp), %rsi
	# tt = Pointer, type = %struct.LsItem
	# LowerGetelementptr(7016:3): struct-type: %struct.LsItem* ^7 -> ^9, indices=0,1
	movq %rbx, %rcx
	addq $32, %rcx
	# LowerGetelementptr(7016:3): type of ^9 is i8*
	# LowerLoad(7017:3).2: (^5) into i8 ^10
	movb (%r12), %al
	# LowerTrunc(7018:3): 8 to 1, move
	movb %al, %bl
	# LowerTrunc(7018:3): 8 to 1, apply mask
	andq $1, %rbx
	# LowerBasicConversion(7019:3): i1 ^11 -> i8 ^12
	movb %bl, %al
	# LowerStore(7020:3).9: mov i8 ^12, (^9)
	movb %al, (%rcx)
	movq -40(%rbp), %r12
	movq -48(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE11_M_put_nodeEPSt13_Rb_tree_nodeISI_E
.p2align 4, 0x90
_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE11_M_put_nodeEPSt13_Rb_tree_nodeISI_E:
	.___ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE11_M_put_nodeEPSt13_Rb_tree_nodeISI_E__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(104 + 0, 16)
	subq $112, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -72(%rbp)
	movq %r12, -88(%rbp)
	movq %r13, -80(%rbp)
	movq %r14, -64(%rbp)
	movq %r15, -96(%rbp)
	# LowerAlloca(4839:3): size = 8, type = %"class.std::allocator.10"**, var = ^3
	leaq -8(%rbp), %r14
	# LowerAlloca(4840:3): size = 8, type = %"struct.std::_Rb_tree_node"**, var = ^4
	leaq -16(%rbp), %rbx
	# LowerAlloca(4841:3): size = 8, type = i64*, var = ^5
	leaq -24(%rbp), %r13
	# LowerAlloca(4842:3): size = 8, type = %"class.std::_Rb_tree"**, var = ^6
	leaq -32(%rbp), %rcx
	# LowerAlloca(4843:3): size = 8, type = %"struct.std::_Rb_tree_node"**, var = ^7
	leaq -40(%rbp), %r12
	# LowerStore(4844:3).9: mov %"class.std::_Rb_tree"* %rdi, (^6)
	movq %rdi, (%rcx)
	# LowerStore(4845:3).9: mov %"struct.std::_Rb_tree_node"* %rsi, (^7)
	movq %rsi, (%r12)
	# LowerLoad(4846:3).2: (^6) into %"class.std::_Rb_tree"* ^8
	movq (%rcx), %rax
	# Clobber %rax
	movq %rax, -48(%rbp)
	# SetupCalls(4847:3): move argument %"class.std::_Rb_tree"* nonnull dereferenceable(48) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_St8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISB_EEEEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE21_M_get_Node_allocatorEv
	# SetupCalls(4847:3): move %"class.std::allocator.10"* result from %rax
	movq %rax, %r15
	# Unclobber %rax
	movq -48(%rbp), %rax
	# LowerLoad(4848:3).2: (^7) into %"struct.std::_Rb_tree_node"* ^10
	movq (%r12), %rax
	# LowerStore(4849:3).9: mov %"class.std::allocator.10"* ^9, (^3)
	movq %r15, (%r14)
	# LowerStore(4850:3).9: mov %"struct.std::_Rb_tree_node"* ^10, (^4)
	movq %rax, (%rbx)
	# LowerStore(4851:3).3: mov $imm, (^5)
	movq $1, (%r13)
	# LowerLoad(4852:3).2: (^3) into %"class.std::allocator.10"* ^11
	movq (%r14), %rax
	# LowerBasicConversion(4853:3): %"class.std::allocator.10"* ^11 -> %"class.std::__new_allocator.11"* ^12
	movq %rax, %rcx
	# LowerLoad(4854:3).2: (^4) into %"struct.std::_Rb_tree_node"* ^13
	movq (%rbx), %rax
	# LowerLoad(4855:3).2: (^5) into i64 ^14
	movq (%r13), %rbx
	# Clobber %rcx
	movq %rcx, -56(%rbp)
	# Clobber %rax
	movq %rax, -48(%rbp)
	# SetupCalls(4856:3): move argument %"class.std::__new_allocator.11"* nonnull dereferenceable(1) align 1 ^12
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(4856:3): move argument %"struct.std::_Rb_tree_node"* ^13
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(4856:3): move argument i64 ^14
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdx
	callq _ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS5_ESaISC_EEEEEEE10deallocateEPSK_m
	# Unclobber %rax
	movq -48(%rbp), %rax
	# Unclobber %rcx
	movq -56(%rbp), %rcx
	movq -96(%rbp), %r15
	movq -64(%rbp), %r14
	movq -80(%rbp), %r13
	movq -88(%rbp), %r12
	movq -72(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt15__new_allocatorISt17basic_string_viewIcSt11char_traitsIcEEED2Ev
.p2align 4, 0x90
_ZNSt15__new_allocatorISt17basic_string_viewIcSt11char_traitsIcEEED2Ev:
	.___ZNSt15__new_allocatorISt17basic_string_viewIcSt11char_traitsIcEEED2Ev__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(16 + 0, 16)
	subq $16, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -16(%rbp)
	# LowerAlloca(4952:3): size = 8, type = %"class.std::__new_allocator"**, var = ^2
	leaq -8(%rbp), %rax
	# LowerStore(4953:3).9: mov %"class.std::__new_allocator"* %rdi, (^2)
	movq %rdi, (%rax)
	# LowerLoad(4954:3).2: (^2) into %"class.std::__new_allocator"* ^3
	movq (%rax), %rbx
	movq -16(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZN9__gnu_cxxmiIP6LsItemSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_
.p2align 4, 0x90
_ZN9__gnu_cxxmiIP6LsItemSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_:
	.___ZN9__gnu_cxxmiIP6LsItemSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(80 + 0, 16)
	subq $80, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -32(%rbp)
	movq %r12, -48(%rbp)
	movq %r13, -40(%rbp)
	# LowerAlloca(7081:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"**, var = ^3
	leaq -8(%rbp), %rcx
	# LowerAlloca(7082:3): size = 8, type = %"class.__gnu_cxx::__normal_iterator"**, var = ^4
	leaq -16(%rbp), %rbx
	# LowerStore(7083:3).9: mov %"class.__gnu_cxx::__normal_iterator"* %rdi, (^3)
	movq %rdi, (%rcx)
	# LowerStore(7084:3).9: mov %"class.__gnu_cxx::__normal_iterator"* %rsi, (^4)
	movq %rsi, (%rbx)
	# LowerLoad(7085:3).2: (^3) into %"class.__gnu_cxx::__normal_iterator"* ^5
	movq (%rcx), %rax
	# Clobber %rax
	movq %rax, -24(%rbp)
	# SetupCalls(7086:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^5
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEE4baseEv
	# SetupCalls(7086:3): move %struct.LsItem** result from %rax
	movq %rax, %r13
	# Unclobber %rax
	movq -24(%rbp), %rax
	# LowerLoad(7087:3).2: (^6) into %struct.LsItem* ^7
	movq (%r13), %r12
	# LowerLoad(7088:3).2: (^4) into %"class.__gnu_cxx::__normal_iterator"* ^8
	movq (%rbx), %rax
	# Clobber %rax
	movq %rax, -24(%rbp)
	# SetupCalls(7089:3): move argument %"class.__gnu_cxx::__normal_iterator"* nonnull dereferenceable(8) align 8 ^8
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNK9__gnu_cxx17__normal_iteratorIP6LsItemSt6vectorIS1_SaIS1_EEE4baseEv
	# SetupCalls(7089:3): move %struct.LsItem** result from %rax
	movq %rax, %rbx
	# Unclobber %rax
	movq -24(%rbp), %rax
	# LowerLoad(7090:3).2: (^9) into %struct.LsItem* ^10
	movq (%rbx), %rax
	# LowerBasicConversion(7091:3): %struct.LsItem* ^7 -> i64 ^11
	movq %r12, %rcx
	# LowerBasicConversion(7092:3): %struct.LsItem* ^10 -> i64 ^12
	movq %rax, %rbx
	# LowerMath(7093:3): ^11, ^12 into i64 ^13
	movq %rcx, %rax
	subq %rbx, %rax
	# LowerSdiv(7094:3): ^13, 40 into i64 ^14
	movq %rax, %rbx
	movq $0, %rdx
	movq %rbx, %rax
	movq $40, %rbx
	idivq %rbx
	movq %rax, %rbx
	movq %rbx, %rax
	movq -40(%rbp), %r13
	movq -48(%rbp), %r12
	movq -32(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt6vectorI6LsItemSaIS0_EE11_S_max_sizeERKS1_
.p2align 4, 0x90
_ZNSt6vectorI6LsItemSaIS0_EE11_S_max_sizeERKS1_:
	.___ZNSt6vectorI6LsItemSaIS0_EE11_S_max_sizeERKS1___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(88 + 0, 16)
	subq $96, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -72(%rbp)
	# LowerAlloca(7193:3): size = 8, type = %"class.std::__new_allocator.8"**, var = ^2
	leaq -8(%rbp), %rsi
	# LowerAlloca(7194:3): size = 8, type = %"class.std::__new_allocator.8"**, var = ^3
	leaq -16(%rbp), %r9
	# LowerAlloca(7195:3): size = 8, type = %"class.std::allocator.7"**, var = ^4
	leaq -24(%rbp), %rbx
	# LowerAlloca(7196:3): size = 8, type = %"class.std::allocator.7"**, var = ^5
	leaq -32(%rbp), %r8
	# LowerAlloca(7197:3): size = 8, type = i64*, var = ^6
	leaq -40(%rbp), %rdx
	# LowerAlloca(7198:3): size = 8, type = i64*, var = ^7
	leaq -48(%rbp), %rcx
	# LowerStore(7199:3).9: mov %"class.std::allocator.7"* %rdi, (^5)
	movq %rdi, (%r8)
	# LowerStore(7200:3).3: mov $imm, (^6)
	movabsq $230584300921369395, %rax
	movq %rax, (%rdx)
	# LowerLoad(7201:3).2: (^5) into %"class.std::allocator.7"* ^8
	movq (%r8), %rax
	# LowerStore(7202:3).9: mov %"class.std::allocator.7"* ^8, (^4)
	movq %rax, (%rbx)
	# LowerLoad(7203:3).2: (^4) into %"class.std::allocator.7"* ^9
	movq (%rbx), %rax
	# LowerBasicConversion(7204:3): %"class.std::allocator.7"* ^9 -> %"class.std::__new_allocator.8"* ^10
	movq %rax, %rbx
	# LowerStore(7205:3).9: mov %"class.std::__new_allocator.8"* ^10, (^3)
	movq %rbx, (%r9)
	# LowerLoad(7206:3).2: (^3) into %"class.std::__new_allocator.8"* ^11
	movq (%r9), %rax
	# LowerStore(7207:3).9: mov %"class.std::__new_allocator.8"* ^11, (^2)
	movq %rax, (%rsi)
	# LowerLoad(7208:3).2: (^2) into %"class.std::__new_allocator.8"* ^12
	movq (%rsi), %rax
	# LowerStore(7209:3).3: mov $imm, (^7)
	movabsq $230584300921369395, %rax
	movq %rax, (%rcx)
	# Clobber %rdx
	movq %rdx, -56(%rbp)
	# Clobber %rcx
	movq %rcx, -64(%rbp)
	# SetupCalls(7210:3): move argument i64* nonnull dereferenceable(8) align 8 ^6
	# Fixed movzx with identical source and destination widths
	movq %rdx, %rdi
	# SetupCalls(7210:3): move argument i64* nonnull dereferenceable(8) align 8 ^7
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rsi
	callq _ZSt3minImERKT_S2_S2_
	# SetupCalls(7210:3): move i64* result from %rax
	movq %rax, %rbx
	# Unclobber %rcx
	movq -64(%rbp), %rcx
	# Unclobber %rdx
	movq -56(%rbp), %rdx
	# LowerLoad(7211:3).2: (^13) into i64 ^14
	movq (%rbx), %rax
	movq -72(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISA_EEEEEC2IRA4_KcRSF_Lb1EEEOT_OT0_
.p2align 4, 0x90
_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISA_EEEEEC2IRA4_KcRSF_Lb1EEEOT_OT0_:
	.___ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFiRKSt6vectorISt17basic_string_viewIcS3_ESaISA_EEEEEC2IRA4_KcRSF_Lb1EEEOT_OT0___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(128 + 0, 16)
	subq $128, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -80(%rbp)
	movq %r12, -88(%rbp)
	movq %r13, -96(%rbp)
	movq %r14, -104(%rbp)
	movq %r15, -112(%rbp)
	# LowerAlloca(2432:3): size = 8, type = %"class.std::__new_allocator.1"**, var = ^4
	leaq -8(%rbp), %rbx
	# LowerAlloca(2433:3): size = 8, type = %"class.std::allocator.0"**, var = ^5
	leaq -16(%rbp), %r12
	# LowerAlloca(2434:3): size = 8, type = %"class.std::allocator.0"**, var = ^6
	leaq -24(%rbp), %r8
	# LowerAlloca(2435:3): size = 8, type = %"struct.std::pair"**, var = ^7
	leaq -32(%rbp), %rcx
	# LowerAlloca(2436:3): size = 8, type = [4 x i8]**, var = ^8
	leaq -40(%rbp), %rax
	# LowerAlloca(2437:3): size = 8, type = i32 (%"class.std::vector"*) ***, var = ^9
	leaq -48(%rbp), %r13
	# LowerAlloca(2438:3): size = 1, type = %"class.std::allocator.0"*, var = ^10
	leaq -49(%rbp), %r14
	# LowerStore(2439:3).9: mov %"struct.std::pair"* %rdi, (^7)
	movq %rdi, (%rcx)
	# LowerStore(2440:3).9: mov [4 x i8]* %rsi, (^8)
	movq %rsi, (%rax)
	# LowerStore(2441:3).9: mov i32 (%"class.std::vector"*) ** %rdx, (^9)
	movq %rdx, (%r13)
	# LowerLoad(2442:3).2: (^7) into %"struct.std::pair"* ^11
	movq (%rcx), %r15
	# LowerBasicConversion(2443:3): %"struct.std::pair"* ^11 -> %"class.std::__pair_base"* ^12
	movq %r15, %rcx
	# tt = Pointer, type = %"struct.std::pair"
	# LowerGetelementptr(2444:3): struct-type: %"struct.std::pair"* ^11 -> ^13, indices=0,0
	movq %r15, %rcx
	# LowerGetelementptr(2444:3): type of ^13 is %"class.std::__cxx11::basic_string"*
	# LowerLoad(2445:3).2: (^8) into [4 x i8]* ^14
	movq (%rax), %rdx
	# tt = Pointer, type = [4 x i8]
	# LowerGetelementptr(2446:3): struct-type: [4 x i8]* ^14 -> ^15, indices=0,0
	movq %rdx, %rax
	# LowerGetelementptr(2446:3): type of ^15 is i8*
	# LowerStore(2447:3).9: mov %"class.std::allocator.0"* ^10, (^6)
	movq %r14, (%r8)
	# LowerLoad(2448:3).2: (^6) into %"class.std::allocator.0"* ^16
	movq (%r8), %rdx
	# LowerBasicConversion(2449:3): %"class.std::allocator.0"* ^16 -> %"class.std::__new_allocator.1"* ^17
	movq %rdx, %rsi
	# LowerStore(2450:3).9: mov %"class.std::__new_allocator.1"* ^17, (^4)
	movq %rsi, (%rbx)
	# LowerLoad(2451:3).2: (^4) into %"class.std::__new_allocator.1"* ^18
	movq (%rbx), %rdx
	# Clobber %rcx
	movq %rcx, -64(%rbp)
	# Clobber %rax
	movq %rax, -72(%rbp)
	# SetupCalls(2452:3): move argument %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) align 8 ^13
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(2452:3): move argument i8* ^15
	# Fixed movzx with identical source and destination widths
	movq %rax, %rsi
	# SetupCalls(2452:3): move argument %"class.std::allocator.0"* nonnull dereferenceable(1) align 1 ^10
	# Fixed movzx with identical source and destination widths
	movq %r14, %rdx
	callq _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_
	# Unclobber %rax
	movq -72(%rbp), %rax
	# Unclobber %rcx
	movq -64(%rbp), %rcx
	# LowerStore(2453:3).9: mov %"class.std::allocator.0"* ^10, (^5)
	movq %r14, (%r12)
	# LowerLoad(2454:3).2: (^5) into %"class.std::allocator.0"* ^19
	movq (%r12), %rbx
	# LowerBasicConversion(2455:3): %"class.std::allocator.0"* ^19 -> %"class.std::__new_allocator.1"* ^20
	movq %rbx, %rax
	# Clobber %rax
	movq %rax, -72(%rbp)
	# SetupCalls(2456:3): move argument %"class.std::__new_allocator.1"* nonnull dereferenceable(1) align 1 ^20
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	callq _ZNSt15__new_allocatorIcED2Ev
	# Unclobber %rax
	movq -72(%rbp), %rax
	# tt = Pointer, type = %"struct.std::pair"
	# LowerGetelementptr(2457:3): struct-type: %"struct.std::pair"* ^11 -> ^21, indices=0,1
	movq %r15, %rax
	addq $32, %rax
	# LowerGetelementptr(2457:3): type of ^21 is %"class.std::function"*
	# LowerLoad(2458:3).2: (^9) into i32 (%"class.std::vector"*) ** ^22
	movq (%r13), %rbx
	# Clobber %rax
	movq %rax, -72(%rbp)
	# SetupCalls(2459:3): move argument %"class.std::function"* nonnull dereferenceable(32) align 8 ^21
	# Fixed movzx with identical source and destination widths
	movq %rax, %rdi
	# SetupCalls(2459:3): move argument i32 (%"class.std::vector"*) ** nonnull ^22
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rsi
	callq _ZNSt8functionIFiRKSt6vectorISt17basic_string_viewIcSt11char_traitsIcEESaIS4_EEEEC2IRS9_vEEOT_
	# Unclobber %rax
	movq -72(%rbp), %rax
	movq -112(%rbp), %r15
	movq -104(%rbp), %r14
	movq -96(%rbp), %r13
	movq -88(%rbp), %r12
	movq -80(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt6vectorI6LsItemSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_
.p2align 4, 0x90
_ZNSt6vectorI6LsItemSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_:
	.___ZNSt6vectorI6LsItemSaIS0_EE11_S_relocateEPS0_S3_S3_RS1___M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(80 + 0, 16)
	subq $80, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -64(%rbp)
	# LowerAlloca(7133:3): size = 8, type = %struct.LsItem**, var = ^5
	leaq -8(%rbp), %r9
	# LowerAlloca(7134:3): size = 8, type = %struct.LsItem**, var = ^6
	leaq -16(%rbp), %r8
	# LowerAlloca(7135:3): size = 8, type = %struct.LsItem**, var = ^7
	leaq -24(%rbp), %rbx
	# LowerAlloca(7136:3): size = 8, type = %"class.std::allocator.7"**, var = ^8
	leaq -32(%rbp), %rax
	# LowerStore(7137:3).9: mov %struct.LsItem* %rdi, (^5)
	movq %rdi, (%r9)
	# LowerStore(7138:3).9: mov %struct.LsItem* %rsi, (^6)
	movq %rsi, (%r8)
	# LowerStore(7139:3).9: mov %struct.LsItem* %rdx, (^7)
	movq %rdx, (%rbx)
	# LowerStore(7140:3).9: mov %"class.std::allocator.7"* %rcx, (^8)
	movq %rcx, (%rax)
	# LowerLoad(7141:3).2: (^5) into %struct.LsItem* ^9
	movq (%r9), %rcx
	# LowerLoad(7142:3).2: (^6) into %struct.LsItem* ^10
	movq (%r8), %rdx
	# LowerLoad(7143:3).2: (^7) into %struct.LsItem* ^11
	movq (%rbx), %r8
	# LowerLoad(7144:3).2: (^8) into %"class.std::allocator.7"* ^12
	movq (%rax), %rbx
	# Clobber %rdx
	movq %rdx, -40(%rbp)
	# Clobber %rcx
	movq %rcx, -48(%rbp)
	# Clobber %r8
	movq %r8, -56(%rbp)
	# SetupCalls(7145:3): move argument %struct.LsItem* ^9
	# Fixed movzx with identical source and destination widths
	movq %rcx, %rdi
	# SetupCalls(7145:3): move argument %struct.LsItem* ^10
	# Fixed movzx with identical source and destination widths
	movq %rdx, %rsi
	# SetupCalls(7145:3): move argument %struct.LsItem* ^11
	# Fixed movzx with identical source and destination widths
	movq %r8, %rdx
	# SetupCalls(7145:3): move argument %"class.std::allocator.7"* nonnull dereferenceable(1) align 1 ^12
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rcx
	callq _ZSt12__relocate_aIP6LsItemS1_SaIS0_EET0_T_S4_S3_RT1_
	# SetupCalls(7145:3): move %struct.LsItem* result from %rax
	movq %rax, %rbx
	# Unclobber %r8
	movq -56(%rbp), %r8
	# Unclobber %rcx
	movq -48(%rbp), %rcx
	# Unclobber %rdx
	movq -40(%rbp), %rdx
	movq %rbx, %rax
	movq -64(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

.section .text
.global _ZNSt15__new_allocatorI6LsItemE8allocateEmPKv
.p2align 4, 0x90
_ZNSt15__new_allocatorI6LsItemE8allocateEmPKv:
	.___ZNSt15__new_allocatorI6LsItemE8allocateEmPKv__M0:
	pushq %rbp
	movq %rsp, %rbp
	# upalign(80 + 0, 16)
	subq $80, %rsp
	# Align stack pointer to 16-byte boundary
	andq $-16, %rsp
	movq %rbx, -40(%rbp)
	movq %r12, -48(%rbp)
	# LowerAlloca(7227:3): size = 8, type = %"class.std::__new_allocator.8"**, var = ^4
	leaq -8(%rbp), %rbx
	# LowerAlloca(7228:3): size = 8, type = %"class.std::__new_allocator.8"**, var = ^5
	leaq -16(%rbp), %rcx
	# LowerAlloca(7229:3): size = 8, type = i64*, var = ^6
	leaq -24(%rbp), %r12
	# LowerAlloca(7230:3): size = 8, type = i8**, var = ^7
	leaq -32(%rbp), %rax
	# LowerStore(7231:3).9: mov %"class.std::__new_allocator.8"* %rdi, (^5)
	movq %rdi, (%rcx)
	# LowerStore(7232:3).9: mov i64 %rsi, (^6)
	movq %rsi, (%r12)
	# LowerStore(7233:3).9: mov i8* %rdx, (^7)
	movq %rdx, (%rax)
	# LowerLoad(7234:3).2: (^5) into %"class.std::__new_allocator.8"* ^8
	movq (%rcx), %rax
	# LowerLoad(7235:3).2: (^6) into i64 ^9
	movq (%r12), %rcx
	# LowerStore(7236:3).9: mov %"class.std::__new_allocator.8"* ^8, (^4)
	movq %rax, (%rbx)
	# LowerLoad(7237:3).2: (^4) into %"class.std::__new_allocator.8"* ^10
	movq (%rbx), %rax
	# LowerIcmp(7238:3): i64 ^9 vs. intlike 230584300921369395
	movabsq $230584300921369395, %rax
	cmpq %rax, %rcx
	seta %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt15__new_allocatorI6LsItemE8allocateEmPKv__M28
	jmp .___ZNSt15__new_allocatorI6LsItemE8allocateEmPKv__M76
	.___ZNSt15__new_allocatorI6LsItemE8allocateEmPKv__M28:
	# LowerLoad(7242:3).2: (^6) into i64 ^13
	movq (%r12), %rax
	# LowerIcmp(7243:3): i64 ^13 vs. intlike 461168601842738790
	movabsq $461168601842738790, %rbx
	cmpq %rbx, %rax
	seta %al
	andq $1, %rax
	cmpb $0, %al
	jne .___ZNSt15__new_allocatorI6LsItemE8allocateEmPKv__M36
	jmp .___ZNSt15__new_allocatorI6LsItemE8allocateEmPKv__M56
	.___ZNSt15__new_allocatorI6LsItemE8allocateEmPKv__M36:
	callq _ZSt28__throw_bad_array_new_lengthv@PLT
	.___ZNSt15__new_allocatorI6LsItemE8allocateEmPKv__M56:
	callq _ZSt17__throw_bad_allocv@PLT
	.___ZNSt15__new_allocatorI6LsItemE8allocateEmPKv__M76:
	# LowerLoad(7255:3).2: (^6) into i64 ^18
	movq (%r12), %rax
	# LowerMath(7256:3): ^18, 40 into i64 ^19
	movq %rax, %rbx
	movq %rbx, %rax
	movq $40, %rbx
	imulq %rbx
	movq %rax, %rbx
	# SetupCalls(7257:3): move argument i64 ^19
	# Fixed movzx with identical source and destination widths
	movq %rbx, %rdi
	callq _Znwm@PLT
	# SetupCalls(7257:3): move i8* result from %rax
	movq %rax, %rbx
	# LowerBasicConversion(7258:3): i8* ^20 -> %struct.LsItem* ^21
	movq %rbx, %rax
	movq -48(%rbp), %r12
	movq -40(%rbp), %rbx
	movq %rbp, %rsp
	popq %rbp
	retq

